#!/usr/bin/env sh
var __defProp = Object.defineProperty;
var __require = /* @__PURE__ */ ((x5) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x5, {
  get: (a7, b2) => (typeof require !== "undefined" ? require : a7)[b2]
}) : x5)(function(x5) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x5 + '" is not supported');
});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// https://deno.land/x/denoflate@1.2.1/pkg/denoflate.js
var wasm;
var cachedTextDecoder = new TextDecoder("utf-8", { ignoreBOM: true, fatal: true });
cachedTextDecoder.decode();
var cachegetUint8Memory0 = null;
function getUint8Memory0() {
  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachegetUint8Memory0;
}
function getStringFromWasm0(ptr, len) {
  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
var heap = new Array(32).fill(void 0);
heap.push(void 0, null, true, false);
var heap_next = heap.length;
function addHeapObject(obj) {
  if (heap_next === heap.length) heap.push(heap.length + 1);
  const idx = heap_next;
  heap_next = heap[idx];
  heap[idx] = obj;
  return idx;
}
function getObject(idx) {
  return heap[idx];
}
function dropObject(idx) {
  if (idx < 36) return;
  heap[idx] = heap_next;
  heap_next = idx;
}
function takeObject(idx) {
  const ret = getObject(idx);
  dropObject(idx);
  return ret;
}
var WASM_VECTOR_LEN = 0;
function passArray8ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 1);
  getUint8Memory0().set(arg, ptr / 1);
  WASM_VECTOR_LEN = arg.length;
  return ptr;
}
var cachegetInt32Memory0 = null;
function getInt32Memory0() {
  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
  }
  return cachegetInt32Memory0;
}
function getArrayU8FromWasm0(ptr, len) {
  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function gunzip(input) {
  try {
    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passArray8ToWasm0(input, wasm.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    wasm.gunzip(retptr, ptr0, len0);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var v1 = getArrayU8FromWasm0(r0, r1).slice();
    wasm.__wbindgen_free(r0, r1 * 1);
    return v1;
  } finally {
    wasm.__wbindgen_add_to_stack_pointer(16);
  }
}
async function load(module, imports) {
  if (typeof Response === "function" && module instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === "function") {
      try {
        return await WebAssembly.instantiateStreaming(module, imports);
      } catch (e6) {
        if (module.headers.get("Content-Type") != "application/wasm") {
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e6);
        } else {
          throw e6;
        }
      }
    }
    const bytes = await module.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module };
    } else {
      return instance;
    }
  }
}
async function init(input) {
  if (typeof input === "undefined") {
    input = new URL("denoflate_bg.wasm", import.meta.url);
  }
  const imports = {};
  imports.wbg = {};
  imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
    var ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
  };
  imports.wbg.__wbindgen_rethrow = function(arg0) {
    throw takeObject(arg0);
  };
  if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
    input = fetch(input);
  }
  const { instance, module } = await load(await input, imports);
  wasm = instance.exports;
  init.__wbindgen_wasm_module = module;
  return wasm;
}
var denoflate_default = init;

// https://deno.land/x/denoflate@1.2.1/pkg/denoflate_bg.wasm.js
var wasm2 = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 142, 1, 21, 96, 2, 127, 127, 1, 127, 96, 3, 127, 127, 127, 1, 127, 96, 1, 127, 0, 96, 3, 127, 127, 127, 0, 96, 2, 127, 127, 0, 96, 4, 127, 127, 127, 127, 0, 96, 1, 127, 1, 127, 96, 1, 127, 1, 126, 96, 3, 127, 127, 127, 1, 126, 96, 5, 127, 127, 127, 127, 127, 0, 96, 6, 127, 127, 127, 127, 127, 127, 0, 96, 7, 127, 127, 127, 127, 127, 127, 127, 0, 96, 4, 127, 127, 127, 127, 1, 127, 96, 0, 1, 126, 96, 0, 0, 96, 8, 127, 127, 127, 127, 127, 127, 127, 127, 0, 96, 0, 1, 127, 96, 5, 127, 127, 127, 127, 127, 1, 127, 96, 6, 127, 127, 127, 127, 127, 127, 1, 127, 96, 3, 126, 127, 127, 1, 127, 96, 2, 127, 127, 1, 126, 2, 54, 2, 3, 119, 98, 103, 21, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 115, 116, 114, 105, 110, 103, 95, 110, 101, 119, 0, 0, 3, 119, 98, 103, 18, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 114, 101, 116, 104, 114, 111, 119, 0, 2, 3, 180, 1, 178, 1, 15, 12, 5, 5, 9, 11, 3, 0, 8, 3, 9, 4, 1, 1, 3, 3, 3, 9, 9, 6, 11, 9, 3, 10, 8, 18, 5, 5, 3, 1, 17, 0, 7, 5, 0, 4, 0, 1, 6, 8, 8, 8, 8, 8, 4, 5, 0, 3, 2, 4, 19, 2, 4, 11, 0, 7, 7, 16, 4, 4, 3, 3, 0, 10, 3, 3, 0, 0, 4, 10, 5, 4, 5, 3, 5, 2, 7, 13, 3, 3, 7, 0, 0, 3, 6, 0, 2, 5, 13, 2, 5, 9, 0, 6, 3, 2, 3, 3, 3, 3, 0, 4, 0, 0, 0, 8, 0, 0, 10, 12, 0, 6, 3, 0, 0, 0, 4, 4, 2, 1, 0, 1, 2, 6, 3, 5, 20, 2, 4, 1, 0, 6, 2, 2, 4, 7, 2, 6, 2, 3, 0, 1, 4, 1, 4, 6, 0, 0, 4, 0, 0, 0, 4, 0, 3, 0, 14, 0, 0, 1, 6, 7, 0, 4, 1, 4, 2, 7, 6, 0, 6, 0, 7, 7, 7, 7, 2, 4, 4, 5, 1, 112, 1, 75, 75, 5, 3, 1, 0, 17, 6, 9, 1, 127, 1, 65, 128, 128, 192, 0, 11, 7, 136, 1, 10, 6, 109, 101, 109, 111, 114, 121, 2, 0, 7, 100, 101, 102, 108, 97, 116, 101, 0, 19, 7, 105, 110, 102, 108, 97, 116, 101, 0, 17, 4, 103, 122, 105, 112, 0, 23, 6, 103, 117, 110, 122, 105, 112, 0, 11, 4, 122, 108, 105, 98, 0, 20, 6, 117, 110, 122, 108, 105, 98, 0, 18, 31, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 97, 100, 100, 95, 116, 111, 95, 115, 116, 97, 99, 107, 95, 112, 111, 105, 110, 116, 101, 114, 0, 162, 1, 17, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 109, 97, 108, 108, 111, 99, 0, 125, 15, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 102, 114, 101, 101, 0, 144, 1, 9, 129, 1, 1, 0, 65, 1, 11, 74, 122, 140, 1, 167, 1, 169, 1, 170, 1, 146, 1, 152, 1, 153, 1, 33, 64, 178, 1, 92, 171, 1, 172, 1, 74, 173, 1, 170, 1, 178, 1, 178, 1, 117, 109, 112, 164, 1, 178, 1, 167, 1, 174, 1, 170, 1, 150, 1, 115, 116, 178, 1, 122, 178, 1, 87, 140, 1, 167, 1, 169, 1, 170, 1, 151, 1, 132, 1, 152, 1, 179, 1, 178, 1, 145, 1, 36, 104, 176, 1, 135, 1, 60, 73, 118, 154, 1, 134, 1, 177, 1, 175, 1, 178, 1, 145, 1, 157, 1, 105, 142, 1, 160, 1, 155, 1, 94, 38, 159, 1, 148, 1, 178, 1, 176, 1, 39, 69, 108, 161, 1, 68, 106, 10, 226, 186, 4, 178, 1, 217, 68, 1, 36, 127, 35, 0, 65, 48, 107, 34, 8, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 5, 32, 6, 79, 4, 64, 65, 127, 65, 0, 32, 5, 65, 127, 106, 34, 9, 32, 9, 32, 5, 75, 27, 32, 7, 65, 4, 113, 34, 32, 27, 34, 29, 65, 1, 106, 34, 38, 32, 29, 113, 69, 13, 1, 11, 32, 0, 65, 0, 54, 2, 8, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 253, 1, 58, 0, 4, 12, 1, 11, 32, 8, 32, 2, 54, 2, 0, 32, 8, 32, 2, 32, 3, 106, 34, 39, 54, 2, 4, 32, 1, 45, 0, 152, 82, 33, 10, 32, 8, 32, 1, 40, 2, 36, 54, 2, 24, 32, 8, 32, 1, 41, 2, 28, 55, 3, 16, 32, 8, 32, 1, 40, 2, 0, 54, 2, 12, 32, 8, 32, 1, 40, 2, 52, 54, 2, 8, 65, 1, 65, 3, 32, 7, 65, 1, 113, 34, 35, 27, 33, 40, 65, 1, 65, 124, 32, 7, 65, 2, 113, 34, 9, 27, 33, 26, 65, 130, 2, 65, 130, 120, 32, 9, 27, 33, 22, 32, 1, 65, 248, 207, 0, 106, 33, 41, 32, 1, 65, 184, 25, 106, 33, 36, 32, 1, 65, 157, 210, 0, 106, 33, 42, 32, 1, 65, 216, 52, 106, 33, 31, 32, 1, 65, 184, 27, 106, 33, 33, 32, 1, 65, 200, 26, 106, 33, 43, 32, 1, 65, 248, 54, 106, 33, 37, 32, 1, 65, 56, 106, 33, 30, 32, 1, 65, 216, 27, 106, 33, 34, 32, 6, 33, 15, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 65, 255, 1, 33, 16, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 10, 34, 11, 65, 255, 1, 113, 14, 25, 26, 25, 27, 24, 23, 22, 17, 16, 15, 14, 13, 12, 0, 10, 8, 7, 6, 21, 18, 4, 3, 9, 5, 2, 1, 30, 11, 32, 8, 40, 2, 4, 34, 20, 32, 8, 40, 2, 0, 34, 9, 107, 34, 10, 65, 4, 73, 13, 10, 32, 9, 33, 17, 2, 64, 3, 64, 32, 5, 32, 15, 107, 34, 12, 65, 1, 77, 13, 12, 32, 12, 65, 131, 2, 73, 32, 10, 65, 13, 77, 114, 69, 4, 64, 32, 8, 40, 2, 24, 33, 27, 32, 8, 40, 2, 20, 33, 19, 32, 8, 40, 2, 16, 33, 28, 32, 8, 40, 2, 12, 33, 17, 32, 8, 40, 2, 8, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 2, 64, 3, 64, 65, 12, 33, 10, 32, 20, 32, 9, 107, 65, 14, 73, 13, 1, 3, 64, 2, 64, 2, 64, 2, 64, 32, 17, 65, 14, 77, 4, 64, 32, 20, 32, 21, 107, 34, 9, 65, 1, 77, 13, 45, 32, 21, 47, 0, 0, 32, 8, 32, 21, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 13, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 33, 17, 11, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 12, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 12, 65, 127, 115, 106, 34, 12, 65, 191, 4, 75, 13, 47, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 12, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 12, 65, 127, 76, 13, 0, 11, 12, 1, 11, 32, 12, 65, 9, 118, 34, 11, 13, 0, 65, 34, 33, 11, 12, 1, 11, 32, 17, 32, 11, 107, 33, 17, 32, 13, 32, 11, 65, 31, 113, 118, 33, 13, 65, 128, 2, 33, 19, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 32, 12, 65, 128, 2, 113, 69, 4, 64, 2, 64, 2, 64, 32, 17, 65, 14, 77, 4, 64, 32, 20, 32, 25, 107, 34, 9, 65, 1, 77, 13, 52, 32, 25, 47, 0, 0, 32, 8, 32, 25, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 13, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 33, 17, 11, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 14, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 14, 65, 127, 115, 106, 34, 14, 65, 191, 4, 75, 13, 2, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 14, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 14, 65, 127, 76, 13, 0, 11, 12, 2, 11, 32, 14, 65, 9, 118, 34, 11, 13, 1, 65, 34, 33, 11, 32, 12, 33, 19, 12, 8, 11, 32, 14, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 32, 15, 32, 5, 79, 13, 51, 32, 17, 32, 11, 107, 33, 17, 32, 13, 32, 11, 65, 31, 113, 118, 33, 13, 32, 4, 32, 15, 106, 32, 12, 58, 0, 0, 32, 15, 65, 1, 106, 33, 11, 32, 14, 65, 128, 2, 113, 69, 13, 1, 32, 11, 33, 15, 32, 14, 33, 12, 11, 32, 12, 65, 255, 3, 113, 34, 14, 65, 128, 2, 71, 13, 1, 65, 20, 33, 10, 12, 9, 11, 32, 11, 32, 5, 79, 13, 1, 32, 4, 32, 11, 106, 32, 14, 58, 0, 0, 32, 5, 32, 15, 65, 2, 106, 34, 15, 107, 65, 131, 2, 79, 13, 5, 32, 12, 33, 19, 12, 8, 11, 32, 14, 65, 157, 2, 75, 4, 64, 32, 14, 33, 19, 65, 32, 12, 3, 11, 32, 17, 65, 14, 77, 4, 64, 32, 20, 32, 24, 107, 34, 9, 65, 1, 77, 13, 47, 32, 24, 47, 0, 0, 32, 8, 32, 24, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 13, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 33, 17, 11, 32, 12, 65, 127, 106, 65, 31, 113, 34, 12, 65, 1, 116, 65, 216, 181, 192, 0, 106, 47, 1, 0, 33, 19, 2, 64, 32, 12, 65, 184, 181, 192, 0, 106, 45, 0, 0, 34, 27, 69, 13, 0, 32, 13, 32, 27, 65, 31, 113, 34, 12, 118, 33, 11, 32, 13, 65, 127, 32, 12, 116, 65, 127, 115, 113, 32, 19, 106, 33, 19, 32, 17, 32, 27, 107, 34, 12, 65, 14, 75, 4, 64, 32, 12, 33, 17, 32, 11, 33, 13, 12, 1, 11, 32, 20, 32, 23, 107, 34, 9, 65, 1, 77, 13, 47, 32, 23, 47, 0, 0, 32, 8, 32, 23, 65, 2, 106, 34, 9, 54, 2, 0, 32, 12, 65, 16, 106, 33, 17, 32, 12, 116, 32, 11, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 11, 32, 34, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 12, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 12, 65, 127, 115, 106, 34, 12, 65, 191, 4, 75, 13, 49, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 12, 65, 1, 116, 106, 65, 216, 43, 106, 46, 1, 0, 34, 12, 65, 127, 76, 13, 0, 11, 12, 2, 11, 32, 12, 65, 9, 118, 34, 11, 13, 1, 65, 34, 33, 11, 12, 3, 11, 32, 11, 32, 5, 65, 196, 185, 192, 0, 16, 98, 0, 11, 32, 17, 32, 11, 107, 33, 17, 32, 13, 32, 11, 65, 31, 113, 118, 33, 14, 2, 64, 32, 12, 65, 255, 3, 113, 34, 12, 65, 29, 77, 4, 64, 32, 12, 65, 1, 116, 65, 184, 182, 192, 0, 106, 47, 1, 0, 33, 28, 2, 64, 32, 12, 65, 152, 182, 192, 0, 106, 45, 0, 0, 34, 27, 69, 4, 64, 32, 14, 33, 13, 12, 1, 11, 32, 17, 65, 14, 75, 4, 127, 32, 17, 5, 32, 20, 32, 18, 107, 34, 9, 65, 1, 77, 13, 48, 32, 18, 47, 0, 0, 32, 8, 32, 18, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 14, 114, 33, 14, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 11, 32, 27, 107, 33, 17, 32, 14, 32, 27, 65, 31, 113, 34, 12, 118, 33, 13, 32, 14, 65, 127, 32, 12, 116, 65, 127, 115, 113, 32, 28, 106, 33, 28, 11, 32, 32, 65, 0, 32, 28, 32, 15, 75, 27, 13, 1, 32, 4, 32, 5, 32, 15, 32, 28, 32, 19, 32, 29, 16, 71, 32, 5, 32, 15, 32, 19, 106, 34, 15, 107, 65, 131, 2, 79, 13, 6, 12, 7, 11, 65, 33, 33, 11, 32, 14, 33, 13, 12, 2, 11, 65, 29, 11, 33, 11, 11, 32, 8, 32, 27, 54, 2, 24, 32, 8, 32, 19, 54, 2, 20, 32, 8, 32, 28, 54, 2, 16, 32, 8, 32, 17, 54, 2, 12, 32, 8, 32, 13, 54, 2, 8, 12, 36, 11, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 12, 33, 19, 32, 20, 32, 9, 107, 65, 14, 79, 13, 0, 11, 11, 11, 32, 8, 32, 27, 54, 2, 24, 32, 8, 32, 19, 54, 2, 20, 32, 8, 32, 28, 54, 2, 16, 32, 8, 32, 17, 54, 2, 12, 32, 8, 32, 13, 54, 2, 8, 12, 30, 11, 2, 64, 2, 64, 32, 8, 40, 2, 12, 34, 14, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 12, 12, 1, 11, 32, 20, 32, 17, 107, 34, 9, 65, 1, 77, 13, 39, 32, 17, 47, 0, 0, 33, 12, 32, 8, 32, 17, 65, 2, 106, 34, 9, 54, 2, 0, 32, 8, 32, 14, 65, 16, 106, 34, 10, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 12, 32, 14, 116, 114, 34, 12, 54, 2, 8, 32, 9, 33, 17, 32, 10, 33, 14, 11, 2, 64, 32, 30, 32, 12, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 13, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 12, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 13, 65, 127, 115, 106, 34, 10, 65, 191, 4, 75, 13, 2, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 10, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 13, 65, 127, 76, 13, 0, 11, 12, 2, 11, 32, 13, 65, 9, 118, 34, 11, 13, 1, 65, 34, 33, 10, 12, 31, 11, 32, 10, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 32, 8, 32, 14, 32, 11, 107, 34, 18, 54, 2, 12, 32, 8, 32, 12, 32, 11, 65, 31, 113, 118, 34, 14, 54, 2, 8, 32, 8, 32, 13, 54, 2, 20, 65, 21, 33, 10, 32, 13, 65, 128, 2, 113, 13, 29, 2, 64, 2, 64, 32, 18, 65, 14, 75, 4, 64, 32, 18, 33, 21, 12, 1, 11, 32, 20, 32, 17, 107, 34, 9, 65, 1, 77, 13, 39, 32, 17, 47, 0, 0, 33, 12, 32, 8, 32, 18, 65, 16, 106, 34, 21, 54, 2, 12, 32, 8, 32, 17, 65, 2, 106, 34, 9, 54, 2, 0, 32, 8, 32, 12, 32, 18, 116, 32, 14, 114, 34, 14, 54, 2, 8, 32, 9, 33, 17, 11, 32, 30, 32, 14, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 12, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 14, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 12, 65, 127, 115, 106, 34, 12, 65, 191, 4, 75, 13, 41, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 12, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 12, 65, 127, 76, 13, 0, 11, 12, 1, 11, 32, 12, 65, 9, 118, 34, 11, 13, 0, 65, 34, 33, 10, 12, 30, 11, 32, 8, 32, 21, 32, 11, 107, 54, 2, 12, 32, 8, 32, 14, 32, 11, 65, 31, 113, 118, 54, 2, 8, 32, 15, 32, 5, 73, 4, 64, 32, 4, 32, 15, 106, 32, 13, 58, 0, 0, 32, 15, 65, 1, 106, 33, 11, 32, 12, 65, 128, 2, 113, 4, 64, 32, 8, 32, 12, 54, 2, 20, 32, 11, 33, 15, 12, 31, 11, 32, 11, 32, 5, 79, 13, 2, 32, 4, 32, 11, 106, 32, 12, 58, 0, 0, 32, 15, 65, 2, 106, 33, 15, 32, 20, 32, 17, 107, 34, 10, 65, 4, 79, 13, 1, 12, 13, 11, 11, 12, 38, 11, 32, 11, 32, 5, 65, 196, 185, 192, 0, 16, 98, 0, 11, 65, 0, 33, 16, 12, 28, 11, 32, 8, 40, 2, 20, 33, 14, 32, 8, 40, 2, 4, 33, 12, 3, 64, 32, 14, 65, 3, 75, 4, 64, 65, 24, 33, 10, 12, 27, 11, 2, 127, 32, 8, 2, 127, 32, 8, 40, 2, 12, 34, 11, 4, 64, 3, 64, 32, 11, 65, 8, 79, 4, 64, 32, 1, 32, 8, 40, 2, 8, 34, 9, 65, 255, 1, 113, 32, 1, 40, 2, 12, 65, 8, 116, 114, 54, 2, 12, 32, 8, 32, 11, 65, 120, 106, 54, 2, 12, 32, 8, 32, 9, 65, 8, 118, 54, 2, 8, 32, 14, 65, 1, 106, 12, 3, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 12, 2, 11, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 4, 64, 65, 23, 33, 11, 32, 26, 33, 10, 12, 30, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 32, 1, 40, 2, 12, 65, 8, 116, 114, 54, 2, 12, 32, 14, 65, 1, 106, 11, 34, 14, 54, 2, 20, 65, 0, 33, 13, 65, 0, 11, 33, 10, 65, 23, 33, 11, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 26, 27, 0, 11, 0, 11, 65, 3, 33, 10, 32, 1, 40, 2, 16, 69, 13, 24, 32, 8, 40, 2, 12, 34, 11, 65, 7, 113, 33, 16, 32, 8, 40, 2, 4, 33, 9, 3, 64, 2, 64, 32, 11, 32, 16, 79, 4, 64, 32, 8, 32, 11, 32, 16, 107, 34, 11, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 16, 118, 54, 2, 8, 32, 8, 40, 2, 0, 33, 14, 12, 1, 11, 2, 127, 32, 9, 32, 8, 40, 2, 0, 34, 10, 70, 4, 64, 32, 9, 33, 14, 32, 22, 12, 1, 11, 32, 8, 32, 10, 65, 1, 106, 34, 14, 54, 2, 0, 32, 10, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 12, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 12, 33, 11, 65, 0, 11, 65, 2, 113, 69, 13, 1, 11, 11, 32, 8, 32, 11, 32, 14, 32, 9, 107, 32, 3, 106, 34, 9, 32, 11, 65, 3, 118, 34, 10, 32, 10, 32, 9, 75, 27, 34, 10, 65, 3, 116, 107, 34, 12, 54, 2, 12, 32, 9, 32, 10, 107, 34, 9, 32, 3, 77, 4, 64, 32, 8, 32, 39, 54, 2, 4, 32, 8, 32, 2, 32, 9, 106, 54, 2, 0, 32, 8, 32, 8, 40, 2, 8, 65, 127, 32, 12, 65, 31, 113, 116, 65, 127, 115, 113, 54, 2, 8, 65, 24, 33, 10, 32, 35, 69, 13, 25, 32, 8, 65, 0, 54, 2, 20, 65, 23, 33, 10, 12, 25, 11, 32, 9, 32, 3, 65, 248, 182, 192, 0, 16, 101, 0, 11, 32, 8, 40, 2, 16, 33, 12, 3, 64, 32, 5, 32, 15, 107, 34, 9, 69, 4, 64, 65, 19, 33, 11, 65, 2, 33, 16, 12, 27, 11, 32, 4, 32, 5, 32, 15, 32, 12, 107, 32, 29, 113, 32, 15, 32, 8, 40, 2, 20, 34, 10, 32, 9, 32, 9, 32, 10, 75, 27, 34, 9, 32, 29, 16, 25, 32, 8, 32, 10, 32, 9, 107, 34, 11, 54, 2, 20, 32, 9, 32, 15, 106, 33, 15, 65, 12, 33, 10, 32, 11, 13, 0, 11, 12, 23, 11, 32, 8, 40, 2, 16, 33, 12, 32, 32, 4, 64, 65, 29, 33, 10, 32, 15, 32, 12, 73, 13, 23, 11, 2, 64, 32, 8, 40, 2, 20, 34, 10, 32, 15, 106, 34, 9, 32, 5, 75, 13, 0, 32, 15, 32, 12, 107, 32, 29, 113, 34, 11, 32, 15, 79, 65, 0, 32, 11, 32, 15, 107, 32, 10, 73, 27, 13, 0, 32, 4, 32, 5, 32, 15, 32, 12, 32, 10, 32, 29, 16, 71, 65, 12, 33, 10, 32, 9, 33, 15, 12, 23, 11, 65, 19, 65, 12, 32, 10, 27, 33, 10, 12, 22, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 14, 32, 8, 40, 2, 24, 33, 12, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 9, 32, 12, 65, 31, 113, 34, 10, 118, 54, 2, 8, 32, 8, 32, 8, 40, 2, 16, 32, 9, 65, 127, 32, 10, 116, 65, 127, 115, 113, 106, 54, 2, 16, 65, 22, 33, 10, 12, 23, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 16, 33, 11, 12, 22, 11, 2, 64, 32, 8, 40, 2, 12, 34, 16, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 13, 12, 1, 11, 32, 8, 40, 2, 4, 34, 17, 32, 8, 40, 2, 0, 34, 14, 107, 65, 1, 77, 4, 64, 32, 8, 40, 2, 8, 33, 13, 32, 16, 33, 12, 3, 64, 2, 64, 2, 64, 32, 34, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 0, 78, 4, 64, 32, 10, 65, 9, 118, 65, 127, 106, 32, 12, 79, 13, 1, 32, 12, 33, 16, 12, 5, 11, 65, 11, 33, 11, 32, 12, 65, 11, 73, 13, 0, 3, 64, 32, 13, 32, 11, 65, 127, 106, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 2, 32, 1, 32, 9, 65, 1, 116, 106, 65, 216, 43, 106, 46, 1, 0, 34, 10, 65, 127, 74, 4, 64, 32, 12, 33, 16, 12, 6, 11, 32, 12, 32, 11, 65, 1, 106, 34, 11, 79, 13, 0, 11, 11, 32, 14, 32, 17, 70, 4, 64, 65, 15, 33, 11, 32, 26, 33, 10, 12, 26, 11, 32, 8, 32, 14, 65, 1, 106, 34, 9, 54, 2, 0, 32, 14, 45, 0, 0, 33, 10, 32, 8, 32, 12, 65, 8, 106, 34, 16, 54, 2, 12, 32, 8, 32, 10, 32, 12, 65, 31, 113, 116, 32, 13, 114, 34, 13, 54, 2, 8, 32, 9, 33, 14, 32, 16, 34, 12, 65, 15, 73, 13, 1, 12, 3, 11, 11, 32, 9, 65, 192, 4, 65, 152, 177, 192, 0, 16, 98, 0, 11, 32, 14, 47, 0, 0, 33, 10, 32, 8, 32, 14, 65, 2, 106, 54, 2, 0, 32, 8, 32, 16, 65, 16, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 16, 116, 114, 34, 13, 54, 2, 8, 32, 9, 33, 16, 11, 2, 64, 32, 34, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 34, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 9, 65, 1, 116, 106, 65, 216, 43, 106, 46, 1, 0, 34, 10, 65, 127, 76, 13, 0, 11, 32, 10, 33, 12, 12, 1, 11, 32, 10, 65, 255, 3, 113, 33, 12, 32, 10, 65, 9, 118, 33, 11, 12, 0, 11, 65, 34, 33, 10, 32, 11, 69, 13, 20, 32, 8, 32, 16, 32, 11, 107, 54, 2, 12, 32, 8, 32, 13, 32, 11, 65, 31, 113, 118, 54, 2, 8, 65, 33, 33, 10, 32, 12, 65, 29, 74, 13, 20, 32, 8, 32, 12, 65, 31, 113, 34, 9, 65, 1, 116, 65, 184, 182, 192, 0, 106, 47, 1, 0, 54, 2, 16, 32, 8, 32, 9, 65, 152, 182, 192, 0, 106, 45, 0, 0, 34, 9, 54, 2, 24, 65, 16, 65, 22, 32, 9, 27, 33, 10, 12, 20, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 14, 32, 8, 40, 2, 24, 33, 12, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 9, 32, 12, 65, 31, 113, 34, 10, 118, 54, 2, 8, 32, 8, 32, 8, 40, 2, 20, 32, 9, 65, 127, 32, 10, 116, 65, 127, 115, 113, 106, 54, 2, 20, 65, 15, 33, 10, 12, 21, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 14, 33, 11, 12, 20, 11, 32, 8, 32, 8, 40, 2, 20, 34, 12, 65, 255, 3, 113, 34, 9, 54, 2, 20, 65, 20, 33, 10, 32, 9, 65, 128, 2, 70, 13, 18, 65, 32, 33, 10, 32, 9, 65, 157, 2, 75, 13, 18, 32, 8, 32, 12, 65, 127, 106, 65, 31, 113, 34, 9, 65, 1, 116, 65, 216, 181, 192, 0, 106, 47, 1, 0, 54, 2, 20, 32, 8, 32, 9, 65, 184, 181, 192, 0, 106, 45, 0, 0, 34, 9, 54, 2, 24, 65, 14, 65, 15, 32, 9, 27, 33, 10, 12, 18, 11, 65, 21, 33, 10, 32, 8, 40, 2, 20, 34, 9, 65, 255, 1, 75, 13, 17, 32, 5, 32, 15, 70, 13, 8, 32, 15, 32, 5, 73, 4, 64, 32, 4, 32, 15, 106, 32, 9, 58, 0, 0, 32, 15, 65, 1, 106, 33, 15, 65, 12, 33, 10, 12, 18, 11, 12, 27, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 8, 40, 2, 12, 34, 16, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 13, 12, 1, 11, 32, 10, 65, 1, 77, 4, 64, 32, 8, 40, 2, 8, 33, 13, 32, 16, 33, 12, 3, 64, 2, 64, 2, 64, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 0, 78, 4, 64, 32, 10, 65, 9, 118, 65, 127, 106, 32, 12, 79, 13, 1, 32, 12, 33, 16, 12, 5, 11, 65, 11, 33, 11, 32, 12, 65, 11, 73, 13, 0, 3, 64, 32, 13, 32, 11, 65, 127, 106, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 10, 65, 191, 4, 75, 13, 2, 32, 1, 32, 10, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 10, 65, 127, 74, 4, 64, 32, 12, 33, 16, 12, 6, 11, 32, 12, 32, 11, 65, 1, 106, 34, 11, 79, 13, 0, 11, 11, 32, 9, 32, 20, 70, 4, 64, 65, 12, 33, 11, 32, 26, 33, 10, 12, 25, 11, 32, 8, 32, 9, 65, 1, 106, 34, 10, 54, 2, 0, 32, 9, 45, 0, 0, 33, 9, 32, 8, 32, 12, 65, 8, 106, 34, 16, 54, 2, 12, 32, 8, 32, 9, 32, 12, 65, 31, 113, 116, 32, 13, 114, 34, 13, 54, 2, 8, 32, 10, 33, 9, 32, 16, 34, 12, 65, 15, 73, 13, 1, 12, 3, 11, 11, 32, 10, 65, 192, 4, 65, 152, 177, 192, 0, 16, 98, 0, 11, 32, 20, 32, 9, 107, 34, 10, 65, 1, 77, 13, 1, 32, 9, 47, 0, 0, 33, 10, 32, 8, 32, 9, 65, 2, 106, 54, 2, 0, 32, 8, 32, 16, 65, 16, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 16, 116, 114, 34, 13, 54, 2, 8, 32, 9, 33, 16, 11, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 127, 74, 13, 1, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 31, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 9, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 10, 65, 127, 76, 13, 0, 11, 32, 10, 33, 12, 12, 2, 11, 65, 2, 32, 10, 65, 136, 177, 192, 0, 16, 99, 0, 11, 32, 10, 65, 255, 3, 113, 33, 12, 32, 10, 65, 9, 118, 33, 11, 12, 0, 11, 65, 34, 33, 10, 32, 11, 69, 13, 16, 32, 8, 32, 12, 54, 2, 20, 32, 8, 32, 16, 32, 11, 107, 54, 2, 12, 32, 8, 32, 13, 32, 11, 65, 31, 113, 118, 54, 2, 8, 65, 13, 33, 10, 12, 16, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 14, 32, 8, 40, 2, 24, 33, 12, 2, 64, 2, 64, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 11, 32, 12, 65, 31, 113, 34, 14, 118, 54, 2, 8, 32, 8, 65, 11, 54, 2, 40, 32, 8, 66, 131, 128, 128, 128, 48, 55, 2, 32, 2, 64, 32, 8, 40, 2, 16, 34, 10, 65, 3, 113, 34, 9, 65, 3, 71, 4, 64, 32, 8, 65, 32, 106, 32, 9, 65, 2, 116, 106, 40, 2, 0, 33, 16, 65, 0, 33, 12, 32, 8, 40, 2, 20, 33, 9, 32, 10, 65, 16, 70, 4, 64, 32, 9, 65, 127, 106, 34, 10, 65, 200, 3, 75, 13, 2, 32, 1, 32, 10, 106, 65, 157, 210, 0, 106, 45, 0, 0, 33, 12, 11, 32, 9, 32, 16, 32, 11, 65, 127, 32, 14, 116, 65, 127, 115, 113, 106, 34, 11, 106, 34, 10, 32, 9, 73, 13, 4, 32, 10, 65, 202, 3, 79, 13, 5, 32, 11, 4, 64, 32, 1, 32, 9, 106, 65, 157, 210, 0, 106, 32, 12, 32, 11, 16, 131, 1, 26, 11, 32, 8, 32, 10, 54, 2, 20, 65, 10, 33, 10, 12, 21, 11, 65, 3, 65, 3, 65, 164, 184, 192, 0, 16, 98, 0, 11, 32, 10, 65, 201, 3, 65, 180, 184, 192, 0, 16, 98, 0, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 11, 33, 11, 12, 18, 11, 32, 9, 32, 10, 65, 196, 184, 192, 0, 16, 100, 0, 11, 32, 10, 65, 201, 3, 65, 196, 184, 192, 0, 16, 99, 0, 11, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 8, 40, 2, 20, 34, 16, 32, 1, 40, 2, 44, 34, 10, 32, 1, 40, 2, 40, 34, 9, 106, 34, 12, 73, 4, 64, 32, 8, 40, 2, 12, 34, 14, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 13, 12, 7, 11, 32, 8, 40, 2, 4, 34, 17, 32, 8, 40, 2, 0, 34, 9, 107, 65, 1, 75, 13, 1, 32, 8, 40, 2, 8, 33, 13, 32, 14, 33, 12, 3, 64, 2, 64, 2, 64, 32, 37, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 0, 78, 4, 64, 32, 10, 65, 9, 118, 65, 127, 106, 32, 12, 79, 13, 1, 32, 12, 33, 14, 12, 10, 11, 65, 11, 33, 11, 32, 12, 65, 11, 73, 13, 0, 3, 64, 32, 13, 32, 11, 65, 127, 106, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 10, 65, 191, 4, 75, 13, 2, 32, 1, 32, 10, 65, 1, 116, 106, 65, 248, 198, 0, 106, 46, 1, 0, 34, 10, 65, 127, 74, 4, 64, 32, 12, 33, 14, 12, 11, 11, 32, 12, 32, 11, 65, 1, 106, 34, 11, 79, 13, 0, 11, 11, 32, 9, 32, 17, 70, 4, 64, 65, 10, 33, 11, 32, 26, 33, 10, 12, 27, 11, 32, 8, 32, 9, 65, 1, 106, 34, 10, 54, 2, 0, 32, 9, 45, 0, 0, 33, 9, 32, 8, 32, 12, 65, 8, 106, 34, 14, 54, 2, 12, 32, 8, 32, 9, 32, 12, 65, 31, 113, 116, 32, 13, 114, 34, 13, 54, 2, 8, 32, 10, 33, 9, 32, 14, 34, 12, 65, 15, 73, 13, 1, 12, 8, 11, 11, 32, 10, 65, 192, 4, 65, 152, 177, 192, 0, 16, 98, 0, 11, 32, 12, 32, 16, 71, 4, 64, 65, 26, 33, 10, 12, 23, 11, 32, 9, 65, 161, 2, 79, 13, 1, 32, 36, 32, 42, 32, 9, 16, 121, 26, 32, 10, 65, 161, 2, 79, 13, 2, 32, 16, 32, 9, 73, 13, 3, 32, 16, 65, 202, 3, 79, 13, 4, 32, 31, 32, 1, 32, 9, 106, 65, 157, 210, 0, 106, 32, 10, 16, 121, 26, 32, 1, 32, 1, 40, 2, 20, 65, 127, 106, 54, 2, 20, 32, 1, 32, 8, 65, 8, 106, 16, 9, 34, 11, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 12, 6, 11, 32, 9, 47, 0, 0, 33, 10, 32, 8, 32, 9, 65, 2, 106, 54, 2, 0, 32, 8, 32, 14, 65, 16, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 14, 116, 114, 34, 13, 54, 2, 8, 32, 9, 33, 14, 12, 4, 11, 32, 9, 65, 160, 2, 65, 136, 183, 192, 0, 16, 99, 0, 11, 32, 10, 65, 160, 2, 65, 152, 183, 192, 0, 16, 99, 0, 11, 32, 9, 32, 16, 65, 168, 183, 192, 0, 16, 100, 0, 11, 32, 16, 65, 201, 3, 65, 168, 183, 192, 0, 16, 99, 0, 11, 2, 64, 32, 37, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 30, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 9, 65, 1, 116, 106, 65, 248, 198, 0, 106, 46, 1, 0, 34, 10, 65, 127, 76, 13, 0, 11, 32, 10, 33, 12, 12, 1, 11, 32, 10, 65, 255, 3, 113, 33, 12, 32, 10, 65, 9, 118, 33, 11, 12, 0, 11, 32, 11, 69, 4, 64, 65, 34, 33, 10, 12, 17, 11, 32, 8, 32, 14, 32, 11, 107, 54, 2, 12, 65, 31, 33, 10, 32, 8, 32, 13, 32, 11, 65, 31, 113, 118, 54, 2, 8, 32, 8, 32, 12, 54, 2, 16, 2, 64, 2, 64, 32, 12, 65, 15, 77, 4, 64, 32, 16, 65, 201, 3, 79, 13, 1, 32, 1, 32, 16, 106, 65, 157, 210, 0, 106, 32, 12, 58, 0, 0, 32, 8, 32, 16, 65, 1, 106, 54, 2, 20, 65, 0, 33, 11, 12, 3, 11, 65, 0, 32, 12, 65, 16, 70, 32, 16, 27, 13, 18, 32, 8, 65, 7, 54, 2, 40, 32, 8, 66, 130, 128, 128, 128, 48, 55, 2, 32, 32, 12, 65, 112, 106, 34, 9, 65, 2, 75, 13, 1, 32, 8, 32, 8, 65, 32, 106, 32, 9, 65, 2, 116, 106, 40, 2, 0, 54, 2, 24, 65, 11, 33, 10, 12, 18, 11, 32, 16, 65, 201, 3, 65, 132, 184, 192, 0, 16, 98, 0, 11, 32, 9, 65, 3, 65, 148, 184, 192, 0, 16, 98, 0, 11, 2, 64, 32, 11, 65, 255, 1, 113, 65, 1, 107, 14, 2, 16, 0, 1, 11, 11, 65, 10, 33, 11, 12, 15, 11, 3, 64, 2, 127, 32, 8, 40, 2, 20, 34, 10, 32, 1, 40, 2, 48, 73, 4, 64, 32, 8, 40, 2, 4, 33, 12, 32, 8, 40, 2, 12, 33, 11, 2, 64, 3, 64, 32, 11, 65, 3, 79, 4, 64, 32, 8, 32, 11, 65, 125, 106, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 9, 65, 3, 118, 54, 2, 8, 32, 10, 65, 19, 79, 13, 2, 32, 1, 32, 10, 65, 222, 183, 192, 0, 106, 45, 0, 0, 106, 65, 248, 207, 0, 106, 32, 9, 65, 7, 113, 58, 0, 0, 32, 8, 32, 10, 65, 1, 106, 54, 2, 20, 65, 0, 33, 13, 65, 0, 12, 4, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 14, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 14, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 12, 2, 11, 32, 10, 65, 19, 65, 244, 183, 192, 0, 16, 98, 0, 11, 32, 1, 65, 19, 54, 2, 48, 32, 1, 32, 8, 65, 8, 106, 16, 9, 34, 13, 65, 128, 254, 3, 113, 65, 8, 118, 11, 33, 10, 2, 64, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 15, 0, 1, 11, 11, 65, 9, 33, 11, 12, 14, 11, 32, 8, 40, 2, 20, 33, 9, 32, 8, 40, 2, 4, 33, 14, 3, 64, 32, 9, 65, 3, 79, 4, 64, 32, 41, 65, 0, 65, 160, 2, 16, 131, 1, 26, 32, 8, 65, 0, 54, 2, 20, 65, 9, 33, 10, 12, 14, 11, 32, 8, 65, 4, 54, 2, 40, 32, 8, 66, 133, 128, 128, 128, 208, 0, 55, 2, 32, 32, 8, 65, 32, 106, 32, 9, 65, 2, 116, 106, 40, 2, 0, 33, 12, 32, 8, 40, 2, 12, 33, 11, 2, 127, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 1, 32, 9, 65, 2, 116, 106, 65, 40, 106, 32, 9, 65, 1, 116, 65, 216, 183, 192, 0, 106, 47, 1, 0, 32, 8, 40, 2, 8, 34, 10, 65, 127, 32, 12, 65, 31, 113, 34, 16, 116, 65, 127, 115, 113, 106, 54, 2, 0, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 9, 65, 1, 106, 34, 9, 54, 2, 20, 32, 8, 32, 10, 32, 16, 118, 54, 2, 8, 65, 0, 33, 13, 65, 0, 12, 2, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 10, 70, 13, 0, 26, 32, 8, 32, 10, 65, 1, 106, 54, 2, 0, 32, 10, 45, 0, 0, 33, 16, 32, 8, 32, 11, 65, 8, 106, 34, 10, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 16, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 10, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 11, 33, 10, 2, 64, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 14, 0, 1, 11, 11, 65, 8, 33, 11, 12, 13, 11, 32, 8, 40, 2, 4, 34, 16, 32, 8, 40, 2, 0, 34, 11, 107, 34, 12, 69, 4, 64, 65, 7, 33, 11, 32, 26, 33, 10, 12, 13, 11, 2, 64, 2, 64, 32, 12, 32, 8, 40, 2, 20, 34, 14, 32, 12, 32, 5, 32, 15, 107, 34, 9, 32, 9, 32, 12, 75, 27, 34, 9, 32, 9, 32, 14, 75, 27, 34, 10, 79, 4, 64, 32, 10, 32, 15, 106, 34, 9, 32, 10, 73, 13, 1, 32, 9, 32, 5, 75, 13, 2, 32, 4, 32, 15, 106, 32, 11, 32, 10, 16, 121, 26, 2, 64, 32, 12, 32, 10, 65, 127, 106, 77, 4, 64, 32, 8, 32, 16, 54, 2, 0, 12, 1, 11, 32, 8, 32, 10, 32, 11, 106, 54, 2, 0, 11, 32, 8, 32, 14, 32, 10, 107, 54, 2, 20, 65, 6, 33, 10, 32, 9, 33, 15, 12, 14, 11, 32, 10, 32, 12, 65, 184, 183, 192, 0, 16, 99, 0, 11, 32, 15, 32, 9, 65, 212, 185, 192, 0, 16, 100, 0, 11, 32, 9, 32, 5, 65, 212, 185, 192, 0, 16, 99, 0, 11, 65, 20, 33, 10, 32, 8, 40, 2, 20, 69, 13, 10, 65, 7, 33, 10, 32, 5, 32, 15, 71, 13, 10, 12, 1, 11, 32, 5, 32, 15, 71, 13, 1, 11, 65, 2, 33, 16, 32, 5, 33, 15, 12, 10, 11, 32, 15, 32, 5, 73, 4, 64, 32, 4, 32, 15, 106, 32, 8, 40, 2, 16, 58, 0, 0, 32, 8, 40, 2, 12, 33, 9, 32, 8, 32, 8, 40, 2, 20, 65, 127, 106, 34, 10, 54, 2, 20, 65, 17, 65, 6, 32, 9, 27, 65, 6, 32, 10, 27, 33, 10, 32, 15, 65, 1, 106, 33, 15, 12, 8, 11, 12, 17, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 12, 3, 64, 32, 11, 65, 8, 79, 4, 64, 32, 8, 32, 8, 40, 2, 8, 34, 9, 65, 255, 1, 113, 54, 2, 16, 32, 8, 32, 11, 65, 120, 106, 54, 2, 12, 32, 8, 32, 9, 65, 8, 118, 54, 2, 8, 65, 18, 33, 10, 12, 8, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 17, 33, 11, 12, 7, 11, 32, 8, 40, 2, 20, 33, 14, 32, 8, 40, 2, 4, 33, 12, 3, 64, 2, 64, 32, 14, 65, 3, 77, 4, 64, 32, 8, 2, 127, 32, 8, 40, 2, 12, 34, 11, 4, 64, 3, 64, 32, 11, 65, 8, 79, 4, 64, 32, 1, 32, 14, 106, 65, 153, 210, 0, 106, 32, 8, 40, 2, 8, 34, 9, 58, 0, 0, 32, 8, 32, 11, 65, 120, 106, 54, 2, 12, 32, 8, 32, 9, 65, 8, 118, 54, 2, 8, 32, 14, 65, 1, 106, 12, 3, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 12, 3, 11, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 4, 64, 65, 5, 33, 11, 32, 26, 33, 10, 12, 11, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 14, 106, 65, 153, 210, 0, 106, 32, 9, 45, 0, 0, 58, 0, 0, 32, 14, 65, 1, 106, 11, 34, 14, 54, 2, 20, 65, 0, 33, 10, 65, 0, 33, 13, 12, 1, 11, 32, 8, 32, 1, 47, 0, 153, 82, 34, 9, 54, 2, 20, 65, 30, 33, 10, 32, 9, 32, 1, 47, 0, 155, 82, 65, 255, 255, 3, 115, 71, 13, 7, 65, 20, 33, 10, 32, 9, 69, 13, 7, 65, 17, 65, 6, 32, 8, 40, 2, 12, 27, 33, 10, 12, 7, 11, 65, 5, 33, 11, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 6, 7, 0, 11, 0, 11, 32, 8, 40, 2, 12, 33, 13, 32, 8, 40, 2, 4, 33, 12, 3, 64, 32, 13, 65, 7, 113, 33, 9, 32, 13, 33, 11, 3, 64, 32, 11, 32, 9, 79, 4, 64, 32, 8, 65, 0, 54, 2, 20, 32, 8, 32, 11, 32, 9, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 9, 118, 54, 2, 8, 65, 5, 33, 10, 12, 7, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 10, 70, 13, 0, 26, 32, 8, 32, 10, 65, 1, 106, 54, 2, 0, 32, 10, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 13, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 13, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 13, 0, 11, 32, 10, 65, 255, 1, 113, 69, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 4, 33, 11, 12, 5, 11, 2, 64, 3, 64, 32, 8, 40, 2, 4, 33, 10, 32, 8, 40, 2, 12, 33, 11, 2, 127, 3, 64, 32, 11, 65, 3, 79, 4, 64, 32, 1, 32, 8, 40, 2, 8, 34, 9, 65, 1, 113, 54, 2, 16, 32, 1, 32, 9, 65, 1, 118, 65, 3, 113, 34, 12, 54, 2, 20, 32, 8, 32, 11, 65, 125, 106, 54, 2, 12, 32, 8, 32, 9, 65, 3, 118, 54, 2, 8, 65, 4, 33, 10, 2, 64, 2, 64, 32, 12, 65, 1, 107, 14, 3, 0, 1, 6, 10, 11, 32, 1, 66, 160, 130, 128, 128, 128, 4, 55, 2, 40, 32, 36, 65, 8, 65, 144, 1, 16, 131, 1, 26, 32, 43, 65, 9, 65, 240, 0, 16, 131, 1, 26, 32, 33, 65, 16, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 2, 0, 32, 33, 65, 8, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 2, 0, 32, 33, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 2, 0, 32, 1, 66, 136, 144, 160, 192, 128, 129, 130, 132, 8, 55, 2, 208, 27, 32, 31, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 31, 65, 8, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 31, 65, 16, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 31, 65, 24, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 1, 32, 8, 65, 8, 106, 16, 9, 34, 13, 65, 128, 254, 3, 113, 65, 8, 118, 12, 3, 11, 32, 8, 65, 0, 54, 2, 20, 65, 8, 33, 10, 12, 8, 11, 2, 127, 32, 22, 32, 10, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 12, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 12, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 11, 33, 10, 2, 64, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 6, 0, 1, 11, 11, 65, 3, 33, 11, 12, 5, 11, 65, 25, 33, 10, 12, 3, 11, 32, 8, 40, 2, 0, 34, 9, 32, 8, 40, 2, 4, 70, 4, 64, 65, 1, 33, 11, 32, 26, 33, 10, 12, 4, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 54, 2, 4, 65, 2, 33, 10, 12, 2, 11, 32, 1, 65, 1, 54, 2, 24, 32, 1, 65, 1, 54, 2, 12, 32, 1, 66, 0, 55, 2, 4, 32, 8, 65, 24, 106, 65, 0, 54, 2, 0, 32, 8, 65, 16, 106, 66, 0, 55, 3, 0, 32, 8, 66, 0, 55, 3, 8, 32, 40, 33, 10, 12, 1, 11, 32, 1, 40, 2, 4, 34, 9, 65, 15, 113, 33, 11, 32, 9, 65, 8, 116, 33, 14, 32, 9, 65, 4, 118, 65, 8, 106, 65, 31, 113, 33, 10, 32, 8, 40, 2, 0, 33, 9, 32, 8, 40, 2, 4, 33, 12, 2, 64, 2, 64, 32, 32, 69, 4, 64, 32, 9, 32, 12, 71, 13, 1, 12, 2, 11, 32, 10, 65, 16, 79, 4, 64, 32, 9, 32, 12, 70, 13, 2, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 54, 2, 8, 65, 28, 33, 10, 12, 3, 11, 32, 9, 32, 12, 70, 13, 1, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 34, 9, 54, 2, 8, 65, 28, 65, 28, 65, 3, 32, 9, 32, 14, 114, 65, 31, 112, 32, 9, 65, 32, 113, 114, 27, 32, 11, 65, 8, 71, 27, 33, 10, 12, 2, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 34, 9, 54, 2, 8, 65, 28, 65, 28, 65, 28, 65, 3, 32, 9, 32, 14, 114, 65, 31, 112, 32, 9, 65, 32, 113, 114, 27, 32, 11, 65, 8, 71, 27, 65, 28, 32, 38, 32, 10, 118, 27, 32, 10, 65, 15, 75, 27, 33, 10, 12, 1, 11, 11, 65, 2, 33, 11, 32, 26, 33, 10, 11, 65, 0, 33, 2, 32, 10, 65, 255, 1, 113, 34, 9, 65, 1, 70, 13, 1, 32, 10, 33, 16, 32, 9, 65, 252, 1, 70, 13, 2, 11, 32, 8, 32, 8, 40, 2, 12, 34, 2, 32, 8, 40, 2, 0, 32, 8, 40, 2, 4, 107, 32, 3, 106, 34, 9, 32, 2, 65, 3, 118, 34, 2, 32, 2, 32, 9, 75, 27, 34, 2, 65, 3, 116, 107, 54, 2, 12, 12, 1, 11, 65, 2, 65, 1, 32, 5, 32, 15, 70, 27, 33, 16, 11, 32, 1, 32, 11, 58, 0, 152, 82, 32, 1, 32, 8, 40, 2, 12, 34, 9, 54, 2, 0, 32, 1, 32, 8, 40, 2, 16, 54, 2, 28, 32, 1, 32, 8, 41, 2, 20, 55, 2, 32, 32, 1, 32, 8, 40, 2, 8, 65, 127, 32, 9, 65, 31, 113, 116, 65, 127, 115, 113, 54, 2, 52, 2, 64, 32, 7, 65, 9, 113, 65, 0, 32, 16, 65, 24, 116, 65, 24, 117, 65, 127, 74, 27, 69, 4, 64, 32, 15, 32, 6, 107, 33, 15, 12, 1, 11, 32, 15, 32, 6, 73, 13, 2, 32, 15, 32, 5, 75, 13, 3, 32, 8, 32, 1, 40, 2, 24, 34, 5, 59, 1, 32, 32, 8, 32, 5, 65, 16, 118, 59, 1, 34, 32, 8, 65, 32, 106, 32, 4, 32, 6, 106, 32, 15, 32, 6, 107, 34, 15, 16, 30, 32, 1, 32, 8, 40, 2, 32, 34, 4, 54, 2, 24, 32, 35, 69, 32, 16, 65, 255, 1, 113, 114, 13, 0, 65, 0, 65, 126, 32, 4, 32, 1, 40, 2, 12, 70, 27, 33, 16, 11, 32, 0, 32, 16, 58, 0, 4, 32, 0, 32, 15, 54, 2, 8, 32, 0, 32, 8, 40, 2, 0, 32, 3, 106, 32, 2, 32, 8, 40, 2, 4, 106, 107, 54, 2, 0, 11, 32, 8, 65, 48, 106, 36, 0, 15, 11, 32, 6, 32, 15, 65, 200, 183, 192, 0, 16, 100, 0, 11, 32, 15, 32, 5, 65, 200, 183, 192, 0, 16, 99, 0, 11, 65, 2, 32, 9, 65, 136, 177, 192, 0, 16, 99, 0, 11, 32, 12, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 32, 15, 32, 5, 65, 196, 185, 192, 0, 16, 98, 0, 11, 32, 9, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 183, 45, 2, 13, 127, 2, 126, 35, 0, 65, 144, 5, 107, 34, 9, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 4, 64, 32, 0, 65, 128, 27, 106, 65, 8, 65, 144, 1, 16, 131, 1, 26, 32, 0, 65, 144, 28, 106, 65, 9, 65, 240, 0, 16, 131, 1, 26, 32, 0, 65, 144, 29, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 1, 0, 32, 0, 65, 136, 29, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 1, 0, 32, 0, 65, 128, 29, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 1, 0, 32, 0, 65, 160, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 152, 29, 106, 66, 136, 144, 160, 192, 128, 129, 130, 132, 8, 55, 1, 0, 32, 0, 65, 168, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 176, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 184, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 0, 65, 160, 2, 65, 15, 65, 1, 16, 6, 32, 0, 65, 1, 65, 32, 65, 15, 65, 1, 16, 6, 32, 1, 32, 1, 40, 2, 16, 34, 3, 65, 2, 106, 34, 5, 54, 2, 16, 32, 1, 32, 1, 40, 2, 12, 65, 1, 32, 3, 65, 31, 113, 116, 114, 34, 3, 54, 2, 12, 32, 5, 65, 8, 73, 13, 1, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 73, 4, 64, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 1, 12, 3, 11, 11, 12, 3, 11, 32, 0, 65, 1, 59, 1, 128, 4, 32, 9, 32, 0, 54, 2, 0, 32, 0, 65, 0, 65, 160, 2, 65, 15, 65, 0, 16, 6, 32, 0, 65, 1, 65, 32, 65, 15, 65, 0, 16, 6, 65, 158, 2, 2, 127, 65, 0, 32, 0, 65, 157, 29, 106, 45, 0, 0, 13, 0, 26, 65, 1, 32, 0, 65, 156, 29, 106, 45, 0, 0, 13, 0, 26, 65, 2, 32, 0, 65, 155, 29, 106, 45, 0, 0, 13, 0, 26, 65, 3, 32, 0, 65, 154, 29, 106, 45, 0, 0, 13, 0, 26, 65, 4, 32, 0, 65, 153, 29, 106, 45, 0, 0, 13, 0, 26, 65, 5, 32, 0, 65, 152, 29, 106, 45, 0, 0, 13, 0, 26, 65, 6, 32, 0, 65, 151, 29, 106, 45, 0, 0, 13, 0, 26, 65, 7, 32, 0, 65, 150, 29, 106, 45, 0, 0, 13, 0, 26, 65, 8, 32, 0, 65, 149, 29, 106, 45, 0, 0, 13, 0, 26, 65, 9, 32, 0, 65, 148, 29, 106, 45, 0, 0, 13, 0, 26, 65, 10, 32, 0, 65, 147, 29, 106, 45, 0, 0, 13, 0, 26, 65, 11, 32, 0, 65, 146, 29, 106, 45, 0, 0, 13, 0, 26, 65, 12, 32, 0, 65, 145, 29, 106, 45, 0, 0, 13, 0, 26, 65, 13, 32, 0, 65, 144, 29, 106, 45, 0, 0, 13, 0, 26, 65, 14, 32, 0, 65, 143, 29, 106, 45, 0, 0, 13, 0, 26, 65, 15, 32, 0, 65, 142, 29, 106, 45, 0, 0, 13, 0, 26, 65, 16, 32, 0, 65, 141, 29, 106, 45, 0, 0, 13, 0, 26, 65, 17, 32, 0, 65, 140, 29, 106, 45, 0, 0, 13, 0, 26, 65, 18, 32, 0, 65, 139, 29, 106, 45, 0, 0, 13, 0, 26, 65, 19, 32, 0, 65, 138, 29, 106, 45, 0, 0, 13, 0, 26, 65, 20, 32, 0, 65, 137, 29, 106, 45, 0, 0, 13, 0, 26, 65, 21, 32, 0, 65, 136, 29, 106, 45, 0, 0, 13, 0, 26, 65, 22, 32, 0, 65, 135, 29, 106, 45, 0, 0, 13, 0, 26, 65, 23, 32, 0, 65, 134, 29, 106, 45, 0, 0, 13, 0, 26, 65, 24, 32, 0, 65, 133, 29, 106, 45, 0, 0, 13, 0, 26, 65, 25, 32, 0, 65, 132, 29, 106, 45, 0, 0, 13, 0, 26, 65, 26, 32, 0, 65, 131, 29, 106, 45, 0, 0, 13, 0, 26, 65, 27, 32, 0, 65, 130, 29, 106, 45, 0, 0, 13, 0, 26, 65, 28, 65, 29, 32, 0, 65, 129, 29, 106, 45, 0, 0, 27, 11, 34, 14, 107, 33, 3, 2, 64, 32, 0, 65, 189, 29, 106, 45, 0, 0, 13, 0, 65, 1, 33, 8, 32, 0, 65, 188, 29, 106, 45, 0, 0, 13, 0, 65, 2, 33, 8, 32, 0, 65, 187, 29, 106, 45, 0, 0, 13, 0, 65, 3, 33, 8, 32, 0, 65, 186, 29, 106, 45, 0, 0, 13, 0, 65, 4, 33, 8, 32, 0, 65, 185, 29, 106, 45, 0, 0, 13, 0, 65, 5, 33, 8, 32, 0, 65, 184, 29, 106, 45, 0, 0, 13, 0, 65, 6, 33, 8, 32, 0, 65, 183, 29, 106, 45, 0, 0, 13, 0, 65, 7, 33, 8, 32, 0, 65, 182, 29, 106, 45, 0, 0, 13, 0, 65, 8, 33, 8, 32, 0, 65, 181, 29, 106, 45, 0, 0, 13, 0, 65, 9, 33, 8, 32, 0, 65, 180, 29, 106, 45, 0, 0, 13, 0, 65, 10, 33, 8, 32, 0, 65, 179, 29, 106, 45, 0, 0, 13, 0, 65, 11, 33, 8, 32, 0, 65, 178, 29, 106, 45, 0, 0, 13, 0, 65, 12, 33, 8, 32, 0, 65, 177, 29, 106, 45, 0, 0, 13, 0, 65, 13, 33, 8, 32, 0, 65, 176, 29, 106, 45, 0, 0, 13, 0, 65, 14, 33, 8, 32, 0, 65, 175, 29, 106, 45, 0, 0, 13, 0, 65, 15, 33, 8, 32, 0, 65, 174, 29, 106, 45, 0, 0, 13, 0, 65, 16, 33, 8, 32, 0, 65, 173, 29, 106, 45, 0, 0, 13, 0, 65, 17, 33, 8, 32, 0, 65, 172, 29, 106, 45, 0, 0, 13, 0, 65, 18, 33, 8, 32, 0, 65, 171, 29, 106, 45, 0, 0, 13, 0, 65, 19, 33, 8, 32, 0, 65, 170, 29, 106, 45, 0, 0, 13, 0, 65, 20, 33, 8, 32, 0, 65, 169, 29, 106, 45, 0, 0, 13, 0, 65, 21, 33, 8, 32, 0, 65, 168, 29, 106, 45, 0, 0, 13, 0, 65, 22, 33, 8, 32, 0, 65, 167, 29, 106, 45, 0, 0, 13, 0, 65, 23, 33, 8, 32, 0, 65, 166, 29, 106, 45, 0, 0, 13, 0, 65, 24, 33, 8, 32, 0, 65, 165, 29, 106, 45, 0, 0, 13, 0, 65, 25, 33, 8, 32, 0, 65, 164, 29, 106, 45, 0, 0, 13, 0, 65, 26, 33, 8, 32, 0, 65, 163, 29, 106, 45, 0, 0, 13, 0, 65, 27, 33, 8, 32, 0, 65, 162, 29, 106, 45, 0, 0, 13, 0, 65, 28, 65, 29, 32, 0, 65, 161, 29, 106, 45, 0, 0, 27, 33, 8, 11, 32, 9, 65, 4, 106, 65, 0, 65, 192, 2, 16, 131, 1, 26, 32, 9, 65, 196, 2, 106, 65, 0, 65, 192, 2, 16, 131, 1, 26, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 65, 193, 2, 73, 4, 64, 32, 3, 65, 161, 2, 79, 13, 1, 32, 9, 65, 4, 106, 32, 0, 65, 128, 27, 106, 32, 3, 16, 121, 26, 65, 30, 32, 8, 107, 34, 6, 32, 3, 106, 34, 4, 32, 3, 73, 13, 2, 32, 4, 65, 193, 2, 79, 13, 3, 32, 6, 65, 161, 2, 79, 13, 4, 32, 9, 65, 4, 106, 32, 3, 106, 32, 0, 65, 160, 29, 106, 32, 6, 16, 121, 26, 32, 0, 65, 128, 9, 106, 65, 0, 65, 38, 16, 131, 1, 26, 32, 0, 33, 6, 2, 64, 2, 64, 2, 64, 32, 4, 69, 13, 0, 65, 188, 2, 32, 8, 32, 14, 106, 107, 33, 15, 32, 9, 40, 2, 0, 33, 11, 32, 9, 65, 4, 106, 33, 13, 32, 0, 33, 10, 65, 0, 33, 3, 65, 255, 1, 33, 7, 65, 0, 33, 4, 3, 64, 32, 7, 33, 12, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 13, 45, 0, 0, 34, 7, 69, 4, 64, 2, 64, 32, 5, 69, 4, 64, 32, 4, 33, 6, 12, 1, 11, 32, 5, 65, 2, 77, 4, 64, 32, 10, 32, 12, 65, 255, 1, 113, 65, 1, 116, 106, 65, 128, 9, 106, 34, 6, 32, 6, 47, 1, 0, 32, 5, 106, 59, 1, 0, 32, 9, 32, 12, 58, 0, 134, 5, 32, 9, 32, 12, 58, 0, 133, 5, 32, 9, 32, 12, 58, 0, 132, 5, 32, 4, 32, 5, 106, 34, 6, 32, 4, 73, 32, 6, 65, 192, 2, 75, 114, 13, 11, 32, 9, 65, 196, 2, 106, 32, 4, 106, 32, 9, 65, 132, 5, 106, 32, 5, 16, 121, 26, 12, 1, 11, 32, 10, 65, 160, 9, 106, 34, 6, 32, 6, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 10, 32, 4, 65, 2, 106, 34, 6, 65, 192, 2, 75, 13, 10, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 5, 65, 125, 106, 58, 0, 1, 32, 4, 65, 16, 58, 0, 0, 11, 65, 0, 33, 5, 32, 3, 65, 1, 106, 34, 3, 65, 138, 1, 70, 13, 1, 32, 6, 33, 4, 12, 6, 11, 2, 64, 32, 3, 69, 4, 64, 32, 4, 33, 6, 12, 1, 11, 32, 3, 65, 2, 77, 4, 64, 32, 10, 32, 10, 47, 1, 128, 9, 32, 3, 106, 59, 1, 128, 9, 32, 3, 32, 4, 106, 34, 6, 32, 4, 73, 32, 6, 65, 192, 2, 75, 114, 13, 10, 32, 9, 65, 196, 2, 106, 32, 4, 106, 65, 0, 32, 3, 16, 131, 1, 26, 12, 1, 11, 32, 3, 65, 10, 77, 4, 64, 32, 10, 65, 162, 9, 106, 34, 6, 32, 6, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 10, 32, 4, 65, 2, 106, 34, 6, 65, 192, 2, 75, 13, 10, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 125, 106, 58, 0, 1, 32, 4, 65, 17, 58, 0, 0, 12, 1, 11, 32, 10, 65, 164, 9, 106, 34, 6, 32, 6, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 9, 32, 4, 65, 2, 106, 34, 6, 65, 192, 2, 75, 13, 9, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 117, 106, 58, 0, 1, 32, 4, 65, 18, 58, 0, 0, 11, 32, 7, 32, 12, 65, 255, 1, 113, 34, 3, 70, 13, 3, 32, 5, 69, 13, 2, 32, 5, 65, 2, 75, 13, 1, 32, 10, 32, 3, 65, 1, 116, 106, 65, 128, 9, 106, 34, 3, 32, 3, 47, 1, 0, 32, 5, 106, 59, 1, 0, 32, 9, 32, 12, 58, 0, 134, 5, 32, 9, 32, 12, 58, 0, 133, 5, 32, 9, 32, 12, 58, 0, 132, 5, 32, 5, 32, 6, 106, 34, 3, 32, 6, 73, 32, 3, 65, 192, 2, 75, 114, 13, 8, 32, 9, 65, 196, 2, 106, 32, 6, 106, 32, 9, 65, 132, 5, 106, 32, 5, 16, 121, 26, 32, 3, 33, 6, 32, 11, 33, 10, 12, 2, 11, 32, 11, 32, 11, 47, 1, 164, 9, 65, 1, 106, 59, 1, 164, 9, 32, 6, 65, 125, 75, 13, 7, 32, 6, 65, 2, 106, 34, 4, 65, 192, 2, 75, 13, 7, 32, 9, 65, 196, 2, 106, 32, 6, 106, 65, 146, 254, 1, 59, 0, 0, 12, 3, 11, 32, 10, 65, 160, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 125, 75, 13, 6, 32, 6, 65, 2, 106, 34, 3, 65, 192, 2, 75, 13, 6, 32, 9, 65, 196, 2, 106, 32, 6, 106, 34, 6, 32, 5, 65, 125, 106, 58, 0, 1, 32, 6, 65, 16, 58, 0, 0, 32, 3, 33, 6, 11, 32, 10, 32, 7, 65, 1, 116, 106, 65, 128, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 1, 106, 34, 4, 32, 6, 73, 32, 4, 65, 192, 2, 75, 114, 13, 5, 32, 9, 65, 196, 2, 106, 32, 6, 106, 32, 7, 58, 0, 0, 12, 1, 11, 65, 0, 33, 3, 32, 5, 65, 1, 106, 34, 5, 65, 6, 71, 4, 64, 32, 6, 33, 4, 12, 2, 11, 32, 10, 65, 160, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 125, 75, 13, 4, 32, 6, 65, 2, 106, 34, 4, 65, 192, 2, 75, 13, 4, 32, 9, 65, 196, 2, 106, 32, 6, 106, 65, 144, 6, 59, 0, 0, 11, 65, 0, 33, 3, 65, 0, 33, 5, 11, 32, 13, 65, 1, 106, 33, 13, 32, 11, 33, 10, 32, 15, 65, 127, 106, 34, 15, 13, 0, 11, 32, 9, 40, 2, 0, 33, 6, 32, 5, 4, 64, 32, 5, 65, 2, 77, 4, 64, 32, 6, 32, 7, 65, 1, 116, 106, 65, 128, 9, 106, 34, 3, 32, 3, 47, 1, 0, 32, 5, 106, 59, 1, 0, 32, 9, 32, 7, 58, 0, 134, 5, 32, 9, 32, 7, 58, 0, 133, 5, 32, 9, 32, 7, 58, 0, 132, 5, 32, 4, 32, 5, 106, 34, 10, 32, 4, 73, 32, 10, 65, 192, 2, 75, 114, 13, 3, 32, 9, 65, 196, 2, 106, 32, 4, 106, 32, 9, 65, 132, 5, 106, 32, 5, 16, 121, 26, 32, 9, 40, 2, 0, 33, 6, 12, 2, 11, 32, 6, 65, 160, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 2, 32, 4, 65, 2, 106, 34, 10, 65, 192, 2, 75, 13, 2, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 3, 32, 5, 65, 125, 106, 58, 0, 1, 32, 3, 65, 16, 58, 0, 0, 12, 1, 11, 32, 3, 69, 4, 64, 32, 4, 33, 10, 12, 1, 11, 32, 3, 65, 2, 77, 4, 64, 32, 6, 32, 6, 47, 1, 128, 9, 32, 3, 106, 59, 1, 128, 9, 32, 3, 32, 4, 106, 34, 10, 32, 4, 73, 32, 10, 65, 192, 2, 75, 114, 13, 2, 32, 9, 65, 196, 2, 106, 32, 4, 106, 65, 0, 32, 3, 16, 131, 1, 26, 12, 1, 11, 32, 3, 65, 10, 77, 4, 64, 32, 6, 65, 162, 9, 106, 34, 7, 32, 7, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 2, 32, 4, 65, 2, 106, 34, 10, 65, 192, 2, 75, 13, 2, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 125, 106, 58, 0, 1, 32, 4, 65, 17, 58, 0, 0, 12, 1, 11, 32, 6, 65, 164, 9, 106, 34, 7, 32, 7, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 1, 32, 4, 65, 2, 106, 34, 10, 65, 192, 2, 75, 13, 1, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 117, 106, 58, 0, 1, 32, 4, 65, 18, 58, 0, 0, 11, 32, 6, 65, 2, 65, 19, 65, 7, 65, 0, 16, 6, 32, 1, 32, 1, 40, 2, 16, 34, 3, 65, 2, 106, 34, 5, 54, 2, 16, 32, 1, 32, 1, 40, 2, 12, 65, 2, 32, 3, 65, 31, 113, 116, 114, 34, 7, 54, 2, 12, 32, 5, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 6, 79, 13, 9, 32, 1, 40, 2, 0, 32, 3, 106, 32, 7, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 7, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 11, 65, 29, 32, 14, 107, 34, 3, 65, 32, 79, 13, 14, 32, 1, 32, 5, 65, 5, 106, 34, 4, 54, 2, 16, 32, 1, 32, 3, 32, 5, 116, 32, 7, 114, 34, 6, 54, 2, 12, 32, 5, 65, 3, 79, 4, 64, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 4, 79, 13, 10, 32, 1, 40, 2, 0, 32, 3, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 6, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 4, 54, 2, 16, 32, 4, 65, 7, 75, 13, 0, 11, 11, 65, 29, 32, 8, 107, 34, 3, 65, 32, 79, 13, 14, 32, 1, 32, 4, 65, 5, 106, 34, 7, 54, 2, 16, 32, 1, 32, 3, 32, 4, 116, 32, 6, 114, 34, 6, 54, 2, 12, 32, 4, 65, 3, 79, 4, 64, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 4, 79, 13, 11, 32, 1, 40, 2, 0, 32, 3, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 6, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 7, 54, 2, 16, 32, 7, 65, 7, 75, 13, 0, 11, 11, 65, 0, 33, 4, 65, 0, 33, 3, 32, 9, 40, 2, 0, 34, 5, 65, 207, 31, 106, 45, 0, 0, 13, 10, 65, 1, 33, 3, 32, 5, 65, 193, 31, 106, 45, 0, 0, 69, 13, 1, 12, 10, 11, 65, 2, 33, 5, 12, 11, 11, 65, 2, 33, 3, 32, 5, 65, 206, 31, 106, 45, 0, 0, 13, 8, 65, 3, 33, 3, 32, 5, 65, 194, 31, 106, 45, 0, 0, 13, 8, 65, 4, 33, 3, 32, 5, 65, 205, 31, 106, 45, 0, 0, 13, 8, 65, 5, 33, 3, 32, 5, 65, 195, 31, 106, 45, 0, 0, 13, 8, 65, 6, 33, 3, 32, 5, 65, 204, 31, 106, 45, 0, 0, 13, 8, 65, 7, 33, 3, 32, 5, 65, 196, 31, 106, 45, 0, 0, 13, 8, 65, 8, 33, 3, 32, 5, 65, 203, 31, 106, 45, 0, 0, 13, 8, 65, 9, 33, 3, 32, 5, 65, 197, 31, 106, 45, 0, 0, 13, 8, 65, 10, 33, 3, 32, 5, 65, 202, 31, 106, 45, 0, 0, 13, 8, 65, 11, 33, 3, 32, 5, 65, 198, 31, 106, 45, 0, 0, 13, 8, 65, 12, 33, 3, 32, 5, 65, 201, 31, 106, 45, 0, 0, 13, 8, 65, 13, 33, 3, 32, 5, 65, 199, 31, 106, 45, 0, 0, 13, 8, 65, 14, 33, 3, 32, 5, 65, 200, 31, 106, 45, 0, 0, 13, 8, 65, 15, 33, 3, 32, 5, 65, 192, 31, 106, 45, 0, 0, 13, 8, 65, 16, 33, 3, 32, 5, 65, 210, 31, 106, 45, 0, 0, 13, 8, 65, 17, 33, 3, 32, 5, 65, 209, 31, 106, 45, 0, 0, 13, 8, 65, 18, 65, 19, 32, 5, 65, 208, 31, 106, 45, 0, 0, 27, 33, 3, 12, 8, 11, 32, 3, 65, 192, 2, 65, 132, 152, 192, 0, 16, 99, 0, 11, 32, 3, 65, 160, 2, 65, 148, 152, 192, 0, 16, 99, 0, 11, 32, 3, 32, 4, 65, 164, 152, 192, 0, 16, 100, 0, 11, 32, 4, 65, 192, 2, 65, 164, 152, 192, 0, 16, 99, 0, 11, 32, 6, 65, 160, 2, 65, 180, 152, 192, 0, 16, 99, 0, 11, 32, 3, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 3, 32, 4, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 3, 32, 4, 65, 164, 148, 192, 0, 16, 98, 0, 11, 65, 4, 33, 13, 2, 64, 2, 64, 65, 19, 32, 3, 107, 34, 5, 65, 5, 79, 4, 64, 32, 5, 33, 13, 65, 15, 32, 3, 107, 34, 4, 65, 16, 79, 13, 6, 11, 32, 1, 32, 7, 65, 4, 106, 34, 5, 54, 2, 16, 32, 1, 32, 4, 32, 7, 65, 31, 113, 116, 32, 6, 114, 34, 3, 54, 2, 12, 32, 5, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 79, 13, 6, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 32, 13, 65, 20, 79, 13, 1, 11, 32, 13, 69, 13, 1, 65, 196, 152, 192, 0, 33, 7, 32, 13, 65, 196, 152, 192, 0, 106, 33, 11, 32, 9, 40, 2, 0, 33, 8, 3, 64, 32, 8, 32, 7, 45, 0, 0, 106, 65, 192, 31, 106, 45, 0, 0, 34, 4, 65, 248, 1, 113, 13, 6, 32, 1, 32, 5, 65, 3, 106, 34, 6, 54, 2, 16, 32, 1, 32, 4, 32, 5, 65, 31, 113, 116, 32, 3, 114, 34, 3, 54, 2, 12, 2, 64, 32, 6, 65, 8, 73, 4, 64, 32, 6, 33, 5, 12, 1, 11, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 79, 13, 7, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 11, 32, 7, 65, 1, 106, 34, 7, 32, 11, 71, 13, 0, 11, 12, 1, 11, 32, 13, 65, 19, 65, 216, 152, 192, 0, 16, 99, 0, 11, 32, 10, 69, 13, 0, 65, 0, 33, 7, 32, 9, 40, 2, 0, 33, 8, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 32, 7, 65, 191, 2, 77, 4, 64, 32, 9, 65, 196, 2, 106, 32, 7, 106, 45, 0, 0, 34, 11, 65, 19, 79, 13, 4, 32, 8, 32, 11, 65, 1, 116, 106, 65, 192, 22, 106, 47, 1, 0, 34, 6, 32, 8, 32, 11, 106, 65, 192, 31, 106, 45, 0, 0, 34, 4, 65, 31, 113, 118, 13, 10, 32, 1, 32, 4, 32, 5, 106, 34, 4, 54, 2, 16, 32, 1, 32, 6, 32, 5, 65, 31, 113, 116, 32, 3, 114, 34, 3, 54, 2, 12, 32, 4, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 5, 3, 64, 32, 5, 32, 1, 40, 2, 4, 34, 6, 79, 13, 7, 32, 1, 40, 2, 0, 32, 5, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 5, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 4, 54, 2, 16, 32, 4, 65, 7, 75, 13, 0, 11, 11, 32, 7, 65, 1, 106, 33, 6, 2, 127, 32, 11, 65, 16, 73, 4, 64, 32, 4, 33, 5, 32, 6, 12, 1, 11, 32, 7, 65, 190, 2, 75, 13, 3, 32, 9, 65, 196, 2, 106, 32, 6, 106, 45, 0, 0, 33, 6, 32, 9, 65, 7, 54, 2, 140, 5, 32, 9, 66, 130, 128, 128, 128, 48, 55, 2, 132, 5, 32, 11, 65, 112, 106, 34, 5, 65, 2, 75, 13, 4, 32, 6, 32, 9, 65, 132, 5, 106, 32, 5, 65, 2, 116, 106, 40, 2, 0, 34, 5, 65, 31, 113, 118, 13, 11, 32, 1, 32, 4, 32, 5, 106, 34, 5, 54, 2, 16, 32, 1, 32, 6, 32, 4, 116, 32, 3, 114, 34, 3, 54, 2, 12, 32, 5, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 79, 13, 9, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 11, 32, 7, 65, 2, 106, 11, 34, 7, 32, 10, 73, 13, 1, 12, 7, 11, 11, 32, 7, 65, 192, 2, 65, 232, 152, 192, 0, 16, 98, 0, 11, 65, 192, 2, 65, 192, 2, 65, 180, 153, 192, 0, 16, 98, 0, 11, 32, 5, 65, 3, 65, 196, 153, 192, 0, 16, 98, 0, 11, 65, 248, 152, 192, 0, 65, 43, 65, 164, 153, 192, 0, 16, 114, 0, 11, 32, 5, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 12, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 0, 34, 11, 65, 129, 128, 4, 73, 4, 64, 32, 3, 173, 33, 17, 32, 11, 69, 13, 5, 32, 2, 65, 16, 106, 33, 13, 65, 1, 33, 6, 65, 0, 33, 8, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 2, 64, 2, 64, 2, 127, 32, 6, 65, 1, 71, 4, 64, 32, 8, 33, 10, 32, 6, 12, 1, 11, 32, 8, 65, 1, 106, 33, 10, 32, 2, 32, 8, 106, 65, 16, 106, 45, 0, 0, 65, 128, 2, 114, 11, 34, 7, 65, 1, 113, 4, 64, 32, 10, 32, 11, 79, 13, 4, 32, 10, 65, 1, 106, 34, 6, 32, 11, 79, 13, 10, 32, 10, 65, 2, 106, 34, 8, 32, 11, 79, 13, 11, 32, 2, 32, 10, 106, 65, 16, 106, 45, 0, 0, 34, 14, 65, 1, 116, 65, 164, 154, 192, 0, 106, 47, 1, 0, 34, 3, 65, 159, 2, 75, 13, 5, 32, 14, 65, 248, 158, 192, 0, 106, 45, 0, 0, 34, 4, 65, 16, 75, 13, 6, 32, 0, 32, 3, 106, 65, 128, 27, 106, 45, 0, 0, 33, 16, 32, 0, 32, 3, 65, 1, 116, 106, 65, 192, 13, 106, 51, 1, 0, 2, 127, 32, 6, 32, 13, 106, 45, 0, 0, 32, 8, 32, 13, 106, 45, 0, 0, 34, 8, 65, 8, 116, 114, 34, 3, 65, 255, 3, 77, 4, 64, 32, 3, 65, 136, 161, 192, 0, 106, 33, 15, 32, 3, 65, 136, 165, 192, 0, 106, 12, 1, 11, 32, 3, 65, 16, 116, 65, 16, 117, 65, 0, 72, 13, 8, 32, 8, 65, 136, 169, 192, 0, 106, 33, 15, 32, 8, 65, 152, 170, 192, 0, 106, 11, 45, 0, 0, 34, 12, 65, 16, 75, 13, 8, 32, 7, 65, 1, 118, 33, 6, 32, 10, 65, 3, 106, 33, 8, 32, 5, 65, 63, 113, 173, 134, 32, 17, 132, 32, 4, 65, 2, 116, 65, 180, 158, 192, 0, 106, 53, 2, 0, 32, 14, 173, 131, 32, 5, 32, 16, 106, 34, 7, 65, 63, 113, 173, 134, 132, 32, 0, 32, 15, 45, 0, 0, 34, 10, 65, 1, 116, 106, 65, 128, 18, 106, 51, 1, 0, 32, 4, 32, 7, 106, 34, 4, 65, 63, 113, 173, 134, 132, 32, 12, 65, 2, 116, 65, 180, 158, 192, 0, 106, 53, 2, 0, 32, 3, 173, 131, 32, 4, 32, 0, 32, 10, 106, 65, 160, 29, 106, 45, 0, 0, 106, 34, 3, 65, 63, 113, 173, 134, 132, 33, 17, 32, 3, 32, 12, 106, 33, 4, 12, 1, 11, 32, 10, 32, 13, 106, 33, 12, 32, 10, 65, 3, 106, 33, 8, 32, 10, 32, 10, 32, 11, 32, 10, 32, 11, 75, 27, 34, 14, 107, 33, 15, 65, 0, 33, 3, 32, 5, 33, 4, 3, 64, 32, 3, 65, 3, 70, 4, 64, 32, 7, 33, 6, 12, 2, 11, 32, 3, 32, 15, 106, 69, 13, 2, 32, 7, 65, 1, 118, 33, 6, 32, 0, 32, 3, 32, 12, 106, 45, 0, 0, 34, 16, 65, 1, 116, 106, 65, 192, 13, 106, 51, 1, 0, 32, 4, 65, 63, 113, 173, 134, 32, 17, 132, 33, 17, 32, 3, 65, 1, 106, 33, 5, 32, 4, 32, 0, 32, 16, 106, 65, 128, 27, 106, 45, 0, 0, 106, 33, 4, 32, 3, 32, 10, 106, 65, 1, 106, 32, 11, 73, 4, 64, 32, 7, 65, 2, 113, 32, 5, 33, 3, 32, 6, 33, 7, 69, 13, 1, 11, 11, 32, 5, 32, 10, 106, 33, 8, 11, 32, 1, 40, 2, 8, 34, 3, 65, 8, 106, 33, 7, 32, 3, 65, 120, 79, 13, 10, 32, 1, 40, 2, 4, 34, 10, 32, 7, 73, 13, 11, 32, 1, 40, 2, 0, 32, 3, 106, 32, 17, 55, 0, 0, 65, 2, 33, 5, 32, 1, 40, 2, 8, 34, 7, 32, 4, 65, 3, 118, 106, 34, 3, 32, 7, 73, 13, 13, 32, 3, 32, 1, 40, 2, 4, 75, 13, 13, 32, 1, 32, 3, 54, 2, 8, 32, 4, 65, 7, 113, 33, 5, 32, 17, 32, 4, 65, 56, 113, 173, 136, 33, 17, 32, 8, 32, 11, 73, 13, 1, 12, 12, 11, 11, 32, 14, 32, 11, 65, 132, 154, 192, 0, 16, 98, 0, 11, 32, 10, 32, 11, 65, 148, 154, 192, 0, 16, 98, 0, 11, 32, 3, 65, 160, 2, 65, 164, 158, 192, 0, 16, 98, 0, 11, 32, 4, 65, 17, 65, 248, 160, 192, 0, 16, 98, 0, 11, 32, 8, 65, 128, 1, 65, 136, 170, 192, 0, 16, 98, 0, 11, 32, 12, 65, 17, 65, 152, 171, 192, 0, 16, 98, 0, 11, 32, 11, 65, 128, 128, 4, 65, 168, 171, 192, 0, 16, 99, 0, 11, 32, 6, 32, 11, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 8, 32, 11, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 3, 32, 7, 65, 180, 148, 192, 0, 16, 100, 0, 11, 32, 7, 32, 10, 65, 180, 148, 192, 0, 16, 99, 0, 11, 32, 1, 66, 0, 55, 2, 12, 65, 0, 33, 7, 2, 64, 32, 5, 69, 4, 64, 65, 0, 33, 4, 12, 1, 11, 65, 0, 33, 4, 2, 64, 3, 64, 32, 5, 65, 16, 32, 5, 65, 16, 73, 27, 34, 6, 65, 2, 116, 65, 180, 158, 192, 0, 106, 40, 2, 0, 32, 17, 167, 113, 34, 3, 32, 6, 118, 69, 4, 64, 32, 1, 32, 4, 32, 6, 106, 34, 2, 54, 2, 16, 32, 1, 32, 3, 32, 4, 116, 32, 7, 114, 34, 7, 54, 2, 12, 2, 64, 32, 2, 65, 8, 73, 4, 64, 32, 2, 33, 4, 12, 1, 11, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 2, 79, 13, 4, 32, 1, 40, 2, 0, 32, 3, 106, 32, 7, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 7, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 4, 54, 2, 16, 32, 4, 65, 7, 75, 13, 0, 11, 11, 32, 17, 32, 6, 173, 136, 33, 17, 32, 5, 32, 6, 107, 34, 5, 13, 1, 12, 3, 11, 11, 12, 4, 11, 32, 3, 32, 2, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 0, 65, 192, 17, 106, 47, 1, 0, 34, 2, 32, 0, 65, 128, 29, 106, 45, 0, 0, 34, 0, 65, 31, 113, 118, 13, 2, 32, 1, 32, 0, 32, 4, 106, 34, 0, 54, 2, 16, 32, 1, 32, 2, 32, 4, 116, 32, 7, 114, 34, 4, 54, 2, 12, 65, 1, 33, 5, 32, 0, 65, 8, 73, 13, 0, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 0, 73, 4, 64, 32, 1, 40, 2, 0, 32, 3, 106, 32, 4, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 4, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 0, 54, 2, 16, 32, 0, 65, 7, 75, 13, 1, 12, 2, 11, 11, 32, 3, 32, 0, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 9, 65, 144, 5, 106, 36, 0, 32, 5, 15, 11, 32, 4, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 65, 228, 147, 192, 0, 65, 48, 65, 148, 148, 192, 0, 16, 114, 0, 11, 187, 43, 2, 34, 127, 1, 126, 35, 0, 65, 48, 107, 34, 13, 36, 0, 32, 1, 65, 172, 128, 4, 106, 66, 0, 55, 2, 0, 32, 1, 65, 180, 128, 4, 106, 40, 2, 0, 33, 5, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 198, 128, 4, 106, 45, 0, 0, 65, 4, 70, 4, 64, 32, 1, 32, 3, 58, 0, 198, 128, 4, 32, 3, 65, 255, 1, 113, 65, 4, 71, 32, 5, 114, 13, 1, 12, 2, 11, 32, 1, 32, 3, 58, 0, 198, 128, 4, 32, 5, 69, 13, 1, 11, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 254, 255, 255, 255, 15, 55, 2, 0, 32, 1, 65, 126, 54, 2, 180, 128, 4, 12, 1, 11, 32, 1, 65, 144, 128, 4, 106, 33, 24, 2, 64, 32, 1, 65, 164, 128, 4, 106, 40, 2, 0, 69, 4, 64, 32, 1, 65, 199, 128, 4, 106, 45, 0, 0, 69, 13, 1, 11, 32, 13, 65, 32, 106, 32, 2, 32, 24, 16, 67, 32, 1, 32, 13, 40, 2, 32, 54, 2, 180, 128, 4, 32, 0, 32, 13, 41, 3, 32, 55, 2, 0, 32, 0, 65, 8, 106, 32, 13, 65, 40, 106, 40, 2, 0, 54, 2, 0, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 24, 40, 2, 0, 65, 255, 159, 45, 113, 65, 129, 128, 1, 71, 4, 64, 32, 2, 40, 2, 0, 34, 26, 69, 13, 2, 32, 1, 65, 204, 128, 4, 106, 33, 31, 32, 1, 65, 156, 128, 4, 106, 40, 2, 0, 33, 3, 32, 1, 65, 152, 128, 4, 106, 40, 2, 0, 33, 17, 32, 1, 65, 197, 128, 4, 106, 45, 0, 0, 33, 19, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 33, 16, 32, 1, 65, 220, 128, 4, 106, 40, 2, 0, 33, 10, 32, 2, 40, 2, 4, 33, 18, 32, 1, 65, 212, 128, 4, 106, 33, 14, 2, 64, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 18, 32, 11, 77, 4, 64, 32, 10, 69, 13, 1, 32, 1, 45, 0, 198, 128, 4, 69, 13, 1, 11, 2, 127, 2, 64, 65, 130, 2, 32, 10, 107, 34, 5, 32, 18, 32, 11, 107, 34, 4, 32, 4, 32, 5, 75, 27, 34, 6, 69, 13, 0, 32, 1, 40, 2, 228, 128, 4, 32, 10, 106, 65, 2, 73, 13, 0, 32, 6, 32, 11, 106, 34, 7, 32, 6, 79, 4, 64, 32, 18, 32, 7, 79, 4, 64, 32, 14, 40, 2, 0, 34, 5, 65, 128, 128, 8, 106, 34, 8, 32, 10, 32, 16, 106, 34, 9, 65, 126, 106, 34, 4, 65, 255, 255, 1, 113, 106, 45, 0, 0, 65, 5, 116, 32, 8, 32, 9, 65, 127, 106, 65, 255, 255, 1, 113, 106, 45, 0, 0, 115, 33, 12, 32, 6, 32, 10, 106, 33, 10, 32, 6, 65, 127, 106, 33, 6, 32, 11, 32, 26, 106, 33, 8, 3, 64, 32, 5, 32, 9, 65, 255, 255, 1, 113, 34, 9, 106, 65, 128, 128, 8, 106, 32, 8, 45, 0, 0, 34, 5, 58, 0, 0, 32, 9, 65, 128, 2, 77, 4, 64, 32, 14, 40, 2, 0, 32, 9, 65, 128, 128, 2, 114, 106, 65, 128, 128, 8, 106, 32, 5, 58, 0, 0, 11, 32, 14, 40, 2, 0, 34, 11, 32, 4, 65, 255, 255, 1, 113, 65, 1, 116, 106, 32, 11, 32, 12, 65, 5, 116, 65, 224, 255, 1, 113, 32, 5, 115, 34, 12, 65, 1, 116, 34, 5, 106, 65, 128, 128, 4, 106, 47, 1, 0, 59, 1, 0, 32, 14, 40, 2, 0, 32, 5, 106, 65, 128, 128, 4, 106, 32, 4, 59, 1, 0, 32, 7, 32, 6, 69, 13, 4, 26, 32, 8, 65, 1, 106, 33, 8, 32, 6, 65, 127, 106, 33, 6, 32, 9, 65, 1, 106, 33, 9, 32, 4, 65, 1, 106, 33, 4, 32, 14, 40, 2, 0, 33, 5, 12, 0, 11, 0, 11, 32, 7, 32, 18, 65, 216, 173, 192, 0, 16, 99, 0, 11, 32, 11, 32, 7, 65, 216, 173, 192, 0, 16, 100, 0, 11, 32, 6, 32, 11, 106, 34, 5, 32, 6, 73, 13, 2, 32, 18, 32, 5, 73, 13, 3, 32, 6, 4, 64, 32, 11, 32, 26, 106, 33, 12, 32, 10, 32, 16, 106, 33, 7, 65, 0, 33, 4, 3, 64, 32, 4, 32, 7, 106, 34, 9, 65, 255, 255, 1, 113, 34, 8, 32, 14, 40, 2, 0, 106, 65, 128, 128, 8, 106, 32, 4, 32, 12, 106, 45, 0, 0, 34, 11, 58, 0, 0, 32, 8, 65, 128, 2, 77, 4, 64, 32, 14, 40, 2, 0, 32, 8, 65, 128, 128, 2, 114, 106, 65, 128, 128, 8, 106, 32, 11, 58, 0, 0, 11, 32, 1, 40, 2, 228, 128, 4, 32, 4, 32, 10, 106, 106, 65, 1, 106, 65, 3, 79, 4, 64, 32, 14, 40, 2, 0, 34, 8, 32, 9, 65, 126, 106, 34, 15, 65, 255, 255, 1, 113, 34, 20, 65, 1, 116, 106, 32, 8, 32, 11, 32, 8, 65, 128, 128, 8, 106, 34, 11, 32, 9, 65, 127, 106, 65, 255, 255, 1, 113, 106, 45, 0, 0, 65, 5, 116, 115, 32, 11, 32, 20, 106, 45, 0, 0, 65, 10, 116, 65, 128, 248, 1, 113, 115, 65, 1, 116, 34, 9, 106, 65, 128, 128, 4, 106, 47, 1, 0, 59, 1, 0, 32, 14, 40, 2, 0, 32, 9, 106, 65, 128, 128, 4, 106, 32, 15, 59, 1, 0, 11, 32, 6, 32, 4, 65, 1, 106, 34, 4, 71, 13, 0, 11, 32, 4, 32, 10, 106, 33, 10, 11, 32, 5, 11, 33, 11, 32, 1, 32, 1, 40, 2, 228, 128, 4, 34, 5, 65, 128, 128, 2, 32, 10, 107, 34, 4, 32, 4, 32, 5, 75, 27, 34, 27, 54, 2, 228, 128, 4, 32, 10, 65, 129, 2, 77, 4, 64, 32, 1, 45, 0, 198, 128, 4, 69, 13, 1, 11, 32, 16, 65, 255, 255, 1, 113, 33, 7, 32, 3, 65, 2, 32, 3, 27, 33, 9, 2, 64, 2, 64, 32, 1, 40, 2, 144, 128, 4, 34, 23, 65, 128, 128, 36, 113, 4, 64, 65, 0, 33, 4, 32, 27, 69, 32, 23, 65, 128, 128, 32, 113, 114, 13, 17, 32, 7, 32, 10, 106, 34, 5, 32, 10, 73, 13, 14, 32, 5, 65, 131, 130, 2, 79, 13, 15, 32, 10, 13, 1, 12, 2, 11, 65, 0, 33, 4, 32, 10, 65, 130, 2, 32, 10, 65, 130, 2, 73, 27, 34, 15, 32, 9, 65, 1, 32, 9, 65, 1, 75, 27, 34, 9, 77, 13, 16, 32, 7, 32, 9, 106, 34, 6, 65, 127, 106, 34, 5, 65, 129, 130, 2, 75, 13, 5, 32, 5, 65, 129, 130, 2, 70, 13, 6, 32, 31, 32, 9, 65, 31, 75, 65, 2, 116, 106, 40, 2, 0, 65, 127, 106, 34, 28, 69, 13, 16, 32, 14, 40, 2, 0, 34, 20, 32, 7, 106, 34, 29, 65, 128, 128, 8, 106, 47, 0, 0, 33, 32, 32, 20, 65, 128, 128, 8, 106, 34, 25, 32, 6, 106, 45, 0, 0, 65, 8, 116, 32, 5, 32, 25, 106, 45, 0, 0, 114, 33, 30, 32, 20, 65, 130, 128, 8, 106, 33, 33, 65, 128, 130, 2, 32, 7, 107, 65, 248, 255, 3, 113, 33, 34, 32, 7, 33, 5, 3, 64, 65, 4, 33, 8, 2, 64, 3, 64, 32, 8, 65, 127, 106, 34, 8, 69, 13, 1, 32, 20, 32, 5, 65, 1, 116, 106, 47, 1, 0, 34, 22, 69, 13, 19, 32, 16, 32, 22, 107, 65, 255, 255, 3, 113, 34, 12, 32, 27, 75, 13, 19, 32, 22, 65, 255, 255, 1, 113, 34, 5, 32, 9, 106, 34, 21, 65, 127, 106, 34, 6, 65, 129, 130, 2, 75, 13, 10, 32, 6, 65, 129, 130, 2, 70, 13, 11, 32, 6, 32, 25, 106, 45, 0, 0, 32, 21, 32, 25, 106, 45, 0, 0, 65, 8, 116, 114, 32, 30, 71, 13, 0, 11, 32, 12, 69, 13, 18, 32, 5, 32, 20, 106, 65, 128, 128, 8, 106, 47, 0, 0, 32, 32, 71, 13, 0, 32, 5, 32, 33, 106, 33, 21, 65, 128, 130, 2, 32, 5, 107, 65, 248, 255, 3, 113, 65, 8, 106, 33, 35, 65, 0, 33, 6, 3, 64, 32, 6, 65, 128, 2, 70, 13, 18, 32, 6, 32, 34, 70, 13, 12, 32, 35, 32, 6, 65, 8, 106, 34, 8, 70, 13, 13, 32, 6, 32, 21, 106, 32, 6, 32, 29, 106, 33, 37, 32, 8, 33, 6, 41, 0, 0, 32, 37, 65, 130, 128, 8, 106, 41, 0, 0, 133, 34, 38, 80, 13, 0, 11, 32, 38, 122, 167, 34, 22, 65, 3, 118, 34, 21, 32, 8, 106, 65, 122, 106, 34, 6, 32, 9, 77, 13, 0, 32, 15, 32, 6, 77, 13, 17, 32, 7, 32, 21, 106, 32, 8, 106, 34, 4, 65, 121, 106, 65, 129, 130, 2, 75, 13, 13, 32, 4, 65, 248, 253, 125, 106, 69, 13, 14, 32, 21, 32, 29, 106, 32, 8, 106, 65, 249, 255, 7, 106, 47, 0, 0, 33, 30, 32, 6, 33, 9, 32, 12, 33, 4, 11, 32, 28, 65, 127, 106, 34, 28, 13, 0, 11, 12, 16, 11, 32, 14, 40, 2, 0, 34, 5, 32, 16, 65, 127, 106, 65, 255, 255, 1, 113, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 9, 32, 5, 32, 7, 106, 65, 128, 128, 8, 106, 33, 5, 3, 64, 32, 4, 32, 5, 106, 45, 0, 0, 32, 9, 71, 13, 1, 32, 10, 32, 4, 65, 1, 106, 34, 4, 71, 13, 0, 11, 32, 10, 33, 4, 11, 65, 0, 32, 4, 32, 4, 65, 3, 73, 27, 33, 9, 32, 4, 65, 2, 75, 33, 4, 12, 14, 11, 32, 1, 32, 16, 54, 2, 224, 128, 4, 32, 1, 32, 10, 54, 2, 220, 128, 4, 32, 1, 32, 11, 54, 2, 172, 128, 4, 32, 1, 32, 19, 58, 0, 197, 128, 4, 32, 1, 32, 3, 54, 2, 156, 128, 4, 32, 1, 32, 17, 54, 2, 152, 128, 4, 12, 17, 11, 32, 11, 32, 5, 65, 232, 173, 192, 0, 16, 100, 0, 11, 32, 5, 32, 18, 65, 232, 173, 192, 0, 16, 99, 0, 11, 32, 5, 65, 130, 130, 2, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 6, 65, 130, 130, 2, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 6, 65, 130, 130, 2, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 21, 65, 130, 130, 2, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 16, 65, 255, 255, 1, 113, 32, 6, 106, 65, 10, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 32, 22, 65, 255, 255, 1, 113, 32, 6, 106, 65, 10, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 32, 16, 65, 255, 255, 1, 113, 32, 22, 65, 3, 118, 106, 32, 8, 106, 65, 121, 106, 65, 130, 130, 2, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 16, 65, 255, 255, 1, 113, 32, 22, 65, 3, 118, 106, 32, 8, 106, 65, 122, 106, 65, 130, 130, 2, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 7, 32, 5, 65, 248, 173, 192, 0, 16, 100, 0, 11, 32, 5, 65, 130, 130, 2, 65, 248, 173, 192, 0, 16, 99, 0, 11, 32, 15, 33, 9, 32, 12, 33, 4, 11, 65, 0, 32, 4, 32, 9, 65, 3, 70, 32, 4, 65, 255, 63, 75, 113, 32, 23, 65, 128, 128, 8, 113, 65, 17, 118, 32, 9, 65, 6, 73, 113, 114, 32, 4, 32, 7, 70, 114, 34, 5, 27, 33, 6, 65, 0, 32, 9, 32, 5, 27, 33, 5, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 127, 32, 3, 4, 64, 32, 1, 40, 2, 200, 128, 4, 33, 4, 32, 5, 32, 3, 77, 13, 3, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 3, 65, 128, 128, 4, 79, 13, 26, 32, 1, 32, 3, 106, 65, 16, 106, 32, 19, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 3, 65, 128, 128, 4, 79, 13, 2, 32, 1, 32, 3, 106, 65, 16, 106, 34, 3, 32, 3, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 3, 54, 2, 12, 32, 3, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 3, 54, 2, 4, 32, 1, 32, 3, 65, 1, 106, 54, 2, 0, 11, 32, 4, 32, 19, 65, 1, 116, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 5, 65, 255, 0, 75, 4, 64, 12, 7, 11, 32, 14, 40, 2, 0, 32, 7, 106, 65, 128, 128, 8, 106, 45, 0, 0, 12, 1, 11, 2, 64, 32, 6, 4, 64, 32, 23, 65, 128, 128, 4, 113, 32, 5, 65, 255, 0, 75, 114, 69, 4, 64, 32, 1, 45, 0, 196, 128, 4, 69, 13, 2, 11, 12, 7, 11, 32, 14, 40, 2, 0, 32, 7, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 3, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 5, 65, 128, 128, 4, 79, 13, 4, 32, 1, 40, 2, 200, 128, 4, 32, 1, 32, 5, 106, 65, 16, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 5, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 5, 106, 65, 16, 106, 34, 5, 32, 5, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 5, 54, 2, 12, 32, 5, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 5, 54, 2, 4, 32, 1, 32, 5, 65, 1, 106, 54, 2, 0, 11, 65, 1, 33, 4, 32, 3, 65, 1, 116, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 65, 0, 12, 7, 11, 32, 14, 40, 2, 0, 32, 7, 106, 65, 128, 128, 8, 106, 45, 0, 0, 11, 33, 19, 65, 1, 33, 4, 32, 6, 33, 17, 32, 5, 12, 5, 11, 32, 3, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 32, 3, 32, 17, 16, 35, 32, 3, 65, 127, 106, 33, 4, 65, 0, 12, 3, 11, 32, 5, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 5, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 1, 40, 2, 200, 128, 4, 32, 1, 32, 5, 32, 6, 16, 35, 32, 5, 33, 4, 65, 0, 11, 33, 3, 32, 10, 32, 4, 73, 13, 1, 32, 4, 32, 16, 106, 33, 16, 32, 1, 32, 1, 40, 2, 228, 128, 4, 32, 4, 106, 34, 5, 65, 128, 128, 2, 32, 5, 65, 128, 128, 2, 73, 27, 54, 2, 228, 128, 4, 32, 10, 32, 4, 107, 33, 10, 32, 1, 40, 2, 0, 33, 5, 2, 64, 32, 1, 40, 2, 8, 34, 4, 65, 129, 248, 1, 79, 4, 64, 32, 5, 65, 248, 255, 3, 75, 32, 5, 65, 243, 0, 108, 65, 7, 118, 32, 4, 79, 114, 13, 1, 32, 1, 40, 2, 144, 128, 4, 65, 128, 128, 32, 113, 69, 13, 2, 12, 1, 11, 32, 5, 65, 249, 255, 3, 73, 13, 1, 11, 32, 1, 32, 16, 54, 2, 224, 128, 4, 32, 1, 32, 10, 54, 2, 220, 128, 4, 32, 1, 32, 11, 54, 2, 172, 128, 4, 32, 13, 65, 24, 106, 32, 1, 32, 2, 65, 0, 16, 5, 65, 127, 32, 13, 40, 2, 28, 32, 13, 40, 2, 24, 27, 34, 5, 69, 13, 0, 11, 32, 1, 32, 3, 54, 2, 156, 128, 4, 32, 1, 32, 17, 54, 2, 152, 128, 4, 32, 1, 32, 19, 58, 0, 197, 128, 4, 32, 5, 65, 0, 74, 13, 2, 32, 1, 40, 2, 172, 128, 4, 33, 5, 12, 15, 11, 65, 136, 174, 192, 0, 65, 47, 65, 184, 174, 192, 0, 16, 114, 0, 11, 32, 2, 40, 2, 0, 34, 16, 69, 13, 1, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 34, 11, 65, 255, 255, 1, 113, 33, 9, 32, 2, 40, 2, 4, 33, 10, 32, 1, 40, 2, 220, 128, 4, 33, 3, 32, 1, 65, 212, 128, 4, 106, 33, 17, 65, 0, 33, 5, 3, 64, 2, 64, 2, 64, 32, 10, 32, 5, 77, 4, 64, 32, 3, 69, 13, 1, 32, 1, 45, 0, 198, 128, 4, 69, 13, 1, 11, 65, 128, 32, 32, 3, 107, 34, 4, 32, 10, 32, 5, 107, 34, 6, 32, 6, 32, 4, 75, 27, 34, 4, 4, 64, 32, 3, 32, 11, 106, 33, 12, 32, 5, 33, 8, 32, 4, 33, 6, 3, 64, 32, 6, 65, 128, 128, 2, 32, 12, 65, 255, 255, 1, 113, 34, 15, 107, 34, 5, 32, 5, 32, 6, 75, 27, 34, 7, 32, 15, 106, 34, 12, 65, 131, 130, 2, 79, 13, 17, 32, 7, 32, 8, 106, 34, 5, 32, 7, 73, 13, 16, 32, 10, 32, 5, 73, 13, 15, 32, 17, 40, 2, 0, 32, 15, 106, 65, 128, 128, 8, 106, 32, 8, 32, 16, 106, 34, 19, 32, 7, 16, 121, 26, 32, 15, 65, 128, 2, 77, 4, 64, 65, 129, 2, 32, 15, 107, 34, 14, 32, 7, 32, 7, 32, 14, 75, 27, 34, 14, 32, 15, 65, 128, 128, 2, 114, 34, 18, 106, 34, 15, 65, 131, 130, 2, 79, 13, 15, 32, 8, 32, 14, 106, 34, 15, 32, 14, 73, 13, 14, 32, 10, 32, 15, 73, 13, 13, 32, 17, 40, 2, 0, 32, 18, 106, 65, 128, 128, 8, 106, 32, 19, 32, 14, 16, 121, 26, 11, 32, 5, 33, 8, 32, 6, 32, 7, 107, 34, 6, 13, 0, 11, 11, 32, 1, 32, 1, 40, 2, 228, 128, 4, 34, 6, 65, 128, 128, 2, 32, 3, 32, 4, 106, 34, 12, 107, 34, 3, 32, 3, 32, 6, 75, 27, 54, 2, 228, 128, 4, 32, 12, 65, 255, 31, 75, 13, 1, 32, 1, 45, 0, 198, 128, 4, 13, 1, 32, 12, 33, 3, 11, 32, 1, 32, 11, 54, 2, 224, 128, 4, 32, 1, 32, 3, 54, 2, 220, 128, 4, 32, 1, 32, 5, 54, 2, 172, 128, 4, 12, 2, 11, 2, 64, 32, 12, 65, 4, 79, 4, 64, 3, 64, 32, 17, 40, 2, 0, 34, 3, 32, 3, 32, 9, 65, 255, 255, 1, 113, 106, 65, 128, 128, 8, 106, 40, 0, 0, 34, 6, 65, 255, 255, 255, 7, 113, 34, 3, 65, 17, 118, 32, 6, 65, 255, 31, 113, 115, 65, 1, 116, 106, 65, 128, 128, 4, 106, 34, 4, 47, 1, 0, 33, 8, 32, 4, 32, 11, 59, 1, 0, 2, 64, 32, 11, 32, 8, 107, 34, 15, 65, 255, 255, 3, 113, 34, 7, 32, 1, 40, 2, 228, 128, 4, 75, 13, 0, 2, 64, 2, 64, 32, 3, 32, 17, 40, 2, 0, 34, 4, 32, 8, 65, 255, 255, 1, 113, 34, 3, 106, 65, 128, 128, 8, 106, 40, 0, 0, 65, 255, 255, 255, 7, 113, 70, 4, 64, 32, 4, 65, 131, 128, 8, 106, 34, 4, 32, 3, 106, 33, 14, 32, 4, 32, 9, 106, 33, 19, 65, 255, 129, 2, 32, 3, 107, 65, 248, 255, 3, 113, 65, 8, 106, 33, 18, 65, 0, 33, 3, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 32, 3, 65, 128, 2, 70, 4, 64, 65, 130, 2, 33, 3, 32, 7, 13, 6, 12, 2, 11, 32, 3, 32, 9, 106, 34, 4, 65, 3, 106, 65, 120, 79, 13, 2, 32, 4, 65, 11, 106, 65, 131, 130, 2, 79, 13, 3, 32, 18, 32, 3, 65, 8, 106, 34, 4, 70, 13, 4, 32, 3, 32, 19, 106, 33, 20, 32, 3, 32, 14, 106, 32, 4, 33, 3, 41, 0, 0, 32, 20, 41, 0, 0, 133, 34, 38, 80, 13, 0, 11, 32, 38, 122, 167, 65, 3, 118, 32, 4, 106, 34, 4, 65, 123, 106, 34, 3, 65, 3, 73, 13, 0, 32, 4, 65, 120, 106, 32, 7, 65, 128, 192, 0, 73, 114, 13, 4, 11, 32, 1, 40, 2, 0, 34, 3, 65, 128, 128, 4, 79, 13, 27, 32, 1, 32, 3, 106, 65, 16, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 73, 13, 5, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 3, 106, 32, 4, 65, 11, 106, 65, 212, 153, 192, 0, 16, 100, 0, 11, 32, 4, 65, 11, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 32, 8, 65, 255, 255, 1, 113, 32, 3, 106, 65, 11, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 40, 2, 0, 34, 4, 65, 128, 128, 4, 73, 4, 64, 32, 1, 32, 4, 106, 65, 16, 106, 32, 12, 32, 3, 32, 3, 32, 12, 75, 27, 34, 3, 65, 125, 106, 34, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 4, 65, 128, 128, 4, 79, 13, 1, 32, 1, 32, 4, 106, 65, 16, 106, 32, 15, 65, 127, 106, 34, 4, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 8, 54, 2, 0, 32, 8, 65, 128, 128, 4, 79, 13, 2, 32, 1, 32, 8, 106, 65, 16, 106, 32, 4, 65, 128, 254, 3, 113, 65, 8, 118, 34, 8, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 7, 65, 128, 128, 4, 79, 13, 3, 32, 1, 32, 7, 106, 65, 16, 106, 34, 7, 32, 7, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 40, 2, 4, 34, 7, 65, 128, 128, 4, 79, 13, 4, 32, 1, 32, 7, 106, 65, 16, 106, 34, 7, 32, 7, 45, 0, 0, 65, 128, 1, 114, 58, 0, 0, 2, 64, 2, 64, 2, 127, 32, 4, 65, 255, 255, 3, 113, 34, 7, 65, 128, 4, 79, 4, 64, 32, 4, 65, 16, 116, 65, 16, 117, 65, 127, 76, 13, 2, 32, 8, 65, 136, 169, 192, 0, 106, 12, 1, 11, 32, 7, 65, 136, 161, 192, 0, 106, 11, 33, 4, 32, 1, 40, 2, 200, 128, 4, 32, 4, 45, 0, 0, 65, 1, 116, 106, 65, 192, 4, 106, 34, 4, 32, 4, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 255, 1, 75, 13, 1, 32, 6, 65, 1, 116, 65, 164, 154, 192, 0, 106, 47, 1, 0, 34, 4, 65, 160, 2, 73, 13, 9, 32, 4, 65, 160, 2, 65, 168, 175, 192, 0, 16, 98, 0, 11, 32, 8, 65, 128, 1, 65, 136, 175, 192, 0, 16, 98, 0, 11, 32, 6, 65, 128, 2, 65, 152, 175, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 8, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 7, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 7, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 1, 40, 2, 0, 34, 3, 65, 128, 128, 4, 79, 13, 22, 32, 1, 32, 3, 106, 65, 16, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 73, 13, 0, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 65, 1, 33, 3, 32, 1, 32, 4, 106, 65, 16, 106, 34, 4, 32, 4, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 6, 65, 255, 1, 113, 33, 4, 11, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 1, 116, 106, 34, 4, 32, 4, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 4, 54, 2, 12, 2, 64, 32, 4, 4, 64, 32, 1, 40, 2, 0, 33, 4, 12, 1, 11, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 4, 54, 2, 4, 32, 1, 32, 4, 65, 1, 106, 34, 4, 54, 2, 0, 11, 32, 1, 32, 1, 40, 2, 8, 32, 3, 106, 54, 2, 8, 32, 1, 32, 1, 40, 2, 228, 128, 4, 32, 3, 106, 34, 6, 65, 128, 128, 2, 32, 6, 65, 128, 128, 2, 73, 27, 54, 2, 228, 128, 4, 32, 12, 32, 3, 107, 33, 12, 32, 3, 32, 11, 106, 33, 11, 32, 3, 32, 9, 106, 65, 255, 255, 1, 113, 33, 9, 32, 4, 65, 249, 255, 3, 73, 13, 0, 32, 1, 32, 11, 54, 2, 224, 128, 4, 32, 1, 32, 12, 54, 2, 220, 128, 4, 32, 13, 65, 16, 106, 32, 1, 32, 2, 65, 0, 16, 5, 32, 13, 40, 2, 16, 13, 7, 32, 13, 40, 2, 20, 34, 3, 13, 3, 32, 1, 40, 2, 224, 128, 4, 33, 11, 32, 1, 40, 2, 220, 128, 4, 33, 12, 11, 32, 12, 65, 3, 75, 13, 0, 11, 11, 65, 0, 33, 3, 32, 12, 69, 13, 1, 3, 64, 32, 17, 40, 2, 0, 32, 9, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 4, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 6, 65, 128, 128, 4, 79, 13, 6, 32, 1, 32, 6, 106, 65, 16, 106, 32, 4, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 6, 65, 128, 128, 4, 79, 13, 7, 32, 1, 32, 6, 106, 65, 16, 106, 34, 6, 32, 6, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 6, 54, 2, 12, 32, 6, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 6, 54, 2, 4, 32, 1, 32, 6, 65, 1, 106, 54, 2, 0, 11, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 1, 116, 106, 34, 4, 32, 4, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 1, 32, 1, 40, 2, 228, 128, 4, 65, 1, 106, 34, 4, 65, 128, 128, 2, 32, 4, 65, 128, 128, 2, 73, 27, 54, 2, 228, 128, 4, 32, 12, 65, 127, 106, 33, 12, 32, 11, 65, 1, 106, 33, 11, 32, 1, 40, 2, 0, 65, 249, 255, 3, 79, 4, 64, 32, 1, 32, 11, 54, 2, 224, 128, 4, 32, 1, 32, 12, 54, 2, 220, 128, 4, 32, 13, 65, 8, 106, 32, 1, 32, 2, 65, 0, 16, 5, 32, 13, 40, 2, 8, 13, 9, 32, 13, 40, 2, 12, 34, 4, 4, 64, 32, 1, 32, 5, 54, 2, 172, 128, 4, 32, 4, 65, 0, 76, 13, 18, 12, 5, 11, 32, 1, 40, 2, 220, 128, 4, 33, 12, 32, 1, 40, 2, 224, 128, 4, 33, 11, 11, 32, 9, 65, 1, 106, 65, 255, 255, 1, 113, 33, 9, 32, 12, 13, 0, 11, 12, 1, 11, 11, 32, 1, 32, 5, 54, 2, 172, 128, 4, 32, 3, 65, 0, 76, 13, 13, 11, 32, 2, 40, 2, 0, 34, 5, 69, 13, 0, 32, 24, 65, 1, 106, 45, 0, 0, 65, 48, 113, 69, 13, 0, 32, 2, 40, 2, 4, 34, 4, 32, 1, 40, 2, 172, 128, 4, 34, 3, 73, 13, 5, 32, 13, 32, 1, 40, 2, 168, 128, 4, 34, 4, 65, 16, 118, 59, 1, 34, 32, 13, 32, 4, 59, 1, 32, 32, 13, 65, 32, 106, 32, 5, 32, 3, 16, 30, 32, 1, 32, 13, 40, 2, 32, 54, 2, 168, 128, 4, 11, 2, 64, 32, 1, 45, 0, 198, 128, 4, 34, 3, 69, 13, 0, 32, 1, 40, 2, 172, 128, 4, 32, 2, 40, 2, 4, 65, 0, 32, 2, 40, 2, 0, 27, 71, 13, 0, 32, 1, 65, 220, 128, 4, 106, 40, 2, 0, 32, 1, 40, 2, 164, 128, 4, 114, 13, 0, 32, 13, 32, 1, 32, 2, 32, 3, 16, 5, 32, 13, 40, 2, 0, 4, 64, 32, 1, 65, 127, 54, 2, 180, 128, 4, 32, 0, 65, 127, 54, 2, 0, 32, 0, 32, 1, 41, 2, 172, 128, 4, 55, 2, 4, 12, 14, 11, 32, 13, 40, 2, 4, 65, 127, 76, 4, 64, 32, 0, 32, 1, 40, 2, 176, 128, 4, 54, 2, 8, 32, 0, 32, 1, 40, 2, 172, 128, 4, 54, 2, 4, 32, 0, 32, 1, 40, 2, 180, 128, 4, 54, 2, 0, 12, 14, 11, 32, 1, 32, 1, 45, 0, 198, 128, 4, 34, 3, 65, 4, 70, 58, 0, 199, 128, 4, 32, 3, 65, 3, 71, 13, 0, 32, 1, 65, 212, 128, 4, 106, 34, 3, 40, 2, 0, 65, 128, 128, 4, 106, 65, 0, 65, 128, 128, 4, 16, 131, 1, 26, 32, 3, 40, 2, 0, 65, 0, 65, 128, 128, 4, 16, 131, 1, 26, 32, 1, 65, 228, 128, 4, 106, 65, 0, 54, 2, 0, 11, 32, 13, 65, 32, 106, 32, 2, 32, 24, 16, 67, 32, 1, 32, 13, 40, 2, 32, 54, 2, 180, 128, 4, 32, 0, 32, 13, 41, 3, 32, 55, 2, 0, 32, 0, 65, 8, 106, 32, 13, 65, 40, 106, 40, 2, 0, 54, 2, 0, 12, 12, 11, 32, 1, 65, 127, 54, 2, 180, 128, 4, 32, 1, 32, 5, 54, 2, 172, 128, 4, 12, 10, 11, 32, 6, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 6, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 1, 32, 5, 54, 2, 172, 128, 4, 32, 1, 65, 127, 54, 2, 180, 128, 4, 12, 7, 11, 32, 3, 32, 4, 65, 216, 175, 192, 0, 16, 99, 0, 11, 32, 15, 32, 10, 65, 248, 174, 192, 0, 16, 99, 0, 11, 32, 8, 32, 15, 65, 248, 174, 192, 0, 16, 100, 0, 11, 32, 15, 65, 130, 130, 2, 65, 232, 174, 192, 0, 16, 99, 0, 11, 32, 5, 32, 10, 65, 216, 174, 192, 0, 16, 99, 0, 11, 32, 8, 32, 5, 65, 216, 174, 192, 0, 16, 100, 0, 11, 32, 12, 65, 130, 130, 2, 65, 200, 174, 192, 0, 16, 99, 0, 11, 32, 0, 32, 5, 54, 2, 4, 32, 0, 32, 1, 40, 2, 176, 128, 4, 54, 2, 8, 32, 0, 32, 1, 40, 2, 180, 128, 4, 54, 2, 0, 11, 32, 13, 65, 48, 106, 36, 0, 15, 11, 32, 3, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 220, 26, 1, 9, 127, 35, 0, 65, 32, 107, 34, 4, 36, 0, 65, 1, 33, 5, 32, 1, 65, 192, 128, 4, 106, 40, 2, 0, 33, 8, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 16, 65, 1, 71, 13, 0, 32, 2, 65, 24, 106, 40, 2, 0, 34, 7, 32, 1, 65, 176, 128, 4, 106, 40, 2, 0, 34, 6, 107, 65, 204, 153, 5, 73, 13, 0, 32, 6, 65, 188, 153, 5, 106, 33, 8, 32, 6, 65, 196, 230, 122, 79, 13, 1, 32, 7, 32, 8, 73, 13, 2, 32, 2, 65, 20, 106, 40, 2, 0, 32, 6, 106, 33, 8, 65, 0, 33, 5, 11, 32, 4, 32, 5, 58, 0, 28, 32, 4, 66, 188, 153, 5, 55, 2, 12, 32, 4, 32, 8, 54, 2, 8, 32, 4, 32, 1, 65, 184, 128, 4, 106, 40, 2, 0, 34, 9, 54, 2, 20, 32, 4, 32, 1, 65, 188, 128, 4, 106, 40, 2, 0, 34, 6, 54, 2, 24, 32, 1, 65, 146, 128, 4, 106, 45, 0, 0, 65, 8, 113, 69, 13, 2, 65, 1, 33, 11, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 32, 1, 65, 216, 128, 4, 106, 40, 2, 0, 107, 32, 1, 65, 228, 128, 4, 106, 40, 2, 0, 75, 13, 2, 12, 3, 11, 32, 6, 32, 8, 65, 212, 147, 192, 0, 16, 100, 0, 11, 32, 8, 32, 7, 65, 212, 147, 192, 0, 16, 99, 0, 11, 65, 0, 33, 11, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 164, 128, 4, 106, 40, 2, 0, 69, 4, 64, 32, 1, 65, 160, 128, 4, 106, 66, 0, 55, 2, 0, 32, 1, 40, 2, 4, 34, 5, 65, 128, 128, 4, 79, 13, 1, 32, 1, 32, 5, 106, 65, 16, 106, 33, 5, 2, 64, 32, 1, 40, 2, 12, 34, 7, 65, 8, 70, 4, 64, 32, 5, 65, 0, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 127, 106, 54, 2, 0, 12, 1, 11, 32, 5, 32, 5, 45, 0, 0, 32, 7, 65, 7, 113, 118, 58, 0, 0, 11, 65, 0, 33, 5, 2, 64, 32, 1, 40, 2, 144, 128, 4, 34, 10, 65, 128, 32, 113, 69, 13, 0, 32, 1, 65, 148, 128, 4, 106, 40, 2, 0, 13, 0, 32, 4, 32, 6, 65, 8, 106, 34, 7, 54, 2, 24, 32, 4, 65, 248, 0, 32, 6, 65, 31, 113, 116, 32, 9, 114, 34, 9, 54, 2, 20, 32, 10, 65, 255, 31, 113, 34, 5, 65, 1, 75, 65, 3, 65, 2, 32, 5, 65, 255, 5, 75, 27, 32, 10, 65, 128, 128, 1, 113, 27, 65, 6, 116, 34, 10, 65, 128, 240, 1, 114, 65, 31, 112, 33, 12, 65, 0, 33, 5, 2, 64, 32, 6, 65, 119, 75, 13, 0, 32, 8, 32, 9, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 9, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 8, 73, 13, 0, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 21, 32, 4, 40, 2, 8, 32, 5, 106, 32, 9, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 9, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 32, 7, 65, 8, 106, 34, 6, 54, 2, 24, 32, 4, 32, 10, 32, 12, 114, 65, 31, 115, 32, 7, 65, 31, 113, 116, 32, 9, 114, 34, 9, 54, 2, 20, 32, 7, 65, 119, 75, 13, 0, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 20, 32, 4, 40, 2, 8, 32, 5, 106, 32, 9, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 9, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 11, 65, 1, 33, 8, 32, 4, 32, 6, 65, 1, 106, 34, 7, 54, 2, 24, 32, 4, 32, 3, 65, 255, 1, 113, 65, 4, 70, 32, 6, 65, 31, 113, 116, 32, 9, 114, 34, 6, 54, 2, 20, 32, 7, 65, 8, 79, 4, 64, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 7, 79, 13, 4, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 45, 0, 28, 33, 9, 32, 11, 69, 4, 64, 65, 0, 33, 8, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 8, 106, 32, 1, 32, 1, 40, 2, 144, 128, 4, 65, 128, 128, 16, 113, 65, 18, 118, 32, 1, 40, 2, 8, 65, 48, 73, 114, 16, 3, 65, 255, 1, 113, 65, 2, 70, 13, 6, 11, 32, 1, 40, 2, 8, 34, 10, 65, 32, 77, 13, 3, 32, 4, 40, 2, 16, 32, 5, 107, 65, 1, 106, 32, 10, 73, 13, 3, 32, 11, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 32, 1, 65, 216, 128, 4, 106, 40, 2, 0, 107, 32, 1, 65, 228, 128, 4, 106, 40, 2, 0, 77, 114, 69, 13, 4, 12, 6, 11, 65, 184, 171, 192, 0, 65, 47, 65, 232, 171, 192, 0, 16, 114, 0, 11, 32, 5, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 11, 13, 2, 11, 32, 8, 69, 13, 2, 32, 4, 32, 9, 58, 0, 28, 32, 4, 32, 7, 54, 2, 24, 32, 4, 32, 6, 54, 2, 20, 32, 4, 32, 5, 54, 2, 16, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 8, 106, 32, 1, 65, 1, 16, 3, 65, 255, 1, 113, 65, 2, 71, 13, 2, 11, 65, 1, 33, 5, 12, 11, 11, 32, 4, 32, 9, 58, 0, 28, 32, 4, 32, 5, 54, 2, 16, 32, 4, 32, 6, 54, 2, 20, 32, 4, 32, 7, 65, 2, 106, 54, 2, 24, 2, 64, 2, 64, 32, 7, 65, 6, 73, 13, 0, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 8, 79, 13, 15, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 8, 54, 2, 24, 32, 8, 65, 7, 75, 13, 0, 11, 32, 8, 13, 0, 65, 0, 33, 7, 12, 1, 11, 32, 4, 65, 8, 54, 2, 24, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 8, 79, 13, 14, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 32, 7, 65, 16, 106, 54, 2, 24, 32, 4, 32, 1, 47, 1, 8, 32, 7, 116, 32, 6, 114, 34, 6, 54, 2, 20, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 8, 79, 13, 13, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 7, 65, 120, 106, 34, 8, 54, 2, 24, 32, 8, 65, 7, 75, 13, 0, 11, 32, 4, 32, 7, 65, 8, 106, 54, 2, 24, 32, 4, 32, 1, 47, 1, 8, 65, 255, 255, 3, 115, 32, 8, 116, 32, 6, 114, 34, 7, 54, 2, 20, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 12, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 32, 1, 40, 2, 8, 34, 11, 69, 13, 0, 65, 0, 33, 9, 3, 64, 32, 1, 40, 2, 212, 128, 4, 32, 1, 40, 2, 216, 128, 4, 32, 9, 106, 65, 255, 255, 1, 113, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 10, 32, 4, 32, 6, 65, 8, 106, 34, 8, 54, 2, 24, 32, 4, 32, 10, 32, 6, 65, 31, 113, 116, 32, 7, 114, 34, 7, 54, 2, 20, 2, 64, 32, 6, 65, 119, 75, 4, 64, 32, 8, 33, 6, 12, 1, 11, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 14, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 11, 32, 9, 65, 1, 106, 34, 9, 32, 11, 71, 13, 0, 11, 11, 32, 3, 65, 255, 1, 113, 34, 6, 69, 13, 1, 32, 4, 40, 2, 24, 33, 3, 32, 6, 65, 4, 71, 13, 0, 2, 64, 32, 3, 69, 4, 64, 65, 0, 33, 6, 12, 1, 11, 32, 4, 65, 8, 54, 2, 24, 32, 4, 40, 2, 16, 33, 5, 32, 4, 40, 2, 20, 33, 7, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 14, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 11, 32, 1, 65, 145, 128, 4, 106, 45, 0, 0, 65, 16, 113, 69, 13, 1, 32, 4, 32, 6, 65, 8, 106, 54, 2, 24, 32, 4, 32, 4, 40, 2, 20, 32, 1, 65, 168, 128, 4, 106, 40, 2, 0, 34, 3, 65, 24, 118, 32, 6, 116, 114, 34, 7, 54, 2, 20, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 8, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 32, 4, 32, 8, 54, 2, 24, 32, 4, 32, 3, 65, 16, 118, 65, 255, 1, 113, 32, 6, 116, 32, 7, 114, 34, 7, 54, 2, 20, 32, 3, 65, 255, 1, 113, 33, 8, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 9, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 32, 4, 32, 9, 54, 2, 24, 32, 4, 32, 3, 65, 8, 118, 65, 255, 1, 113, 32, 6, 116, 32, 7, 114, 34, 7, 54, 2, 20, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 6, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 0, 11, 32, 4, 32, 6, 54, 2, 24, 32, 4, 32, 8, 32, 3, 116, 32, 7, 114, 34, 7, 54, 2, 20, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 0, 11, 12, 1, 11, 32, 4, 32, 3, 65, 3, 106, 34, 7, 54, 2, 24, 32, 4, 40, 2, 20, 33, 6, 32, 7, 65, 8, 79, 4, 64, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 13, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 2, 127, 32, 7, 69, 4, 64, 32, 4, 40, 2, 16, 33, 5, 65, 16, 12, 1, 11, 32, 4, 65, 8, 54, 2, 24, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 13, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 3, 65, 120, 106, 34, 8, 54, 2, 24, 32, 8, 65, 7, 75, 13, 0, 11, 32, 3, 65, 8, 106, 11, 54, 2, 24, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 12, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 8, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 0, 11, 32, 4, 32, 8, 65, 8, 106, 54, 2, 24, 32, 4, 65, 255, 255, 3, 32, 3, 116, 32, 6, 114, 34, 6, 54, 2, 20, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 73, 4, 64, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 1, 12, 2, 11, 11, 12, 11, 11, 65, 0, 33, 5, 32, 1, 40, 2, 200, 128, 4, 65, 0, 65, 192, 4, 16, 131, 1, 26, 32, 1, 40, 2, 200, 128, 4, 65, 192, 4, 106, 65, 0, 65, 192, 0, 16, 131, 1, 26, 32, 1, 65, 8, 54, 2, 12, 32, 1, 66, 1, 55, 2, 0, 32, 1, 40, 2, 8, 33, 3, 32, 1, 65, 0, 54, 2, 8, 32, 1, 32, 4, 41, 2, 20, 55, 2, 184, 128, 4, 32, 1, 65, 216, 128, 4, 106, 34, 6, 32, 3, 32, 6, 40, 2, 0, 106, 54, 2, 0, 32, 1, 65, 148, 128, 4, 106, 34, 3, 32, 3, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 40, 2, 16, 34, 3, 69, 4, 64, 32, 1, 40, 2, 164, 128, 4, 33, 6, 12, 8, 11, 32, 4, 45, 0, 28, 33, 6, 32, 2, 40, 2, 8, 34, 8, 4, 64, 32, 8, 32, 1, 65, 172, 128, 4, 106, 40, 2, 0, 54, 2, 0, 11, 32, 2, 40, 2, 16, 65, 1, 70, 4, 64, 32, 6, 69, 13, 4, 32, 2, 65, 24, 106, 40, 2, 0, 34, 7, 32, 1, 40, 2, 176, 128, 4, 34, 8, 107, 34, 6, 32, 3, 32, 6, 32, 3, 73, 34, 9, 27, 34, 6, 32, 8, 106, 34, 5, 32, 6, 73, 13, 1, 32, 7, 32, 5, 73, 13, 2, 32, 6, 65, 205, 153, 5, 79, 13, 3, 32, 2, 40, 2, 20, 32, 8, 106, 32, 1, 40, 2, 192, 128, 4, 32, 6, 16, 121, 26, 32, 1, 32, 1, 40, 2, 176, 128, 4, 32, 6, 106, 54, 2, 176, 128, 4, 32, 9, 69, 13, 6, 32, 1, 32, 6, 54, 2, 160, 128, 4, 32, 1, 32, 3, 32, 6, 107, 54, 2, 164, 128, 4, 12, 6, 11, 32, 3, 65, 205, 153, 5, 79, 13, 4, 32, 2, 40, 2, 20, 32, 1, 40, 2, 192, 128, 4, 32, 3, 32, 2, 65, 24, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 5, 32, 1, 65, 180, 128, 4, 106, 65, 127, 54, 2, 0, 65, 127, 12, 6, 11, 32, 8, 32, 5, 65, 180, 147, 192, 0, 16, 100, 0, 11, 32, 5, 32, 7, 65, 180, 147, 192, 0, 16, 99, 0, 11, 32, 6, 65, 204, 153, 5, 65, 196, 147, 192, 0, 16, 99, 0, 11, 32, 1, 32, 1, 40, 2, 176, 128, 4, 32, 3, 106, 54, 2, 176, 128, 4, 32, 1, 40, 2, 164, 128, 4, 12, 2, 11, 32, 3, 65, 204, 153, 5, 65, 164, 147, 192, 0, 16, 99, 0, 11, 32, 1, 40, 2, 164, 128, 4, 11, 33, 6, 65, 0, 33, 5, 11, 32, 0, 32, 6, 54, 2, 4, 32, 0, 32, 5, 54, 2, 0, 32, 4, 65, 32, 106, 36, 0, 15, 11, 32, 5, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 5, 32, 8, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 5, 32, 3, 65, 164, 148, 192, 0, 16, 98, 0, 11, 130, 22, 1, 14, 127, 35, 0, 65, 144, 44, 107, 34, 10, 36, 0, 32, 10, 65, 8, 106, 65, 0, 65, 132, 1, 16, 131, 1, 26, 32, 10, 65, 140, 1, 106, 65, 0, 65, 132, 1, 16, 131, 1, 26, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 65, 1, 65, 2, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 69, 4, 64, 32, 10, 65, 144, 2, 106, 65, 0, 65, 128, 9, 16, 131, 1, 26, 32, 10, 65, 144, 11, 106, 65, 0, 65, 128, 9, 16, 131, 1, 26, 32, 2, 13, 1, 32, 10, 65, 144, 20, 106, 65, 0, 65, 128, 16, 16, 131, 1, 26, 65, 0, 12, 6, 11, 32, 2, 69, 13, 14, 32, 0, 32, 1, 65, 160, 2, 108, 106, 65, 128, 27, 106, 33, 4, 32, 2, 33, 5, 3, 64, 32, 4, 45, 0, 0, 34, 6, 65, 32, 75, 13, 2, 32, 10, 65, 8, 106, 32, 6, 65, 2, 116, 106, 34, 6, 32, 6, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 1, 106, 33, 4, 32, 5, 65, 127, 106, 34, 5, 13, 0, 11, 12, 14, 11, 32, 0, 32, 1, 65, 192, 4, 108, 106, 33, 5, 65, 0, 33, 4, 3, 64, 32, 4, 65, 160, 2, 70, 13, 2, 32, 5, 47, 1, 0, 34, 8, 4, 64, 32, 6, 65, 159, 2, 75, 13, 4, 32, 10, 65, 144, 2, 106, 32, 6, 65, 2, 116, 106, 34, 14, 32, 4, 59, 1, 2, 32, 14, 32, 8, 59, 1, 0, 32, 6, 65, 1, 106, 33, 6, 11, 32, 5, 65, 2, 106, 33, 5, 32, 4, 65, 1, 106, 34, 4, 32, 2, 71, 13, 0, 11, 12, 3, 11, 32, 6, 65, 33, 65, 212, 150, 192, 0, 16, 98, 0, 11, 65, 160, 2, 65, 160, 2, 65, 228, 150, 192, 0, 16, 98, 0, 11, 32, 6, 65, 160, 2, 65, 244, 150, 192, 0, 16, 98, 0, 11, 32, 6, 65, 161, 2, 79, 13, 1, 65, 0, 33, 14, 32, 10, 65, 144, 20, 106, 65, 0, 65, 128, 16, 16, 131, 1, 26, 65, 0, 32, 6, 69, 13, 0, 26, 32, 6, 65, 2, 116, 33, 5, 32, 10, 65, 144, 2, 106, 33, 4, 3, 64, 32, 10, 65, 144, 20, 106, 32, 4, 45, 0, 0, 65, 2, 116, 106, 34, 8, 32, 8, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 45, 0, 1, 65, 2, 116, 32, 10, 106, 65, 144, 28, 106, 34, 8, 32, 8, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 4, 106, 33, 4, 32, 5, 65, 124, 106, 34, 5, 13, 0, 11, 32, 6, 33, 14, 32, 10, 40, 2, 144, 28, 11, 32, 14, 70, 27, 33, 15, 32, 10, 65, 144, 20, 106, 33, 9, 32, 10, 65, 144, 11, 106, 33, 11, 32, 10, 65, 144, 2, 106, 33, 4, 32, 14, 34, 5, 33, 12, 65, 0, 33, 6, 2, 64, 2, 64, 3, 64, 32, 12, 33, 7, 32, 11, 33, 8, 32, 5, 33, 12, 32, 4, 33, 11, 32, 10, 65, 144, 36, 106, 65, 0, 65, 128, 8, 16, 131, 1, 26, 32, 6, 65, 2, 70, 13, 2, 65, 0, 33, 4, 65, 0, 33, 5, 3, 64, 32, 10, 65, 144, 36, 106, 32, 4, 106, 32, 5, 54, 2, 0, 32, 4, 32, 9, 106, 40, 2, 0, 32, 5, 106, 33, 5, 32, 4, 65, 4, 106, 34, 4, 65, 128, 8, 71, 13, 0, 11, 32, 12, 4, 64, 32, 11, 32, 12, 65, 2, 116, 106, 33, 16, 32, 6, 65, 3, 116, 65, 8, 113, 33, 17, 32, 11, 33, 4, 3, 64, 32, 10, 65, 144, 36, 106, 32, 4, 47, 1, 0, 34, 18, 32, 17, 118, 65, 255, 1, 113, 65, 2, 116, 106, 34, 5, 40, 2, 0, 34, 13, 32, 7, 79, 13, 3, 32, 8, 32, 13, 65, 2, 116, 106, 34, 13, 32, 4, 65, 2, 106, 47, 1, 0, 59, 1, 2, 32, 13, 32, 18, 59, 1, 0, 32, 5, 32, 5, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 4, 106, 34, 4, 32, 16, 71, 13, 0, 11, 11, 32, 9, 65, 128, 8, 106, 33, 9, 32, 8, 33, 4, 32, 7, 33, 5, 32, 6, 65, 1, 106, 34, 13, 33, 6, 32, 13, 32, 15, 71, 13, 0, 11, 2, 64, 32, 7, 14, 2, 7, 4, 0, 11, 32, 8, 32, 8, 47, 1, 0, 32, 8, 47, 1, 4, 106, 59, 1, 0, 32, 7, 65, 127, 106, 34, 4, 65, 2, 79, 4, 64, 32, 8, 65, 4, 106, 33, 6, 65, 0, 33, 5, 65, 2, 33, 11, 65, 2, 33, 9, 3, 64, 32, 11, 65, 127, 106, 33, 12, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 9, 32, 7, 73, 4, 64, 32, 5, 32, 7, 79, 13, 3, 32, 8, 32, 5, 65, 2, 116, 106, 47, 1, 0, 32, 8, 32, 9, 65, 2, 116, 106, 47, 1, 0, 34, 13, 79, 13, 1, 11, 32, 5, 32, 7, 79, 13, 3, 32, 12, 32, 7, 79, 13, 4, 32, 6, 32, 8, 32, 5, 65, 2, 116, 106, 34, 13, 47, 1, 0, 59, 1, 0, 32, 13, 32, 12, 59, 1, 0, 32, 5, 65, 1, 106, 33, 5, 12, 1, 11, 32, 12, 32, 7, 79, 13, 4, 32, 6, 32, 13, 59, 1, 0, 32, 9, 65, 1, 106, 33, 9, 11, 2, 64, 32, 9, 32, 7, 79, 4, 64, 32, 12, 32, 7, 73, 13, 1, 12, 21, 11, 32, 5, 32, 12, 79, 13, 7, 32, 5, 32, 7, 79, 13, 5, 32, 8, 32, 5, 65, 2, 116, 106, 47, 1, 0, 32, 8, 32, 9, 65, 2, 116, 106, 47, 1, 0, 79, 13, 7, 32, 12, 32, 7, 79, 13, 20, 11, 32, 5, 32, 7, 79, 13, 5, 32, 6, 32, 8, 32, 5, 65, 2, 116, 106, 34, 13, 47, 1, 0, 32, 6, 47, 1, 0, 106, 59, 1, 0, 32, 13, 32, 12, 59, 1, 0, 32, 5, 65, 1, 106, 33, 5, 12, 7, 11, 32, 5, 32, 7, 65, 228, 148, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 244, 148, 192, 0, 16, 98, 0, 11, 32, 11, 65, 127, 106, 32, 7, 65, 132, 149, 192, 0, 16, 98, 0, 11, 32, 11, 65, 127, 106, 32, 7, 65, 148, 149, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 164, 149, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 196, 149, 192, 0, 16, 98, 0, 11, 32, 12, 32, 7, 79, 4, 64, 32, 11, 65, 127, 106, 32, 7, 65, 212, 149, 192, 0, 16, 98, 0, 11, 32, 6, 32, 8, 32, 9, 65, 2, 116, 106, 47, 1, 0, 32, 6, 47, 1, 0, 106, 59, 1, 0, 32, 9, 65, 1, 106, 33, 9, 11, 32, 6, 65, 4, 106, 33, 6, 32, 7, 32, 11, 65, 1, 106, 34, 11, 71, 13, 0, 11, 32, 7, 65, 126, 106, 33, 11, 2, 64, 2, 64, 32, 7, 65, 1, 75, 4, 64, 65, 0, 33, 9, 32, 8, 32, 11, 65, 2, 116, 106, 65, 0, 59, 1, 0, 32, 11, 69, 13, 8, 32, 7, 65, 125, 106, 33, 6, 32, 8, 32, 7, 65, 2, 116, 106, 65, 116, 106, 33, 5, 3, 64, 32, 6, 32, 7, 79, 13, 2, 32, 7, 32, 5, 47, 1, 0, 34, 12, 77, 13, 3, 32, 5, 32, 8, 32, 12, 65, 2, 116, 106, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 5, 65, 124, 106, 33, 5, 32, 6, 65, 127, 106, 34, 6, 65, 127, 71, 13, 0, 11, 32, 11, 33, 9, 12, 8, 11, 32, 11, 32, 7, 65, 228, 149, 192, 0, 16, 98, 0, 11, 32, 6, 32, 7, 65, 244, 149, 192, 0, 16, 98, 0, 11, 32, 12, 32, 7, 65, 132, 150, 192, 0, 16, 98, 0, 11, 65, 0, 33, 9, 32, 7, 65, 2, 116, 32, 8, 106, 65, 120, 106, 65, 0, 59, 1, 0, 12, 4, 11, 32, 13, 32, 7, 65, 212, 148, 192, 0, 16, 98, 0, 11, 65, 2, 65, 2, 65, 196, 148, 192, 0, 16, 98, 0, 11, 32, 6, 65, 160, 2, 65, 132, 151, 192, 0, 16, 99, 0, 11, 32, 8, 65, 1, 59, 1, 0, 32, 8, 65, 4, 106, 33, 6, 12, 1, 11, 65, 0, 33, 11, 65, 1, 33, 13, 2, 64, 3, 64, 2, 64, 32, 9, 65, 0, 72, 4, 64, 65, 0, 33, 6, 12, 1, 11, 32, 9, 65, 1, 106, 33, 12, 32, 8, 32, 9, 65, 2, 116, 106, 33, 5, 65, 0, 33, 6, 2, 64, 3, 64, 32, 9, 32, 7, 79, 13, 1, 32, 5, 47, 1, 0, 32, 11, 65, 255, 255, 3, 113, 71, 13, 2, 32, 5, 65, 124, 106, 33, 5, 32, 6, 65, 1, 106, 33, 6, 32, 9, 65, 127, 106, 34, 9, 65, 127, 71, 13, 0, 11, 32, 12, 33, 6, 65, 127, 33, 9, 12, 1, 11, 32, 9, 32, 7, 65, 148, 150, 192, 0, 16, 98, 0, 11, 32, 13, 32, 6, 74, 4, 64, 32, 8, 32, 4, 65, 2, 116, 106, 33, 5, 3, 64, 32, 4, 32, 7, 79, 13, 3, 32, 5, 32, 11, 59, 1, 0, 32, 5, 65, 124, 106, 33, 5, 32, 4, 65, 127, 106, 33, 4, 32, 13, 65, 127, 106, 34, 13, 32, 6, 74, 13, 0, 11, 11, 32, 11, 65, 1, 106, 33, 11, 32, 6, 65, 1, 116, 34, 13, 65, 0, 74, 13, 0, 11, 32, 7, 69, 13, 2, 32, 8, 32, 7, 65, 2, 116, 106, 33, 6, 12, 1, 11, 32, 4, 32, 7, 65, 164, 150, 192, 0, 16, 98, 0, 11, 32, 8, 33, 4, 3, 64, 32, 4, 47, 1, 0, 34, 5, 65, 33, 79, 13, 3, 32, 10, 65, 8, 106, 32, 5, 65, 2, 116, 106, 34, 5, 32, 5, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 6, 32, 4, 65, 4, 106, 34, 4, 71, 13, 0, 11, 12, 1, 11, 65, 0, 33, 7, 11, 2, 64, 32, 14, 65, 2, 73, 13, 0, 2, 64, 32, 3, 65, 32, 70, 4, 64, 32, 10, 65, 8, 106, 32, 3, 65, 2, 116, 106, 34, 12, 40, 2, 0, 33, 6, 12, 1, 11, 32, 3, 65, 2, 116, 33, 4, 32, 10, 65, 12, 106, 33, 6, 65, 0, 33, 5, 3, 64, 32, 4, 32, 6, 106, 40, 2, 0, 32, 5, 106, 33, 5, 32, 4, 65, 4, 106, 34, 4, 65, 128, 1, 71, 13, 0, 11, 32, 10, 65, 8, 106, 32, 3, 65, 2, 116, 106, 34, 12, 32, 12, 40, 2, 0, 32, 5, 106, 34, 6, 54, 2, 0, 32, 3, 69, 13, 1, 11, 32, 6, 33, 11, 32, 3, 65, 1, 71, 4, 64, 32, 3, 65, 2, 116, 32, 10, 106, 65, 4, 106, 33, 4, 65, 1, 33, 5, 3, 64, 32, 4, 40, 2, 0, 32, 5, 65, 31, 113, 116, 32, 11, 106, 33, 11, 32, 4, 65, 124, 106, 33, 4, 32, 3, 32, 5, 65, 1, 106, 34, 5, 71, 13, 0, 11, 11, 65, 1, 32, 3, 65, 31, 113, 116, 34, 13, 32, 11, 79, 13, 0, 32, 3, 65, 2, 116, 32, 10, 106, 65, 12, 106, 33, 9, 2, 64, 3, 64, 32, 12, 32, 6, 65, 127, 106, 54, 2, 0, 32, 13, 65, 1, 106, 33, 13, 32, 9, 33, 5, 32, 3, 33, 4, 2, 64, 2, 64, 3, 64, 32, 4, 65, 2, 73, 13, 1, 32, 4, 65, 127, 106, 34, 6, 65, 32, 75, 13, 2, 32, 5, 65, 120, 106, 32, 5, 65, 124, 106, 34, 15, 33, 5, 32, 6, 33, 4, 40, 2, 0, 34, 16, 69, 13, 0, 11, 32, 15, 65, 124, 106, 32, 16, 65, 127, 106, 54, 2, 0, 32, 6, 65, 1, 106, 65, 32, 75, 13, 3, 32, 15, 32, 15, 40, 2, 0, 65, 2, 106, 54, 2, 0, 11, 32, 11, 32, 13, 70, 13, 3, 32, 12, 40, 2, 0, 33, 6, 12, 1, 11, 11, 32, 4, 65, 127, 106, 65, 33, 65, 180, 150, 192, 0, 16, 98, 0, 11, 65, 33, 65, 33, 65, 196, 150, 192, 0, 16, 98, 0, 11, 32, 0, 32, 1, 65, 160, 2, 108, 106, 34, 11, 65, 128, 27, 106, 65, 0, 65, 160, 2, 16, 131, 1, 26, 32, 0, 32, 1, 65, 192, 4, 108, 106, 65, 192, 13, 106, 65, 0, 65, 192, 4, 16, 131, 1, 26, 32, 3, 69, 13, 2, 32, 8, 65, 2, 106, 33, 8, 65, 1, 33, 6, 3, 64, 32, 14, 33, 5, 2, 64, 2, 64, 2, 64, 2, 64, 32, 6, 65, 33, 73, 4, 64, 32, 5, 32, 10, 65, 8, 106, 32, 6, 65, 2, 116, 106, 40, 2, 0, 34, 4, 107, 33, 14, 32, 5, 32, 4, 73, 13, 2, 32, 7, 32, 5, 73, 13, 3, 32, 4, 69, 13, 4, 65, 0, 32, 4, 65, 2, 116, 107, 33, 4, 32, 8, 32, 5, 65, 2, 116, 106, 33, 12, 3, 64, 32, 4, 32, 12, 106, 47, 1, 0, 34, 5, 65, 159, 2, 75, 13, 2, 32, 5, 32, 11, 106, 65, 128, 27, 106, 32, 6, 58, 0, 0, 32, 4, 65, 4, 106, 34, 4, 13, 0, 11, 12, 4, 11, 32, 6, 65, 33, 65, 164, 151, 192, 0, 16, 98, 0, 11, 32, 5, 65, 160, 2, 65, 196, 151, 192, 0, 16, 98, 0, 11, 32, 14, 32, 5, 65, 180, 151, 192, 0, 16, 100, 0, 11, 32, 5, 32, 7, 65, 180, 151, 192, 0, 16, 99, 0, 11, 32, 6, 32, 3, 79, 32, 6, 32, 6, 32, 3, 73, 106, 34, 6, 32, 3, 75, 114, 69, 13, 0, 11, 12, 2, 11, 32, 5, 65, 33, 65, 148, 151, 192, 0, 16, 98, 0, 11, 32, 11, 65, 127, 106, 32, 7, 65, 180, 149, 192, 0, 16, 98, 0, 11, 65, 0, 33, 5, 32, 10, 65, 0, 54, 2, 144, 1, 2, 64, 32, 3, 65, 2, 73, 13, 0, 65, 2, 33, 4, 3, 64, 32, 4, 65, 127, 106, 34, 6, 65, 33, 79, 4, 64, 32, 6, 65, 33, 65, 212, 151, 192, 0, 16, 98, 0, 11, 32, 4, 65, 32, 77, 4, 64, 32, 4, 32, 3, 79, 32, 10, 65, 140, 1, 106, 32, 4, 65, 2, 116, 106, 32, 10, 65, 8, 106, 32, 6, 65, 2, 116, 106, 40, 2, 0, 32, 5, 106, 65, 1, 116, 34, 5, 54, 2, 0, 32, 4, 32, 4, 32, 3, 73, 106, 34, 6, 33, 4, 32, 6, 32, 3, 75, 114, 69, 13, 1, 12, 2, 11, 11, 32, 4, 65, 33, 65, 228, 151, 192, 0, 16, 98, 0, 11, 2, 64, 32, 2, 69, 13, 0, 32, 0, 32, 1, 65, 160, 2, 108, 106, 34, 3, 65, 160, 29, 106, 33, 8, 32, 3, 65, 128, 27, 106, 33, 9, 32, 0, 32, 1, 65, 192, 4, 108, 106, 65, 192, 13, 106, 33, 7, 3, 64, 32, 8, 32, 9, 70, 13, 1, 2, 64, 32, 9, 45, 0, 0, 34, 0, 4, 64, 32, 0, 65, 32, 75, 13, 1, 32, 10, 65, 140, 1, 106, 32, 0, 65, 2, 116, 106, 34, 1, 32, 1, 40, 2, 0, 34, 4, 65, 1, 106, 54, 2, 0, 65, 0, 33, 5, 65, 0, 33, 6, 3, 64, 32, 4, 65, 1, 113, 32, 5, 65, 1, 116, 114, 33, 5, 32, 4, 65, 1, 118, 33, 4, 32, 6, 65, 1, 106, 34, 6, 65, 255, 1, 113, 32, 0, 73, 13, 0, 11, 32, 7, 32, 5, 59, 1, 0, 11, 32, 7, 65, 2, 106, 33, 7, 32, 9, 65, 1, 106, 33, 9, 32, 2, 65, 127, 106, 34, 2, 13, 1, 12, 2, 11, 11, 32, 0, 65, 33, 65, 244, 151, 192, 0, 16, 98, 0, 11, 32, 10, 65, 144, 44, 106, 36, 0, 11, 154, 13, 1, 11, 127, 35, 0, 65, 16, 107, 34, 8, 36, 0, 2, 64, 2, 64, 2, 64, 32, 6, 65, 3, 70, 4, 64, 32, 0, 66, 129, 128, 128, 128, 96, 55, 2, 8, 32, 0, 66, 0, 55, 2, 0, 12, 1, 11, 32, 1, 45, 0, 240, 213, 2, 33, 11, 32, 1, 65, 0, 58, 0, 240, 213, 2, 32, 1, 44, 0, 243, 213, 2, 65, 127, 76, 4, 64, 32, 0, 66, 129, 128, 128, 128, 80, 55, 2, 8, 32, 0, 66, 0, 55, 2, 0, 12, 1, 11, 32, 1, 45, 0, 242, 213, 2, 33, 7, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 6, 65, 4, 70, 34, 10, 69, 65, 0, 32, 1, 45, 0, 241, 213, 2, 34, 9, 27, 69, 4, 64, 65, 8, 65, 9, 32, 7, 27, 33, 7, 32, 1, 32, 10, 32, 9, 65, 0, 71, 114, 58, 0, 241, 213, 2, 2, 64, 32, 11, 65, 0, 32, 6, 65, 4, 70, 27, 69, 4, 64, 32, 1, 40, 2, 236, 85, 34, 9, 69, 13, 1, 32, 1, 40, 2, 232, 85, 34, 3, 32, 5, 32, 9, 32, 9, 32, 5, 75, 27, 34, 2, 106, 34, 5, 32, 3, 73, 13, 3, 32, 5, 65, 129, 128, 2, 79, 13, 4, 32, 4, 32, 1, 32, 3, 106, 65, 240, 213, 0, 106, 32, 2, 16, 121, 26, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 2, 54, 2, 4, 32, 0, 65, 0, 54, 2, 0, 32, 1, 32, 1, 40, 2, 236, 85, 32, 2, 107, 34, 3, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 2, 106, 65, 255, 255, 1, 113, 54, 2, 232, 85, 32, 0, 65, 12, 106, 32, 3, 32, 1, 45, 0, 243, 213, 2, 114, 69, 54, 2, 0, 12, 16, 11, 65, 0, 33, 6, 32, 8, 32, 1, 32, 2, 32, 3, 32, 4, 32, 5, 65, 0, 32, 7, 65, 4, 114, 16, 2, 32, 1, 32, 8, 44, 0, 4, 34, 2, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 3, 32, 8, 40, 2, 0, 33, 4, 2, 64, 32, 2, 65, 0, 72, 4, 127, 65, 125, 5, 32, 2, 69, 4, 64, 65, 1, 33, 1, 12, 2, 11, 32, 1, 65, 255, 1, 58, 0, 243, 213, 2, 65, 123, 11, 33, 1, 65, 1, 33, 6, 11, 32, 0, 32, 6, 54, 2, 8, 32, 0, 32, 3, 54, 2, 4, 32, 0, 32, 4, 54, 2, 0, 32, 0, 65, 12, 106, 32, 1, 54, 2, 0, 12, 15, 11, 32, 7, 32, 7, 65, 2, 114, 32, 6, 65, 4, 70, 27, 33, 14, 32, 1, 65, 240, 213, 0, 106, 33, 15, 32, 1, 40, 2, 232, 85, 33, 7, 32, 3, 69, 13, 3, 32, 8, 32, 1, 32, 2, 32, 3, 32, 15, 65, 128, 128, 2, 32, 7, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 0, 34, 12, 32, 3, 75, 13, 11, 32, 8, 40, 2, 8, 33, 7, 32, 6, 65, 4, 70, 13, 10, 65, 0, 33, 11, 3, 64, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 10, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 6, 106, 34, 7, 32, 10, 73, 13, 17, 32, 7, 65, 129, 128, 2, 79, 13, 16, 32, 12, 32, 13, 106, 33, 13, 32, 4, 32, 1, 32, 10, 106, 65, 240, 213, 0, 106, 32, 6, 16, 121, 33, 10, 32, 1, 32, 1, 40, 2, 236, 85, 32, 6, 107, 34, 7, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 6, 106, 65, 255, 255, 1, 113, 34, 16, 54, 2, 232, 85, 32, 6, 32, 11, 106, 33, 11, 32, 9, 65, 24, 116, 65, 24, 117, 65, 0, 72, 13, 5, 32, 9, 65, 255, 1, 113, 34, 17, 69, 33, 4, 32, 7, 69, 33, 9, 32, 7, 32, 17, 69, 114, 13, 7, 32, 5, 32, 6, 107, 34, 5, 69, 13, 7, 32, 3, 32, 12, 107, 34, 3, 69, 13, 7, 32, 6, 32, 10, 106, 33, 4, 32, 8, 32, 1, 32, 2, 32, 12, 106, 34, 2, 32, 3, 32, 15, 65, 128, 128, 2, 32, 16, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 7, 32, 3, 32, 8, 40, 2, 0, 34, 12, 79, 13, 0, 11, 12, 11, 11, 32, 0, 66, 129, 128, 128, 128, 96, 55, 2, 8, 32, 0, 66, 0, 55, 2, 0, 12, 13, 11, 32, 3, 32, 5, 65, 220, 186, 192, 0, 16, 100, 0, 11, 32, 5, 65, 128, 128, 2, 65, 220, 186, 192, 0, 16, 99, 0, 11, 65, 0, 33, 3, 32, 8, 32, 1, 32, 2, 65, 0, 32, 15, 65, 128, 128, 2, 32, 7, 32, 14, 16, 2, 32, 1, 32, 8, 44, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 0, 34, 12, 13, 7, 32, 8, 40, 2, 8, 33, 7, 32, 6, 65, 4, 70, 4, 64, 65, 0, 33, 11, 3, 64, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 6, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 3, 106, 34, 7, 32, 6, 73, 13, 6, 32, 7, 65, 128, 128, 2, 75, 13, 7, 32, 4, 32, 1, 32, 6, 106, 65, 240, 213, 0, 106, 32, 3, 16, 121, 33, 7, 32, 1, 32, 1, 40, 2, 236, 85, 32, 3, 107, 34, 4, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 3, 106, 65, 255, 255, 1, 113, 34, 12, 54, 2, 232, 85, 32, 3, 32, 11, 106, 33, 11, 65, 1, 33, 10, 32, 9, 65, 24, 116, 65, 24, 117, 65, 0, 72, 4, 64, 65, 125, 33, 6, 12, 12, 11, 65, 123, 33, 6, 2, 64, 32, 9, 65, 255, 1, 113, 14, 2, 6, 12, 0, 11, 32, 5, 32, 3, 107, 34, 5, 69, 13, 11, 32, 3, 32, 7, 106, 33, 4, 65, 0, 33, 3, 32, 8, 32, 1, 32, 2, 65, 0, 32, 15, 65, 128, 128, 2, 32, 12, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 7, 32, 8, 40, 2, 0, 34, 12, 69, 13, 0, 11, 12, 8, 11, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 6, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 11, 106, 34, 7, 32, 6, 73, 13, 4, 32, 7, 65, 129, 128, 2, 79, 13, 5, 32, 4, 32, 1, 32, 6, 106, 65, 240, 213, 0, 106, 32, 11, 16, 121, 26, 32, 1, 32, 1, 40, 2, 236, 85, 32, 11, 107, 34, 2, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 11, 106, 65, 255, 255, 1, 113, 54, 2, 232, 85, 32, 9, 65, 0, 78, 13, 1, 11, 65, 1, 33, 10, 65, 125, 33, 6, 12, 8, 11, 65, 1, 33, 10, 65, 123, 33, 6, 32, 9, 65, 1, 70, 13, 7, 32, 9, 69, 33, 4, 32, 2, 69, 33, 9, 11, 32, 4, 32, 9, 113, 33, 6, 65, 0, 33, 10, 12, 6, 11, 12, 4, 11, 32, 6, 32, 7, 65, 220, 186, 192, 0, 16, 100, 0, 11, 32, 7, 65, 128, 128, 2, 65, 220, 186, 192, 0, 16, 99, 0, 11, 65, 0, 33, 11, 3, 64, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 10, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 6, 106, 34, 7, 32, 10, 73, 13, 6, 32, 7, 65, 128, 128, 2, 75, 13, 5, 32, 12, 32, 13, 106, 33, 13, 32, 4, 32, 1, 32, 10, 106, 65, 240, 213, 0, 106, 32, 6, 16, 121, 33, 7, 32, 1, 32, 1, 40, 2, 236, 85, 32, 6, 107, 34, 4, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 6, 106, 65, 255, 255, 1, 113, 34, 16, 54, 2, 232, 85, 32, 6, 32, 11, 106, 33, 11, 65, 1, 33, 10, 32, 9, 65, 24, 116, 65, 24, 117, 65, 0, 72, 4, 64, 65, 125, 33, 6, 12, 4, 11, 32, 9, 65, 255, 1, 113, 69, 13, 2, 32, 5, 32, 6, 107, 34, 5, 69, 4, 64, 65, 123, 33, 6, 12, 4, 11, 32, 6, 32, 7, 106, 33, 4, 32, 8, 32, 1, 32, 2, 32, 12, 106, 34, 2, 32, 3, 32, 12, 107, 34, 3, 32, 15, 65, 128, 128, 2, 32, 16, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 7, 32, 3, 32, 8, 40, 2, 0, 34, 12, 79, 13, 0, 11, 11, 32, 12, 32, 3, 65, 204, 186, 192, 0, 16, 101, 0, 11, 65, 123, 65, 1, 32, 4, 27, 33, 6, 32, 4, 65, 0, 71, 33, 10, 11, 32, 0, 32, 10, 54, 2, 8, 32, 0, 32, 11, 54, 2, 4, 32, 0, 32, 13, 54, 2, 0, 32, 0, 65, 12, 106, 32, 6, 54, 2, 0, 11, 32, 8, 65, 16, 106, 36, 0, 15, 11, 32, 7, 65, 128, 128, 2, 65, 220, 186, 192, 0, 16, 99, 0, 11, 32, 10, 32, 7, 65, 220, 186, 192, 0, 16, 100, 0, 11, 174, 12, 1, 1, 127, 32, 0, 40, 2, 0, 65, 127, 115, 33, 3, 32, 2, 65, 192, 0, 79, 4, 64, 3, 64, 32, 1, 65, 51, 106, 45, 0, 0, 32, 1, 65, 35, 106, 45, 0, 0, 32, 1, 65, 19, 106, 45, 0, 0, 32, 1, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 32, 1, 65, 1, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 32, 1, 65, 2, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 32, 1, 65, 3, 106, 45, 0, 0, 32, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 4, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 5, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 6, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 7, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 8, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 9, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 10, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 11, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 12, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 13, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 14, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 15, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 20, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 21, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 22, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 23, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 24, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 25, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 26, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 27, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 28, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 29, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 30, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 31, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 32, 1, 65, 18, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 17, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 16, 106, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 115, 34, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 36, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 37, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 38, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 39, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 40, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 41, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 42, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 43, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 44, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 45, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 46, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 47, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 32, 1, 65, 34, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 33, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 32, 106, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 115, 34, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 52, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 53, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 54, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 55, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 56, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 57, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 58, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 59, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 60, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 61, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 62, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 63, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 32, 1, 65, 50, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 49, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 48, 106, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 115, 33, 3, 32, 1, 65, 64, 107, 33, 1, 32, 2, 65, 64, 106, 34, 2, 65, 63, 75, 13, 0, 11, 11, 32, 2, 4, 64, 3, 64, 32, 1, 45, 0, 0, 32, 3, 115, 65, 255, 1, 113, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 32, 3, 65, 8, 118, 115, 33, 3, 32, 1, 65, 1, 106, 33, 1, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 32, 3, 65, 127, 115, 54, 2, 0, 11, 151, 11, 1, 27, 127, 35, 0, 65, 144, 1, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 20, 34, 4, 65, 2, 77, 4, 64, 32, 0, 65, 56, 106, 33, 21, 32, 2, 65, 56, 106, 33, 22, 32, 2, 65, 40, 106, 33, 23, 32, 2, 65, 32, 106, 33, 24, 32, 2, 65, 24, 106, 33, 25, 32, 2, 65, 16, 106, 33, 26, 3, 64, 32, 0, 32, 4, 65, 2, 116, 106, 65, 40, 106, 40, 2, 0, 33, 12, 32, 2, 65, 64, 107, 66, 0, 55, 3, 0, 32, 22, 66, 0, 55, 3, 0, 32, 2, 65, 48, 106, 66, 0, 55, 3, 0, 32, 23, 66, 0, 55, 3, 0, 32, 24, 66, 0, 55, 3, 0, 32, 25, 66, 0, 55, 3, 0, 32, 26, 66, 0, 55, 3, 0, 32, 2, 66, 0, 55, 3, 8, 32, 2, 65, 204, 0, 106, 65, 0, 65, 196, 0, 16, 131, 1, 26, 32, 0, 32, 4, 65, 160, 27, 108, 34, 27, 106, 34, 14, 65, 56, 106, 65, 0, 65, 128, 16, 16, 131, 1, 33, 28, 32, 14, 65, 184, 16, 106, 65, 0, 65, 128, 9, 16, 131, 1, 26, 2, 127, 2, 64, 32, 12, 65, 161, 2, 73, 4, 64, 32, 12, 69, 4, 64, 65, 0, 33, 4, 65, 0, 33, 6, 65, 0, 33, 10, 65, 0, 33, 9, 65, 0, 33, 8, 65, 0, 33, 11, 65, 0, 33, 13, 65, 0, 33, 7, 65, 0, 33, 15, 65, 0, 33, 16, 65, 0, 33, 17, 65, 0, 33, 18, 65, 0, 33, 19, 65, 0, 33, 20, 65, 0, 12, 3, 11, 32, 14, 65, 184, 25, 106, 33, 4, 32, 12, 33, 6, 3, 64, 32, 4, 45, 0, 0, 34, 5, 65, 15, 77, 4, 64, 32, 2, 65, 8, 106, 32, 5, 65, 2, 116, 106, 34, 5, 32, 5, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 1, 106, 33, 4, 32, 6, 65, 127, 106, 34, 6, 13, 1, 12, 3, 11, 11, 32, 5, 65, 16, 65, 200, 177, 192, 0, 16, 98, 0, 11, 32, 12, 65, 160, 2, 65, 184, 177, 192, 0, 16, 99, 0, 11, 32, 2, 40, 2, 68, 33, 4, 32, 2, 40, 2, 64, 33, 6, 32, 2, 40, 2, 56, 33, 10, 32, 2, 40, 2, 52, 33, 9, 32, 2, 40, 2, 48, 33, 8, 32, 2, 40, 2, 44, 33, 11, 32, 2, 40, 2, 40, 33, 13, 32, 2, 40, 2, 36, 33, 7, 32, 2, 40, 2, 32, 33, 15, 32, 2, 40, 2, 28, 33, 16, 32, 2, 40, 2, 24, 33, 17, 32, 2, 40, 2, 20, 33, 18, 32, 2, 40, 2, 16, 33, 19, 32, 2, 40, 2, 12, 33, 20, 32, 2, 40, 2, 60, 11, 33, 5, 32, 2, 32, 20, 65, 1, 116, 34, 3, 54, 2, 84, 32, 2, 32, 3, 32, 19, 106, 65, 1, 116, 34, 3, 54, 2, 88, 32, 2, 32, 3, 32, 18, 106, 65, 1, 116, 34, 3, 54, 2, 92, 32, 2, 32, 3, 32, 17, 106, 65, 1, 116, 34, 3, 54, 2, 96, 32, 2, 32, 3, 32, 16, 106, 65, 1, 116, 34, 3, 54, 2, 100, 32, 2, 32, 3, 32, 15, 106, 65, 1, 116, 34, 3, 54, 2, 104, 32, 2, 32, 3, 32, 7, 106, 65, 1, 116, 34, 3, 54, 2, 108, 32, 2, 32, 3, 32, 13, 106, 65, 1, 116, 34, 3, 54, 2, 112, 32, 2, 32, 3, 32, 11, 106, 65, 1, 116, 34, 3, 54, 2, 116, 32, 2, 32, 3, 32, 8, 106, 65, 1, 116, 34, 3, 54, 2, 120, 32, 2, 32, 3, 32, 9, 106, 65, 1, 116, 34, 3, 54, 2, 124, 32, 2, 32, 3, 32, 10, 106, 65, 1, 116, 34, 3, 54, 2, 128, 1, 32, 2, 32, 3, 32, 5, 106, 65, 1, 116, 34, 3, 54, 2, 132, 1, 32, 2, 32, 3, 32, 6, 106, 65, 1, 116, 34, 3, 54, 2, 136, 1, 32, 2, 32, 3, 32, 4, 106, 65, 1, 116, 34, 3, 54, 2, 140, 1, 2, 64, 2, 127, 65, 27, 32, 3, 65, 128, 128, 4, 70, 32, 4, 32, 6, 32, 5, 32, 10, 32, 9, 32, 8, 32, 11, 32, 13, 32, 7, 32, 15, 32, 16, 32, 17, 32, 18, 32, 19, 32, 20, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 65, 2, 73, 114, 69, 13, 0, 26, 2, 64, 32, 12, 69, 13, 0, 32, 21, 32, 27, 106, 33, 15, 65, 0, 33, 11, 65, 255, 255, 3, 33, 7, 3, 64, 32, 11, 65, 160, 2, 32, 11, 65, 160, 2, 75, 27, 33, 13, 3, 64, 32, 11, 34, 10, 32, 13, 70, 13, 7, 32, 10, 65, 1, 106, 33, 11, 2, 64, 2, 64, 32, 10, 32, 14, 106, 65, 184, 25, 106, 45, 0, 0, 34, 8, 69, 13, 0, 32, 8, 65, 16, 75, 13, 10, 32, 2, 65, 204, 0, 106, 32, 8, 65, 2, 116, 106, 34, 5, 32, 5, 40, 2, 0, 34, 6, 65, 1, 106, 54, 2, 0, 65, 0, 33, 4, 65, 0, 33, 5, 3, 64, 32, 6, 65, 1, 113, 32, 4, 34, 9, 65, 1, 116, 114, 33, 4, 32, 6, 65, 1, 118, 33, 6, 32, 5, 65, 1, 106, 34, 5, 65, 255, 1, 113, 32, 8, 73, 13, 0, 11, 32, 8, 65, 11, 79, 13, 1, 32, 4, 65, 255, 7, 75, 13, 0, 32, 8, 65, 9, 116, 32, 10, 114, 33, 5, 32, 15, 32, 4, 65, 1, 116, 106, 33, 6, 65, 1, 32, 8, 65, 31, 113, 116, 34, 10, 65, 1, 116, 33, 9, 3, 64, 32, 6, 32, 5, 59, 1, 0, 32, 6, 32, 9, 106, 33, 6, 32, 4, 32, 10, 106, 34, 4, 65, 128, 8, 73, 13, 0, 11, 11, 32, 11, 32, 12, 73, 13, 1, 12, 3, 11, 11, 2, 127, 32, 7, 32, 28, 32, 4, 65, 255, 7, 113, 65, 1, 116, 106, 34, 5, 47, 1, 0, 34, 6, 13, 0, 26, 32, 5, 32, 7, 59, 1, 0, 32, 7, 34, 6, 65, 126, 106, 11, 33, 5, 32, 9, 65, 8, 118, 65, 255, 255, 255, 3, 113, 33, 9, 2, 64, 32, 8, 65, 12, 73, 4, 64, 32, 5, 33, 7, 12, 1, 11, 65, 11, 33, 4, 3, 64, 32, 9, 65, 1, 118, 34, 9, 65, 1, 113, 32, 6, 65, 127, 115, 106, 34, 6, 65, 16, 116, 65, 16, 117, 33, 7, 32, 6, 65, 255, 255, 3, 113, 65, 192, 4, 79, 13, 10, 32, 4, 65, 1, 106, 33, 4, 2, 64, 32, 14, 32, 7, 65, 1, 116, 106, 65, 184, 16, 106, 34, 7, 47, 1, 0, 34, 6, 4, 64, 32, 5, 33, 7, 12, 1, 11, 32, 7, 32, 5, 59, 1, 0, 32, 5, 34, 6, 65, 126, 106, 34, 7, 33, 5, 11, 32, 4, 65, 255, 1, 113, 32, 8, 73, 13, 0, 11, 11, 32, 9, 65, 1, 118, 65, 1, 113, 32, 6, 65, 127, 115, 106, 34, 6, 65, 16, 116, 65, 16, 117, 33, 5, 32, 6, 65, 255, 255, 3, 113, 65, 192, 4, 79, 13, 9, 32, 14, 32, 5, 65, 1, 116, 106, 65, 184, 16, 106, 32, 10, 59, 1, 0, 32, 11, 32, 12, 73, 13, 0, 11, 11, 2, 64, 2, 64, 32, 0, 40, 2, 20, 34, 5, 14, 3, 0, 3, 1, 3, 11, 32, 1, 65, 0, 54, 2, 12, 65, 12, 12, 1, 11, 32, 1, 65, 0, 54, 2, 12, 65, 10, 11, 32, 2, 65, 144, 1, 106, 36, 0, 65, 8, 116, 65, 1, 114, 15, 11, 32, 0, 32, 5, 65, 127, 106, 34, 4, 54, 2, 20, 32, 4, 65, 3, 73, 13, 0, 11, 11, 32, 4, 65, 3, 65, 168, 177, 192, 0, 16, 98, 0, 11, 32, 13, 65, 160, 2, 65, 216, 177, 192, 0, 16, 98, 0, 11, 32, 8, 65, 17, 65, 232, 177, 192, 0, 16, 98, 0, 11, 32, 7, 65, 192, 4, 65, 248, 177, 192, 0, 16, 98, 0, 11, 32, 5, 65, 192, 4, 65, 136, 178, 192, 0, 16, 98, 0, 11, 164, 11, 2, 19, 127, 5, 126, 35, 0, 65, 144, 1, 107, 34, 3, 36, 0, 65, 3, 33, 14, 2, 64, 32, 2, 69, 13, 0, 32, 0, 65, 208, 0, 106, 33, 16, 32, 0, 65, 232, 0, 106, 33, 10, 32, 0, 65, 140, 1, 106, 33, 17, 32, 3, 65, 4, 114, 33, 18, 32, 3, 65, 236, 0, 106, 33, 11, 32, 0, 65, 216, 0, 106, 33, 13, 32, 0, 65, 148, 1, 106, 33, 7, 32, 0, 65, 252, 0, 106, 33, 19, 32, 0, 65, 240, 0, 106, 33, 20, 32, 0, 65, 228, 0, 106, 33, 21, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 92, 65, 1, 71, 4, 64, 32, 3, 65, 0, 54, 2, 36, 32, 3, 65, 0, 58, 0, 32, 32, 3, 32, 2, 54, 2, 28, 32, 3, 32, 1, 54, 2, 24, 32, 3, 32, 7, 40, 2, 0, 54, 2, 20, 32, 3, 32, 0, 40, 2, 140, 1, 54, 2, 16, 32, 3, 65, 224, 0, 106, 32, 3, 65, 16, 106, 16, 13, 32, 3, 65, 216, 0, 106, 32, 11, 65, 32, 106, 40, 2, 0, 34, 4, 54, 2, 0, 32, 3, 65, 208, 0, 106, 32, 11, 65, 24, 106, 41, 2, 0, 34, 23, 55, 3, 0, 32, 3, 65, 200, 0, 106, 32, 11, 65, 16, 106, 41, 2, 0, 34, 24, 55, 3, 0, 32, 3, 65, 64, 107, 32, 11, 65, 8, 106, 41, 2, 0, 34, 25, 55, 3, 0, 32, 3, 32, 11, 41, 2, 0, 34, 26, 55, 3, 56, 32, 3, 41, 2, 100, 33, 22, 32, 3, 40, 2, 96, 32, 3, 40, 2, 36, 33, 6, 32, 3, 65, 48, 106, 34, 9, 32, 4, 54, 2, 0, 32, 3, 65, 40, 106, 34, 4, 32, 23, 55, 3, 0, 32, 3, 65, 32, 106, 34, 15, 32, 24, 55, 3, 0, 32, 3, 65, 24, 106, 34, 8, 32, 25, 55, 3, 0, 32, 3, 32, 26, 55, 3, 16, 69, 4, 64, 32, 3, 65, 128, 1, 106, 34, 5, 32, 9, 40, 2, 0, 54, 2, 0, 32, 3, 65, 248, 0, 106, 34, 9, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 240, 0, 106, 34, 4, 32, 15, 41, 3, 0, 55, 3, 0, 32, 3, 65, 232, 0, 106, 34, 15, 32, 8, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 16, 55, 3, 96, 2, 64, 32, 0, 40, 2, 92, 69, 13, 0, 2, 64, 32, 0, 40, 2, 96, 34, 8, 69, 13, 0, 32, 21, 40, 2, 0, 34, 12, 69, 13, 0, 32, 8, 32, 12, 65, 1, 16, 156, 1, 11, 2, 64, 32, 0, 40, 2, 108, 34, 8, 69, 13, 0, 32, 20, 40, 2, 0, 34, 12, 69, 13, 0, 32, 8, 32, 12, 65, 1, 16, 156, 1, 11, 32, 0, 40, 2, 120, 34, 8, 69, 13, 0, 32, 19, 40, 2, 0, 34, 12, 69, 13, 0, 32, 8, 32, 12, 65, 1, 16, 156, 1, 11, 32, 0, 32, 22, 55, 2, 96, 32, 0, 65, 1, 54, 2, 92, 32, 10, 32, 3, 41, 3, 96, 55, 2, 0, 32, 10, 65, 8, 106, 32, 15, 41, 3, 0, 55, 2, 0, 32, 10, 65, 16, 106, 32, 4, 41, 3, 0, 55, 2, 0, 32, 10, 65, 24, 106, 32, 9, 41, 3, 0, 55, 2, 0, 32, 10, 65, 32, 106, 32, 5, 40, 2, 0, 54, 2, 0, 32, 7, 40, 2, 0, 33, 4, 32, 7, 65, 0, 54, 2, 0, 32, 3, 65, 0, 54, 2, 0, 32, 6, 32, 4, 107, 33, 4, 12, 2, 11, 32, 3, 32, 22, 55, 3, 96, 32, 3, 65, 224, 0, 106, 16, 133, 1, 65, 255, 1, 113, 65, 17, 71, 13, 3, 32, 17, 32, 7, 40, 2, 0, 32, 2, 16, 75, 32, 0, 40, 2, 140, 1, 32, 7, 40, 2, 0, 106, 32, 1, 32, 2, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 2, 106, 54, 2, 0, 32, 3, 32, 2, 54, 2, 4, 32, 3, 65, 0, 54, 2, 0, 32, 3, 45, 0, 96, 65, 1, 77, 4, 64, 32, 2, 33, 4, 12, 3, 11, 32, 3, 40, 2, 100, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 100, 65, 12, 65, 4, 16, 156, 1, 32, 3, 40, 2, 0, 65, 1, 70, 13, 10, 32, 3, 40, 2, 4, 33, 4, 12, 2, 11, 32, 3, 65, 224, 0, 106, 32, 0, 32, 1, 32, 2, 16, 47, 32, 3, 41, 2, 100, 33, 22, 32, 3, 40, 2, 96, 65, 1, 70, 13, 3, 2, 64, 32, 2, 32, 22, 167, 34, 4, 77, 32, 22, 66, 128, 128, 128, 128, 240, 31, 131, 66, 128, 128, 128, 128, 32, 82, 114, 13, 0, 32, 13, 40, 2, 0, 34, 9, 65, 7, 75, 13, 0, 65, 8, 32, 9, 107, 34, 5, 32, 2, 32, 4, 107, 34, 6, 32, 6, 32, 5, 75, 27, 34, 6, 32, 4, 106, 34, 5, 32, 6, 73, 13, 5, 32, 5, 32, 2, 75, 13, 6, 32, 16, 32, 9, 32, 6, 16, 75, 32, 0, 40, 2, 80, 32, 13, 40, 2, 0, 106, 32, 1, 32, 4, 106, 32, 6, 16, 121, 26, 32, 13, 32, 13, 40, 2, 0, 32, 6, 106, 54, 2, 0, 32, 3, 32, 5, 54, 2, 4, 32, 3, 65, 0, 54, 2, 0, 32, 5, 33, 4, 12, 2, 11, 32, 3, 65, 0, 54, 2, 0, 11, 32, 3, 32, 4, 54, 2, 4, 11, 32, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 5, 32, 0, 65, 24, 106, 65, 244, 128, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 236, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 228, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 220, 128, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 6, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 23, 66, 8, 136, 33, 22, 32, 23, 167, 33, 14, 12, 11, 11, 32, 2, 32, 4, 73, 13, 6, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 8, 11, 32, 3, 32, 3, 41, 3, 96, 55, 2, 4, 32, 3, 65, 1, 54, 2, 0, 12, 6, 11, 32, 3, 65, 1, 54, 2, 0, 32, 3, 32, 22, 55, 2, 4, 12, 5, 11, 32, 22, 167, 32, 5, 65, 228, 129, 192, 0, 16, 100, 0, 11, 32, 5, 32, 2, 65, 228, 129, 192, 0, 16, 99, 0, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 204, 128, 192, 0, 16, 101, 0, 11, 32, 18, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 22, 32, 3, 45, 0, 4, 33, 14, 12, 3, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 0, 32, 3, 45, 0, 4, 65, 2, 73, 13, 0, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 144, 1, 106, 36, 0, 32, 14, 173, 66, 255, 1, 131, 32, 22, 66, 8, 134, 132, 11, 165, 9, 2, 5, 127, 1, 126, 35, 0, 65, 240, 3, 107, 34, 3, 36, 0, 32, 3, 65, 216, 2, 106, 16, 124, 32, 3, 65, 248, 2, 106, 34, 4, 65, 0, 54, 2, 0, 32, 3, 66, 1, 55, 3, 240, 2, 32, 3, 65, 168, 1, 106, 65, 0, 16, 136, 1, 32, 3, 65, 32, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 24, 106, 32, 3, 41, 3, 240, 2, 55, 3, 0, 32, 3, 65, 16, 106, 32, 3, 65, 232, 2, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 8, 106, 32, 3, 65, 224, 2, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 216, 2, 55, 3, 0, 2, 64, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 4, 4, 64, 32, 3, 65, 196, 0, 106, 66, 128, 128, 2, 55, 2, 0, 32, 3, 65, 56, 106, 32, 3, 65, 184, 1, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 48, 106, 32, 3, 65, 176, 1, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 168, 1, 55, 3, 40, 32, 3, 32, 4, 54, 2, 64, 65, 8, 65, 1, 16, 149, 1, 34, 4, 69, 13, 1, 32, 3, 65, 148, 1, 106, 65, 0, 54, 2, 0, 32, 3, 65, 212, 0, 106, 66, 8, 55, 2, 0, 32, 3, 66, 1, 55, 2, 140, 1, 32, 3, 65, 0, 54, 2, 92, 32, 3, 32, 4, 54, 2, 80, 32, 3, 32, 1, 32, 2, 16, 10, 33, 8, 32, 3, 65, 168, 1, 106, 32, 3, 65, 152, 1, 16, 121, 26, 2, 127, 2, 64, 32, 3, 2, 127, 32, 8, 167, 34, 4, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 3, 65, 163, 1, 106, 32, 8, 66, 56, 136, 60, 0, 0, 32, 3, 65, 161, 1, 106, 32, 8, 66, 40, 136, 61, 0, 0, 32, 3, 32, 4, 58, 0, 156, 1, 32, 3, 65, 1, 54, 2, 152, 1, 32, 3, 32, 8, 66, 8, 136, 62, 0, 157, 1, 2, 64, 32, 3, 40, 2, 192, 1, 69, 13, 0, 32, 3, 65, 168, 1, 106, 16, 82, 34, 8, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 8, 66, 32, 136, 167, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 4, 65, 12, 65, 4, 16, 156, 1, 11, 32, 3, 40, 2, 192, 1, 34, 4, 69, 13, 0, 32, 3, 40, 2, 196, 1, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 65, 224, 1, 106, 40, 2, 0, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 3, 65, 236, 1, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 232, 1, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 252, 1, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 248, 1, 32, 4, 65, 1, 16, 156, 1, 11, 2, 64, 32, 3, 40, 2, 132, 2, 69, 13, 0, 2, 64, 32, 3, 65, 136, 2, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 3, 65, 140, 2, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 2, 64, 32, 3, 65, 148, 2, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 3, 65, 152, 2, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 65, 160, 2, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 3, 65, 164, 2, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 65, 184, 2, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 180, 2, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 152, 1, 106, 65, 4, 114, 12, 1, 11, 32, 3, 65, 216, 2, 106, 32, 3, 65, 168, 1, 106, 65, 152, 1, 16, 121, 26, 32, 3, 65, 152, 1, 106, 32, 3, 65, 216, 2, 106, 16, 54, 32, 3, 40, 2, 152, 1, 65, 1, 71, 13, 1, 32, 3, 65, 152, 1, 106, 65, 4, 114, 11, 41, 2, 0, 55, 3, 192, 2, 32, 3, 65, 192, 2, 106, 16, 133, 1, 33, 4, 32, 3, 65, 180, 1, 106, 65, 9, 54, 2, 0, 32, 3, 65, 236, 2, 106, 65, 2, 54, 2, 0, 32, 3, 65, 10, 54, 2, 172, 1, 32, 3, 66, 2, 55, 2, 220, 2, 32, 3, 65, 244, 132, 192, 0, 54, 2, 216, 2, 32, 3, 32, 4, 58, 0, 215, 2, 32, 3, 32, 3, 65, 192, 2, 106, 54, 2, 176, 1, 32, 3, 32, 3, 65, 215, 2, 106, 54, 2, 168, 1, 32, 3, 32, 3, 65, 168, 1, 106, 54, 2, 232, 2, 32, 3, 65, 200, 2, 106, 32, 3, 65, 216, 2, 106, 16, 51, 32, 3, 40, 2, 200, 2, 34, 5, 32, 3, 40, 2, 208, 2, 16, 0, 33, 4, 32, 3, 40, 2, 204, 2, 34, 6, 4, 64, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 45, 0, 192, 2, 65, 2, 79, 4, 64, 32, 3, 40, 2, 196, 2, 34, 5, 40, 2, 0, 32, 5, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 5, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 5, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 196, 2, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 12, 1, 11, 32, 3, 65, 160, 1, 106, 41, 3, 0, 33, 8, 32, 3, 40, 2, 156, 1, 33, 4, 65, 0, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 13, 2, 2, 64, 32, 8, 167, 34, 5, 32, 8, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 4, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 4, 32, 5, 65, 1, 16, 156, 1, 12, 1, 11, 32, 4, 32, 5, 32, 2, 16, 143, 1, 34, 1, 69, 13, 4, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 240, 3, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 65, 8, 65, 1, 16, 165, 1, 0, 11, 32, 4, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 169, 8, 1, 6, 127, 35, 0, 65, 240, 0, 107, 34, 5, 36, 0, 32, 5, 32, 3, 54, 2, 12, 32, 5, 32, 2, 54, 2, 8, 65, 1, 33, 6, 32, 1, 33, 7, 2, 64, 32, 1, 65, 129, 2, 73, 13, 0, 65, 0, 32, 1, 107, 33, 9, 65, 128, 2, 33, 8, 3, 64, 2, 64, 32, 8, 32, 1, 79, 13, 0, 65, 0, 33, 6, 32, 0, 32, 8, 106, 44, 0, 0, 65, 191, 127, 76, 13, 0, 32, 8, 33, 7, 12, 2, 11, 32, 8, 65, 127, 106, 33, 7, 65, 0, 33, 6, 32, 8, 65, 1, 70, 13, 1, 32, 8, 32, 9, 106, 32, 7, 33, 8, 65, 1, 71, 13, 0, 11, 11, 32, 5, 32, 7, 54, 2, 20, 32, 5, 32, 0, 54, 2, 16, 32, 5, 65, 0, 65, 5, 32, 6, 27, 54, 2, 28, 32, 5, 65, 228, 196, 193, 0, 65, 136, 203, 193, 0, 32, 6, 27, 54, 2, 24, 2, 64, 2, 127, 2, 64, 2, 64, 32, 2, 32, 1, 75, 34, 6, 32, 3, 32, 1, 75, 114, 69, 4, 64, 32, 2, 32, 3, 75, 13, 1, 2, 64, 32, 2, 69, 32, 1, 32, 2, 70, 114, 69, 4, 64, 32, 1, 32, 2, 77, 13, 1, 32, 0, 32, 2, 106, 44, 0, 0, 65, 64, 72, 13, 1, 11, 32, 3, 33, 2, 11, 32, 5, 32, 2, 54, 2, 32, 32, 2, 65, 0, 32, 1, 32, 2, 71, 27, 69, 4, 64, 32, 2, 33, 6, 12, 3, 11, 32, 1, 65, 1, 106, 33, 3, 3, 64, 2, 64, 32, 2, 32, 1, 79, 13, 0, 32, 0, 32, 2, 106, 44, 0, 0, 65, 64, 72, 13, 0, 32, 2, 33, 6, 32, 5, 65, 36, 106, 12, 5, 11, 32, 2, 65, 127, 106, 33, 6, 32, 2, 65, 1, 70, 13, 3, 32, 2, 32, 3, 70, 32, 6, 33, 2, 69, 13, 0, 11, 12, 2, 11, 32, 5, 32, 2, 32, 3, 32, 6, 27, 54, 2, 40, 32, 5, 65, 196, 0, 106, 65, 3, 54, 2, 0, 32, 5, 65, 220, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 212, 0, 106, 65, 62, 54, 2, 0, 32, 5, 66, 3, 55, 2, 52, 32, 5, 65, 176, 203, 193, 0, 54, 2, 48, 32, 5, 65, 61, 54, 2, 76, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 64, 32, 5, 32, 5, 65, 24, 106, 54, 2, 88, 32, 5, 32, 5, 65, 16, 106, 54, 2, 80, 32, 5, 32, 5, 65, 40, 106, 54, 2, 72, 12, 3, 11, 32, 5, 65, 228, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 220, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 212, 0, 106, 65, 61, 54, 2, 0, 32, 5, 65, 196, 0, 106, 65, 4, 54, 2, 0, 32, 5, 66, 4, 55, 2, 52, 32, 5, 65, 236, 203, 193, 0, 54, 2, 48, 32, 5, 65, 61, 54, 2, 76, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 64, 32, 5, 32, 5, 65, 24, 106, 54, 2, 96, 32, 5, 32, 5, 65, 16, 106, 54, 2, 88, 32, 5, 32, 5, 65, 12, 106, 54, 2, 80, 32, 5, 32, 5, 65, 8, 106, 54, 2, 72, 12, 2, 11, 32, 5, 65, 36, 106, 11, 33, 8, 2, 64, 32, 1, 32, 6, 70, 13, 0, 65, 1, 33, 3, 65, 0, 33, 9, 2, 64, 32, 0, 32, 6, 106, 34, 7, 44, 0, 0, 34, 2, 65, 0, 78, 4, 64, 32, 5, 32, 2, 65, 255, 1, 113, 54, 2, 36, 32, 5, 65, 40, 106, 33, 1, 12, 1, 11, 32, 0, 32, 1, 106, 34, 1, 33, 3, 32, 1, 32, 7, 65, 1, 106, 71, 4, 64, 32, 7, 45, 0, 1, 65, 63, 113, 33, 9, 32, 7, 65, 2, 106, 33, 3, 11, 32, 2, 65, 31, 113, 33, 10, 2, 64, 32, 2, 65, 255, 1, 113, 65, 224, 1, 73, 4, 64, 32, 9, 32, 10, 65, 6, 116, 114, 33, 2, 12, 1, 11, 65, 0, 33, 0, 32, 1, 33, 7, 32, 1, 32, 3, 71, 4, 127, 32, 3, 65, 1, 106, 33, 7, 32, 3, 45, 0, 0, 65, 63, 113, 5, 32, 0, 11, 32, 9, 65, 6, 116, 114, 33, 0, 32, 2, 65, 255, 1, 113, 65, 240, 1, 73, 4, 64, 32, 0, 32, 10, 65, 12, 116, 114, 33, 2, 12, 1, 11, 65, 0, 33, 2, 32, 1, 32, 7, 71, 4, 127, 32, 7, 45, 0, 0, 65, 63, 113, 5, 32, 2, 11, 32, 10, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 0, 65, 6, 116, 114, 114, 34, 2, 65, 128, 128, 196, 0, 70, 13, 2, 11, 32, 5, 32, 2, 54, 2, 36, 65, 1, 33, 3, 32, 5, 65, 40, 106, 33, 1, 32, 2, 65, 128, 1, 73, 13, 0, 65, 2, 33, 3, 32, 2, 65, 128, 16, 73, 13, 0, 65, 3, 65, 4, 32, 2, 65, 128, 128, 4, 73, 27, 33, 3, 11, 32, 5, 32, 6, 54, 2, 40, 32, 5, 32, 3, 32, 6, 106, 54, 2, 44, 32, 5, 65, 196, 0, 106, 65, 5, 54, 2, 0, 32, 5, 65, 236, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 228, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 220, 0, 106, 65, 63, 54, 2, 0, 32, 5, 65, 212, 0, 106, 65, 192, 0, 54, 2, 0, 32, 5, 66, 5, 55, 2, 52, 32, 5, 65, 192, 204, 193, 0, 54, 2, 48, 32, 5, 32, 1, 54, 2, 88, 32, 5, 32, 8, 54, 2, 80, 32, 5, 65, 61, 54, 2, 76, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 64, 32, 5, 32, 5, 65, 24, 106, 54, 2, 104, 32, 5, 32, 5, 65, 16, 106, 54, 2, 96, 32, 5, 32, 5, 65, 32, 106, 54, 2, 72, 12, 1, 11, 65, 240, 196, 193, 0, 65, 43, 32, 4, 16, 114, 0, 11, 32, 5, 65, 48, 106, 32, 4, 16, 130, 1, 0, 11, 176, 8, 2, 11, 127, 1, 126, 35, 0, 65, 208, 0, 107, 34, 2, 36, 0, 32, 2, 16, 124, 32, 2, 32, 1, 54, 2, 24, 32, 2, 65, 40, 106, 65, 0, 59, 1, 0, 32, 2, 66, 0, 55, 3, 32, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 32, 2, 65, 32, 106, 65, 10, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 2, 64, 32, 2, 45, 0, 32, 65, 31, 70, 4, 64, 32, 2, 45, 0, 33, 65, 139, 1, 70, 13, 1, 11, 16, 90, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 5, 11, 32, 2, 45, 0, 34, 65, 8, 71, 4, 64, 16, 90, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 5, 11, 32, 2, 45, 0, 41, 33, 9, 32, 2, 40, 2, 36, 33, 10, 32, 2, 45, 0, 35, 34, 6, 65, 4, 113, 69, 13, 3, 32, 2, 65, 0, 59, 1, 64, 32, 2, 32, 2, 65, 64, 107, 65, 2, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 71, 13, 2, 2, 64, 32, 2, 47, 1, 64, 34, 3, 69, 4, 64, 65, 1, 33, 5, 12, 1, 11, 32, 3, 16, 139, 1, 34, 5, 69, 13, 2, 11, 32, 2, 32, 5, 32, 3, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 70, 13, 3, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 3, 69, 13, 4, 32, 5, 32, 3, 65, 1, 16, 156, 1, 12, 4, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 3, 11, 32, 3, 65, 1, 16, 165, 1, 0, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 127, 2, 64, 2, 64, 32, 6, 65, 8, 113, 4, 64, 32, 2, 65, 0, 54, 2, 56, 32, 2, 66, 1, 55, 3, 48, 32, 2, 32, 2, 54, 2, 60, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 2, 64, 32, 2, 45, 0, 64, 34, 1, 65, 2, 70, 13, 0, 3, 64, 32, 1, 65, 255, 1, 113, 65, 1, 70, 13, 3, 32, 2, 45, 0, 65, 34, 4, 69, 13, 1, 32, 2, 40, 2, 56, 34, 1, 32, 2, 40, 2, 52, 70, 4, 127, 32, 2, 65, 48, 106, 32, 1, 65, 1, 16, 75, 32, 2, 40, 2, 56, 5, 32, 1, 11, 32, 2, 40, 2, 48, 106, 32, 4, 58, 0, 0, 32, 2, 32, 2, 40, 2, 56, 65, 1, 106, 54, 2, 56, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 32, 2, 45, 0, 64, 34, 1, 65, 2, 71, 13, 0, 11, 11, 32, 2, 40, 2, 56, 33, 11, 32, 2, 40, 2, 48, 33, 8, 32, 2, 40, 2, 52, 33, 7, 11, 32, 6, 65, 16, 113, 13, 1, 65, 0, 12, 2, 11, 32, 2, 41, 2, 68, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 2, 40, 2, 52, 34, 0, 69, 13, 4, 32, 2, 40, 2, 48, 32, 0, 65, 1, 16, 156, 1, 12, 4, 11, 32, 2, 65, 0, 54, 2, 56, 32, 2, 66, 1, 55, 3, 48, 32, 2, 32, 2, 54, 2, 60, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 2, 64, 32, 2, 45, 0, 64, 34, 1, 65, 2, 70, 13, 0, 3, 64, 32, 1, 65, 255, 1, 113, 65, 1, 70, 13, 3, 32, 2, 45, 0, 65, 34, 4, 69, 13, 1, 32, 2, 40, 2, 56, 34, 1, 32, 2, 40, 2, 52, 70, 4, 127, 32, 2, 65, 48, 106, 32, 1, 65, 1, 16, 75, 32, 2, 40, 2, 56, 5, 32, 1, 11, 32, 2, 40, 2, 48, 106, 32, 4, 58, 0, 0, 32, 2, 32, 2, 40, 2, 56, 65, 1, 106, 54, 2, 56, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 32, 2, 45, 0, 64, 34, 1, 65, 2, 71, 13, 0, 11, 11, 32, 2, 40, 2, 52, 33, 4, 32, 2, 40, 2, 56, 33, 12, 32, 2, 40, 2, 48, 11, 33, 1, 32, 6, 65, 2, 113, 69, 13, 3, 32, 2, 16, 147, 1, 33, 6, 32, 2, 65, 0, 59, 1, 64, 32, 2, 32, 2, 65, 64, 107, 65, 2, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 2, 47, 1, 64, 32, 6, 65, 255, 255, 3, 113, 70, 13, 4, 16, 79, 33, 13, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 1, 69, 32, 4, 69, 114, 13, 1, 32, 1, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 2, 41, 2, 68, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 2, 40, 2, 52, 34, 0, 69, 13, 0, 32, 2, 40, 2, 48, 32, 0, 65, 1, 16, 156, 1, 11, 32, 7, 69, 32, 8, 69, 114, 13, 0, 32, 8, 32, 7, 65, 1, 16, 156, 1, 11, 32, 3, 69, 32, 5, 69, 114, 13, 1, 32, 5, 32, 3, 65, 1, 16, 156, 1, 12, 1, 11, 32, 0, 32, 5, 54, 2, 4, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 44, 106, 32, 9, 58, 0, 0, 32, 0, 65, 40, 106, 32, 10, 54, 2, 0, 32, 0, 65, 36, 106, 32, 12, 54, 2, 0, 32, 0, 65, 32, 106, 32, 4, 54, 2, 0, 32, 0, 65, 28, 106, 32, 1, 54, 2, 0, 32, 0, 65, 24, 106, 32, 11, 54, 2, 0, 32, 0, 65, 20, 106, 32, 7, 54, 2, 0, 32, 0, 65, 16, 106, 32, 8, 54, 2, 0, 32, 0, 65, 12, 106, 32, 3, 54, 2, 0, 32, 0, 65, 8, 106, 32, 3, 54, 2, 0, 11, 32, 2, 65, 208, 0, 106, 36, 0, 11, 152, 7, 1, 10, 127, 32, 0, 40, 2, 16, 33, 3, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 8, 34, 12, 65, 1, 70, 4, 64, 32, 3, 65, 1, 71, 13, 2, 12, 1, 11, 32, 3, 65, 1, 70, 13, 0, 12, 2, 11, 32, 1, 32, 2, 106, 33, 3, 2, 64, 2, 64, 32, 0, 65, 20, 106, 40, 2, 0, 34, 8, 69, 4, 64, 32, 1, 33, 4, 12, 1, 11, 32, 1, 33, 4, 3, 64, 32, 3, 32, 4, 34, 7, 70, 13, 2, 32, 7, 65, 1, 106, 33, 4, 2, 64, 32, 7, 44, 0, 0, 34, 6, 65, 127, 74, 13, 0, 32, 6, 65, 255, 1, 113, 33, 9, 2, 127, 32, 3, 32, 4, 70, 4, 64, 65, 0, 33, 10, 32, 3, 12, 1, 11, 32, 7, 45, 0, 1, 65, 63, 113, 33, 10, 32, 7, 65, 2, 106, 34, 4, 11, 33, 6, 32, 9, 65, 224, 1, 73, 13, 0, 2, 127, 32, 3, 32, 6, 70, 4, 64, 65, 0, 33, 11, 32, 3, 12, 1, 11, 32, 6, 45, 0, 0, 65, 63, 113, 33, 11, 32, 6, 65, 1, 106, 34, 4, 11, 33, 6, 32, 9, 65, 240, 1, 73, 13, 0, 32, 3, 32, 6, 70, 4, 127, 65, 0, 5, 32, 6, 65, 1, 106, 33, 4, 32, 6, 45, 0, 0, 65, 63, 113, 11, 32, 9, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 10, 65, 12, 116, 114, 32, 11, 65, 6, 116, 114, 114, 65, 128, 128, 196, 0, 70, 13, 3, 11, 32, 4, 32, 7, 107, 32, 5, 106, 33, 5, 32, 8, 65, 127, 106, 34, 8, 13, 0, 11, 11, 32, 3, 32, 4, 70, 13, 0, 2, 64, 32, 4, 44, 0, 0, 34, 7, 65, 127, 74, 13, 0, 2, 127, 32, 3, 32, 4, 65, 1, 106, 70, 4, 64, 32, 3, 33, 8, 65, 0, 12, 1, 11, 32, 4, 65, 2, 106, 33, 8, 32, 4, 45, 0, 1, 65, 63, 113, 65, 6, 116, 11, 32, 7, 65, 255, 1, 113, 65, 224, 1, 73, 13, 0, 2, 127, 32, 3, 32, 8, 70, 4, 64, 32, 3, 33, 6, 65, 0, 12, 1, 11, 32, 8, 65, 1, 106, 33, 6, 32, 8, 45, 0, 0, 65, 63, 113, 11, 32, 7, 65, 255, 1, 113, 65, 240, 1, 73, 13, 0, 32, 7, 65, 255, 1, 113, 33, 7, 114, 33, 4, 32, 3, 32, 6, 70, 4, 127, 65, 0, 5, 32, 6, 45, 0, 0, 65, 63, 113, 11, 32, 7, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 4, 65, 6, 116, 114, 114, 65, 128, 128, 196, 0, 70, 13, 1, 11, 2, 64, 32, 5, 69, 32, 2, 32, 5, 70, 114, 69, 4, 64, 65, 0, 33, 3, 32, 5, 32, 2, 79, 13, 1, 32, 1, 32, 5, 106, 44, 0, 0, 65, 64, 72, 13, 1, 11, 32, 1, 33, 3, 11, 32, 5, 32, 2, 32, 3, 27, 33, 2, 32, 3, 32, 1, 32, 3, 27, 33, 1, 11, 32, 12, 65, 1, 70, 13, 0, 12, 1, 11, 2, 64, 32, 2, 4, 64, 65, 0, 33, 4, 32, 2, 33, 5, 32, 1, 33, 3, 3, 64, 32, 4, 32, 3, 45, 0, 0, 65, 192, 1, 113, 65, 128, 1, 71, 106, 33, 4, 32, 3, 65, 1, 106, 33, 3, 32, 5, 65, 127, 106, 34, 5, 13, 0, 11, 32, 4, 32, 0, 40, 2, 12, 34, 6, 79, 13, 2, 65, 0, 33, 4, 32, 2, 33, 5, 32, 1, 33, 3, 3, 64, 32, 4, 32, 3, 45, 0, 0, 65, 192, 1, 113, 65, 128, 1, 71, 106, 33, 4, 32, 3, 65, 1, 106, 33, 3, 32, 5, 65, 127, 106, 34, 5, 13, 0, 11, 12, 1, 11, 65, 0, 33, 4, 32, 0, 40, 2, 12, 34, 6, 13, 0, 12, 1, 11, 65, 0, 33, 3, 32, 6, 32, 4, 107, 34, 4, 33, 5, 2, 64, 2, 64, 2, 64, 65, 0, 32, 0, 45, 0, 32, 34, 6, 32, 6, 65, 3, 70, 27, 65, 3, 113, 65, 1, 107, 14, 3, 1, 0, 1, 2, 11, 32, 4, 65, 1, 118, 33, 3, 32, 4, 65, 1, 106, 65, 1, 118, 33, 5, 12, 1, 11, 65, 0, 33, 5, 32, 4, 33, 3, 11, 32, 3, 65, 1, 106, 33, 3, 2, 127, 2, 64, 3, 64, 32, 3, 65, 127, 106, 34, 3, 4, 64, 32, 0, 40, 2, 24, 32, 0, 40, 2, 4, 32, 0, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 1, 12, 2, 11, 11, 32, 0, 40, 2, 4, 33, 4, 65, 1, 32, 0, 40, 2, 24, 32, 1, 32, 2, 32, 0, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 1, 26, 32, 5, 65, 1, 106, 33, 3, 32, 0, 40, 2, 28, 33, 1, 32, 0, 40, 2, 24, 33, 0, 3, 64, 32, 3, 65, 127, 106, 34, 3, 69, 4, 64, 65, 0, 15, 11, 32, 0, 32, 4, 32, 1, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 11, 65, 1, 11, 15, 11, 32, 0, 40, 2, 24, 32, 1, 32, 2, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 153, 8, 2, 11, 127, 1, 126, 65, 1, 33, 9, 2, 64, 2, 64, 32, 2, 40, 2, 24, 65, 34, 32, 2, 65, 28, 106, 40, 2, 0, 40, 2, 16, 17, 0, 0, 13, 0, 2, 64, 32, 1, 69, 4, 64, 12, 1, 11, 32, 0, 32, 1, 106, 33, 10, 32, 0, 34, 6, 33, 12, 3, 64, 2, 64, 32, 6, 65, 1, 106, 33, 5, 2, 64, 2, 64, 32, 6, 44, 0, 0, 34, 7, 65, 0, 78, 4, 64, 32, 7, 65, 255, 1, 113, 33, 4, 12, 1, 11, 2, 127, 32, 5, 32, 10, 70, 4, 64, 65, 0, 33, 4, 32, 10, 12, 1, 11, 32, 6, 45, 0, 1, 65, 63, 113, 33, 4, 32, 6, 65, 2, 106, 34, 5, 11, 33, 6, 32, 7, 65, 31, 113, 33, 11, 32, 7, 65, 255, 1, 113, 34, 13, 65, 224, 1, 73, 4, 64, 32, 4, 32, 11, 65, 6, 116, 114, 33, 4, 12, 1, 11, 2, 127, 32, 6, 32, 10, 70, 4, 64, 65, 0, 33, 9, 32, 10, 12, 1, 11, 32, 6, 45, 0, 0, 65, 63, 113, 33, 9, 32, 6, 65, 1, 106, 34, 5, 11, 33, 7, 32, 9, 32, 4, 65, 6, 116, 114, 33, 4, 32, 13, 65, 240, 1, 73, 4, 64, 32, 4, 32, 11, 65, 12, 116, 114, 33, 4, 12, 1, 11, 2, 127, 32, 7, 32, 10, 70, 4, 64, 32, 5, 33, 6, 65, 0, 12, 1, 11, 32, 7, 65, 1, 106, 33, 6, 32, 7, 45, 0, 0, 65, 63, 113, 11, 32, 11, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 4, 65, 6, 116, 114, 114, 34, 4, 65, 128, 128, 196, 0, 71, 13, 1, 12, 2, 11, 32, 5, 33, 6, 11, 65, 2, 33, 5, 65, 244, 0, 33, 7, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 119, 106, 14, 31, 5, 1, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 2, 11, 65, 242, 0, 33, 7, 12, 4, 11, 65, 238, 0, 33, 7, 12, 3, 11, 32, 4, 65, 220, 0, 70, 13, 1, 11, 32, 4, 16, 40, 69, 4, 64, 32, 4, 16, 21, 13, 3, 11, 32, 4, 65, 1, 114, 103, 65, 2, 118, 65, 7, 115, 173, 66, 128, 128, 128, 128, 208, 0, 132, 33, 14, 65, 3, 33, 5, 11, 32, 4, 33, 7, 11, 2, 64, 2, 64, 32, 8, 32, 3, 73, 13, 0, 32, 3, 69, 32, 1, 32, 3, 70, 114, 69, 4, 64, 32, 3, 32, 1, 79, 13, 1, 32, 0, 32, 3, 106, 44, 0, 0, 65, 191, 127, 76, 13, 1, 11, 32, 8, 69, 32, 1, 32, 8, 70, 114, 69, 4, 64, 32, 8, 32, 1, 79, 13, 1, 32, 0, 32, 8, 106, 44, 0, 0, 65, 191, 127, 76, 13, 1, 11, 32, 2, 40, 2, 24, 32, 0, 32, 3, 106, 32, 8, 32, 3, 107, 32, 2, 40, 2, 28, 40, 2, 12, 17, 1, 0, 69, 13, 1, 65, 1, 15, 11, 32, 0, 32, 1, 32, 3, 32, 8, 65, 160, 201, 193, 0, 16, 12, 0, 11, 3, 64, 32, 5, 33, 11, 65, 1, 33, 9, 65, 220, 0, 33, 3, 65, 1, 33, 5, 2, 64, 2, 126, 2, 64, 2, 64, 2, 64, 2, 64, 32, 11, 65, 1, 107, 14, 3, 1, 5, 0, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 14, 66, 32, 136, 167, 65, 255, 1, 113, 65, 1, 107, 14, 5, 3, 2, 1, 0, 6, 5, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 48, 132, 33, 14, 65, 3, 33, 5, 65, 245, 0, 33, 3, 12, 7, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 32, 132, 33, 14, 65, 3, 33, 5, 65, 251, 0, 33, 3, 12, 6, 11, 65, 48, 65, 215, 0, 32, 7, 32, 14, 167, 34, 5, 65, 2, 116, 65, 28, 113, 118, 65, 15, 113, 34, 3, 65, 10, 73, 27, 32, 3, 106, 33, 3, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 16, 132, 32, 5, 69, 13, 4, 26, 32, 14, 66, 127, 124, 66, 255, 255, 255, 255, 15, 131, 32, 14, 66, 128, 128, 128, 128, 112, 131, 132, 12, 4, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 33, 14, 65, 3, 33, 5, 65, 253, 0, 33, 3, 12, 4, 11, 65, 0, 33, 5, 32, 7, 33, 3, 12, 3, 11, 2, 127, 65, 1, 32, 4, 65, 128, 1, 73, 13, 0, 26, 65, 2, 32, 4, 65, 128, 16, 73, 13, 0, 26, 65, 3, 65, 4, 32, 4, 65, 128, 128, 4, 73, 27, 11, 32, 8, 106, 33, 3, 12, 4, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 192, 0, 132, 11, 33, 14, 65, 3, 33, 5, 11, 32, 2, 40, 2, 24, 32, 3, 32, 2, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 12, 4, 11, 32, 8, 32, 12, 107, 32, 6, 106, 33, 8, 32, 6, 33, 12, 32, 6, 32, 10, 71, 13, 1, 11, 11, 32, 3, 69, 32, 1, 32, 3, 70, 114, 13, 0, 32, 3, 32, 1, 79, 13, 2, 32, 0, 32, 3, 106, 44, 0, 0, 65, 191, 127, 76, 13, 2, 11, 65, 1, 33, 9, 32, 2, 40, 2, 24, 32, 0, 32, 3, 106, 32, 1, 32, 3, 107, 32, 2, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 0, 32, 2, 40, 2, 24, 65, 34, 32, 2, 40, 2, 28, 40, 2, 16, 17, 0, 0, 33, 9, 11, 32, 9, 15, 11, 32, 0, 32, 1, 32, 3, 32, 1, 65, 176, 201, 193, 0, 16, 12, 0, 11, 229, 7, 2, 11, 127, 2, 126, 32, 1, 65, 33, 106, 45, 0, 0, 33, 11, 32, 1, 65, 24, 106, 40, 2, 0, 33, 8, 32, 1, 65, 16, 106, 40, 2, 0, 33, 6, 32, 1, 40, 2, 28, 33, 9, 32, 1, 45, 0, 32, 33, 12, 32, 1, 40, 2, 20, 33, 3, 32, 1, 40, 2, 12, 33, 5, 32, 1, 41, 2, 4, 33, 14, 32, 1, 40, 2, 0, 33, 7, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 65, 10, 16, 139, 1, 34, 1, 4, 64, 32, 0, 32, 1, 54, 2, 0, 32, 0, 65, 4, 106, 34, 10, 66, 138, 128, 128, 128, 160, 1, 55, 2, 0, 2, 64, 32, 7, 69, 13, 0, 32, 0, 65, 10, 65, 1, 16, 75, 32, 0, 40, 2, 0, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 106, 32, 14, 66, 32, 136, 34, 15, 60, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 10, 40, 2, 0, 32, 4, 70, 4, 127, 32, 0, 32, 4, 65, 1, 16, 75, 32, 1, 40, 2, 0, 5, 32, 4, 11, 32, 0, 40, 2, 0, 106, 32, 14, 66, 40, 136, 60, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 0, 32, 4, 32, 15, 167, 34, 4, 16, 75, 32, 0, 40, 2, 0, 32, 1, 40, 2, 0, 106, 32, 7, 32, 4, 16, 121, 26, 32, 1, 32, 1, 40, 2, 0, 32, 4, 106, 54, 2, 0, 65, 4, 33, 4, 32, 14, 167, 34, 1, 69, 13, 0, 32, 7, 32, 1, 65, 1, 16, 156, 1, 11, 2, 64, 32, 5, 69, 13, 0, 32, 0, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 32, 6, 16, 75, 32, 4, 65, 8, 114, 33, 4, 32, 6, 69, 4, 64, 32, 5, 65, 0, 58, 0, 0, 12, 1, 11, 32, 5, 32, 6, 106, 33, 7, 32, 1, 40, 2, 0, 34, 10, 32, 0, 40, 2, 0, 106, 33, 13, 65, 0, 33, 1, 3, 64, 32, 1, 32, 13, 106, 32, 1, 32, 5, 106, 45, 0, 0, 58, 0, 0, 32, 6, 32, 1, 65, 1, 106, 34, 1, 71, 13, 0, 11, 32, 0, 65, 8, 106, 32, 7, 32, 10, 32, 5, 107, 106, 54, 2, 0, 32, 5, 65, 0, 58, 0, 0, 32, 6, 69, 13, 0, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 2, 64, 32, 3, 69, 13, 0, 32, 0, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 32, 8, 16, 75, 32, 4, 65, 16, 114, 33, 4, 32, 8, 69, 4, 64, 32, 3, 65, 0, 58, 0, 0, 12, 1, 11, 32, 3, 32, 8, 106, 33, 5, 32, 1, 40, 2, 0, 34, 6, 32, 0, 40, 2, 0, 106, 33, 7, 65, 0, 33, 1, 3, 64, 32, 1, 32, 7, 106, 32, 1, 32, 3, 106, 45, 0, 0, 58, 0, 0, 32, 8, 32, 1, 65, 1, 106, 34, 1, 71, 13, 0, 11, 32, 0, 65, 8, 106, 32, 5, 32, 6, 32, 3, 107, 106, 54, 2, 0, 32, 3, 65, 0, 58, 0, 0, 32, 8, 69, 13, 0, 32, 3, 32, 8, 65, 1, 16, 156, 1, 11, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 69, 13, 1, 32, 0, 40, 2, 0, 65, 31, 58, 0, 0, 32, 1, 40, 2, 0, 34, 1, 65, 1, 77, 13, 2, 32, 0, 40, 2, 0, 65, 139, 1, 58, 0, 1, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 2, 77, 13, 3, 32, 0, 40, 2, 0, 65, 8, 58, 0, 2, 32, 1, 40, 2, 0, 34, 1, 65, 3, 77, 13, 4, 32, 0, 40, 2, 0, 32, 4, 58, 0, 3, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 4, 77, 13, 5, 32, 0, 40, 2, 0, 32, 9, 58, 0, 4, 32, 1, 40, 2, 0, 34, 1, 65, 5, 77, 13, 6, 32, 0, 40, 2, 0, 32, 9, 65, 8, 118, 58, 0, 5, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 6, 77, 13, 7, 32, 0, 40, 2, 0, 32, 9, 65, 16, 118, 58, 0, 6, 32, 1, 40, 2, 0, 34, 1, 65, 7, 77, 13, 8, 32, 0, 40, 2, 0, 32, 9, 65, 24, 118, 58, 0, 7, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 8, 77, 13, 9, 32, 0, 40, 2, 0, 32, 2, 65, 2, 73, 65, 2, 116, 65, 2, 32, 2, 65, 9, 73, 27, 58, 0, 8, 32, 1, 40, 2, 0, 34, 1, 65, 9, 77, 13, 10, 32, 0, 40, 2, 0, 32, 11, 65, 127, 32, 12, 27, 58, 0, 9, 15, 11, 65, 10, 65, 1, 16, 165, 1, 0, 11, 65, 0, 65, 0, 65, 148, 142, 192, 0, 16, 98, 0, 11, 65, 1, 32, 1, 65, 164, 142, 192, 0, 16, 98, 0, 11, 65, 2, 32, 3, 65, 180, 142, 192, 0, 16, 98, 0, 11, 65, 3, 32, 1, 65, 196, 142, 192, 0, 16, 98, 0, 11, 65, 4, 32, 3, 65, 212, 142, 192, 0, 16, 98, 0, 11, 65, 5, 32, 1, 65, 228, 142, 192, 0, 16, 98, 0, 11, 65, 6, 32, 3, 65, 244, 142, 192, 0, 16, 98, 0, 11, 65, 7, 32, 1, 65, 132, 143, 192, 0, 16, 98, 0, 11, 65, 8, 32, 3, 65, 148, 143, 192, 0, 16, 98, 0, 11, 65, 9, 32, 1, 65, 164, 143, 192, 0, 16, 98, 0, 11, 172, 7, 2, 7, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 3, 36, 0, 32, 3, 65, 8, 106, 65, 0, 16, 136, 1, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 4, 4, 64, 32, 3, 65, 48, 106, 34, 5, 66, 128, 128, 2, 55, 3, 0, 32, 3, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 3, 32, 4, 54, 2, 44, 32, 3, 66, 1, 55, 3, 32, 32, 3, 65, 8, 106, 32, 1, 32, 2, 16, 44, 33, 10, 32, 3, 65, 240, 0, 106, 34, 4, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 232, 0, 106, 34, 5, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 224, 0, 106, 34, 6, 32, 3, 41, 3, 32, 55, 3, 0, 32, 3, 65, 216, 0, 106, 34, 7, 32, 3, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 208, 0, 106, 34, 8, 32, 3, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 8, 55, 3, 72, 2, 127, 2, 64, 32, 3, 2, 127, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 3, 65, 195, 0, 106, 32, 10, 66, 56, 136, 60, 0, 0, 32, 3, 65, 193, 0, 106, 32, 10, 66, 40, 136, 61, 0, 0, 32, 3, 32, 9, 58, 0, 60, 32, 3, 65, 1, 54, 2, 56, 32, 3, 32, 10, 66, 8, 136, 62, 0, 61, 2, 64, 32, 3, 40, 2, 96, 69, 13, 0, 32, 3, 65, 200, 0, 106, 16, 58, 34, 10, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 10, 66, 32, 136, 167, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 4, 65, 12, 65, 4, 16, 156, 1, 11, 32, 3, 40, 2, 96, 34, 4, 69, 13, 0, 32, 3, 65, 228, 0, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 40, 2, 88, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 3, 65, 240, 0, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 108, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 56, 106, 65, 4, 114, 12, 1, 11, 32, 3, 65, 184, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 176, 1, 106, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 3, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 72, 55, 3, 144, 1, 32, 3, 65, 56, 106, 32, 3, 65, 144, 1, 106, 16, 61, 32, 3, 40, 2, 56, 65, 1, 71, 13, 1, 32, 3, 65, 56, 106, 65, 4, 114, 11, 41, 2, 0, 55, 3, 120, 32, 3, 65, 248, 0, 106, 16, 133, 1, 33, 4, 32, 3, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 3, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 3, 65, 10, 54, 2, 76, 32, 3, 66, 2, 55, 2, 148, 1, 32, 3, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 3, 32, 4, 58, 0, 143, 1, 32, 3, 32, 3, 65, 248, 0, 106, 54, 2, 80, 32, 3, 32, 3, 65, 143, 1, 106, 54, 2, 72, 32, 3, 32, 3, 65, 200, 0, 106, 54, 2, 160, 1, 32, 3, 65, 128, 1, 106, 32, 3, 65, 144, 1, 106, 16, 51, 32, 3, 40, 2, 128, 1, 34, 5, 32, 3, 40, 2, 136, 1, 16, 0, 33, 4, 32, 3, 40, 2, 132, 1, 34, 6, 4, 64, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 45, 0, 120, 65, 2, 79, 4, 64, 32, 3, 40, 2, 124, 34, 5, 40, 2, 0, 32, 5, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 5, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 5, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 12, 1, 11, 32, 3, 65, 64, 107, 41, 3, 0, 33, 10, 32, 3, 40, 2, 60, 33, 4, 65, 0, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 13, 1, 2, 64, 32, 10, 167, 34, 5, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 4, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 4, 32, 5, 65, 1, 16, 156, 1, 12, 1, 11, 32, 4, 32, 5, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 4, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 172, 7, 2, 7, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 3, 36, 0, 32, 3, 65, 8, 106, 65, 1, 16, 136, 1, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 4, 4, 64, 32, 3, 65, 48, 106, 34, 5, 66, 128, 128, 2, 55, 3, 0, 32, 3, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 3, 32, 4, 54, 2, 44, 32, 3, 66, 1, 55, 3, 32, 32, 3, 65, 8, 106, 32, 1, 32, 2, 16, 43, 33, 10, 32, 3, 65, 240, 0, 106, 34, 4, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 232, 0, 106, 34, 5, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 224, 0, 106, 34, 6, 32, 3, 41, 3, 32, 55, 3, 0, 32, 3, 65, 216, 0, 106, 34, 7, 32, 3, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 208, 0, 106, 34, 8, 32, 3, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 8, 55, 3, 72, 2, 127, 2, 64, 32, 3, 2, 127, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 3, 65, 195, 0, 106, 32, 10, 66, 56, 136, 60, 0, 0, 32, 3, 65, 193, 0, 106, 32, 10, 66, 40, 136, 61, 0, 0, 32, 3, 32, 9, 58, 0, 60, 32, 3, 65, 1, 54, 2, 56, 32, 3, 32, 10, 66, 8, 136, 62, 0, 61, 2, 64, 32, 3, 40, 2, 96, 69, 13, 0, 32, 3, 65, 200, 0, 106, 16, 58, 34, 10, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 10, 66, 32, 136, 167, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 4, 65, 12, 65, 4, 16, 156, 1, 11, 32, 3, 40, 2, 96, 34, 4, 69, 13, 0, 32, 3, 65, 228, 0, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 40, 2, 88, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 3, 65, 240, 0, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 108, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 56, 106, 65, 4, 114, 12, 1, 11, 32, 3, 65, 184, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 176, 1, 106, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 3, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 72, 55, 3, 144, 1, 32, 3, 65, 56, 106, 32, 3, 65, 144, 1, 106, 16, 61, 32, 3, 40, 2, 56, 65, 1, 71, 13, 1, 32, 3, 65, 56, 106, 65, 4, 114, 11, 41, 2, 0, 55, 3, 120, 32, 3, 65, 248, 0, 106, 16, 133, 1, 33, 4, 32, 3, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 3, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 3, 65, 10, 54, 2, 76, 32, 3, 66, 2, 55, 2, 148, 1, 32, 3, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 3, 32, 4, 58, 0, 143, 1, 32, 3, 32, 3, 65, 248, 0, 106, 54, 2, 80, 32, 3, 32, 3, 65, 143, 1, 106, 54, 2, 72, 32, 3, 32, 3, 65, 200, 0, 106, 54, 2, 160, 1, 32, 3, 65, 128, 1, 106, 32, 3, 65, 144, 1, 106, 16, 51, 32, 3, 40, 2, 128, 1, 34, 5, 32, 3, 40, 2, 136, 1, 16, 0, 33, 4, 32, 3, 40, 2, 132, 1, 34, 6, 4, 64, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 45, 0, 120, 65, 2, 79, 4, 64, 32, 3, 40, 2, 124, 34, 5, 40, 2, 0, 32, 5, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 5, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 5, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 12, 1, 11, 32, 3, 65, 64, 107, 41, 3, 0, 33, 10, 32, 3, 40, 2, 60, 33, 4, 65, 0, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 13, 1, 2, 64, 32, 10, 167, 34, 5, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 4, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 4, 32, 5, 65, 1, 16, 156, 1, 12, 1, 11, 32, 4, 32, 5, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 4, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 218, 6, 2, 5, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 5, 36, 0, 32, 5, 65, 8, 106, 32, 3, 4, 127, 32, 4, 5, 65, 6, 11, 65, 0, 16, 126, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 3, 4, 64, 32, 5, 65, 48, 106, 34, 4, 66, 128, 128, 2, 55, 3, 0, 32, 5, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 5, 32, 3, 54, 2, 44, 32, 5, 66, 1, 55, 3, 32, 32, 5, 65, 8, 106, 32, 1, 32, 2, 16, 45, 33, 10, 32, 5, 65, 240, 0, 106, 34, 3, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 232, 0, 106, 34, 4, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 224, 0, 106, 34, 6, 32, 5, 41, 3, 32, 55, 3, 0, 32, 5, 65, 216, 0, 106, 34, 7, 32, 5, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 5, 65, 208, 0, 106, 34, 8, 32, 5, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 8, 55, 3, 72, 2, 64, 2, 64, 2, 64, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 5, 32, 9, 58, 0, 56, 32, 5, 32, 10, 66, 56, 136, 60, 0, 63, 32, 5, 32, 10, 66, 40, 136, 61, 0, 61, 32, 5, 32, 10, 66, 8, 136, 62, 0, 57, 32, 5, 65, 200, 0, 106, 16, 77, 32, 5, 41, 3, 56, 33, 10, 12, 1, 11, 32, 5, 65, 184, 1, 106, 32, 3, 41, 3, 0, 55, 3, 0, 32, 5, 65, 176, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 5, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 72, 55, 3, 144, 1, 32, 5, 65, 144, 1, 106, 16, 57, 34, 10, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 5, 40, 2, 168, 1, 33, 3, 65, 0, 33, 4, 32, 5, 65, 0, 54, 2, 168, 1, 32, 3, 13, 2, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 32, 5, 32, 10, 55, 3, 56, 32, 5, 65, 144, 1, 106, 16, 77, 11, 32, 5, 32, 10, 55, 3, 120, 32, 5, 65, 248, 0, 106, 16, 133, 1, 33, 3, 32, 5, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 5, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 5, 65, 10, 54, 2, 76, 32, 5, 66, 2, 55, 2, 148, 1, 32, 5, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 5, 32, 3, 58, 0, 143, 1, 32, 5, 32, 5, 65, 248, 0, 106, 54, 2, 80, 32, 5, 32, 5, 65, 143, 1, 106, 54, 2, 72, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 160, 1, 32, 5, 65, 128, 1, 106, 32, 5, 65, 144, 1, 106, 16, 51, 32, 5, 40, 2, 128, 1, 34, 4, 32, 5, 40, 2, 136, 1, 16, 0, 33, 3, 32, 5, 40, 2, 132, 1, 34, 6, 4, 64, 32, 4, 32, 6, 65, 1, 16, 156, 1, 11, 32, 5, 45, 0, 120, 65, 2, 79, 4, 64, 32, 5, 40, 2, 124, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 4, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 5, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 33, 4, 12, 1, 11, 32, 5, 65, 172, 1, 106, 40, 2, 0, 33, 6, 32, 5, 32, 5, 65, 176, 1, 106, 40, 2, 0, 54, 2, 64, 32, 5, 32, 6, 54, 2, 60, 32, 5, 32, 3, 54, 2, 56, 32, 5, 65, 144, 1, 106, 16, 77, 32, 5, 41, 2, 60, 33, 10, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 4, 13, 1, 2, 64, 32, 10, 167, 34, 4, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 3, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 3, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 3, 32, 4, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 5, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 3, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 218, 6, 2, 5, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 5, 36, 0, 32, 5, 65, 8, 106, 32, 3, 4, 127, 32, 4, 5, 65, 6, 11, 65, 1, 16, 126, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 3, 4, 64, 32, 5, 65, 48, 106, 34, 4, 66, 128, 128, 2, 55, 3, 0, 32, 5, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 5, 32, 3, 54, 2, 44, 32, 5, 66, 1, 55, 3, 32, 32, 5, 65, 8, 106, 32, 1, 32, 2, 16, 42, 33, 10, 32, 5, 65, 240, 0, 106, 34, 3, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 232, 0, 106, 34, 4, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 224, 0, 106, 34, 6, 32, 5, 41, 3, 32, 55, 3, 0, 32, 5, 65, 216, 0, 106, 34, 7, 32, 5, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 5, 65, 208, 0, 106, 34, 8, 32, 5, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 8, 55, 3, 72, 2, 64, 2, 64, 2, 64, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 5, 32, 9, 58, 0, 56, 32, 5, 32, 10, 66, 56, 136, 60, 0, 63, 32, 5, 32, 10, 66, 40, 136, 61, 0, 61, 32, 5, 32, 10, 66, 8, 136, 62, 0, 57, 32, 5, 65, 200, 0, 106, 16, 77, 32, 5, 41, 3, 56, 33, 10, 12, 1, 11, 32, 5, 65, 184, 1, 106, 32, 3, 41, 3, 0, 55, 3, 0, 32, 5, 65, 176, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 5, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 72, 55, 3, 144, 1, 32, 5, 65, 144, 1, 106, 16, 57, 34, 10, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 5, 40, 2, 168, 1, 33, 3, 65, 0, 33, 4, 32, 5, 65, 0, 54, 2, 168, 1, 32, 3, 13, 2, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 32, 5, 32, 10, 55, 3, 56, 32, 5, 65, 144, 1, 106, 16, 77, 11, 32, 5, 32, 10, 55, 3, 120, 32, 5, 65, 248, 0, 106, 16, 133, 1, 33, 3, 32, 5, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 5, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 5, 65, 10, 54, 2, 76, 32, 5, 66, 2, 55, 2, 148, 1, 32, 5, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 5, 32, 3, 58, 0, 143, 1, 32, 5, 32, 5, 65, 248, 0, 106, 54, 2, 80, 32, 5, 32, 5, 65, 143, 1, 106, 54, 2, 72, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 160, 1, 32, 5, 65, 128, 1, 106, 32, 5, 65, 144, 1, 106, 16, 51, 32, 5, 40, 2, 128, 1, 34, 4, 32, 5, 40, 2, 136, 1, 16, 0, 33, 3, 32, 5, 40, 2, 132, 1, 34, 6, 4, 64, 32, 4, 32, 6, 65, 1, 16, 156, 1, 11, 32, 5, 45, 0, 120, 65, 2, 79, 4, 64, 32, 5, 40, 2, 124, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 4, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 5, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 33, 4, 12, 1, 11, 32, 5, 65, 172, 1, 106, 40, 2, 0, 33, 6, 32, 5, 32, 5, 65, 176, 1, 106, 40, 2, 0, 54, 2, 64, 32, 5, 32, 6, 54, 2, 60, 32, 5, 32, 3, 54, 2, 56, 32, 5, 65, 144, 1, 106, 16, 77, 32, 5, 41, 2, 60, 33, 10, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 4, 13, 1, 2, 64, 32, 10, 167, 34, 4, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 3, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 3, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 3, 32, 4, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 5, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 3, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 177, 6, 1, 7, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 65, 255, 255, 3, 77, 4, 64, 32, 0, 65, 128, 254, 3, 113, 65, 8, 118, 33, 6, 65, 176, 205, 193, 0, 33, 1, 32, 0, 65, 255, 1, 113, 33, 7, 3, 64, 2, 64, 32, 1, 65, 2, 106, 33, 5, 32, 2, 32, 1, 45, 0, 1, 34, 4, 106, 33, 3, 2, 64, 32, 6, 32, 1, 45, 0, 0, 34, 1, 70, 4, 64, 32, 3, 32, 2, 73, 13, 6, 32, 3, 65, 163, 2, 79, 13, 7, 32, 2, 65, 130, 206, 193, 0, 106, 33, 1, 3, 64, 32, 4, 69, 13, 2, 32, 4, 65, 127, 106, 33, 4, 32, 1, 45, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 7, 71, 13, 0, 11, 65, 0, 33, 4, 12, 5, 11, 32, 1, 32, 6, 75, 13, 1, 32, 3, 33, 2, 32, 5, 34, 1, 65, 130, 206, 193, 0, 71, 13, 2, 12, 1, 11, 32, 3, 33, 2, 32, 5, 34, 1, 65, 130, 206, 193, 0, 71, 13, 1, 11, 11, 32, 0, 65, 255, 255, 3, 113, 33, 3, 65, 164, 208, 193, 0, 33, 1, 65, 1, 33, 4, 3, 64, 32, 1, 65, 1, 106, 33, 0, 2, 127, 32, 1, 45, 0, 0, 34, 2, 65, 24, 116, 65, 24, 117, 34, 5, 65, 127, 76, 4, 64, 32, 0, 65, 217, 210, 193, 0, 70, 13, 7, 32, 1, 45, 0, 1, 32, 5, 65, 255, 0, 113, 65, 8, 116, 114, 33, 2, 32, 1, 65, 2, 106, 12, 1, 11, 32, 0, 11, 33, 1, 32, 3, 32, 2, 107, 34, 3, 65, 0, 72, 13, 2, 32, 4, 65, 1, 115, 33, 4, 32, 1, 65, 217, 210, 193, 0, 71, 13, 0, 11, 12, 1, 11, 32, 0, 65, 255, 255, 7, 77, 4, 64, 32, 0, 65, 128, 254, 3, 113, 65, 8, 118, 33, 6, 65, 217, 210, 193, 0, 33, 1, 32, 0, 65, 255, 1, 113, 33, 7, 3, 64, 2, 64, 32, 1, 65, 2, 106, 33, 5, 32, 2, 32, 1, 45, 0, 1, 34, 4, 106, 33, 3, 2, 64, 32, 6, 32, 1, 45, 0, 0, 34, 1, 70, 4, 64, 32, 3, 32, 2, 73, 13, 9, 32, 3, 65, 176, 1, 79, 13, 10, 32, 2, 65, 165, 211, 193, 0, 106, 33, 1, 3, 64, 32, 4, 69, 13, 2, 32, 4, 65, 127, 106, 33, 4, 32, 1, 45, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 7, 71, 13, 0, 11, 65, 0, 33, 4, 12, 5, 11, 32, 1, 32, 6, 75, 13, 1, 32, 3, 33, 2, 32, 5, 34, 1, 65, 165, 211, 193, 0, 71, 13, 2, 12, 1, 11, 32, 3, 33, 2, 32, 5, 34, 1, 65, 165, 211, 193, 0, 71, 13, 1, 11, 11, 32, 0, 65, 255, 255, 3, 113, 33, 3, 65, 212, 212, 193, 0, 33, 1, 65, 1, 33, 4, 3, 64, 32, 1, 65, 1, 106, 33, 0, 2, 127, 32, 1, 45, 0, 0, 34, 2, 65, 24, 116, 65, 24, 117, 34, 5, 65, 127, 76, 4, 64, 32, 0, 65, 247, 215, 193, 0, 70, 13, 10, 32, 1, 45, 0, 1, 32, 5, 65, 255, 0, 113, 65, 8, 116, 114, 33, 2, 32, 1, 65, 2, 106, 12, 1, 11, 32, 0, 11, 33, 1, 32, 3, 32, 2, 107, 34, 3, 65, 0, 72, 13, 2, 32, 4, 65, 1, 115, 33, 4, 32, 1, 65, 247, 215, 193, 0, 71, 13, 0, 11, 12, 1, 11, 32, 0, 65, 181, 217, 115, 106, 65, 181, 219, 43, 73, 32, 0, 65, 226, 139, 116, 106, 65, 226, 11, 73, 114, 32, 0, 65, 159, 168, 116, 106, 65, 159, 24, 73, 32, 0, 65, 222, 226, 116, 106, 65, 14, 73, 114, 114, 32, 0, 65, 254, 255, 255, 0, 113, 65, 158, 240, 10, 70, 32, 0, 65, 162, 178, 117, 106, 65, 34, 73, 114, 114, 13, 0, 32, 0, 65, 203, 145, 117, 106, 65, 11, 79, 13, 7, 11, 32, 4, 65, 1, 113, 15, 11, 32, 2, 32, 3, 65, 144, 205, 193, 0, 16, 100, 0, 11, 32, 3, 65, 162, 2, 65, 144, 205, 193, 0, 16, 99, 0, 11, 65, 240, 196, 193, 0, 65, 43, 65, 160, 205, 193, 0, 16, 114, 0, 11, 32, 2, 32, 3, 65, 144, 205, 193, 0, 16, 100, 0, 11, 32, 3, 65, 175, 1, 65, 144, 205, 193, 0, 16, 99, 0, 11, 65, 240, 196, 193, 0, 65, 43, 65, 160, 205, 193, 0, 16, 114, 0, 11, 32, 0, 65, 240, 131, 56, 73, 11, 254, 5, 1, 8, 127, 35, 0, 65, 48, 107, 34, 7, 36, 0, 2, 64, 2, 64, 32, 5, 69, 4, 64, 32, 0, 65, 1, 54, 2, 8, 32, 0, 66, 0, 55, 2, 0, 65, 123, 33, 10, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 180, 128, 4, 106, 40, 2, 0, 65, 1, 70, 4, 64, 32, 0, 66, 0, 55, 2, 0, 32, 6, 65, 4, 71, 13, 1, 32, 0, 65, 0, 54, 2, 8, 65, 1, 33, 10, 12, 8, 11, 32, 6, 65, 4, 71, 13, 1, 3, 64, 32, 7, 32, 5, 54, 2, 40, 32, 7, 32, 4, 54, 2, 36, 32, 7, 65, 1, 54, 2, 32, 32, 7, 66, 0, 55, 3, 24, 32, 7, 32, 2, 54, 2, 16, 32, 7, 32, 3, 54, 2, 20, 32, 7, 32, 1, 32, 7, 65, 16, 106, 65, 4, 16, 4, 32, 3, 32, 7, 40, 2, 4, 34, 9, 73, 13, 9, 32, 5, 32, 7, 40, 2, 8, 34, 8, 73, 13, 5, 32, 8, 32, 12, 106, 33, 12, 32, 9, 32, 11, 106, 33, 11, 65, 240, 177, 127, 33, 10, 65, 1, 33, 13, 2, 64, 32, 7, 40, 2, 0, 65, 2, 106, 14, 4, 8, 4, 0, 5, 0, 11, 32, 3, 32, 9, 107, 33, 3, 32, 2, 32, 9, 106, 33, 2, 32, 4, 32, 8, 106, 33, 4, 32, 5, 32, 8, 107, 34, 5, 13, 0, 11, 12, 5, 11, 32, 0, 65, 1, 54, 2, 8, 65, 123, 33, 10, 12, 6, 11, 65, 3, 32, 6, 65, 2, 70, 65, 1, 116, 32, 6, 65, 3, 70, 34, 14, 27, 33, 8, 2, 64, 32, 6, 65, 2, 70, 4, 64, 3, 64, 32, 7, 32, 5, 54, 2, 40, 32, 7, 32, 4, 54, 2, 36, 32, 7, 65, 1, 54, 2, 32, 32, 7, 66, 0, 55, 3, 24, 32, 7, 32, 2, 54, 2, 16, 32, 7, 32, 3, 54, 2, 20, 32, 7, 32, 1, 32, 7, 65, 16, 106, 32, 8, 16, 4, 32, 3, 32, 7, 40, 2, 4, 34, 9, 73, 13, 9, 32, 5, 32, 7, 40, 2, 8, 34, 8, 73, 13, 5, 32, 8, 32, 12, 106, 33, 12, 32, 9, 32, 11, 106, 33, 11, 65, 240, 177, 127, 33, 10, 65, 1, 33, 13, 2, 64, 32, 7, 40, 2, 0, 65, 2, 106, 14, 4, 8, 4, 0, 5, 0, 11, 32, 5, 32, 8, 107, 34, 5, 69, 13, 6, 32, 3, 32, 9, 107, 34, 3, 69, 13, 2, 32, 2, 32, 9, 106, 33, 2, 32, 4, 32, 8, 106, 33, 4, 65, 2, 33, 8, 12, 0, 11, 0, 11, 65, 3, 65, 0, 32, 14, 27, 33, 14, 3, 64, 32, 7, 32, 5, 54, 2, 40, 32, 7, 32, 4, 54, 2, 36, 32, 7, 65, 1, 54, 2, 32, 32, 7, 66, 0, 55, 3, 24, 32, 7, 32, 2, 54, 2, 16, 32, 7, 32, 3, 54, 2, 20, 32, 7, 32, 1, 32, 7, 65, 16, 106, 32, 8, 16, 4, 32, 3, 32, 7, 40, 2, 4, 34, 9, 73, 13, 8, 32, 5, 32, 7, 40, 2, 8, 34, 8, 73, 13, 4, 32, 8, 32, 12, 106, 33, 12, 32, 9, 32, 11, 106, 33, 11, 65, 240, 177, 127, 33, 10, 65, 1, 33, 13, 2, 64, 32, 7, 40, 2, 0, 65, 2, 106, 14, 4, 7, 3, 0, 4, 0, 11, 32, 5, 32, 8, 107, 34, 5, 69, 13, 5, 32, 3, 32, 9, 107, 34, 3, 69, 13, 1, 32, 2, 32, 9, 106, 33, 2, 32, 4, 32, 8, 106, 33, 4, 32, 14, 33, 8, 12, 0, 11, 0, 11, 65, 0, 65, 123, 32, 6, 32, 11, 114, 32, 12, 114, 34, 1, 27, 33, 10, 32, 1, 69, 33, 13, 12, 4, 11, 65, 126, 33, 10, 12, 3, 11, 65, 1, 33, 10, 65, 0, 33, 13, 12, 2, 11, 32, 8, 32, 5, 65, 156, 188, 192, 0, 16, 101, 0, 11, 65, 0, 33, 13, 65, 0, 33, 10, 11, 32, 0, 32, 13, 54, 2, 8, 32, 0, 32, 12, 54, 2, 4, 32, 0, 32, 11, 54, 2, 0, 11, 32, 0, 65, 12, 106, 32, 10, 54, 2, 0, 32, 7, 65, 48, 106, 36, 0, 15, 11, 32, 9, 32, 3, 65, 140, 188, 192, 0, 16, 101, 0, 11, 145, 6, 2, 3, 127, 1, 126, 35, 0, 65, 176, 2, 107, 34, 5, 36, 0, 32, 5, 65, 0, 54, 2, 224, 1, 32, 5, 66, 1, 55, 3, 216, 1, 32, 5, 32, 5, 65, 216, 1, 106, 32, 3, 4, 127, 32, 4, 5, 65, 6, 11, 16, 62, 32, 5, 32, 1, 32, 2, 16, 26, 33, 8, 32, 5, 65, 232, 0, 106, 32, 5, 65, 216, 0, 16, 121, 26, 2, 64, 2, 64, 2, 64, 32, 8, 167, 34, 3, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 5, 32, 3, 58, 0, 88, 32, 5, 32, 8, 66, 56, 136, 60, 0, 95, 32, 5, 32, 8, 66, 40, 136, 61, 0, 93, 32, 5, 32, 8, 66, 8, 136, 62, 0, 89, 2, 64, 32, 5, 40, 2, 128, 1, 69, 13, 0, 32, 5, 65, 232, 0, 106, 16, 34, 34, 8, 167, 65, 3, 113, 65, 2, 71, 13, 0, 32, 8, 66, 32, 136, 167, 34, 3, 40, 2, 0, 32, 3, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 3, 40, 2, 4, 34, 4, 40, 2, 4, 34, 6, 4, 64, 32, 3, 40, 2, 0, 32, 6, 32, 4, 40, 2, 8, 16, 156, 1, 11, 32, 3, 65, 12, 65, 4, 16, 156, 1, 11, 32, 5, 65, 232, 0, 106, 16, 77, 32, 5, 65, 184, 1, 106, 40, 2, 0, 34, 3, 4, 64, 32, 5, 40, 2, 180, 1, 32, 3, 65, 1, 16, 156, 1, 11, 32, 5, 41, 3, 88, 33, 8, 12, 1, 11, 32, 5, 65, 216, 1, 106, 32, 5, 65, 232, 0, 106, 65, 216, 0, 16, 121, 26, 32, 5, 65, 216, 1, 106, 16, 34, 34, 8, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 5, 40, 2, 240, 1, 33, 3, 65, 0, 33, 4, 32, 5, 65, 0, 54, 2, 240, 1, 32, 3, 13, 2, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 32, 5, 32, 8, 55, 3, 88, 32, 5, 65, 216, 1, 106, 16, 53, 11, 32, 5, 32, 8, 55, 3, 192, 1, 32, 5, 65, 192, 1, 106, 16, 133, 1, 33, 3, 32, 5, 65, 244, 0, 106, 65, 9, 54, 2, 0, 32, 5, 65, 236, 1, 106, 65, 2, 54, 2, 0, 32, 5, 65, 10, 54, 2, 108, 32, 5, 66, 2, 55, 2, 220, 1, 32, 5, 65, 244, 132, 192, 0, 54, 2, 216, 1, 32, 5, 32, 3, 58, 0, 215, 1, 32, 5, 32, 5, 65, 192, 1, 106, 54, 2, 112, 32, 5, 32, 5, 65, 215, 1, 106, 54, 2, 104, 32, 5, 32, 5, 65, 232, 0, 106, 54, 2, 232, 1, 32, 5, 65, 200, 1, 106, 32, 5, 65, 216, 1, 106, 16, 51, 32, 5, 40, 2, 200, 1, 34, 4, 32, 5, 40, 2, 208, 1, 16, 0, 33, 3, 32, 5, 40, 2, 204, 1, 34, 6, 4, 64, 32, 4, 32, 6, 65, 1, 16, 156, 1, 11, 32, 5, 45, 0, 192, 1, 65, 2, 79, 4, 64, 32, 5, 40, 2, 196, 1, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 4, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 5, 40, 2, 196, 1, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 33, 4, 12, 1, 11, 32, 5, 65, 244, 1, 106, 40, 2, 0, 33, 6, 32, 5, 32, 5, 65, 248, 1, 106, 40, 2, 0, 54, 2, 96, 32, 5, 32, 6, 54, 2, 92, 32, 5, 32, 3, 54, 2, 88, 32, 5, 65, 216, 1, 106, 16, 53, 32, 5, 41, 2, 92, 33, 8, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 2, 64, 32, 4, 69, 4, 64, 2, 64, 32, 8, 167, 34, 4, 32, 8, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 3, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 3, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 3, 32, 4, 32, 2, 16, 143, 1, 34, 1, 69, 13, 2, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 5, 65, 176, 2, 106, 36, 0, 15, 11, 32, 3, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 201, 3, 1, 7, 127, 35, 0, 65, 16, 107, 34, 9, 36, 0, 2, 64, 32, 0, 69, 32, 1, 69, 114, 13, 0, 2, 64, 32, 2, 65, 4, 75, 13, 0, 32, 1, 65, 3, 106, 65, 2, 118, 65, 127, 106, 34, 1, 65, 255, 1, 75, 13, 0, 32, 1, 65, 2, 116, 65, 140, 223, 193, 0, 106, 34, 6, 40, 2, 0, 33, 4, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 120, 106, 34, 7, 32, 7, 40, 2, 0, 65, 126, 113, 54, 2, 0, 32, 9, 65, 136, 223, 193, 0, 54, 2, 12, 32, 0, 32, 4, 54, 2, 0, 32, 6, 32, 7, 54, 2, 0, 12, 1, 11, 65, 136, 223, 193, 0, 40, 2, 0, 33, 2, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 120, 106, 34, 1, 32, 1, 40, 2, 0, 34, 4, 65, 126, 113, 54, 2, 0, 2, 64, 2, 64, 2, 64, 32, 0, 65, 124, 106, 34, 6, 40, 2, 0, 65, 124, 113, 34, 5, 4, 64, 32, 5, 40, 2, 0, 34, 8, 65, 1, 113, 69, 13, 1, 11, 32, 4, 65, 124, 113, 34, 3, 69, 13, 1, 65, 0, 32, 3, 32, 4, 65, 2, 113, 27, 34, 3, 69, 13, 1, 32, 3, 45, 0, 0, 65, 1, 113, 13, 1, 32, 0, 32, 3, 40, 2, 8, 65, 124, 113, 54, 2, 0, 32, 3, 32, 1, 65, 1, 114, 54, 2, 8, 32, 2, 33, 1, 12, 2, 11, 2, 64, 2, 64, 32, 4, 65, 124, 113, 34, 0, 69, 4, 64, 32, 5, 33, 3, 12, 1, 11, 32, 5, 33, 3, 65, 0, 32, 0, 32, 4, 65, 2, 113, 27, 34, 4, 69, 13, 0, 32, 4, 32, 4, 40, 2, 4, 65, 3, 113, 32, 5, 114, 54, 2, 4, 32, 6, 40, 2, 0, 34, 0, 65, 124, 113, 34, 3, 69, 13, 1, 32, 1, 40, 2, 0, 65, 124, 113, 33, 0, 32, 3, 40, 2, 0, 33, 8, 11, 32, 3, 32, 8, 65, 3, 113, 32, 0, 114, 54, 2, 0, 32, 6, 40, 2, 0, 33, 0, 11, 32, 6, 32, 0, 65, 3, 113, 54, 2, 0, 32, 1, 32, 1, 40, 2, 0, 34, 0, 65, 3, 113, 54, 2, 0, 32, 0, 65, 2, 113, 69, 4, 64, 32, 2, 33, 1, 12, 2, 11, 32, 5, 32, 5, 40, 2, 0, 65, 2, 114, 54, 2, 0, 32, 2, 33, 1, 12, 1, 11, 32, 0, 32, 2, 54, 2, 0, 11, 65, 136, 223, 193, 0, 32, 1, 54, 2, 0, 11, 32, 9, 65, 16, 106, 36, 0, 11, 251, 5, 1, 7, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 2, 118, 34, 11, 4, 64, 32, 0, 32, 3, 106, 33, 12, 3, 64, 32, 2, 32, 6, 106, 34, 9, 32, 5, 113, 34, 7, 32, 1, 79, 13, 2, 32, 3, 32, 6, 106, 34, 8, 32, 1, 79, 13, 3, 32, 6, 32, 12, 106, 34, 10, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 9, 65, 1, 106, 34, 9, 32, 5, 113, 34, 7, 32, 1, 79, 13, 4, 32, 8, 65, 1, 106, 32, 1, 79, 13, 5, 32, 10, 65, 1, 106, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 9, 65, 1, 106, 34, 9, 32, 5, 113, 34, 7, 32, 1, 79, 13, 6, 32, 8, 65, 2, 106, 32, 1, 79, 13, 7, 32, 10, 65, 2, 106, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 9, 65, 1, 106, 32, 5, 113, 34, 7, 32, 1, 79, 13, 8, 32, 8, 65, 3, 106, 32, 1, 79, 13, 9, 32, 10, 65, 3, 106, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 6, 65, 4, 106, 33, 6, 32, 11, 65, 127, 106, 34, 11, 13, 0, 11, 32, 3, 32, 6, 106, 33, 3, 32, 2, 32, 6, 106, 33, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 3, 113, 65, 1, 107, 14, 3, 0, 1, 2, 4, 11, 32, 2, 32, 5, 113, 34, 6, 32, 1, 79, 13, 21, 32, 3, 32, 1, 73, 13, 2, 32, 3, 32, 1, 65, 200, 180, 192, 0, 16, 98, 0, 11, 32, 2, 32, 5, 113, 34, 4, 32, 1, 79, 13, 17, 32, 3, 32, 1, 79, 13, 18, 32, 0, 32, 3, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 1, 106, 32, 5, 113, 34, 6, 32, 1, 79, 13, 19, 32, 3, 65, 1, 106, 34, 3, 32, 1, 73, 13, 1, 32, 3, 32, 1, 65, 168, 180, 192, 0, 16, 98, 0, 11, 32, 2, 32, 5, 113, 34, 4, 32, 1, 79, 13, 10, 32, 3, 32, 1, 79, 13, 11, 32, 0, 32, 3, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 1, 106, 32, 5, 113, 34, 4, 32, 1, 79, 13, 12, 32, 3, 65, 1, 106, 34, 6, 32, 1, 79, 13, 13, 32, 0, 32, 6, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 2, 106, 32, 5, 113, 34, 6, 32, 1, 79, 13, 14, 32, 3, 65, 2, 106, 34, 3, 32, 1, 79, 13, 15, 11, 32, 0, 32, 3, 106, 32, 0, 32, 6, 106, 45, 0, 0, 58, 0, 0, 11, 15, 11, 32, 7, 32, 1, 65, 152, 178, 192, 0, 16, 98, 0, 11, 32, 8, 32, 1, 65, 168, 178, 192, 0, 16, 98, 0, 11, 32, 7, 32, 1, 65, 184, 178, 192, 0, 16, 98, 0, 11, 32, 8, 65, 1, 106, 32, 1, 65, 200, 178, 192, 0, 16, 98, 0, 11, 32, 7, 32, 1, 65, 216, 178, 192, 0, 16, 98, 0, 11, 32, 8, 65, 2, 106, 32, 1, 65, 232, 178, 192, 0, 16, 98, 0, 11, 32, 7, 32, 1, 65, 248, 178, 192, 0, 16, 98, 0, 11, 32, 8, 65, 3, 106, 32, 1, 65, 136, 179, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 152, 179, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 168, 179, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 184, 179, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 200, 179, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 216, 179, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 232, 179, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 248, 179, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 136, 180, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 152, 180, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 184, 180, 192, 0, 16, 98, 0, 11, 153, 6, 2, 11, 127, 2, 126, 35, 0, 65, 64, 106, 34, 3, 36, 0, 65, 3, 33, 8, 2, 64, 32, 2, 69, 13, 0, 32, 0, 65, 24, 106, 33, 10, 32, 0, 65, 48, 106, 33, 12, 32, 0, 65, 200, 0, 106, 33, 11, 32, 3, 65, 4, 114, 33, 13, 32, 0, 65, 212, 0, 106, 33, 6, 32, 0, 65, 32, 106, 33, 7, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 11, 40, 2, 0, 69, 4, 64, 2, 64, 32, 6, 40, 2, 0, 34, 4, 69, 13, 0, 32, 10, 40, 2, 0, 4, 64, 3, 64, 32, 0, 40, 2, 76, 33, 5, 32, 10, 32, 7, 40, 2, 0, 32, 4, 16, 75, 32, 0, 40, 2, 24, 32, 7, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 6, 40, 2, 0, 34, 5, 32, 4, 73, 13, 4, 32, 6, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 2, 32, 0, 40, 2, 76, 34, 9, 32, 4, 32, 9, 106, 32, 5, 16, 96, 32, 6, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 168, 132, 192, 0, 16, 114, 0, 11, 32, 3, 65, 16, 106, 32, 0, 32, 1, 32, 2, 16, 29, 32, 3, 41, 2, 20, 33, 14, 2, 64, 2, 64, 32, 3, 40, 2, 16, 65, 1, 71, 4, 64, 32, 2, 32, 14, 167, 34, 4, 73, 13, 5, 32, 12, 32, 1, 32, 4, 16, 141, 1, 32, 3, 65, 0, 54, 2, 0, 32, 3, 32, 4, 54, 2, 4, 32, 4, 13, 1, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 6, 32, 0, 65, 24, 106, 65, 244, 128, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 236, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 228, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 220, 128, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 7, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 15, 66, 8, 136, 33, 14, 32, 15, 167, 33, 8, 12, 11, 11, 32, 3, 65, 1, 54, 2, 0, 32, 3, 32, 14, 55, 2, 4, 32, 13, 16, 133, 1, 65, 255, 1, 113, 65, 15, 70, 13, 1, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 14, 32, 3, 45, 0, 4, 33, 8, 12, 10, 11, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 6, 32, 3, 45, 0, 4, 65, 2, 79, 13, 5, 12, 6, 11, 32, 3, 65, 52, 106, 65, 1, 54, 2, 0, 32, 3, 65, 36, 106, 65, 2, 54, 2, 0, 32, 3, 32, 11, 54, 2, 56, 32, 3, 66, 3, 55, 2, 20, 32, 3, 65, 180, 130, 192, 0, 54, 2, 16, 32, 3, 65, 1, 54, 2, 44, 32, 3, 65, 244, 129, 192, 0, 54, 2, 60, 32, 3, 32, 3, 65, 40, 106, 54, 2, 32, 32, 3, 32, 3, 65, 60, 106, 54, 2, 48, 32, 3, 32, 3, 65, 56, 106, 54, 2, 40, 32, 3, 65, 16, 106, 65, 204, 130, 192, 0, 16, 130, 1, 0, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 4, 32, 2, 65, 220, 130, 192, 0, 16, 99, 0, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 9, 4, 64, 32, 4, 40, 2, 0, 32, 9, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 64, 107, 36, 0, 32, 8, 173, 66, 255, 1, 131, 32, 14, 66, 8, 134, 132, 11, 213, 5, 1, 6, 127, 2, 127, 32, 1, 69, 4, 64, 32, 0, 40, 2, 0, 33, 9, 65, 45, 33, 10, 32, 5, 65, 1, 106, 12, 1, 11, 65, 43, 65, 128, 128, 196, 0, 32, 0, 40, 2, 0, 34, 9, 65, 1, 113, 34, 1, 27, 33, 10, 32, 1, 32, 5, 106, 11, 33, 8, 2, 64, 32, 9, 65, 4, 113, 69, 4, 64, 65, 0, 33, 2, 12, 1, 11, 32, 3, 4, 64, 32, 3, 33, 6, 32, 2, 33, 1, 3, 64, 32, 7, 32, 1, 45, 0, 0, 65, 192, 1, 113, 65, 128, 1, 71, 106, 33, 7, 32, 1, 65, 1, 106, 33, 1, 32, 6, 65, 127, 106, 34, 6, 13, 0, 11, 11, 32, 7, 32, 8, 106, 33, 8, 11, 65, 1, 33, 1, 2, 64, 2, 64, 32, 0, 40, 2, 8, 65, 1, 71, 4, 64, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 1, 12, 2, 11, 32, 0, 65, 12, 106, 40, 2, 0, 34, 6, 32, 8, 77, 4, 64, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 1, 12, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 9, 65, 8, 113, 4, 64, 32, 0, 40, 2, 4, 33, 9, 32, 0, 65, 48, 54, 2, 4, 32, 0, 45, 0, 32, 33, 11, 32, 0, 65, 1, 58, 0, 32, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 5, 65, 0, 33, 1, 32, 6, 32, 8, 107, 34, 3, 33, 2, 65, 1, 32, 0, 45, 0, 32, 34, 6, 32, 6, 65, 3, 70, 27, 65, 3, 113, 65, 1, 107, 14, 3, 2, 1, 2, 3, 11, 65, 0, 33, 1, 32, 6, 32, 8, 107, 34, 6, 33, 8, 2, 64, 2, 64, 2, 64, 65, 1, 32, 0, 45, 0, 32, 34, 7, 32, 7, 65, 3, 70, 27, 65, 3, 113, 65, 1, 107, 14, 3, 1, 0, 1, 2, 11, 32, 6, 65, 1, 118, 33, 1, 32, 6, 65, 1, 106, 65, 1, 118, 33, 8, 12, 1, 11, 65, 0, 33, 8, 32, 6, 33, 1, 11, 32, 1, 65, 1, 106, 33, 1, 3, 64, 32, 1, 65, 127, 106, 34, 1, 69, 13, 4, 32, 0, 40, 2, 24, 32, 0, 40, 2, 4, 32, 0, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 65, 1, 15, 11, 32, 3, 65, 1, 118, 33, 1, 32, 3, 65, 1, 106, 65, 1, 118, 33, 2, 12, 1, 11, 65, 0, 33, 2, 32, 3, 33, 1, 11, 32, 1, 65, 1, 106, 33, 1, 2, 64, 3, 64, 32, 1, 65, 127, 106, 34, 1, 69, 13, 1, 32, 0, 40, 2, 24, 32, 0, 40, 2, 4, 32, 0, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 65, 1, 15, 11, 32, 0, 40, 2, 4, 33, 3, 65, 1, 33, 1, 32, 0, 40, 2, 24, 32, 4, 32, 5, 32, 0, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 1, 32, 2, 65, 1, 106, 33, 7, 32, 0, 40, 2, 28, 33, 2, 32, 0, 40, 2, 24, 33, 4, 3, 64, 32, 7, 65, 127, 106, 34, 7, 4, 64, 32, 4, 32, 3, 32, 2, 40, 2, 16, 17, 0, 0, 69, 13, 1, 12, 3, 11, 11, 32, 0, 32, 11, 58, 0, 32, 32, 0, 32, 9, 54, 2, 4, 65, 0, 15, 11, 32, 0, 40, 2, 4, 33, 6, 65, 1, 33, 1, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 0, 32, 0, 40, 2, 24, 32, 4, 32, 5, 32, 0, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 0, 32, 8, 65, 1, 106, 33, 7, 32, 0, 40, 2, 28, 33, 2, 32, 0, 40, 2, 24, 33, 0, 3, 64, 32, 7, 65, 127, 106, 34, 7, 69, 4, 64, 65, 0, 15, 11, 32, 0, 32, 6, 32, 2, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 11, 32, 1, 15, 11, 32, 0, 40, 2, 24, 32, 4, 32, 5, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 205, 5, 2, 8, 127, 1, 126, 35, 0, 65, 16, 107, 34, 6, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 44, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 1, 40, 2, 24, 4, 64, 32, 1, 65, 24, 106, 33, 9, 32, 1, 65, 32, 106, 33, 7, 32, 1, 65, 44, 106, 33, 8, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 9, 32, 7, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 7, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 8, 40, 2, 0, 34, 5, 32, 4, 73, 13, 3, 32, 8, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 2, 32, 1, 40, 2, 36, 34, 10, 32, 4, 32, 10, 106, 32, 5, 16, 96, 32, 8, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 1, 65, 36, 106, 33, 9, 32, 1, 41, 3, 0, 33, 12, 32, 3, 69, 13, 1, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 110, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 2, 32, 6, 45, 0, 1, 65, 2, 70, 13, 2, 32, 1, 65, 24, 106, 33, 10, 32, 1, 65, 44, 106, 33, 7, 32, 1, 65, 32, 106, 33, 8, 3, 64, 2, 64, 32, 7, 40, 2, 0, 34, 4, 69, 13, 0, 2, 64, 32, 10, 40, 2, 0, 4, 64, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 10, 32, 8, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 8, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 8, 32, 8, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 7, 40, 2, 0, 34, 5, 32, 4, 73, 13, 2, 32, 7, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 3, 32, 1, 40, 2, 36, 34, 11, 32, 4, 32, 11, 106, 32, 5, 16, 96, 32, 7, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 1, 41, 3, 0, 33, 12, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 110, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 3, 32, 6, 45, 0, 1, 65, 2, 71, 13, 0, 11, 12, 2, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 6, 32, 1, 32, 2, 65, 0, 32, 9, 65, 0, 16, 110, 32, 1, 41, 3, 0, 32, 12, 125, 33, 12, 32, 6, 45, 0, 0, 33, 4, 11, 2, 64, 2, 64, 32, 0, 2, 127, 32, 4, 65, 255, 1, 113, 65, 1, 70, 4, 64, 65, 22, 65, 1, 16, 149, 1, 34, 1, 69, 13, 2, 32, 1, 65, 14, 106, 65, 142, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 8, 106, 65, 136, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 128, 132, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 13, 3, 32, 2, 66, 150, 128, 128, 128, 224, 2, 55, 2, 4, 32, 2, 32, 1, 54, 2, 0, 32, 0, 65, 11, 32, 2, 65, 200, 132, 192, 0, 16, 107, 55, 2, 4, 65, 1, 12, 1, 11, 32, 0, 32, 12, 62, 2, 4, 65, 0, 11, 54, 2, 0, 32, 6, 65, 16, 106, 36, 0, 15, 11, 65, 22, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 205, 5, 2, 8, 127, 1, 126, 35, 0, 65, 16, 107, 34, 6, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 44, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 1, 40, 2, 24, 4, 64, 32, 1, 65, 24, 106, 33, 9, 32, 1, 65, 32, 106, 33, 7, 32, 1, 65, 44, 106, 33, 8, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 9, 32, 7, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 7, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 8, 40, 2, 0, 34, 5, 32, 4, 73, 13, 3, 32, 8, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 2, 32, 1, 40, 2, 36, 34, 10, 32, 4, 32, 10, 106, 32, 5, 16, 96, 32, 8, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 1, 65, 36, 106, 33, 9, 32, 1, 41, 3, 0, 33, 12, 32, 3, 69, 13, 1, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 65, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 2, 32, 6, 45, 0, 1, 65, 2, 70, 13, 2, 32, 1, 65, 24, 106, 33, 10, 32, 1, 65, 44, 106, 33, 7, 32, 1, 65, 32, 106, 33, 8, 3, 64, 2, 64, 32, 7, 40, 2, 0, 34, 4, 69, 13, 0, 2, 64, 32, 10, 40, 2, 0, 4, 64, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 10, 32, 8, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 8, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 8, 32, 8, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 7, 40, 2, 0, 34, 5, 32, 4, 73, 13, 2, 32, 7, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 3, 32, 1, 40, 2, 36, 34, 11, 32, 4, 32, 11, 106, 32, 5, 16, 96, 32, 7, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 1, 41, 3, 0, 33, 12, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 65, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 3, 32, 6, 45, 0, 1, 65, 2, 71, 13, 0, 11, 12, 2, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 6, 32, 1, 32, 2, 65, 0, 32, 9, 65, 0, 16, 65, 32, 1, 41, 3, 0, 32, 12, 125, 33, 12, 32, 6, 45, 0, 0, 33, 4, 11, 2, 64, 2, 64, 32, 0, 2, 127, 32, 4, 65, 255, 1, 113, 65, 1, 70, 4, 64, 65, 22, 65, 1, 16, 149, 1, 34, 1, 69, 13, 2, 32, 1, 65, 14, 106, 65, 142, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 8, 106, 65, 136, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 128, 132, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 13, 3, 32, 2, 66, 150, 128, 128, 128, 224, 2, 55, 2, 4, 32, 2, 32, 1, 54, 2, 0, 32, 0, 65, 11, 32, 2, 65, 200, 132, 192, 0, 16, 107, 55, 2, 4, 65, 1, 12, 1, 11, 32, 0, 32, 12, 62, 2, 4, 65, 0, 11, 54, 2, 0, 32, 6, 65, 16, 106, 36, 0, 15, 11, 65, 22, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 201, 4, 1, 18, 127, 32, 0, 47, 1, 2, 33, 14, 32, 0, 47, 1, 0, 33, 15, 2, 64, 32, 2, 65, 124, 113, 34, 17, 32, 17, 65, 192, 173, 1, 112, 34, 18, 107, 34, 19, 65, 192, 173, 1, 73, 4, 64, 12, 1, 11, 32, 15, 65, 192, 173, 1, 108, 33, 20, 32, 1, 33, 12, 32, 19, 33, 16, 3, 64, 65, 192, 210, 126, 33, 13, 32, 16, 65, 192, 210, 126, 106, 33, 16, 32, 12, 33, 3, 3, 64, 32, 4, 32, 8, 32, 3, 45, 0, 3, 106, 34, 8, 106, 33, 4, 32, 5, 32, 9, 32, 3, 45, 0, 2, 106, 34, 9, 106, 33, 5, 32, 6, 32, 10, 32, 3, 45, 0, 1, 106, 34, 10, 106, 33, 6, 32, 7, 32, 11, 32, 3, 45, 0, 0, 106, 34, 11, 106, 33, 7, 32, 3, 65, 4, 106, 33, 3, 32, 13, 65, 4, 106, 34, 13, 13, 0, 11, 32, 4, 65, 241, 255, 3, 112, 33, 4, 32, 5, 65, 241, 255, 3, 112, 33, 5, 32, 6, 65, 241, 255, 3, 112, 33, 6, 32, 7, 65, 241, 255, 3, 112, 33, 7, 32, 8, 65, 241, 255, 3, 112, 33, 8, 32, 9, 65, 241, 255, 3, 112, 33, 9, 32, 10, 65, 241, 255, 3, 112, 33, 10, 32, 11, 65, 241, 255, 3, 112, 33, 11, 32, 12, 65, 192, 173, 1, 106, 33, 12, 32, 14, 32, 20, 106, 65, 241, 255, 3, 112, 33, 14, 32, 16, 65, 192, 173, 1, 79, 13, 0, 11, 11, 32, 2, 65, 3, 113, 33, 13, 32, 18, 65, 252, 255, 1, 113, 34, 2, 4, 64, 32, 1, 32, 19, 106, 33, 3, 65, 0, 32, 2, 107, 33, 12, 3, 64, 32, 7, 32, 11, 32, 3, 45, 0, 0, 106, 34, 11, 106, 33, 7, 32, 4, 32, 8, 32, 3, 65, 3, 106, 45, 0, 0, 106, 34, 8, 106, 33, 4, 32, 5, 32, 9, 32, 3, 65, 2, 106, 45, 0, 0, 106, 34, 9, 106, 33, 5, 32, 6, 32, 10, 32, 3, 65, 1, 106, 45, 0, 0, 106, 34, 10, 106, 33, 6, 32, 3, 65, 4, 106, 33, 3, 32, 12, 65, 4, 106, 34, 12, 13, 0, 11, 11, 32, 14, 32, 15, 32, 18, 108, 106, 65, 241, 255, 3, 112, 32, 7, 65, 241, 255, 3, 112, 65, 2, 116, 106, 32, 6, 65, 241, 255, 3, 112, 65, 2, 116, 32, 10, 65, 241, 255, 3, 112, 34, 2, 107, 106, 32, 5, 65, 241, 255, 3, 112, 65, 2, 116, 32, 9, 65, 241, 255, 3, 112, 34, 12, 65, 1, 116, 107, 106, 65, 0, 32, 8, 65, 241, 255, 3, 112, 34, 3, 107, 65, 3, 108, 32, 4, 65, 241, 255, 3, 112, 65, 2, 116, 106, 106, 65, 166, 255, 23, 106, 33, 4, 32, 3, 32, 12, 32, 2, 32, 11, 65, 241, 255, 3, 112, 32, 15, 106, 106, 106, 106, 33, 5, 32, 13, 4, 64, 32, 1, 32, 17, 106, 33, 3, 3, 64, 32, 5, 32, 3, 45, 0, 0, 106, 34, 5, 32, 4, 106, 33, 4, 32, 3, 65, 1, 106, 33, 3, 32, 13, 65, 127, 106, 34, 13, 13, 0, 11, 11, 32, 0, 32, 4, 65, 241, 255, 3, 112, 59, 1, 2, 32, 0, 32, 5, 65, 241, 255, 3, 112, 59, 1, 0, 11, 177, 5, 1, 9, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 65, 36, 106, 32, 1, 54, 2, 0, 32, 3, 65, 3, 58, 0, 40, 32, 3, 66, 128, 128, 128, 128, 128, 4, 55, 3, 8, 32, 3, 32, 0, 54, 2, 32, 32, 3, 65, 0, 54, 2, 24, 32, 3, 65, 0, 54, 2, 16, 2, 127, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 8, 34, 4, 4, 64, 32, 2, 40, 2, 0, 33, 6, 32, 2, 40, 2, 4, 34, 7, 32, 2, 65, 12, 106, 40, 2, 0, 34, 5, 32, 5, 32, 7, 75, 27, 34, 5, 69, 13, 1, 32, 0, 32, 6, 40, 2, 0, 32, 6, 40, 2, 4, 32, 1, 40, 2, 12, 17, 1, 0, 13, 3, 32, 6, 65, 12, 106, 33, 0, 32, 2, 40, 2, 16, 33, 9, 32, 5, 33, 8, 3, 64, 32, 3, 32, 4, 65, 28, 106, 45, 0, 0, 58, 0, 40, 32, 3, 32, 4, 65, 4, 106, 41, 2, 0, 66, 32, 137, 55, 3, 8, 32, 4, 65, 24, 106, 40, 2, 0, 33, 1, 65, 0, 33, 10, 65, 0, 33, 2, 2, 64, 2, 64, 2, 64, 32, 4, 65, 20, 106, 40, 2, 0, 65, 1, 107, 14, 2, 0, 2, 1, 11, 32, 1, 65, 3, 116, 32, 9, 106, 34, 11, 40, 2, 4, 65, 193, 0, 71, 13, 1, 32, 11, 40, 2, 0, 40, 2, 0, 33, 1, 11, 65, 1, 33, 2, 11, 32, 3, 32, 1, 54, 2, 20, 32, 3, 32, 2, 54, 2, 16, 32, 4, 65, 16, 106, 40, 2, 0, 33, 2, 2, 64, 2, 64, 2, 64, 32, 4, 65, 12, 106, 40, 2, 0, 65, 1, 107, 14, 2, 0, 2, 1, 11, 32, 2, 65, 3, 116, 32, 9, 106, 34, 1, 40, 2, 4, 65, 193, 0, 71, 13, 1, 32, 1, 40, 2, 0, 40, 2, 0, 33, 2, 11, 65, 1, 33, 10, 11, 32, 3, 32, 2, 54, 2, 28, 32, 3, 32, 10, 54, 2, 24, 32, 9, 32, 4, 40, 2, 0, 65, 3, 116, 106, 34, 1, 40, 2, 0, 32, 3, 65, 8, 106, 32, 1, 40, 2, 4, 17, 0, 0, 13, 4, 32, 8, 65, 127, 106, 34, 8, 69, 13, 3, 32, 4, 65, 32, 106, 33, 4, 32, 0, 65, 124, 106, 33, 1, 32, 0, 40, 2, 0, 33, 2, 32, 0, 65, 8, 106, 33, 0, 32, 3, 40, 2, 32, 32, 1, 40, 2, 0, 32, 2, 32, 3, 40, 2, 36, 40, 2, 12, 17, 1, 0, 69, 13, 0, 11, 12, 3, 11, 32, 2, 40, 2, 0, 33, 6, 32, 2, 40, 2, 4, 34, 7, 32, 2, 65, 20, 106, 40, 2, 0, 34, 5, 32, 5, 32, 7, 75, 27, 34, 5, 69, 13, 0, 32, 2, 40, 2, 16, 33, 4, 32, 0, 32, 6, 40, 2, 0, 32, 6, 40, 2, 4, 32, 1, 40, 2, 12, 17, 1, 0, 13, 2, 32, 6, 65, 12, 106, 33, 0, 32, 5, 33, 2, 3, 64, 32, 4, 40, 2, 0, 32, 3, 65, 8, 106, 32, 4, 65, 4, 106, 40, 2, 0, 17, 0, 0, 13, 3, 32, 2, 65, 127, 106, 34, 2, 69, 13, 2, 32, 4, 65, 8, 106, 33, 4, 32, 0, 65, 124, 106, 33, 1, 32, 0, 40, 2, 0, 33, 8, 32, 0, 65, 8, 106, 33, 0, 32, 3, 40, 2, 32, 32, 1, 40, 2, 0, 32, 8, 32, 3, 40, 2, 36, 40, 2, 12, 17, 1, 0, 69, 13, 0, 11, 12, 2, 11, 65, 0, 33, 5, 11, 32, 7, 32, 5, 75, 4, 64, 32, 3, 40, 2, 32, 32, 6, 32, 5, 65, 3, 116, 106, 34, 0, 40, 2, 0, 32, 0, 40, 2, 4, 32, 3, 40, 2, 36, 40, 2, 12, 17, 1, 0, 13, 1, 11, 65, 0, 12, 1, 11, 65, 1, 11, 32, 3, 65, 48, 106, 36, 0, 11, 177, 4, 1, 8, 127, 2, 64, 2, 64, 32, 2, 40, 2, 0, 34, 5, 4, 64, 32, 1, 65, 127, 106, 33, 10, 32, 0, 65, 2, 116, 33, 9, 65, 0, 32, 1, 107, 33, 11, 3, 64, 32, 5, 65, 8, 106, 33, 6, 32, 5, 40, 2, 8, 34, 7, 65, 1, 113, 4, 64, 3, 64, 32, 6, 32, 7, 65, 126, 113, 54, 2, 0, 2, 127, 65, 0, 32, 5, 40, 2, 4, 34, 7, 65, 124, 113, 34, 6, 69, 13, 0, 26, 65, 0, 32, 6, 32, 6, 45, 0, 0, 65, 1, 113, 27, 11, 33, 1, 2, 64, 32, 5, 40, 2, 0, 34, 8, 65, 124, 113, 34, 12, 69, 13, 0, 65, 0, 32, 12, 32, 8, 65, 2, 113, 27, 34, 8, 69, 13, 0, 32, 8, 32, 8, 40, 2, 4, 65, 3, 113, 32, 6, 114, 54, 2, 4, 32, 5, 40, 2, 4, 34, 7, 65, 124, 113, 33, 6, 11, 32, 5, 32, 6, 4, 127, 32, 6, 32, 6, 40, 2, 0, 65, 3, 113, 32, 5, 40, 2, 0, 65, 124, 113, 114, 54, 2, 0, 32, 5, 40, 2, 4, 5, 32, 7, 11, 65, 3, 113, 54, 2, 4, 32, 5, 32, 5, 40, 2, 0, 34, 5, 65, 3, 113, 54, 2, 0, 32, 5, 65, 2, 113, 4, 64, 32, 1, 32, 1, 40, 2, 0, 65, 2, 114, 54, 2, 0, 11, 32, 2, 32, 1, 54, 2, 0, 32, 1, 65, 8, 106, 33, 6, 32, 1, 34, 5, 40, 2, 8, 34, 7, 65, 1, 113, 13, 0, 11, 11, 32, 5, 40, 2, 0, 65, 124, 113, 34, 1, 32, 6, 107, 32, 9, 79, 4, 64, 32, 6, 32, 3, 32, 0, 32, 4, 40, 2, 16, 17, 0, 0, 65, 2, 116, 106, 65, 8, 106, 32, 1, 32, 9, 107, 32, 11, 113, 34, 1, 77, 4, 64, 32, 1, 65, 0, 54, 2, 0, 32, 1, 65, 120, 106, 34, 1, 66, 0, 55, 2, 0, 32, 1, 32, 5, 40, 2, 0, 65, 124, 113, 54, 2, 0, 2, 64, 32, 5, 40, 2, 0, 34, 0, 65, 124, 113, 34, 2, 69, 13, 0, 65, 0, 32, 2, 32, 0, 65, 2, 113, 27, 34, 0, 69, 13, 0, 32, 0, 32, 0, 40, 2, 4, 65, 3, 113, 32, 1, 114, 54, 2, 4, 11, 32, 1, 32, 1, 40, 2, 4, 65, 3, 113, 32, 5, 114, 54, 2, 4, 32, 5, 32, 5, 40, 2, 0, 65, 3, 113, 32, 1, 114, 54, 2, 0, 32, 6, 32, 6, 40, 2, 0, 65, 126, 113, 54, 2, 0, 32, 5, 40, 2, 0, 34, 0, 65, 2, 113, 69, 13, 5, 32, 5, 32, 0, 65, 125, 113, 54, 2, 0, 32, 1, 32, 1, 40, 2, 0, 65, 2, 114, 54, 2, 0, 12, 5, 11, 32, 6, 32, 10, 113, 69, 13, 3, 11, 32, 2, 32, 5, 40, 2, 8, 34, 5, 54, 2, 0, 32, 5, 13, 0, 11, 11, 65, 0, 15, 11, 32, 2, 32, 6, 40, 2, 0, 65, 124, 113, 54, 2, 0, 32, 5, 33, 1, 11, 32, 1, 32, 1, 40, 2, 0, 65, 1, 114, 54, 2, 0, 32, 1, 65, 8, 106, 11, 170, 5, 1, 3, 127, 35, 0, 65, 64, 106, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 0, 65, 1, 107, 14, 2, 0, 2, 1, 11, 65, 136, 189, 193, 0, 33, 3, 65, 22, 33, 4, 2, 64, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 1, 65, 1, 107, 14, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 0, 11, 65, 161, 191, 193, 0, 33, 3, 65, 16, 33, 4, 12, 17, 11, 65, 144, 191, 193, 0, 33, 3, 65, 17, 33, 4, 12, 16, 11, 65, 254, 190, 193, 0, 33, 3, 65, 18, 33, 4, 12, 15, 11, 65, 238, 190, 193, 0, 33, 3, 65, 16, 33, 4, 12, 14, 11, 65, 220, 190, 193, 0, 33, 3, 65, 18, 33, 4, 12, 13, 11, 65, 207, 190, 193, 0, 33, 3, 65, 13, 33, 4, 12, 12, 11, 65, 193, 190, 193, 0, 12, 10, 11, 65, 172, 190, 193, 0, 33, 3, 65, 21, 33, 4, 12, 10, 11, 65, 161, 190, 193, 0, 33, 3, 65, 11, 33, 4, 12, 9, 11, 65, 140, 190, 193, 0, 33, 3, 65, 21, 33, 4, 12, 8, 11, 65, 247, 189, 193, 0, 33, 3, 65, 21, 33, 4, 12, 7, 11, 65, 224, 189, 193, 0, 33, 3, 65, 23, 33, 4, 12, 6, 11, 65, 212, 189, 193, 0, 33, 3, 65, 12, 33, 4, 12, 5, 11, 65, 203, 189, 193, 0, 33, 3, 65, 9, 33, 4, 12, 4, 11, 65, 193, 189, 193, 0, 33, 3, 65, 10, 33, 4, 12, 3, 11, 65, 172, 189, 193, 0, 33, 3, 65, 21, 33, 4, 12, 2, 11, 65, 158, 189, 193, 0, 11, 33, 3, 65, 14, 33, 4, 11, 32, 2, 65, 60, 106, 65, 1, 54, 2, 0, 32, 2, 32, 4, 54, 2, 28, 32, 2, 32, 3, 54, 2, 24, 32, 2, 65, 39, 54, 2, 12, 32, 2, 66, 1, 55, 2, 44, 32, 2, 65, 128, 189, 193, 0, 54, 2, 40, 32, 2, 32, 2, 65, 24, 106, 54, 2, 8, 32, 2, 32, 2, 65, 8, 106, 54, 2, 56, 32, 1, 32, 2, 65, 40, 106, 16, 102, 33, 0, 12, 2, 11, 32, 2, 32, 0, 65, 4, 106, 40, 2, 0, 54, 2, 4, 65, 20, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 16, 106, 65, 192, 194, 193, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 8, 106, 65, 184, 194, 193, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 176, 194, 193, 0, 41, 0, 0, 55, 0, 0, 32, 2, 66, 148, 128, 128, 128, 192, 2, 55, 2, 12, 32, 2, 32, 0, 54, 2, 8, 32, 2, 65, 60, 106, 65, 2, 54, 2, 0, 32, 2, 65, 36, 106, 65, 40, 54, 2, 0, 32, 2, 66, 3, 55, 2, 44, 32, 2, 65, 192, 191, 193, 0, 54, 2, 40, 32, 2, 65, 41, 54, 2, 28, 32, 2, 32, 2, 65, 24, 106, 54, 2, 56, 32, 2, 32, 2, 65, 4, 106, 54, 2, 32, 32, 2, 32, 2, 65, 8, 106, 54, 2, 24, 32, 1, 32, 2, 65, 40, 106, 16, 102, 33, 0, 32, 2, 40, 2, 8, 34, 1, 69, 13, 1, 32, 2, 40, 2, 12, 34, 3, 69, 13, 1, 32, 1, 32, 3, 65, 1, 16, 156, 1, 12, 1, 11, 32, 0, 65, 4, 106, 40, 2, 0, 34, 0, 40, 2, 0, 32, 1, 32, 0, 40, 2, 4, 40, 2, 32, 17, 0, 0, 33, 0, 11, 32, 2, 65, 64, 107, 36, 0, 32, 0, 15, 11, 65, 20, 65, 1, 16, 165, 1, 0, 11, 133, 4, 2, 7, 127, 2, 126, 35, 0, 65, 16, 107, 34, 4, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 65, 212, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 0, 40, 2, 24, 4, 64, 32, 0, 65, 24, 106, 33, 6, 32, 0, 65, 32, 106, 33, 3, 32, 0, 65, 212, 0, 106, 33, 5, 3, 64, 32, 0, 40, 2, 76, 33, 1, 32, 6, 32, 3, 40, 2, 0, 32, 2, 16, 75, 32, 0, 40, 2, 24, 32, 3, 40, 2, 0, 106, 32, 1, 32, 2, 16, 121, 26, 32, 3, 32, 3, 40, 2, 0, 32, 2, 106, 54, 2, 0, 32, 5, 40, 2, 0, 34, 1, 32, 2, 73, 13, 3, 32, 5, 65, 0, 54, 2, 0, 32, 1, 32, 2, 107, 34, 1, 69, 13, 2, 32, 0, 40, 2, 76, 34, 7, 32, 2, 32, 7, 106, 32, 1, 16, 96, 32, 5, 32, 1, 54, 2, 0, 32, 1, 33, 2, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 168, 132, 192, 0, 16, 114, 0, 11, 32, 0, 16, 57, 34, 8, 167, 65, 255, 1, 113, 65, 3, 71, 13, 1, 66, 3, 33, 9, 66, 0, 33, 8, 32, 0, 40, 2, 72, 65, 7, 75, 13, 4, 32, 0, 65, 24, 106, 33, 5, 32, 0, 65, 48, 106, 33, 6, 32, 0, 65, 32, 106, 33, 2, 3, 64, 32, 6, 16, 147, 1, 33, 1, 32, 4, 32, 6, 40, 2, 16, 34, 3, 65, 24, 118, 58, 0, 15, 32, 4, 32, 3, 65, 16, 118, 58, 0, 14, 32, 4, 32, 3, 65, 8, 118, 58, 0, 13, 32, 4, 32, 3, 58, 0, 12, 32, 4, 32, 1, 65, 24, 118, 58, 0, 11, 32, 4, 32, 1, 65, 16, 118, 58, 0, 10, 32, 4, 32, 1, 65, 8, 118, 58, 0, 9, 32, 4, 32, 1, 58, 0, 8, 32, 5, 40, 2, 0, 69, 13, 3, 32, 0, 40, 2, 72, 34, 1, 65, 9, 79, 13, 4, 32, 5, 32, 2, 40, 2, 0, 65, 8, 32, 1, 107, 34, 3, 16, 75, 32, 0, 40, 2, 24, 32, 2, 40, 2, 0, 106, 32, 4, 65, 8, 106, 32, 1, 106, 32, 3, 16, 121, 26, 32, 2, 32, 2, 40, 2, 0, 32, 3, 106, 54, 2, 0, 32, 0, 32, 0, 40, 2, 72, 32, 3, 106, 34, 1, 54, 2, 72, 32, 1, 65, 8, 73, 13, 0, 11, 12, 4, 11, 32, 2, 32, 1, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 8, 66, 255, 1, 131, 33, 9, 32, 8, 66, 128, 126, 131, 33, 8, 12, 2, 11, 65, 236, 130, 192, 0, 65, 43, 65, 168, 132, 192, 0, 16, 114, 0, 11, 32, 1, 65, 8, 65, 212, 129, 192, 0, 16, 101, 0, 11, 32, 4, 65, 16, 106, 36, 0, 32, 8, 32, 9, 132, 11, 138, 4, 1, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 65, 2, 75, 4, 64, 32, 3, 69, 13, 1, 32, 3, 65, 129, 128, 2, 79, 13, 2, 32, 1, 32, 1, 40, 2, 8, 32, 2, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 4, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 4, 106, 65, 16, 106, 32, 2, 65, 125, 106, 34, 2, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 4, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 4, 106, 65, 16, 106, 32, 3, 65, 127, 106, 34, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 4, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 4, 106, 65, 16, 106, 32, 3, 65, 8, 118, 34, 5, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 79, 13, 3, 32, 1, 32, 4, 106, 65, 16, 106, 34, 4, 32, 4, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 79, 13, 4, 32, 1, 32, 4, 106, 65, 16, 106, 34, 4, 32, 4, 45, 0, 0, 65, 128, 1, 114, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 4, 54, 2, 12, 32, 4, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 4, 54, 2, 4, 32, 1, 32, 4, 65, 1, 106, 54, 2, 0, 11, 32, 0, 32, 3, 65, 136, 161, 192, 0, 106, 32, 5, 65, 136, 169, 192, 0, 106, 32, 3, 65, 128, 4, 73, 27, 45, 0, 0, 65, 1, 116, 106, 65, 192, 4, 106, 34, 1, 32, 1, 47, 1, 0, 65, 1, 106, 59, 1, 0, 2, 64, 32, 2, 65, 255, 1, 77, 4, 64, 32, 2, 65, 1, 116, 65, 164, 154, 192, 0, 106, 47, 1, 0, 34, 1, 65, 159, 2, 75, 13, 1, 32, 0, 32, 1, 65, 1, 116, 106, 34, 0, 32, 0, 47, 1, 0, 65, 1, 106, 59, 1, 0, 15, 11, 32, 2, 65, 128, 2, 65, 184, 173, 192, 0, 16, 98, 0, 11, 32, 1, 65, 160, 2, 65, 200, 173, 192, 0, 16, 98, 0, 11, 65, 248, 171, 192, 0, 65, 51, 65, 172, 172, 192, 0, 16, 114, 0, 11, 65, 188, 172, 192, 0, 65, 33, 65, 224, 172, 192, 0, 16, 114, 0, 11, 65, 240, 172, 192, 0, 65, 53, 65, 168, 173, 192, 0, 16, 114, 0, 11, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 219, 3, 1, 4, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 0, 40, 2, 0, 33, 4, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 2, 65, 0, 54, 2, 16, 32, 1, 65, 128, 16, 73, 13, 1, 32, 2, 65, 16, 106, 33, 0, 32, 1, 65, 128, 128, 4, 73, 4, 64, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 3, 33, 1, 12, 5, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 19, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 4, 33, 1, 12, 4, 11, 32, 4, 40, 2, 8, 34, 0, 32, 4, 65, 4, 106, 40, 2, 0, 71, 4, 64, 32, 4, 40, 2, 0, 33, 3, 12, 3, 11, 32, 0, 65, 1, 106, 34, 3, 32, 0, 73, 13, 1, 32, 0, 65, 1, 116, 34, 5, 32, 3, 32, 5, 32, 3, 75, 27, 34, 3, 65, 8, 32, 3, 65, 8, 75, 27, 33, 3, 2, 64, 32, 0, 69, 4, 64, 32, 2, 65, 0, 54, 2, 16, 12, 1, 11, 32, 2, 65, 24, 106, 65, 1, 54, 2, 0, 32, 2, 32, 0, 54, 2, 20, 32, 2, 32, 4, 40, 2, 0, 54, 2, 16, 11, 32, 2, 32, 3, 32, 2, 65, 16, 106, 16, 80, 32, 2, 65, 8, 106, 40, 2, 0, 33, 0, 32, 2, 40, 2, 4, 33, 3, 32, 2, 40, 2, 0, 65, 1, 71, 4, 64, 32, 4, 32, 3, 54, 2, 0, 32, 4, 65, 4, 106, 32, 0, 54, 2, 0, 32, 4, 40, 2, 8, 33, 0, 12, 3, 11, 32, 0, 69, 13, 1, 32, 3, 32, 0, 16, 165, 1, 0, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 16, 32, 2, 65, 16, 106, 33, 0, 65, 2, 33, 1, 12, 2, 11, 16, 158, 1, 0, 11, 32, 0, 32, 3, 106, 32, 1, 58, 0, 0, 32, 4, 32, 4, 40, 2, 8, 65, 1, 106, 54, 2, 8, 12, 1, 11, 32, 4, 32, 0, 32, 0, 32, 1, 106, 16, 66, 11, 32, 2, 65, 32, 106, 36, 0, 65, 0, 11, 202, 3, 1, 4, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 2, 65, 0, 54, 2, 16, 32, 1, 65, 128, 16, 73, 13, 1, 32, 1, 65, 128, 128, 4, 73, 4, 64, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 3, 33, 1, 12, 5, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 19, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 4, 33, 1, 12, 4, 11, 32, 0, 40, 2, 8, 34, 3, 32, 0, 65, 4, 106, 40, 2, 0, 71, 4, 64, 32, 0, 40, 2, 0, 33, 4, 12, 3, 11, 32, 3, 65, 1, 106, 34, 4, 32, 3, 73, 13, 1, 32, 3, 65, 1, 116, 34, 5, 32, 4, 32, 5, 32, 4, 75, 27, 34, 4, 65, 8, 32, 4, 65, 8, 75, 27, 33, 4, 2, 64, 32, 3, 69, 4, 64, 32, 2, 65, 0, 54, 2, 16, 12, 1, 11, 32, 2, 65, 24, 106, 65, 1, 54, 2, 0, 32, 2, 32, 3, 54, 2, 20, 32, 2, 32, 0, 40, 2, 0, 54, 2, 16, 11, 32, 2, 32, 4, 32, 2, 65, 16, 106, 16, 80, 32, 2, 65, 8, 106, 40, 2, 0, 33, 3, 32, 2, 40, 2, 4, 33, 4, 32, 2, 40, 2, 0, 65, 1, 71, 4, 64, 32, 0, 32, 4, 54, 2, 0, 32, 0, 65, 4, 106, 32, 3, 54, 2, 0, 32, 0, 40, 2, 8, 33, 3, 12, 3, 11, 32, 3, 69, 13, 1, 32, 4, 32, 3, 16, 165, 1, 0, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 16, 65, 2, 33, 1, 12, 2, 11, 16, 158, 1, 0, 11, 32, 3, 32, 4, 106, 32, 1, 58, 0, 0, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 54, 2, 8, 12, 1, 11, 32, 0, 32, 2, 65, 16, 106, 32, 2, 65, 16, 106, 32, 1, 106, 16, 66, 11, 32, 2, 65, 32, 106, 36, 0, 11, 255, 3, 2, 4, 127, 1, 126, 65, 1, 32, 1, 40, 2, 24, 65, 39, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 16, 17, 0, 0, 69, 4, 64, 65, 244, 0, 33, 3, 65, 2, 33, 2, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 0, 34, 0, 65, 119, 106, 14, 31, 5, 1, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 2, 11, 65, 242, 0, 33, 3, 12, 4, 11, 65, 238, 0, 33, 3, 12, 3, 11, 32, 0, 65, 220, 0, 70, 13, 1, 11, 2, 127, 2, 126, 2, 64, 32, 0, 16, 40, 69, 4, 64, 32, 0, 16, 21, 69, 13, 1, 65, 1, 12, 3, 11, 32, 0, 65, 1, 114, 103, 65, 2, 118, 65, 7, 115, 173, 66, 128, 128, 128, 128, 208, 0, 132, 12, 1, 11, 32, 0, 65, 1, 114, 103, 65, 2, 118, 65, 7, 115, 173, 66, 128, 128, 128, 128, 208, 0, 132, 11, 33, 6, 65, 3, 11, 33, 2, 32, 0, 33, 3, 12, 1, 11, 32, 0, 33, 3, 11, 3, 64, 32, 2, 33, 4, 65, 220, 0, 33, 0, 65, 1, 33, 2, 2, 64, 2, 126, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 1, 107, 14, 3, 1, 5, 0, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 6, 66, 32, 136, 167, 65, 255, 1, 113, 65, 1, 107, 14, 5, 3, 2, 1, 0, 6, 5, 11, 65, 245, 0, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 48, 132, 12, 6, 11, 65, 251, 0, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 32, 132, 12, 5, 11, 65, 48, 65, 215, 0, 32, 3, 32, 6, 167, 34, 4, 65, 2, 116, 65, 28, 113, 118, 65, 15, 113, 34, 0, 65, 10, 73, 27, 32, 0, 106, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 16, 132, 32, 4, 69, 13, 4, 26, 32, 6, 66, 127, 124, 66, 255, 255, 255, 255, 15, 131, 32, 6, 66, 128, 128, 128, 128, 112, 131, 132, 12, 4, 11, 65, 253, 0, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 12, 3, 11, 65, 0, 33, 2, 32, 3, 33, 0, 12, 3, 11, 32, 1, 40, 2, 24, 65, 39, 32, 1, 40, 2, 28, 40, 2, 16, 17, 0, 0, 15, 11, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 192, 0, 132, 11, 33, 6, 65, 3, 33, 2, 11, 32, 1, 40, 2, 24, 32, 0, 32, 1, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 11, 11, 156, 3, 1, 5, 127, 35, 0, 65, 16, 107, 34, 6, 36, 0, 2, 64, 2, 127, 32, 2, 4, 64, 3, 64, 2, 64, 32, 0, 40, 2, 8, 45, 0, 0, 69, 13, 0, 32, 0, 40, 2, 0, 65, 188, 198, 193, 0, 65, 4, 32, 0, 40, 2, 4, 40, 2, 12, 17, 1, 0, 69, 13, 0, 65, 1, 12, 3, 11, 65, 0, 33, 4, 32, 2, 33, 3, 2, 127, 3, 64, 2, 64, 32, 1, 32, 4, 106, 33, 5, 2, 64, 32, 3, 65, 7, 77, 4, 64, 32, 3, 69, 13, 2, 32, 2, 32, 4, 107, 33, 7, 65, 0, 33, 3, 3, 64, 32, 3, 32, 5, 106, 45, 0, 0, 65, 10, 70, 13, 2, 32, 7, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 12, 2, 11, 32, 6, 65, 8, 106, 32, 5, 32, 3, 16, 49, 32, 6, 40, 2, 8, 65, 1, 71, 13, 1, 32, 6, 40, 2, 12, 33, 3, 11, 32, 3, 32, 4, 106, 34, 3, 65, 1, 106, 33, 4, 2, 64, 32, 3, 32, 2, 79, 13, 0, 32, 1, 32, 3, 106, 45, 0, 0, 65, 10, 71, 13, 0, 65, 1, 12, 3, 11, 32, 2, 32, 4, 107, 33, 3, 32, 2, 32, 4, 79, 13, 1, 11, 11, 32, 2, 33, 4, 65, 0, 11, 33, 3, 32, 0, 40, 2, 8, 32, 3, 58, 0, 0, 32, 0, 40, 2, 4, 33, 3, 32, 0, 40, 2, 0, 33, 5, 2, 64, 2, 64, 32, 2, 32, 4, 71, 4, 64, 32, 2, 32, 4, 75, 4, 64, 32, 1, 32, 4, 106, 34, 7, 44, 0, 0, 65, 191, 127, 74, 13, 2, 11, 32, 1, 32, 2, 65, 0, 32, 4, 65, 192, 198, 193, 0, 16, 12, 0, 11, 32, 5, 32, 1, 32, 4, 32, 3, 40, 2, 12, 17, 1, 0, 69, 13, 1, 65, 1, 12, 4, 11, 65, 1, 32, 5, 32, 1, 32, 4, 32, 3, 40, 2, 12, 17, 1, 0, 13, 3, 26, 32, 7, 44, 0, 0, 65, 191, 127, 76, 13, 4, 11, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 34, 2, 13, 0, 11, 11, 65, 0, 11, 32, 6, 65, 16, 106, 36, 0, 15, 11, 32, 1, 32, 2, 32, 4, 32, 2, 65, 208, 198, 193, 0, 16, 12, 0, 11, 160, 3, 1, 5, 127, 2, 64, 2, 64, 65, 0, 65, 15, 32, 0, 65, 164, 154, 4, 73, 27, 34, 1, 32, 1, 65, 8, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 0, 65, 11, 116, 34, 2, 75, 27, 34, 1, 32, 1, 65, 4, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 2, 75, 27, 34, 1, 32, 1, 65, 2, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 2, 75, 27, 34, 1, 32, 1, 65, 1, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 2, 75, 27, 34, 3, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 34, 1, 32, 2, 70, 32, 1, 32, 2, 73, 106, 32, 3, 106, 34, 2, 65, 30, 77, 4, 64, 65, 177, 5, 33, 4, 32, 2, 65, 30, 71, 4, 64, 32, 2, 65, 2, 116, 65, 220, 216, 193, 0, 106, 40, 2, 0, 65, 21, 118, 33, 4, 11, 65, 0, 33, 1, 32, 2, 65, 127, 106, 34, 3, 32, 2, 77, 4, 64, 32, 3, 65, 31, 79, 13, 3, 32, 3, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 255, 255, 255, 0, 113, 33, 1, 11, 2, 64, 32, 4, 32, 2, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 21, 118, 34, 3, 65, 1, 106, 70, 13, 0, 32, 0, 32, 1, 107, 33, 2, 32, 3, 65, 177, 5, 32, 3, 65, 177, 5, 75, 27, 33, 5, 32, 4, 65, 127, 106, 33, 1, 65, 0, 33, 0, 3, 64, 32, 3, 32, 5, 70, 13, 3, 32, 0, 32, 3, 65, 212, 217, 193, 0, 106, 45, 0, 0, 106, 34, 0, 32, 2, 75, 13, 1, 32, 1, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 32, 1, 33, 3, 11, 32, 3, 65, 1, 113, 15, 11, 32, 2, 65, 31, 65, 160, 216, 193, 0, 16, 98, 0, 11, 32, 5, 65, 177, 5, 65, 176, 216, 193, 0, 16, 98, 0, 11, 32, 3, 65, 31, 65, 192, 216, 193, 0, 16, 98, 0, 11, 182, 3, 2, 6, 127, 2, 126, 35, 0, 65, 32, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 16, 106, 65, 4, 114, 33, 6, 3, 64, 32, 3, 65, 16, 106, 32, 0, 32, 1, 32, 2, 16, 89, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 16, 65, 1, 71, 4, 64, 32, 3, 40, 2, 20, 34, 4, 69, 13, 1, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 6, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 70, 13, 1, 32, 3, 53, 0, 21, 32, 3, 65, 25, 106, 51, 0, 0, 32, 3, 65, 27, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 20, 33, 5, 12, 7, 11, 32, 3, 65, 8, 106, 65, 27, 16, 103, 32, 3, 40, 2, 12, 33, 2, 32, 3, 40, 2, 8, 34, 0, 65, 172, 136, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 23, 106, 65, 195, 136, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 188, 136, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 180, 136, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 2, 32, 1, 65, 27, 54, 2, 8, 32, 1, 32, 0, 54, 2, 0, 32, 1, 32, 2, 54, 2, 4, 65, 17, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 6, 11, 32, 3, 40, 2, 16, 65, 1, 71, 13, 3, 32, 3, 45, 0, 20, 65, 2, 79, 13, 2, 12, 3, 11, 32, 4, 32, 2, 65, 156, 136, 192, 0, 16, 101, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 3, 40, 2, 24, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 24, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 32, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 29, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 212, 134, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 204, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 196, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 188, 134, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 172, 134, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 28, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 212, 134, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 204, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 196, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 188, 134, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 172, 134, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 28, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 204, 135, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 196, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 188, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 180, 135, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 164, 135, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 29, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 204, 135, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 196, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 188, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 180, 135, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 164, 135, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 162, 3, 2, 4, 127, 2, 126, 35, 0, 65, 64, 106, 34, 2, 36, 0, 65, 1, 33, 4, 2, 64, 32, 0, 45, 0, 4, 13, 0, 32, 0, 45, 0, 5, 33, 5, 32, 0, 40, 2, 0, 34, 3, 45, 0, 0, 65, 4, 113, 4, 64, 32, 5, 69, 4, 64, 32, 3, 40, 2, 24, 65, 224, 198, 193, 0, 65, 3, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 2, 32, 0, 40, 2, 0, 33, 3, 11, 32, 2, 65, 1, 58, 0, 23, 32, 2, 65, 52, 106, 65, 164, 198, 193, 0, 54, 2, 0, 32, 2, 32, 3, 41, 2, 24, 55, 3, 8, 32, 2, 32, 2, 65, 23, 106, 54, 2, 16, 32, 3, 41, 2, 8, 33, 6, 32, 3, 41, 2, 16, 33, 7, 32, 2, 32, 3, 45, 0, 32, 58, 0, 56, 32, 2, 32, 7, 55, 3, 40, 32, 2, 32, 6, 55, 3, 32, 32, 2, 32, 3, 41, 2, 0, 55, 3, 24, 32, 2, 32, 2, 65, 8, 106, 54, 2, 48, 32, 2, 65, 8, 106, 65, 216, 140, 192, 0, 65, 16, 16, 39, 13, 1, 32, 2, 65, 8, 106, 65, 155, 197, 193, 0, 65, 2, 16, 39, 13, 1, 32, 1, 32, 2, 65, 24, 106, 65, 244, 140, 192, 0, 40, 2, 0, 17, 0, 0, 13, 1, 32, 2, 40, 2, 48, 65, 227, 198, 193, 0, 65, 2, 32, 2, 40, 2, 52, 40, 2, 12, 17, 1, 0, 33, 4, 12, 1, 11, 32, 3, 40, 2, 24, 65, 229, 198, 193, 0, 65, 231, 198, 193, 0, 32, 5, 27, 65, 2, 65, 3, 32, 5, 27, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 32, 0, 40, 2, 0, 34, 3, 40, 2, 24, 65, 216, 140, 192, 0, 65, 16, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 32, 0, 40, 2, 0, 34, 3, 40, 2, 24, 65, 155, 197, 193, 0, 65, 2, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 32, 1, 32, 0, 40, 2, 0, 65, 244, 140, 192, 0, 40, 2, 0, 17, 0, 0, 33, 4, 11, 32, 0, 65, 1, 58, 0, 5, 32, 0, 32, 4, 58, 0, 4, 32, 2, 65, 64, 107, 36, 0, 11, 238, 2, 2, 5, 127, 1, 126, 35, 0, 65, 16, 107, 34, 4, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 16, 78, 34, 9, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 1, 65, 64, 107, 33, 6, 32, 1, 65, 40, 106, 33, 5, 32, 3, 69, 13, 1, 3, 64, 32, 5, 41, 3, 0, 33, 9, 32, 4, 32, 5, 32, 2, 32, 3, 32, 6, 65, 0, 16, 110, 32, 4, 45, 0, 0, 34, 7, 32, 5, 41, 3, 0, 32, 9, 125, 34, 9, 167, 114, 32, 4, 45, 0, 1, 34, 8, 65, 2, 70, 114, 13, 3, 32, 1, 16, 78, 34, 9, 167, 65, 255, 1, 113, 65, 3, 70, 13, 0, 11, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 9, 55, 2, 4, 12, 2, 11, 32, 5, 41, 3, 0, 33, 9, 32, 4, 32, 5, 32, 2, 65, 0, 32, 6, 65, 0, 16, 110, 32, 5, 41, 3, 0, 32, 9, 125, 33, 9, 32, 4, 45, 0, 1, 33, 8, 32, 4, 45, 0, 0, 33, 7, 11, 32, 0, 2, 127, 32, 7, 65, 1, 70, 4, 64, 65, 22, 65, 1, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 65, 14, 106, 65, 142, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 8, 106, 65, 136, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 128, 132, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 13, 4, 32, 2, 66, 150, 128, 128, 128, 224, 2, 55, 2, 4, 32, 2, 32, 1, 54, 2, 0, 32, 0, 65, 11, 32, 2, 65, 200, 132, 192, 0, 16, 107, 55, 2, 4, 65, 1, 12, 1, 11, 32, 0, 32, 9, 62, 2, 4, 32, 0, 65, 8, 106, 32, 8, 58, 0, 0, 65, 0, 11, 54, 2, 0, 11, 32, 4, 65, 16, 106, 36, 0, 15, 11, 65, 22, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 131, 3, 1, 3, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 32, 0, 69, 4, 64, 32, 1, 33, 0, 12, 1, 11, 32, 0, 65, 3, 106, 34, 3, 65, 2, 118, 33, 4, 2, 64, 32, 1, 65, 4, 75, 13, 0, 32, 4, 65, 127, 106, 34, 0, 65, 255, 1, 75, 13, 0, 32, 2, 65, 136, 223, 193, 0, 54, 2, 8, 32, 2, 32, 0, 65, 2, 116, 65, 140, 223, 193, 0, 106, 34, 3, 40, 2, 0, 54, 2, 12, 2, 64, 32, 4, 32, 1, 32, 2, 65, 12, 106, 32, 2, 65, 8, 106, 65, 164, 138, 192, 0, 16, 32, 34, 0, 13, 0, 32, 2, 32, 2, 65, 8, 106, 32, 4, 32, 1, 16, 74, 65, 0, 33, 0, 32, 2, 40, 2, 0, 13, 0, 32, 2, 40, 2, 4, 34, 0, 32, 2, 40, 2, 12, 54, 2, 8, 32, 2, 32, 0, 54, 2, 12, 32, 4, 32, 1, 32, 2, 65, 12, 106, 32, 2, 65, 8, 106, 65, 164, 138, 192, 0, 16, 32, 33, 0, 11, 32, 3, 32, 2, 40, 2, 12, 54, 2, 0, 12, 1, 11, 32, 2, 65, 136, 223, 193, 0, 40, 2, 0, 54, 2, 12, 2, 64, 32, 4, 32, 1, 32, 2, 65, 12, 106, 65, 140, 138, 192, 0, 65, 140, 138, 192, 0, 16, 32, 34, 0, 13, 0, 32, 3, 65, 124, 113, 34, 0, 32, 1, 65, 3, 116, 65, 128, 128, 1, 106, 34, 3, 32, 0, 32, 3, 75, 27, 65, 135, 128, 4, 106, 34, 3, 65, 16, 118, 64, 0, 34, 0, 65, 127, 70, 4, 64, 65, 0, 33, 0, 12, 1, 11, 32, 0, 65, 16, 116, 34, 0, 32, 0, 32, 3, 65, 128, 128, 124, 113, 106, 65, 2, 114, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 32, 2, 40, 2, 12, 54, 2, 8, 32, 2, 32, 0, 54, 2, 12, 32, 4, 32, 1, 32, 2, 65, 12, 106, 65, 140, 138, 192, 0, 65, 140, 138, 192, 0, 16, 32, 33, 0, 11, 65, 136, 223, 193, 0, 32, 2, 40, 2, 12, 54, 2, 0, 11, 32, 2, 65, 16, 106, 36, 0, 32, 0, 11, 186, 2, 1, 4, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 3, 106, 65, 124, 113, 32, 1, 107, 34, 3, 69, 13, 0, 32, 2, 32, 3, 32, 3, 32, 2, 75, 27, 34, 4, 69, 13, 0, 65, 0, 33, 3, 2, 64, 3, 64, 32, 1, 32, 3, 106, 45, 0, 0, 65, 10, 70, 13, 1, 32, 4, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 32, 4, 32, 2, 65, 120, 106, 34, 3, 77, 13, 2, 12, 3, 11, 65, 1, 33, 1, 12, 3, 11, 32, 2, 65, 120, 106, 33, 3, 65, 0, 33, 4, 11, 3, 64, 32, 1, 32, 4, 106, 34, 5, 65, 4, 106, 40, 2, 0, 65, 138, 148, 168, 208, 0, 115, 34, 6, 65, 127, 115, 32, 6, 65, 255, 253, 251, 119, 106, 113, 32, 5, 40, 2, 0, 65, 138, 148, 168, 208, 0, 115, 34, 5, 65, 127, 115, 32, 5, 65, 255, 253, 251, 119, 106, 113, 114, 65, 128, 129, 130, 132, 120, 113, 69, 4, 64, 32, 4, 65, 8, 106, 34, 4, 32, 3, 77, 13, 1, 11, 11, 32, 4, 32, 2, 75, 13, 2, 11, 65, 0, 33, 3, 2, 127, 65, 0, 32, 2, 32, 4, 70, 13, 0, 26, 32, 1, 32, 4, 106, 33, 5, 32, 2, 32, 4, 107, 33, 1, 3, 64, 65, 1, 32, 3, 32, 5, 106, 45, 0, 0, 65, 10, 70, 13, 1, 26, 32, 1, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 32, 1, 33, 3, 65, 0, 11, 33, 1, 32, 3, 32, 4, 106, 33, 3, 11, 32, 0, 32, 3, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 15, 11, 32, 4, 32, 2, 65, 224, 201, 193, 0, 16, 101, 0, 11, 228, 2, 2, 3, 127, 1, 126, 2, 64, 32, 0, 65, 24, 106, 40, 2, 0, 69, 13, 0, 32, 0, 16, 82, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 65, 24, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 65, 56, 106, 40, 2, 0, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 0, 65, 196, 0, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 64, 32, 1, 65, 1, 16, 156, 1, 11, 32, 0, 65, 212, 0, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 80, 32, 1, 65, 1, 16, 156, 1, 11, 2, 64, 32, 0, 40, 2, 92, 69, 13, 0, 2, 64, 32, 0, 65, 224, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 228, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 2, 64, 32, 0, 65, 236, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 240, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 65, 248, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 252, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 65, 144, 1, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 140, 1, 32, 1, 65, 1, 16, 156, 1, 11, 11, 206, 2, 1, 6, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 32, 1, 40, 2, 0, 33, 7, 2, 64, 32, 1, 40, 2, 4, 34, 6, 65, 3, 116, 34, 5, 69, 4, 64, 12, 1, 11, 32, 7, 65, 4, 106, 33, 2, 3, 64, 32, 2, 40, 2, 0, 32, 4, 106, 33, 4, 32, 2, 65, 8, 106, 33, 2, 32, 5, 65, 120, 106, 34, 5, 13, 0, 11, 11, 2, 64, 2, 64, 32, 1, 65, 20, 106, 40, 2, 0, 69, 4, 64, 32, 4, 33, 2, 12, 1, 11, 32, 6, 4, 64, 65, 0, 33, 5, 65, 1, 33, 6, 32, 4, 65, 15, 77, 4, 64, 32, 7, 65, 4, 106, 40, 2, 0, 69, 13, 3, 11, 32, 4, 32, 4, 106, 34, 2, 32, 4, 79, 13, 1, 12, 2, 11, 65, 0, 65, 0, 65, 168, 195, 193, 0, 16, 98, 0, 11, 32, 2, 65, 127, 74, 4, 64, 32, 2, 69, 4, 64, 65, 0, 33, 5, 65, 1, 33, 6, 12, 2, 11, 32, 2, 33, 5, 32, 2, 65, 1, 16, 149, 1, 34, 6, 13, 1, 32, 2, 65, 1, 16, 165, 1, 0, 11, 16, 158, 1, 0, 11, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 6, 54, 2, 0, 32, 0, 32, 5, 54, 2, 4, 32, 3, 32, 0, 54, 2, 4, 32, 3, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 3, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 3, 32, 1, 41, 2, 0, 55, 3, 8, 32, 3, 65, 4, 106, 65, 196, 194, 193, 0, 32, 3, 65, 8, 106, 16, 31, 69, 4, 64, 32, 3, 65, 32, 106, 36, 0, 15, 11, 65, 200, 195, 193, 0, 65, 51, 32, 3, 65, 8, 106, 65, 184, 195, 193, 0, 65, 148, 196, 193, 0, 16, 93, 0, 11, 192, 2, 2, 5, 127, 1, 126, 35, 0, 65, 48, 107, 34, 5, 36, 0, 65, 39, 33, 3, 2, 64, 32, 0, 66, 144, 206, 0, 84, 4, 64, 32, 0, 33, 8, 12, 1, 11, 3, 64, 32, 5, 65, 9, 106, 32, 3, 106, 34, 4, 65, 124, 106, 32, 0, 32, 0, 66, 144, 206, 0, 128, 34, 8, 66, 144, 206, 0, 126, 125, 167, 34, 6, 65, 255, 255, 3, 113, 65, 228, 0, 110, 34, 7, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 32, 4, 65, 126, 106, 32, 6, 32, 7, 65, 228, 0, 108, 107, 65, 255, 255, 3, 113, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 32, 3, 65, 124, 106, 33, 3, 32, 0, 66, 255, 193, 215, 47, 86, 32, 8, 33, 0, 13, 0, 11, 11, 32, 8, 167, 34, 4, 65, 227, 0, 74, 4, 64, 32, 3, 65, 126, 106, 34, 3, 32, 5, 65, 9, 106, 106, 32, 8, 167, 34, 4, 32, 4, 65, 255, 255, 3, 113, 65, 228, 0, 110, 34, 4, 65, 228, 0, 108, 107, 65, 255, 255, 3, 113, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 11, 2, 64, 32, 4, 65, 9, 76, 4, 64, 32, 3, 65, 127, 106, 34, 3, 32, 5, 65, 9, 106, 106, 32, 4, 65, 48, 106, 58, 0, 0, 12, 1, 11, 32, 3, 65, 126, 106, 34, 3, 32, 5, 65, 9, 106, 106, 32, 4, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 11, 32, 2, 32, 1, 65, 228, 196, 193, 0, 65, 0, 32, 5, 65, 9, 106, 32, 3, 106, 65, 39, 32, 3, 107, 16, 27, 32, 5, 65, 48, 106, 36, 0, 11, 206, 2, 2, 3, 127, 1, 126, 2, 64, 32, 0, 40, 2, 24, 69, 13, 0, 32, 0, 16, 34, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 40, 2, 24, 69, 13, 0, 32, 0, 16, 57, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 40, 2, 24, 34, 1, 69, 13, 0, 32, 0, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 40, 2, 16, 34, 1, 65, 192, 128, 4, 106, 40, 2, 0, 65, 204, 153, 5, 65, 1, 16, 156, 1, 32, 1, 40, 2, 200, 128, 4, 65, 224, 33, 65, 2, 16, 156, 1, 32, 1, 65, 212, 128, 4, 106, 40, 2, 0, 65, 130, 130, 10, 65, 2, 16, 156, 1, 32, 0, 40, 2, 16, 65, 232, 128, 4, 65, 4, 16, 156, 1, 32, 0, 65, 40, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 36, 32, 1, 65, 1, 16, 156, 1, 11, 32, 0, 65, 208, 0, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 76, 32, 1, 65, 1, 16, 156, 1, 11, 11, 220, 2, 2, 7, 127, 1, 126, 35, 0, 34, 2, 33, 5, 32, 2, 65, 32, 107, 65, 96, 113, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 16, 82, 34, 9, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 2, 64, 32, 1, 65, 216, 0, 106, 40, 2, 0, 65, 8, 71, 13, 0, 32, 1, 40, 2, 24, 69, 13, 5, 32, 1, 40, 2, 80, 34, 3, 45, 0, 7, 33, 4, 32, 3, 45, 0, 6, 33, 6, 32, 3, 45, 0, 5, 33, 7, 32, 3, 45, 0, 4, 33, 8, 32, 3, 40, 0, 0, 32, 1, 16, 147, 1, 71, 13, 0, 32, 1, 40, 2, 24, 69, 13, 6, 32, 1, 40, 2, 16, 32, 7, 65, 8, 116, 32, 8, 114, 32, 6, 65, 16, 116, 114, 32, 4, 65, 24, 116, 114, 70, 13, 2, 11, 16, 79, 33, 9, 11, 32, 9, 167, 65, 255, 1, 113, 65, 3, 71, 13, 1, 11, 32, 1, 32, 2, 41, 3, 16, 55, 3, 16, 32, 1, 32, 2, 41, 3, 8, 55, 3, 8, 32, 1, 32, 2, 41, 3, 0, 55, 3, 0, 65, 0, 33, 3, 32, 2, 65, 0, 54, 2, 24, 32, 1, 65, 24, 106, 34, 4, 41, 3, 0, 33, 9, 32, 4, 32, 2, 41, 3, 24, 55, 3, 0, 32, 9, 167, 69, 13, 4, 32, 0, 65, 12, 106, 32, 1, 65, 32, 106, 41, 2, 0, 62, 2, 0, 32, 0, 32, 9, 55, 2, 4, 12, 1, 11, 32, 0, 32, 9, 55, 2, 4, 65, 1, 33, 3, 11, 32, 1, 16, 50, 32, 0, 32, 3, 54, 2, 0, 32, 5, 36, 0, 15, 11, 65, 236, 130, 192, 0, 65, 43, 65, 184, 132, 192, 0, 16, 114, 0, 11, 65, 236, 130, 192, 0, 65, 43, 65, 184, 132, 192, 0, 16, 114, 0, 11, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 202, 2, 1, 1, 127, 35, 0, 65, 32, 107, 34, 7, 36, 0, 32, 7, 65, 8, 106, 32, 6, 65, 255, 1, 113, 16, 119, 32, 7, 40, 2, 12, 33, 6, 32, 7, 40, 2, 8, 69, 4, 64, 32, 7, 65, 16, 106, 32, 1, 40, 2, 16, 32, 2, 32, 3, 32, 4, 32, 5, 32, 6, 16, 7, 32, 1, 32, 1, 41, 3, 0, 32, 7, 53, 2, 16, 124, 55, 3, 0, 32, 1, 32, 1, 41, 3, 8, 32, 7, 53, 2, 20, 124, 55, 3, 8, 32, 7, 65, 28, 106, 40, 2, 0, 33, 2, 32, 0, 2, 127, 2, 64, 2, 64, 32, 7, 40, 2, 24, 65, 1, 70, 4, 64, 32, 2, 65, 123, 70, 13, 1, 32, 0, 65, 4, 106, 65, 0, 54, 2, 0, 65, 1, 12, 3, 11, 2, 64, 2, 64, 2, 64, 32, 2, 65, 1, 107, 14, 2, 2, 0, 1, 11, 2, 64, 2, 64, 32, 1, 40, 2, 16, 34, 2, 65, 152, 210, 0, 106, 45, 0, 0, 34, 3, 69, 13, 0, 32, 2, 65, 24, 106, 40, 2, 0, 33, 1, 32, 3, 65, 103, 106, 65, 255, 1, 113, 65, 9, 73, 32, 2, 65, 4, 106, 40, 2, 0, 69, 13, 0, 69, 13, 1, 11, 65, 0, 33, 1, 11, 32, 0, 65, 8, 106, 32, 1, 54, 2, 0, 32, 0, 65, 4, 106, 65, 1, 54, 2, 0, 65, 1, 12, 4, 11, 32, 0, 65, 0, 58, 0, 1, 65, 0, 12, 3, 11, 32, 0, 65, 2, 58, 0, 1, 12, 1, 11, 32, 0, 65, 1, 58, 0, 1, 11, 65, 0, 11, 58, 0, 0, 32, 7, 65, 32, 106, 36, 0, 15, 11, 32, 7, 32, 6, 54, 2, 16, 65, 244, 143, 192, 0, 65, 43, 32, 7, 65, 16, 106, 65, 160, 144, 192, 0, 65, 140, 145, 192, 0, 16, 93, 0, 11, 173, 2, 1, 3, 127, 35, 0, 65, 128, 1, 107, 34, 4, 36, 0, 2, 64, 2, 64, 2, 127, 32, 1, 40, 2, 0, 34, 3, 65, 16, 113, 4, 64, 32, 0, 40, 2, 0, 33, 2, 65, 0, 33, 0, 3, 64, 32, 0, 32, 4, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 3, 65, 48, 114, 32, 3, 65, 215, 0, 106, 32, 3, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 13, 2, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 4, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 12, 1, 11, 32, 0, 40, 2, 0, 33, 2, 32, 3, 65, 32, 113, 4, 64, 65, 0, 33, 0, 3, 64, 32, 0, 32, 4, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 3, 65, 48, 114, 32, 3, 65, 55, 106, 32, 3, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 13, 3, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 4, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 12, 1, 11, 32, 2, 173, 65, 1, 32, 1, 16, 52, 11, 32, 4, 65, 128, 1, 106, 36, 0, 15, 11, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 180, 2, 2, 8, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 32, 0, 65, 24, 106, 33, 6, 32, 0, 65, 36, 106, 33, 7, 32, 0, 65, 44, 106, 33, 4, 32, 0, 65, 32, 106, 33, 5, 2, 64, 2, 126, 2, 64, 3, 64, 2, 64, 32, 4, 40, 2, 0, 34, 1, 69, 13, 0, 32, 6, 40, 2, 0, 4, 64, 3, 64, 32, 0, 40, 2, 36, 33, 2, 32, 6, 32, 5, 40, 2, 0, 32, 1, 16, 75, 32, 0, 40, 2, 24, 32, 5, 40, 2, 0, 106, 32, 2, 32, 1, 16, 121, 26, 32, 5, 32, 5, 40, 2, 0, 32, 1, 106, 54, 2, 0, 32, 4, 40, 2, 0, 34, 2, 32, 1, 73, 13, 6, 32, 4, 65, 0, 54, 2, 0, 32, 2, 32, 1, 107, 34, 2, 69, 13, 2, 32, 0, 40, 2, 36, 34, 8, 32, 1, 32, 8, 106, 32, 2, 16, 96, 32, 4, 32, 2, 54, 2, 0, 32, 2, 33, 1, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 0, 16, 163, 1, 33, 9, 32, 3, 32, 0, 65, 168, 132, 192, 0, 65, 0, 32, 7, 65, 4, 16, 65, 32, 3, 45, 0, 0, 65, 1, 70, 13, 1, 32, 0, 16, 163, 1, 32, 9, 82, 13, 0, 11, 66, 3, 33, 10, 66, 0, 12, 1, 11, 32, 3, 40, 2, 4, 32, 3, 40, 2, 8, 16, 128, 1, 34, 9, 66, 255, 1, 131, 33, 10, 32, 9, 66, 128, 126, 131, 11, 32, 3, 65, 16, 106, 36, 0, 32, 10, 132, 15, 11, 32, 1, 32, 2, 65, 208, 133, 192, 0, 16, 99, 0, 11, 180, 2, 2, 8, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 32, 0, 65, 24, 106, 33, 6, 32, 0, 65, 36, 106, 33, 7, 32, 0, 65, 44, 106, 33, 4, 32, 0, 65, 32, 106, 33, 5, 2, 64, 2, 126, 2, 64, 3, 64, 2, 64, 32, 4, 40, 2, 0, 34, 1, 69, 13, 0, 32, 6, 40, 2, 0, 4, 64, 3, 64, 32, 0, 40, 2, 36, 33, 2, 32, 6, 32, 5, 40, 2, 0, 32, 1, 16, 75, 32, 0, 40, 2, 24, 32, 5, 40, 2, 0, 106, 32, 2, 32, 1, 16, 121, 26, 32, 5, 32, 5, 40, 2, 0, 32, 1, 106, 54, 2, 0, 32, 4, 40, 2, 0, 34, 2, 32, 1, 73, 13, 6, 32, 4, 65, 0, 54, 2, 0, 32, 2, 32, 1, 107, 34, 2, 69, 13, 2, 32, 0, 40, 2, 36, 34, 8, 32, 1, 32, 8, 106, 32, 2, 16, 96, 32, 4, 32, 2, 54, 2, 0, 32, 2, 33, 1, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 0, 16, 163, 1, 33, 9, 32, 3, 32, 0, 65, 168, 132, 192, 0, 65, 0, 32, 7, 65, 4, 16, 110, 32, 3, 45, 0, 0, 65, 1, 70, 13, 1, 32, 0, 16, 163, 1, 32, 9, 82, 13, 0, 11, 66, 3, 33, 10, 66, 0, 12, 1, 11, 32, 3, 40, 2, 4, 32, 3, 40, 2, 8, 16, 128, 1, 34, 9, 66, 255, 1, 131, 33, 10, 32, 9, 66, 128, 126, 131, 11, 32, 3, 65, 16, 106, 36, 0, 32, 10, 132, 15, 11, 32, 1, 32, 2, 65, 208, 133, 192, 0, 16, 99, 0, 11, 246, 2, 1, 3, 127, 35, 0, 65, 240, 128, 4, 107, 34, 0, 36, 0, 2, 64, 65, 232, 128, 4, 65, 4, 16, 149, 1, 34, 1, 4, 64, 32, 0, 65, 8, 106, 34, 2, 65, 16, 106, 65, 0, 65, 128, 128, 4, 16, 131, 1, 26, 32, 2, 66, 128, 128, 128, 128, 128, 1, 55, 2, 8, 32, 2, 66, 1, 55, 2, 0, 32, 0, 65, 152, 128, 4, 106, 16, 91, 65, 224, 33, 65, 2, 16, 149, 1, 34, 2, 69, 13, 1, 32, 2, 65, 0, 65, 224, 33, 16, 131, 1, 26, 32, 0, 65, 208, 128, 4, 106, 16, 97, 32, 1, 32, 0, 65, 8, 106, 65, 144, 128, 4, 16, 121, 34, 1, 32, 2, 54, 2, 200, 128, 4, 32, 1, 65, 192, 128, 4, 106, 32, 0, 65, 200, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 184, 128, 4, 106, 32, 0, 65, 192, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 176, 128, 4, 106, 32, 0, 65, 184, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 168, 128, 4, 106, 32, 0, 65, 176, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 160, 128, 4, 106, 32, 0, 65, 168, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 152, 128, 4, 106, 32, 0, 65, 160, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 32, 0, 41, 3, 152, 128, 4, 55, 2, 144, 128, 4, 32, 1, 32, 0, 41, 3, 208, 128, 4, 55, 2, 204, 128, 4, 32, 1, 65, 212, 128, 4, 106, 32, 0, 65, 216, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 220, 128, 4, 106, 32, 0, 65, 224, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 228, 128, 4, 106, 32, 0, 65, 232, 128, 4, 106, 40, 2, 0, 54, 2, 0, 32, 0, 65, 240, 128, 4, 106, 36, 0, 32, 1, 15, 11, 65, 232, 128, 4, 65, 4, 16, 165, 1, 0, 11, 65, 224, 33, 65, 2, 16, 165, 1, 0, 11, 186, 2, 1, 5, 127, 35, 0, 65, 64, 106, 34, 2, 36, 0, 32, 1, 40, 2, 4, 34, 3, 69, 4, 64, 32, 1, 65, 4, 106, 33, 3, 32, 1, 40, 2, 0, 33, 4, 32, 2, 65, 0, 54, 2, 32, 32, 2, 66, 1, 55, 3, 24, 32, 2, 32, 2, 65, 24, 106, 54, 2, 36, 32, 2, 65, 56, 106, 32, 4, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 48, 106, 32, 4, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 4, 41, 2, 0, 55, 3, 40, 32, 2, 65, 36, 106, 65, 172, 188, 193, 0, 32, 2, 65, 40, 106, 16, 31, 26, 32, 2, 65, 16, 106, 34, 4, 32, 2, 40, 2, 32, 54, 2, 0, 32, 2, 32, 2, 41, 3, 24, 55, 3, 8, 2, 64, 32, 1, 40, 2, 4, 34, 5, 69, 13, 0, 32, 1, 65, 8, 106, 40, 2, 0, 34, 6, 69, 13, 0, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 32, 2, 41, 3, 8, 55, 2, 0, 32, 3, 65, 8, 106, 32, 4, 40, 2, 0, 54, 2, 0, 32, 3, 40, 2, 0, 33, 3, 11, 32, 1, 65, 1, 54, 2, 4, 32, 1, 65, 12, 106, 40, 2, 0, 33, 4, 32, 1, 65, 8, 106, 34, 1, 40, 2, 0, 33, 5, 32, 1, 66, 0, 55, 2, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 1, 32, 4, 54, 2, 8, 32, 1, 32, 5, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 0, 65, 188, 192, 193, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 2, 65, 64, 107, 36, 0, 11, 183, 2, 2, 2, 127, 1, 126, 2, 64, 2, 64, 32, 1, 16, 58, 34, 4, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 1, 40, 2, 24, 33, 2, 32, 1, 65, 0, 54, 2, 24, 32, 2, 69, 13, 2, 32, 1, 65, 28, 106, 41, 2, 0, 33, 4, 32, 0, 32, 2, 54, 2, 4, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 8, 106, 32, 4, 55, 2, 0, 32, 1, 40, 2, 16, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 1, 65, 40, 106, 40, 2, 0, 34, 0, 69, 13, 1, 32, 1, 40, 2, 36, 32, 0, 65, 1, 16, 156, 1, 15, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 4, 55, 2, 4, 2, 64, 32, 1, 40, 2, 24, 69, 13, 0, 32, 1, 16, 58, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 0, 40, 2, 0, 32, 0, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 0, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 0, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 0, 65, 12, 65, 4, 16, 156, 1, 11, 32, 1, 40, 2, 24, 34, 0, 69, 13, 0, 32, 1, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 0, 32, 2, 65, 1, 16, 156, 1, 11, 32, 1, 40, 2, 16, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 1, 65, 40, 106, 40, 2, 0, 34, 0, 69, 13, 0, 32, 1, 40, 2, 36, 32, 0, 65, 1, 16, 156, 1, 11, 15, 11, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 169, 2, 1, 3, 127, 35, 0, 65, 224, 0, 107, 34, 3, 36, 0, 32, 3, 16, 138, 1, 32, 3, 65, 216, 0, 106, 32, 3, 65, 32, 106, 40, 2, 0, 54, 2, 0, 32, 3, 65, 208, 0, 106, 32, 3, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 200, 0, 106, 34, 5, 32, 3, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 64, 107, 34, 4, 32, 3, 65, 8, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 0, 55, 3, 56, 32, 3, 65, 40, 106, 32, 3, 65, 56, 106, 32, 2, 16, 16, 32, 4, 32, 1, 65, 8, 106, 40, 2, 0, 54, 2, 0, 32, 3, 32, 1, 41, 2, 0, 55, 3, 56, 32, 0, 32, 2, 65, 0, 16, 126, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 1, 69, 4, 64, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 0, 32, 3, 41, 3, 56, 55, 2, 24, 32, 0, 32, 1, 54, 2, 36, 32, 0, 65, 40, 106, 66, 128, 128, 2, 55, 2, 0, 32, 0, 65, 32, 106, 32, 4, 40, 2, 0, 54, 2, 0, 32, 3, 65, 56, 106, 16, 124, 32, 0, 65, 0, 54, 2, 72, 32, 0, 65, 64, 107, 32, 5, 41, 3, 0, 55, 3, 0, 32, 0, 65, 56, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 0, 32, 3, 41, 3, 56, 55, 3, 48, 32, 0, 32, 3, 41, 3, 40, 55, 2, 76, 32, 0, 65, 212, 0, 106, 32, 3, 65, 48, 106, 40, 2, 0, 54, 2, 0, 32, 3, 65, 224, 0, 106, 36, 0, 11, 194, 2, 2, 3, 127, 2, 126, 35, 0, 65, 64, 106, 34, 3, 36, 0, 32, 0, 2, 127, 65, 1, 32, 0, 45, 0, 8, 13, 0, 26, 32, 0, 40, 2, 4, 33, 5, 32, 0, 40, 2, 0, 34, 4, 45, 0, 0, 65, 4, 113, 4, 64, 32, 5, 69, 4, 64, 65, 1, 32, 4, 40, 2, 24, 65, 237, 198, 193, 0, 65, 2, 32, 4, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 2, 26, 32, 0, 40, 2, 0, 33, 4, 11, 32, 3, 65, 1, 58, 0, 23, 32, 3, 65, 52, 106, 65, 164, 198, 193, 0, 54, 2, 0, 32, 3, 32, 4, 41, 2, 24, 55, 3, 8, 32, 3, 32, 3, 65, 23, 106, 54, 2, 16, 32, 4, 41, 2, 8, 33, 6, 32, 4, 41, 2, 16, 33, 7, 32, 3, 32, 4, 45, 0, 32, 58, 0, 56, 32, 3, 32, 7, 55, 3, 40, 32, 3, 32, 6, 55, 3, 32, 32, 3, 32, 4, 41, 2, 0, 55, 3, 24, 32, 3, 32, 3, 65, 8, 106, 54, 2, 48, 65, 1, 32, 1, 32, 3, 65, 24, 106, 32, 2, 40, 2, 12, 17, 0, 0, 13, 1, 26, 32, 3, 40, 2, 48, 65, 227, 198, 193, 0, 65, 2, 32, 3, 40, 2, 52, 40, 2, 12, 17, 1, 0, 12, 1, 11, 65, 1, 32, 4, 40, 2, 24, 65, 229, 198, 193, 0, 65, 239, 198, 193, 0, 32, 5, 27, 65, 2, 65, 1, 32, 5, 27, 32, 4, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 26, 32, 1, 32, 0, 40, 2, 0, 32, 2, 40, 2, 12, 17, 0, 0, 11, 58, 0, 8, 32, 0, 32, 0, 40, 2, 4, 65, 1, 106, 54, 2, 4, 32, 3, 65, 64, 107, 36, 0, 11, 249, 2, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 0, 65, 1, 107, 14, 17, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 1, 11, 32, 2, 32, 1, 65, 220, 192, 193, 0, 65, 13, 16, 127, 12, 17, 11, 32, 2, 32, 1, 65, 168, 194, 193, 0, 65, 8, 16, 127, 12, 16, 11, 32, 2, 32, 1, 65, 152, 194, 193, 0, 65, 16, 16, 127, 12, 15, 11, 32, 2, 32, 1, 65, 135, 194, 193, 0, 65, 17, 16, 127, 12, 14, 11, 32, 2, 32, 1, 65, 248, 193, 193, 0, 65, 15, 16, 127, 12, 13, 11, 32, 2, 32, 1, 65, 231, 193, 193, 0, 65, 17, 16, 127, 12, 12, 11, 32, 2, 32, 1, 65, 219, 193, 193, 0, 65, 12, 16, 127, 12, 11, 11, 32, 2, 32, 1, 65, 210, 193, 193, 0, 65, 9, 16, 127, 12, 10, 11, 32, 2, 32, 1, 65, 194, 193, 193, 0, 65, 16, 16, 127, 12, 9, 11, 32, 2, 32, 1, 65, 184, 193, 193, 0, 65, 10, 16, 127, 12, 8, 11, 32, 2, 32, 1, 65, 171, 193, 193, 0, 65, 13, 16, 127, 12, 7, 11, 32, 2, 32, 1, 65, 161, 193, 193, 0, 65, 10, 16, 127, 12, 6, 11, 32, 2, 32, 1, 65, 149, 193, 193, 0, 65, 12, 16, 127, 12, 5, 11, 32, 2, 32, 1, 65, 138, 193, 193, 0, 65, 11, 16, 127, 12, 4, 11, 32, 2, 32, 1, 65, 130, 193, 193, 0, 65, 8, 16, 127, 12, 3, 11, 32, 2, 32, 1, 65, 249, 192, 193, 0, 65, 9, 16, 127, 12, 2, 11, 32, 2, 32, 1, 65, 238, 192, 193, 0, 65, 11, 16, 127, 12, 1, 11, 32, 2, 32, 1, 65, 233, 192, 193, 0, 65, 5, 16, 127, 11, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 175, 2, 2, 5, 127, 2, 126, 35, 0, 65, 32, 107, 34, 6, 36, 0, 32, 1, 65, 8, 106, 34, 8, 41, 3, 0, 33, 11, 32, 4, 65, 8, 106, 34, 9, 40, 2, 0, 33, 7, 32, 4, 65, 4, 106, 40, 2, 0, 33, 10, 32, 4, 40, 2, 0, 33, 4, 32, 6, 65, 8, 106, 32, 5, 65, 255, 1, 113, 16, 119, 32, 6, 40, 2, 12, 33, 5, 2, 64, 32, 6, 40, 2, 8, 69, 4, 64, 32, 6, 65, 16, 106, 32, 1, 40, 2, 16, 32, 2, 32, 3, 32, 4, 32, 7, 106, 32, 10, 32, 7, 107, 32, 5, 16, 22, 32, 1, 32, 1, 41, 3, 0, 32, 6, 53, 2, 16, 124, 55, 3, 0, 32, 8, 32, 8, 41, 3, 0, 32, 6, 53, 2, 20, 124, 34, 12, 55, 3, 0, 32, 6, 65, 28, 106, 40, 2, 0, 33, 2, 32, 6, 40, 2, 24, 33, 1, 32, 9, 32, 7, 32, 12, 32, 11, 125, 167, 106, 54, 2, 0, 65, 1, 65, 3, 32, 2, 65, 123, 70, 27, 65, 128, 132, 12, 32, 2, 65, 3, 116, 65, 248, 255, 255, 7, 113, 118, 32, 1, 65, 1, 70, 27, 34, 1, 65, 255, 1, 113, 65, 3, 70, 13, 1, 32, 0, 65, 0, 58, 0, 0, 32, 0, 32, 1, 58, 0, 1, 32, 6, 65, 32, 106, 36, 0, 15, 11, 32, 6, 32, 5, 54, 2, 16, 65, 244, 143, 192, 0, 65, 43, 32, 6, 65, 16, 106, 65, 160, 144, 192, 0, 65, 156, 145, 192, 0, 16, 93, 0, 11, 65, 252, 138, 192, 0, 65, 43, 32, 6, 65, 16, 106, 65, 168, 139, 192, 0, 65, 180, 140, 192, 0, 16, 93, 0, 11, 138, 2, 1, 4, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 2, 64, 32, 0, 65, 4, 106, 40, 2, 0, 34, 5, 32, 0, 65, 8, 106, 40, 2, 0, 34, 4, 107, 32, 2, 32, 1, 107, 34, 6, 79, 4, 64, 32, 0, 40, 2, 0, 33, 2, 12, 1, 11, 2, 64, 32, 4, 32, 6, 106, 34, 2, 32, 4, 73, 13, 0, 32, 5, 65, 1, 116, 34, 4, 32, 2, 32, 4, 32, 2, 75, 27, 34, 2, 65, 8, 32, 2, 65, 8, 75, 27, 33, 2, 2, 64, 32, 5, 69, 4, 64, 32, 3, 65, 0, 54, 2, 16, 12, 1, 11, 32, 3, 65, 24, 106, 65, 1, 54, 2, 0, 32, 3, 32, 5, 54, 2, 20, 32, 3, 32, 0, 40, 2, 0, 54, 2, 16, 11, 32, 3, 32, 2, 32, 3, 65, 16, 106, 16, 80, 32, 3, 65, 8, 106, 40, 2, 0, 33, 4, 32, 3, 40, 2, 4, 33, 2, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 0, 32, 2, 54, 2, 0, 32, 0, 65, 4, 106, 32, 4, 54, 2, 0, 32, 0, 65, 8, 106, 40, 2, 0, 33, 4, 12, 2, 11, 32, 4, 69, 13, 0, 32, 2, 32, 4, 16, 165, 1, 0, 11, 16, 158, 1, 0, 11, 32, 2, 32, 4, 106, 32, 1, 32, 6, 16, 121, 26, 32, 0, 65, 8, 106, 34, 0, 32, 0, 40, 2, 0, 32, 6, 106, 54, 2, 0, 32, 3, 65, 32, 106, 36, 0, 11, 161, 2, 1, 4, 127, 32, 0, 65, 0, 54, 2, 8, 32, 0, 65, 0, 54, 2, 0, 32, 0, 32, 2, 40, 2, 28, 54, 2, 4, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 40, 2, 16, 65, 1, 70, 4, 64, 32, 2, 32, 2, 40, 2, 20, 34, 3, 32, 1, 65, 24, 106, 40, 2, 0, 34, 5, 32, 2, 40, 2, 32, 34, 6, 107, 34, 4, 32, 4, 32, 3, 75, 27, 34, 4, 4, 127, 32, 4, 32, 6, 106, 34, 3, 32, 4, 73, 13, 2, 32, 5, 32, 3, 73, 13, 3, 32, 2, 40, 2, 16, 34, 3, 32, 4, 106, 34, 5, 32, 3, 73, 13, 4, 32, 5, 65, 205, 153, 5, 79, 13, 5, 32, 1, 65, 20, 106, 40, 2, 0, 32, 6, 106, 32, 2, 40, 2, 48, 32, 3, 106, 32, 4, 16, 121, 26, 32, 2, 40, 2, 20, 33, 3, 32, 2, 40, 2, 32, 5, 32, 6, 11, 32, 4, 106, 34, 1, 54, 2, 32, 32, 2, 32, 3, 32, 4, 107, 54, 2, 20, 32, 0, 32, 1, 54, 2, 8, 32, 2, 32, 2, 40, 2, 16, 32, 4, 106, 54, 2, 16, 11, 2, 64, 32, 2, 45, 0, 55, 69, 13, 0, 32, 2, 40, 2, 20, 13, 0, 32, 0, 65, 1, 54, 2, 0, 11, 15, 11, 32, 6, 32, 3, 65, 184, 175, 192, 0, 16, 100, 0, 11, 32, 3, 32, 5, 65, 184, 175, 192, 0, 16, 99, 0, 11, 32, 3, 32, 5, 65, 200, 175, 192, 0, 16, 100, 0, 11, 32, 5, 65, 204, 153, 5, 65, 200, 175, 192, 0, 16, 99, 0, 11, 252, 1, 1, 2, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 0, 40, 2, 0, 32, 2, 65, 0, 54, 2, 12, 2, 127, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 1, 65, 128, 16, 73, 13, 1, 32, 2, 65, 12, 106, 33, 0, 32, 1, 65, 128, 128, 4, 79, 13, 2, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 3, 12, 3, 11, 32, 2, 32, 1, 58, 0, 12, 32, 2, 65, 12, 106, 33, 0, 65, 1, 12, 2, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 12, 32, 2, 65, 12, 106, 33, 0, 65, 2, 12, 1, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 15, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 4, 11, 33, 1, 32, 0, 32, 1, 16, 39, 32, 2, 65, 16, 106, 36, 0, 11, 249, 1, 1, 2, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 65, 0, 54, 2, 12, 2, 127, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 1, 65, 128, 16, 73, 13, 1, 32, 2, 65, 12, 106, 33, 3, 32, 1, 65, 128, 128, 4, 79, 13, 2, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 3, 12, 3, 11, 32, 2, 32, 1, 58, 0, 12, 32, 2, 65, 12, 106, 33, 3, 65, 1, 12, 2, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 12, 32, 2, 65, 12, 106, 33, 3, 65, 2, 12, 1, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 15, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 4, 11, 33, 1, 32, 0, 32, 3, 32, 1, 16, 39, 32, 2, 65, 16, 106, 36, 0, 11, 132, 2, 1, 5, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 65, 0, 58, 0, 15, 32, 2, 65, 16, 106, 32, 1, 40, 2, 0, 32, 2, 65, 15, 106, 65, 1, 16, 89, 2, 64, 2, 64, 32, 2, 40, 2, 16, 65, 1, 70, 4, 64, 32, 2, 65, 16, 106, 65, 4, 114, 33, 4, 3, 64, 32, 4, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 13, 2, 2, 64, 32, 2, 40, 2, 16, 69, 13, 0, 32, 2, 45, 0, 20, 65, 2, 73, 13, 0, 32, 2, 40, 2, 24, 34, 3, 40, 2, 0, 32, 3, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 3, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 3, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 2, 40, 2, 24, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 65, 16, 106, 32, 1, 40, 2, 0, 32, 2, 65, 15, 106, 65, 1, 16, 89, 32, 2, 40, 2, 16, 65, 1, 70, 13, 0, 11, 11, 32, 2, 40, 2, 20, 69, 4, 64, 32, 0, 65, 2, 58, 0, 0, 12, 2, 11, 32, 0, 32, 2, 45, 0, 15, 58, 0, 1, 32, 0, 65, 0, 58, 0, 0, 12, 1, 11, 32, 0, 65, 1, 58, 0, 0, 32, 0, 65, 4, 106, 32, 2, 41, 2, 20, 55, 0, 0, 11, 32, 2, 65, 32, 106, 36, 0, 11, 241, 1, 1, 1, 127, 32, 2, 32, 3, 107, 32, 5, 113, 33, 3, 32, 4, 65, 3, 70, 4, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 32, 1, 73, 4, 64, 32, 2, 32, 1, 79, 13, 1, 32, 0, 32, 2, 106, 32, 0, 32, 3, 106, 45, 0, 0, 58, 0, 0, 32, 3, 65, 1, 106, 32, 5, 113, 34, 4, 32, 1, 79, 13, 2, 32, 2, 65, 1, 106, 34, 6, 32, 1, 79, 13, 3, 32, 0, 32, 6, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 3, 65, 2, 106, 32, 5, 113, 34, 3, 32, 1, 79, 13, 4, 32, 2, 65, 2, 106, 34, 2, 32, 1, 79, 13, 5, 32, 0, 32, 2, 106, 32, 0, 32, 3, 106, 45, 0, 0, 58, 0, 0, 15, 11, 32, 3, 32, 1, 65, 216, 180, 192, 0, 16, 98, 0, 11, 32, 2, 32, 1, 65, 232, 180, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 248, 180, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 136, 181, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 152, 181, 192, 0, 16, 98, 0, 11, 32, 2, 32, 1, 65, 168, 181, 192, 0, 16, 98, 0, 11, 32, 0, 32, 1, 32, 3, 32, 2, 32, 4, 32, 5, 16, 25, 11, 237, 1, 1, 3, 127, 2, 64, 2, 64, 2, 64, 32, 1, 45, 0, 16, 69, 4, 64, 32, 1, 40, 2, 0, 33, 5, 2, 64, 32, 1, 40, 2, 4, 34, 6, 32, 3, 32, 6, 32, 3, 73, 27, 34, 4, 65, 1, 71, 4, 64, 32, 2, 32, 5, 32, 4, 16, 121, 26, 12, 1, 11, 32, 3, 69, 13, 3, 32, 2, 32, 5, 45, 0, 0, 58, 0, 0, 11, 32, 1, 32, 6, 32, 4, 107, 54, 2, 4, 32, 1, 32, 4, 32, 5, 106, 54, 2, 0, 32, 3, 69, 32, 4, 114, 13, 1, 32, 1, 65, 1, 58, 0, 16, 11, 32, 1, 40, 2, 8, 33, 5, 2, 64, 32, 1, 65, 12, 106, 40, 2, 0, 34, 6, 32, 3, 32, 6, 32, 3, 73, 27, 34, 4, 65, 1, 71, 4, 64, 32, 2, 32, 5, 32, 4, 16, 121, 26, 12, 1, 11, 32, 3, 69, 13, 3, 32, 2, 32, 5, 45, 0, 0, 58, 0, 0, 11, 32, 1, 32, 6, 32, 4, 107, 54, 2, 12, 32, 1, 32, 4, 32, 5, 106, 54, 2, 8, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 32, 4, 54, 2, 4, 15, 11, 65, 0, 65, 0, 65, 148, 137, 192, 0, 16, 98, 0, 11, 65, 0, 65, 0, 65, 148, 137, 192, 0, 16, 98, 0, 11, 227, 1, 1, 4, 127, 35, 0, 65, 64, 106, 34, 2, 36, 0, 32, 1, 65, 4, 106, 33, 4, 32, 1, 40, 2, 4, 69, 4, 64, 32, 1, 40, 2, 0, 33, 3, 32, 2, 65, 0, 54, 2, 32, 32, 2, 66, 1, 55, 3, 24, 32, 2, 32, 2, 65, 24, 106, 54, 2, 36, 32, 2, 65, 56, 106, 32, 3, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 48, 106, 32, 3, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 3, 41, 2, 0, 55, 3, 40, 32, 2, 65, 36, 106, 65, 172, 188, 193, 0, 32, 2, 65, 40, 106, 16, 31, 26, 32, 2, 65, 16, 106, 34, 3, 32, 2, 40, 2, 32, 54, 2, 0, 32, 2, 32, 2, 41, 3, 24, 55, 3, 8, 2, 64, 32, 1, 40, 2, 4, 34, 5, 69, 13, 0, 32, 1, 65, 8, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 5, 32, 1, 65, 1, 16, 156, 1, 11, 32, 4, 32, 2, 41, 3, 8, 55, 2, 0, 32, 4, 65, 8, 106, 32, 3, 40, 2, 0, 54, 2, 0, 11, 32, 0, 65, 188, 192, 193, 0, 54, 2, 4, 32, 0, 32, 4, 54, 2, 0, 32, 2, 65, 64, 107, 36, 0, 11, 241, 1, 1, 1, 127, 35, 0, 65, 16, 107, 34, 3, 36, 0, 32, 3, 32, 1, 40, 2, 0, 34, 1, 40, 2, 0, 54, 2, 12, 2, 127, 2, 64, 32, 2, 65, 2, 106, 34, 2, 32, 2, 108, 34, 2, 65, 128, 16, 32, 2, 65, 128, 16, 75, 27, 34, 4, 65, 4, 32, 3, 65, 12, 106, 65, 188, 138, 192, 0, 65, 188, 138, 192, 0, 16, 32, 34, 2, 4, 64, 32, 1, 32, 3, 40, 2, 12, 54, 2, 0, 12, 1, 11, 32, 3, 65, 188, 138, 192, 0, 32, 4, 65, 4, 16, 92, 2, 64, 32, 3, 40, 2, 0, 4, 64, 32, 1, 32, 3, 40, 2, 12, 54, 2, 0, 12, 1, 11, 32, 3, 40, 2, 4, 34, 2, 32, 3, 40, 2, 12, 54, 2, 8, 32, 3, 32, 2, 54, 2, 12, 32, 4, 65, 4, 32, 3, 65, 12, 106, 65, 188, 138, 192, 0, 65, 188, 138, 192, 0, 16, 32, 33, 2, 32, 1, 32, 3, 40, 2, 12, 54, 2, 0, 32, 2, 13, 1, 11, 65, 1, 12, 1, 11, 32, 2, 66, 0, 55, 2, 4, 32, 2, 32, 2, 32, 4, 65, 2, 116, 106, 65, 2, 114, 54, 2, 0, 65, 0, 11, 33, 1, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 16, 106, 36, 0, 11, 202, 1, 1, 2, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 2, 64, 2, 64, 32, 0, 65, 4, 106, 40, 2, 0, 34, 4, 32, 1, 107, 32, 2, 73, 4, 64, 32, 1, 32, 2, 106, 34, 2, 32, 1, 73, 13, 2, 32, 4, 65, 1, 116, 34, 1, 32, 2, 32, 1, 32, 2, 75, 27, 34, 1, 65, 8, 32, 1, 65, 8, 75, 27, 33, 1, 2, 64, 32, 4, 69, 4, 64, 32, 3, 65, 0, 54, 2, 16, 12, 1, 11, 32, 3, 65, 24, 106, 65, 1, 54, 2, 0, 32, 3, 32, 4, 54, 2, 20, 32, 3, 32, 0, 40, 2, 0, 54, 2, 16, 11, 32, 3, 32, 1, 32, 3, 65, 16, 106, 16, 81, 32, 3, 65, 8, 106, 40, 2, 0, 33, 1, 32, 3, 40, 2, 4, 33, 2, 32, 3, 40, 2, 0, 65, 1, 70, 13, 1, 32, 0, 32, 2, 54, 2, 0, 32, 0, 65, 4, 106, 32, 1, 54, 2, 0, 11, 32, 3, 65, 32, 106, 36, 0, 15, 11, 32, 1, 69, 13, 0, 32, 2, 32, 1, 16, 165, 1, 0, 11, 16, 158, 1, 0, 11, 149, 2, 1, 2, 127, 35, 0, 65, 32, 107, 34, 4, 36, 0, 65, 1, 33, 5, 65, 188, 231, 193, 0, 65, 188, 231, 193, 0, 40, 2, 0, 65, 1, 106, 54, 2, 0, 2, 64, 2, 64, 65, 192, 231, 193, 0, 40, 2, 0, 65, 1, 71, 4, 64, 65, 192, 231, 193, 0, 66, 129, 128, 128, 128, 16, 55, 3, 0, 12, 1, 11, 65, 196, 231, 193, 0, 65, 196, 231, 193, 0, 40, 2, 0, 65, 1, 106, 34, 5, 54, 2, 0, 32, 5, 65, 3, 79, 13, 1, 11, 32, 4, 32, 3, 54, 2, 28, 32, 4, 32, 2, 54, 2, 24, 32, 4, 65, 196, 188, 193, 0, 54, 2, 20, 32, 4, 65, 196, 188, 193, 0, 54, 2, 16, 65, 176, 231, 193, 0, 40, 2, 0, 34, 2, 65, 127, 76, 13, 0, 65, 176, 231, 193, 0, 32, 2, 65, 1, 106, 34, 2, 54, 2, 0, 65, 176, 231, 193, 0, 65, 184, 231, 193, 0, 40, 2, 0, 34, 3, 4, 127, 65, 180, 231, 193, 0, 40, 2, 0, 32, 4, 65, 8, 106, 32, 0, 32, 1, 40, 2, 16, 17, 4, 0, 32, 4, 32, 4, 41, 3, 8, 55, 3, 16, 32, 4, 65, 16, 106, 32, 3, 40, 2, 12, 17, 4, 0, 65, 176, 231, 193, 0, 40, 2, 0, 5, 32, 2, 11, 65, 127, 106, 54, 2, 0, 32, 5, 65, 2, 79, 13, 0, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 54, 2, 12, 32, 2, 32, 0, 54, 2, 8, 0, 11, 0, 11, 223, 1, 2, 3, 127, 1, 126, 2, 64, 32, 0, 40, 2, 24, 69, 13, 0, 32, 0, 16, 57, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 40, 2, 24, 34, 1, 69, 13, 0, 32, 0, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 40, 2, 16, 34, 1, 65, 192, 128, 4, 106, 40, 2, 0, 65, 204, 153, 5, 65, 1, 16, 156, 1, 32, 1, 40, 2, 200, 128, 4, 65, 224, 33, 65, 2, 16, 156, 1, 32, 1, 65, 212, 128, 4, 106, 40, 2, 0, 65, 130, 130, 10, 65, 2, 16, 156, 1, 32, 0, 40, 2, 16, 65, 232, 128, 4, 65, 4, 16, 156, 1, 32, 0, 65, 40, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 36, 32, 1, 65, 1, 16, 156, 1, 11, 11, 208, 1, 1, 6, 127, 2, 64, 2, 64, 32, 0, 65, 200, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 40, 2, 24, 4, 64, 32, 0, 65, 24, 106, 33, 5, 32, 0, 65, 32, 106, 33, 3, 32, 0, 65, 200, 0, 106, 33, 4, 3, 64, 32, 0, 40, 2, 64, 33, 2, 32, 5, 32, 3, 40, 2, 0, 32, 1, 16, 75, 32, 0, 40, 2, 24, 32, 3, 40, 2, 0, 106, 32, 2, 32, 1, 16, 121, 26, 32, 3, 32, 3, 40, 2, 0, 32, 1, 106, 54, 2, 0, 32, 0, 32, 2, 32, 1, 16, 141, 1, 32, 4, 40, 2, 0, 34, 2, 32, 1, 73, 13, 3, 32, 4, 65, 0, 54, 2, 0, 32, 2, 32, 1, 107, 34, 2, 69, 13, 2, 32, 0, 40, 2, 64, 34, 6, 32, 1, 32, 6, 106, 32, 2, 16, 96, 32, 4, 32, 2, 54, 2, 0, 32, 2, 33, 1, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 66, 3, 15, 11, 32, 1, 32, 2, 65, 208, 133, 192, 0, 16, 99, 0, 11, 205, 1, 2, 4, 127, 1, 126, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 1, 65, 8, 106, 65, 53, 16, 103, 32, 1, 40, 2, 12, 33, 3, 32, 1, 40, 2, 8, 34, 0, 65, 172, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 45, 106, 65, 217, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 40, 106, 65, 212, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 32, 106, 65, 204, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 24, 106, 65, 196, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 16, 106, 65, 188, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 180, 145, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 2, 65, 53, 54, 2, 8, 32, 2, 32, 0, 54, 2, 0, 32, 2, 32, 3, 54, 2, 4, 65, 11, 32, 2, 65, 248, 145, 192, 0, 16, 107, 32, 1, 65, 16, 106, 36, 0, 11, 144, 1, 1, 3, 127, 65, 1, 33, 3, 65, 1, 33, 4, 2, 64, 32, 1, 65, 0, 72, 4, 64, 65, 0, 33, 3, 12, 1, 11, 2, 127, 32, 2, 40, 2, 0, 34, 5, 69, 4, 64, 65, 1, 32, 1, 69, 13, 1, 26, 32, 1, 65, 1, 16, 149, 1, 12, 1, 11, 32, 2, 40, 2, 4, 34, 2, 69, 4, 64, 65, 1, 32, 1, 69, 13, 1, 26, 32, 1, 65, 1, 16, 149, 1, 12, 1, 11, 32, 5, 32, 2, 32, 1, 16, 143, 1, 11, 34, 2, 69, 4, 64, 32, 0, 32, 1, 54, 2, 4, 12, 1, 11, 32, 0, 32, 2, 54, 2, 4, 65, 0, 33, 4, 32, 1, 33, 3, 11, 32, 0, 32, 4, 54, 2, 0, 32, 0, 65, 8, 106, 32, 3, 54, 2, 0, 11, 145, 1, 1, 2, 127, 65, 1, 33, 3, 2, 64, 32, 1, 65, 0, 72, 4, 64, 65, 0, 33, 1, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 0, 34, 4, 69, 4, 64, 32, 1, 69, 13, 1, 12, 3, 11, 32, 2, 40, 2, 4, 34, 2, 13, 1, 32, 1, 13, 2, 11, 65, 1, 33, 2, 12, 3, 11, 32, 4, 32, 2, 32, 1, 16, 143, 1, 34, 2, 69, 13, 1, 12, 2, 11, 32, 1, 65, 1, 16, 149, 1, 34, 2, 13, 1, 11, 32, 0, 32, 1, 54, 2, 4, 65, 1, 33, 1, 12, 1, 11, 32, 0, 32, 2, 54, 2, 4, 65, 0, 33, 3, 11, 32, 0, 32, 3, 54, 2, 0, 32, 0, 65, 8, 106, 32, 1, 54, 2, 0, 11, 154, 1, 2, 3, 127, 2, 126, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 0, 65, 64, 107, 33, 3, 32, 0, 65, 40, 106, 33, 2, 2, 126, 2, 64, 2, 64, 3, 64, 32, 0, 16, 78, 34, 4, 167, 65, 255, 1, 113, 65, 3, 71, 13, 2, 32, 2, 16, 163, 1, 33, 4, 32, 1, 32, 2, 65, 168, 132, 192, 0, 65, 0, 32, 3, 65, 4, 16, 110, 32, 1, 45, 0, 0, 65, 1, 70, 13, 1, 32, 2, 16, 163, 1, 32, 4, 82, 13, 0, 11, 66, 3, 33, 4, 66, 0, 12, 2, 11, 32, 1, 40, 2, 4, 32, 1, 40, 2, 8, 16, 128, 1, 34, 4, 66, 128, 126, 131, 12, 1, 11, 32, 4, 66, 128, 126, 131, 11, 33, 5, 32, 1, 65, 16, 106, 36, 0, 32, 4, 66, 255, 1, 131, 32, 5, 132, 11, 141, 1, 1, 3, 127, 35, 0, 65, 128, 1, 107, 34, 3, 36, 0, 32, 0, 40, 2, 0, 33, 2, 65, 0, 33, 0, 3, 64, 32, 0, 32, 3, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 4, 65, 48, 114, 32, 4, 65, 215, 0, 106, 32, 4, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 4, 64, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 3, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 32, 3, 65, 128, 1, 106, 36, 0, 11, 140, 1, 1, 3, 127, 35, 0, 65, 128, 1, 107, 34, 3, 36, 0, 32, 0, 40, 2, 0, 33, 2, 65, 0, 33, 0, 3, 64, 32, 0, 32, 3, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 4, 65, 48, 114, 32, 4, 65, 55, 106, 32, 4, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 4, 64, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 3, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 32, 3, 65, 128, 1, 106, 36, 0, 11, 135, 1, 1, 1, 127, 32, 0, 32, 2, 65, 255, 1, 113, 34, 2, 65, 10, 32, 2, 65, 10, 73, 27, 65, 2, 116, 65, 232, 175, 192, 0, 106, 40, 2, 0, 32, 2, 65, 4, 73, 65, 14, 116, 114, 34, 3, 32, 3, 65, 128, 32, 114, 32, 1, 27, 34, 1, 32, 1, 65, 128, 128, 32, 114, 32, 2, 27, 34, 1, 54, 2, 144, 128, 4, 32, 0, 65, 196, 128, 4, 106, 32, 1, 65, 14, 118, 65, 1, 113, 58, 0, 0, 32, 0, 32, 1, 65, 255, 31, 113, 34, 0, 65, 2, 118, 65, 2, 106, 65, 3, 110, 65, 1, 106, 173, 66, 32, 134, 32, 0, 65, 2, 106, 65, 3, 110, 65, 1, 106, 173, 132, 55, 2, 204, 128, 4, 11, 150, 1, 1, 2, 127, 32, 0, 45, 0, 8, 33, 1, 32, 0, 40, 2, 4, 34, 2, 4, 64, 32, 1, 65, 255, 1, 113, 33, 1, 32, 0, 2, 127, 65, 1, 32, 1, 13, 0, 26, 2, 64, 32, 2, 65, 1, 71, 13, 0, 32, 0, 45, 0, 9, 69, 13, 0, 32, 0, 40, 2, 0, 34, 2, 45, 0, 0, 65, 4, 113, 13, 0, 65, 1, 32, 2, 40, 2, 24, 65, 240, 198, 193, 0, 65, 1, 32, 2, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 1, 26, 11, 32, 0, 40, 2, 0, 34, 1, 40, 2, 24, 65, 241, 198, 193, 0, 65, 1, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 34, 1, 58, 0, 8, 11, 32, 1, 65, 255, 1, 113, 65, 0, 71, 11, 168, 1, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 0, 65, 6, 106, 14, 6, 6, 5, 4, 3, 2, 1, 0, 11, 32, 2, 32, 1, 65, 236, 186, 192, 0, 65, 5, 16, 127, 12, 6, 11, 32, 2, 32, 1, 65, 136, 187, 192, 0, 65, 5, 16, 127, 12, 5, 11, 32, 2, 32, 1, 65, 130, 187, 192, 0, 65, 6, 16, 127, 12, 4, 11, 32, 2, 32, 1, 65, 254, 186, 192, 0, 65, 4, 16, 127, 12, 3, 11, 32, 2, 32, 1, 65, 251, 186, 192, 0, 65, 3, 16, 127, 12, 2, 11, 32, 2, 32, 1, 65, 248, 186, 192, 0, 65, 3, 16, 127, 12, 1, 11, 32, 2, 32, 1, 65, 241, 186, 192, 0, 65, 7, 16, 127, 11, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 162, 1, 1, 3, 127, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 0, 40, 2, 0, 34, 2, 65, 20, 106, 40, 2, 0, 33, 3, 2, 64, 2, 127, 2, 64, 2, 64, 32, 2, 40, 2, 4, 14, 2, 0, 1, 3, 11, 32, 3, 13, 2, 65, 0, 33, 2, 65, 196, 188, 193, 0, 12, 1, 11, 32, 3, 13, 1, 32, 2, 40, 2, 0, 34, 3, 40, 2, 4, 33, 2, 32, 3, 40, 2, 0, 11, 33, 3, 32, 1, 32, 2, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 1, 65, 168, 192, 193, 0, 32, 0, 40, 2, 4, 40, 2, 8, 32, 0, 40, 2, 8, 16, 76, 0, 11, 32, 1, 65, 0, 54, 2, 4, 32, 1, 32, 2, 54, 2, 0, 32, 1, 65, 148, 192, 193, 0, 32, 0, 40, 2, 4, 40, 2, 8, 32, 0, 40, 2, 8, 16, 76, 0, 11, 137, 1, 2, 3, 127, 1, 126, 35, 0, 65, 16, 107, 34, 5, 36, 0, 32, 5, 32, 1, 40, 2, 24, 34, 6, 32, 2, 32, 3, 16, 72, 65, 1, 33, 4, 32, 5, 41, 2, 4, 33, 7, 2, 64, 2, 64, 32, 5, 40, 2, 0, 65, 1, 71, 4, 64, 32, 6, 32, 7, 167, 34, 4, 32, 6, 40, 2, 20, 106, 54, 2, 20, 32, 4, 32, 3, 75, 13, 2, 32, 1, 32, 2, 32, 4, 16, 141, 1, 32, 0, 32, 4, 54, 2, 4, 65, 0, 33, 4, 12, 1, 11, 32, 0, 32, 7, 55, 2, 4, 11, 32, 0, 32, 4, 54, 2, 0, 32, 5, 65, 16, 106, 36, 0, 15, 11, 32, 4, 32, 3, 65, 252, 137, 192, 0, 16, 99, 0, 11, 141, 1, 2, 4, 127, 1, 126, 35, 0, 65, 16, 107, 34, 0, 36, 0, 32, 0, 65, 8, 106, 65, 19, 16, 103, 32, 0, 40, 2, 12, 33, 3, 32, 0, 40, 2, 8, 34, 2, 65, 225, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 2, 65, 15, 106, 65, 240, 145, 192, 0, 40, 0, 0, 54, 0, 0, 32, 2, 65, 8, 106, 65, 233, 145, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 1, 65, 19, 54, 2, 8, 32, 1, 32, 2, 54, 2, 0, 32, 1, 32, 3, 54, 2, 4, 65, 11, 32, 1, 65, 248, 145, 192, 0, 16, 107, 32, 0, 65, 16, 106, 36, 0, 11, 136, 1, 1, 1, 127, 65, 204, 153, 5, 65, 1, 16, 149, 1, 34, 1, 69, 4, 64, 65, 204, 153, 5, 65, 1, 16, 165, 1, 0, 11, 32, 1, 65, 0, 65, 204, 153, 5, 16, 131, 1, 33, 1, 32, 0, 65, 0, 58, 0, 55, 32, 0, 65, 0, 59, 0, 53, 32, 0, 65, 144, 32, 54, 2, 0, 32, 0, 66, 0, 55, 2, 4, 32, 0, 65, 12, 106, 66, 0, 55, 2, 0, 32, 0, 66, 0, 55, 2, 28, 32, 0, 65, 20, 106, 66, 128, 128, 128, 128, 16, 55, 2, 0, 32, 0, 65, 36, 106, 66, 0, 55, 2, 0, 32, 0, 65, 44, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 54, 2, 48, 32, 0, 65, 0, 58, 0, 52, 11, 113, 0, 2, 127, 32, 2, 65, 2, 116, 34, 1, 32, 3, 65, 3, 116, 65, 128, 128, 1, 106, 34, 2, 32, 1, 32, 2, 75, 27, 65, 135, 128, 4, 106, 34, 1, 65, 16, 118, 64, 0, 34, 2, 65, 127, 70, 4, 64, 65, 0, 33, 3, 65, 1, 12, 1, 11, 32, 2, 65, 16, 116, 34, 3, 66, 0, 55, 3, 0, 32, 3, 65, 0, 54, 2, 8, 32, 3, 32, 3, 32, 1, 65, 128, 128, 124, 113, 106, 65, 2, 114, 54, 2, 0, 65, 0, 11, 33, 2, 32, 0, 32, 3, 54, 2, 4, 32, 0, 32, 2, 54, 2, 0, 11, 127, 1, 1, 127, 35, 0, 65, 64, 106, 34, 5, 36, 0, 32, 5, 32, 1, 54, 2, 12, 32, 5, 32, 0, 54, 2, 8, 32, 5, 32, 3, 54, 2, 20, 32, 5, 32, 2, 54, 2, 16, 32, 5, 65, 44, 106, 65, 2, 54, 2, 0, 32, 5, 65, 60, 106, 65, 194, 0, 54, 2, 0, 32, 5, 66, 2, 55, 2, 28, 32, 5, 65, 160, 197, 193, 0, 54, 2, 24, 32, 5, 65, 62, 54, 2, 52, 32, 5, 32, 5, 65, 48, 106, 54, 2, 40, 32, 5, 32, 5, 65, 16, 106, 54, 2, 56, 32, 5, 32, 5, 65, 8, 106, 54, 2, 48, 32, 5, 65, 24, 106, 32, 4, 16, 130, 1, 0, 11, 113, 1, 3, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 2, 64, 32, 0, 32, 1, 16, 56, 13, 0, 32, 1, 65, 28, 106, 40, 2, 0, 33, 3, 32, 1, 40, 2, 24, 32, 2, 65, 28, 106, 65, 0, 54, 2, 0, 32, 2, 65, 228, 196, 193, 0, 54, 2, 24, 32, 2, 66, 1, 55, 2, 12, 32, 2, 65, 232, 196, 193, 0, 54, 2, 8, 32, 3, 32, 2, 65, 8, 106, 16, 31, 13, 0, 32, 0, 65, 4, 106, 32, 1, 16, 56, 32, 2, 65, 32, 106, 36, 0, 15, 11, 32, 2, 65, 32, 106, 36, 0, 65, 1, 11, 119, 1, 2, 127, 32, 0, 45, 0, 4, 33, 1, 32, 0, 45, 0, 5, 4, 64, 32, 1, 65, 255, 1, 113, 33, 2, 32, 0, 2, 127, 65, 1, 32, 2, 13, 0, 26, 32, 0, 40, 2, 0, 34, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 33, 2, 32, 1, 40, 2, 24, 33, 0, 32, 1, 45, 0, 0, 65, 4, 113, 4, 64, 32, 0, 65, 234, 198, 193, 0, 65, 1, 32, 2, 17, 1, 0, 12, 1, 11, 32, 0, 65, 235, 198, 193, 0, 65, 2, 32, 2, 17, 1, 0, 11, 34, 1, 58, 0, 4, 11, 32, 1, 65, 255, 1, 113, 65, 0, 71, 11, 101, 0, 2, 64, 32, 0, 32, 1, 107, 32, 2, 73, 4, 64, 32, 1, 65, 127, 106, 33, 1, 32, 0, 65, 127, 106, 33, 0, 3, 64, 32, 0, 32, 2, 106, 32, 1, 32, 2, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 12, 1, 11, 32, 2, 69, 13, 0, 3, 64, 32, 0, 32, 1, 45, 0, 0, 58, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 0, 65, 1, 106, 33, 0, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 11, 77, 1, 1, 127, 65, 130, 130, 10, 65, 2, 16, 149, 1, 34, 1, 69, 4, 64, 65, 130, 130, 10, 65, 2, 16, 165, 1, 0, 11, 32, 1, 65, 0, 65, 130, 130, 10, 16, 131, 1, 33, 1, 32, 0, 66, 0, 55, 2, 12, 32, 0, 32, 1, 54, 2, 8, 32, 0, 65, 20, 106, 66, 0, 55, 2, 0, 32, 0, 66, 135, 128, 128, 128, 48, 55, 2, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 244, 197, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 54, 2, 40, 32, 3, 32, 3, 65, 4, 106, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 196, 202, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 65, 4, 106, 54, 2, 40, 32, 3, 32, 3, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 248, 202, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 65, 4, 106, 54, 2, 40, 32, 3, 32, 3, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 164, 202, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 65, 4, 106, 54, 2, 40, 32, 3, 32, 3, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 86, 1, 2, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 0, 65, 28, 106, 40, 2, 0, 33, 3, 32, 0, 40, 2, 24, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 3, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 70, 1, 1, 127, 2, 64, 32, 1, 65, 127, 74, 4, 64, 2, 64, 32, 1, 69, 4, 64, 65, 1, 33, 2, 12, 1, 11, 32, 1, 65, 1, 16, 149, 1, 34, 2, 13, 0, 12, 2, 11, 32, 0, 32, 1, 54, 2, 4, 32, 0, 32, 2, 54, 2, 0, 15, 11, 16, 158, 1, 0, 11, 32, 1, 65, 1, 16, 165, 1, 0, 11, 89, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 40, 2, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 172, 188, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 89, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 40, 2, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 196, 194, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 89, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 40, 2, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 236, 200, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 97, 1, 2, 127, 35, 0, 65, 16, 107, 34, 4, 36, 0, 65, 12, 65, 4, 16, 149, 1, 34, 3, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 3, 32, 0, 58, 0, 8, 32, 3, 32, 2, 54, 2, 4, 32, 3, 32, 1, 54, 2, 0, 32, 3, 32, 4, 47, 0, 13, 59, 0, 9, 32, 3, 65, 11, 106, 32, 4, 65, 15, 106, 45, 0, 0, 58, 0, 0, 32, 4, 65, 16, 106, 36, 0, 32, 3, 173, 66, 32, 134, 66, 2, 132, 11, 86, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 236, 200, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 95, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 32, 0, 40, 2, 0, 34, 0, 40, 2, 0, 65, 1, 70, 4, 64, 32, 2, 32, 1, 65, 220, 143, 192, 0, 65, 4, 16, 127, 32, 2, 32, 0, 65, 4, 106, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 65, 228, 143, 192, 0, 16, 63, 12, 1, 11, 32, 2, 32, 1, 65, 224, 143, 192, 0, 65, 4, 16, 127, 11, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 76, 2, 1, 127, 1, 126, 32, 1, 65, 8, 106, 34, 6, 41, 3, 0, 33, 7, 32, 0, 32, 1, 32, 2, 32, 3, 32, 4, 65, 8, 106, 34, 1, 40, 2, 0, 34, 0, 32, 4, 40, 2, 0, 106, 32, 4, 65, 4, 106, 40, 2, 0, 32, 0, 107, 32, 5, 16, 55, 32, 1, 32, 0, 32, 6, 41, 3, 0, 32, 7, 125, 167, 106, 54, 2, 0, 11, 74, 0, 2, 127, 32, 1, 65, 128, 128, 196, 0, 71, 4, 64, 65, 1, 32, 0, 40, 2, 24, 32, 1, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 16, 17, 0, 0, 13, 1, 26, 11, 32, 2, 69, 4, 64, 65, 0, 15, 11, 32, 0, 40, 2, 24, 32, 2, 32, 3, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 11, 57, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 0, 40, 2, 0, 33, 0, 32, 2, 32, 1, 16, 137, 1, 55, 3, 0, 32, 2, 32, 0, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 16, 46, 32, 2, 16, 95, 32, 2, 65, 16, 106, 36, 0, 11, 86, 1, 1, 127, 65, 244, 213, 2, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 244, 213, 2, 65, 4, 16, 165, 1, 0, 11, 32, 1, 65, 232, 213, 0, 106, 65, 0, 65, 136, 128, 2, 16, 131, 1, 26, 32, 1, 65, 0, 65, 230, 213, 0, 16, 131, 1, 34, 1, 65, 1, 58, 0, 243, 213, 2, 32, 1, 65, 1, 59, 1, 240, 213, 2, 32, 1, 32, 0, 58, 0, 242, 213, 2, 32, 1, 11, 72, 1, 1, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 32, 3, 65, 20, 106, 65, 0, 54, 2, 0, 32, 3, 65, 228, 196, 193, 0, 54, 2, 16, 32, 3, 66, 1, 55, 2, 4, 32, 3, 32, 1, 54, 2, 28, 32, 3, 32, 0, 54, 2, 24, 32, 3, 32, 3, 65, 24, 106, 54, 2, 0, 32, 3, 32, 2, 16, 130, 1, 0, 11, 64, 0, 35, 0, 65, 32, 107, 34, 0, 36, 0, 32, 0, 65, 28, 106, 65, 0, 54, 2, 0, 32, 0, 65, 220, 139, 192, 0, 54, 2, 24, 32, 0, 66, 1, 55, 2, 12, 32, 0, 65, 212, 139, 192, 0, 54, 2, 8, 32, 1, 32, 0, 65, 8, 106, 16, 102, 32, 0, 65, 32, 106, 36, 0, 11, 58, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 65, 248, 140, 192, 0, 65, 15, 16, 127, 32, 2, 32, 0, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 65, 136, 141, 192, 0, 16, 63, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 58, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 65, 152, 141, 192, 0, 65, 13, 16, 127, 32, 2, 32, 0, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 65, 168, 141, 192, 0, 16, 63, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 70, 1, 2, 127, 32, 1, 40, 2, 4, 33, 2, 32, 1, 40, 2, 0, 33, 3, 65, 8, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 8, 65, 4, 16, 165, 1, 0, 11, 32, 1, 32, 2, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 0, 65, 204, 192, 193, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 11, 59, 1, 1, 127, 2, 127, 32, 1, 65, 4, 75, 4, 64, 65, 240, 177, 127, 33, 2, 65, 1, 12, 1, 11, 32, 1, 65, 2, 116, 65, 144, 187, 192, 0, 106, 40, 2, 0, 33, 2, 65, 0, 11, 33, 1, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 11, 92, 1, 3, 127, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 0, 40, 2, 12, 34, 2, 69, 4, 64, 65, 212, 188, 193, 0, 65, 43, 65, 244, 191, 193, 0, 16, 114, 0, 11, 32, 0, 40, 2, 8, 34, 3, 69, 4, 64, 65, 212, 188, 193, 0, 65, 43, 65, 132, 192, 193, 0, 16, 114, 0, 11, 32, 1, 32, 2, 54, 2, 8, 32, 1, 32, 0, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 1, 16, 129, 1, 0, 11, 51, 1, 1, 127, 32, 2, 4, 64, 32, 0, 33, 3, 3, 64, 32, 3, 32, 1, 45, 0, 0, 58, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 3, 65, 1, 106, 33, 3, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 11, 58, 0, 32, 0, 40, 2, 0, 33, 0, 32, 1, 45, 0, 0, 65, 16, 113, 65, 4, 118, 4, 64, 32, 0, 32, 1, 16, 83, 15, 11, 32, 1, 45, 0, 0, 65, 32, 113, 65, 5, 118, 4, 64, 32, 0, 32, 1, 16, 84, 15, 11, 32, 0, 32, 1, 16, 160, 1, 11, 42, 1, 1, 127, 32, 2, 65, 1, 16, 48, 34, 3, 4, 64, 32, 3, 32, 0, 32, 2, 32, 1, 32, 1, 32, 2, 75, 27, 16, 121, 26, 32, 0, 32, 1, 65, 1, 16, 24, 11, 32, 3, 11, 67, 2, 1, 127, 1, 126, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 1, 65, 0, 54, 2, 8, 32, 1, 66, 0, 55, 3, 0, 32, 1, 41, 3, 0, 33, 2, 32, 0, 32, 1, 40, 2, 8, 54, 2, 8, 32, 0, 32, 2, 55, 3, 0, 32, 0, 65, 0, 54, 2, 16, 32, 1, 65, 16, 106, 36, 0, 11, 45, 0, 2, 64, 32, 0, 65, 124, 77, 4, 64, 32, 0, 69, 4, 64, 65, 4, 33, 0, 12, 2, 11, 32, 0, 32, 0, 65, 125, 73, 65, 2, 116, 16, 149, 1, 34, 0, 13, 1, 11, 0, 11, 32, 0, 11, 50, 1, 1, 127, 16, 59, 34, 3, 32, 2, 65, 1, 115, 32, 1, 65, 1, 32, 1, 65, 128, 2, 73, 27, 16, 85, 32, 0, 66, 0, 55, 3, 0, 32, 0, 32, 3, 54, 2, 16, 32, 0, 65, 8, 106, 66, 0, 55, 3, 0, 11, 52, 0, 32, 0, 32, 1, 40, 2, 24, 32, 2, 32, 3, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 58, 0, 8, 32, 0, 32, 1, 54, 2, 0, 32, 0, 32, 3, 69, 58, 0, 9, 32, 0, 65, 0, 54, 2, 4, 11, 50, 1, 1, 127, 65, 8, 65, 4, 16, 149, 1, 34, 2, 69, 4, 64, 65, 8, 65, 4, 16, 165, 1, 0, 11, 32, 2, 32, 1, 54, 2, 4, 32, 2, 32, 0, 54, 2, 0, 65, 16, 32, 2, 65, 180, 143, 192, 0, 16, 107, 11, 44, 1, 1, 127, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 1, 65, 8, 106, 32, 0, 65, 8, 106, 40, 2, 0, 54, 2, 0, 32, 1, 32, 0, 41, 2, 0, 55, 3, 0, 32, 1, 16, 88, 0, 11, 52, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 54, 2, 12, 32, 2, 32, 0, 54, 2, 8, 32, 2, 65, 176, 197, 193, 0, 54, 2, 4, 32, 2, 65, 228, 196, 193, 0, 54, 2, 0, 32, 2, 16, 120, 0, 11, 41, 1, 1, 127, 32, 2, 4, 64, 32, 0, 33, 3, 3, 64, 32, 3, 32, 1, 58, 0, 0, 32, 3, 65, 1, 106, 33, 3, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 11, 37, 1, 1, 126, 32, 0, 40, 2, 0, 34, 0, 172, 34, 2, 32, 2, 66, 63, 135, 34, 2, 124, 32, 2, 133, 32, 0, 65, 127, 115, 65, 31, 118, 32, 1, 16, 52, 11, 51, 1, 1, 127, 65, 16, 33, 1, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 0, 65, 1, 107, 14, 2, 0, 1, 2, 11, 32, 0, 45, 0, 1, 15, 11, 32, 0, 65, 4, 106, 40, 2, 0, 45, 0, 8, 33, 1, 11, 32, 1, 11, 39, 1, 1, 127, 2, 64, 32, 0, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 4, 106, 40, 2, 0, 34, 0, 69, 13, 0, 32, 1, 32, 0, 65, 1, 16, 156, 1, 11, 11, 39, 1, 1, 127, 2, 64, 32, 0, 40, 2, 4, 34, 1, 69, 13, 0, 32, 0, 65, 8, 106, 40, 2, 0, 34, 0, 69, 13, 0, 32, 1, 32, 0, 65, 1, 16, 156, 1, 11, 11, 35, 0, 32, 1, 65, 1, 115, 16, 113, 33, 1, 32, 0, 66, 0, 55, 3, 0, 32, 0, 32, 1, 54, 2, 16, 32, 0, 65, 8, 106, 66, 0, 55, 3, 0, 11, 41, 0, 32, 0, 173, 66, 128, 128, 128, 128, 16, 66, 0, 32, 0, 40, 2, 24, 65, 196, 140, 192, 0, 65, 20, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 27, 132, 11, 37, 0, 32, 0, 65, 0, 58, 0, 32, 32, 0, 65, 0, 54, 2, 20, 32, 0, 65, 0, 54, 2, 12, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 28, 11, 27, 1, 1, 127, 32, 0, 65, 1, 16, 48, 34, 1, 4, 64, 32, 1, 65, 0, 32, 0, 16, 131, 1, 26, 11, 32, 1, 11, 29, 1, 1, 127, 32, 0, 65, 4, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 0, 32, 1, 65, 1, 16, 156, 1, 11, 11, 40, 0, 32, 0, 32, 0, 40, 2, 16, 32, 2, 106, 54, 2, 16, 32, 0, 32, 0, 41, 3, 0, 32, 2, 173, 124, 55, 3, 0, 32, 0, 65, 8, 106, 32, 1, 32, 2, 16, 8, 11, 28, 0, 32, 1, 40, 2, 24, 65, 208, 216, 193, 0, 65, 5, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 10, 0, 32, 0, 32, 1, 32, 2, 16, 123, 11, 16, 0, 32, 1, 4, 64, 32, 0, 32, 1, 65, 4, 16, 156, 1, 11, 11, 18, 0, 32, 0, 40, 2, 0, 32, 1, 32, 1, 32, 2, 106, 16, 66, 65, 0, 11, 22, 0, 32, 0, 32, 1, 40, 2, 8, 54, 2, 4, 32, 0, 32, 1, 40, 2, 0, 54, 2, 0, 11, 16, 0, 32, 0, 41, 3, 0, 26, 32, 0, 65, 8, 106, 40, 2, 0, 11, 20, 0, 32, 0, 40, 2, 0, 32, 1, 32, 0, 40, 2, 4, 40, 2, 12, 17, 0, 0, 11, 8, 0, 32, 0, 32, 1, 16, 48, 11, 19, 0, 32, 0, 65, 40, 54, 2, 4, 32, 0, 65, 212, 138, 192, 0, 54, 2, 0, 11, 17, 0, 32, 0, 40, 2, 0, 32, 0, 40, 2, 4, 32, 1, 16, 166, 1, 11, 17, 0, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 32, 1, 16, 166, 1, 11, 16, 0, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 32, 1, 16, 15, 11, 19, 0, 32, 0, 65, 204, 192, 193, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 11, 16, 0, 32, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 4, 16, 14, 11, 10, 0, 32, 0, 32, 1, 32, 2, 16, 24, 11, 13, 0, 32, 0, 40, 2, 0, 32, 1, 16, 37, 65, 0, 11, 17, 0, 65, 192, 196, 193, 0, 65, 17, 65, 212, 196, 193, 0, 16, 114, 0, 11, 14, 0, 32, 0, 40, 2, 0, 26, 3, 64, 12, 0, 11, 0, 11, 13, 0, 32, 0, 53, 2, 0, 65, 1, 32, 1, 16, 52, 11, 13, 0, 32, 0, 40, 2, 0, 32, 1, 32, 2, 16, 39, 11, 11, 0, 32, 0, 35, 0, 106, 36, 0, 35, 0, 11, 10, 0, 32, 0, 65, 8, 106, 41, 3, 0, 11, 13, 0, 32, 1, 65, 244, 145, 192, 0, 65, 2, 16, 14, 11, 25, 0, 32, 0, 32, 1, 65, 172, 231, 193, 0, 40, 2, 0, 34, 0, 65, 42, 32, 0, 27, 17, 4, 0, 0, 11, 10, 0, 32, 2, 32, 0, 32, 1, 16, 14, 11, 9, 0, 32, 0, 65, 0, 54, 2, 0, 11, 7, 0, 32, 0, 16, 1, 0, 11, 13, 0, 66, 250, 227, 222, 178, 168, 237, 139, 221, 137, 127, 11, 4, 0, 65, 0, 11, 5, 0, 65, 128, 4, 11, 4, 0, 65, 1, 11, 4, 0, 32, 1, 11, 13, 0, 66, 149, 151, 213, 166, 240, 201, 145, 211, 198, 0, 11, 13, 0, 66, 244, 249, 158, 230, 238, 163, 170, 249, 254, 0, 11, 13, 0, 66, 225, 246, 196, 237, 133, 189, 222, 249, 138, 127, 11, 12, 0, 66, 161, 180, 233, 183, 247, 251, 205, 222, 8, 11, 3, 0, 1, 11, 3, 0, 1, 11, 11, 140, 223, 1, 3, 0, 65, 128, 128, 192, 0, 11, 246, 30, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 0, 0, 16, 0, 73, 0, 0, 0, 158, 5, 0, 0, 33, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 103, 122, 92, 119, 114, 105, 116, 101, 46, 114, 115, 120, 0, 16, 0, 92, 0, 0, 0, 112, 0, 0, 0, 34, 0, 0, 0, 120, 0, 16, 0, 92, 0, 0, 0, 119, 1, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 96, 40, 108, 101, 102, 116, 32, 61, 61, 32, 114, 105, 103, 104, 116, 41, 96, 10, 32, 32, 108, 101, 102, 116, 58, 32, 96, 96, 44, 10, 32, 114, 105, 103, 104, 116, 58, 32, 96, 96, 0, 0, 248, 0, 16, 0, 45, 0, 0, 0, 37, 1, 16, 0, 12, 0, 0, 0, 49, 1, 16, 0, 1, 0, 0, 0, 120, 0, 16, 0, 92, 0, 0, 0, 147, 0, 0, 0, 9, 0, 0, 0, 120, 0, 16, 0, 92, 0, 0, 0, 150, 0, 0, 0, 26, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 122, 105, 111, 46, 114, 115, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 198, 0, 0, 0, 25, 0, 0, 0, 99, 111, 114, 114, 117, 112, 116, 32, 100, 101, 102, 108, 97, 116, 101, 32, 115, 116, 114, 101, 97, 109, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 244, 0, 0, 0, 39, 0, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 190, 0, 0, 0, 27, 0, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 186, 0, 0, 0, 27, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 58, 32, 0, 0, 112, 2, 16, 0, 0, 0, 0, 0, 112, 2, 16, 0, 2, 0, 0, 0, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 97, 108, 108, 111, 99, 47, 115, 114, 99, 47, 118, 101, 99, 47, 109, 111, 100, 46, 114, 115, 132, 2, 16, 0, 76, 0, 0, 0, 64, 6, 0, 0, 42, 0, 0, 0, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 224, 2, 16, 0, 73, 0, 0, 0, 158, 5, 0, 0, 33, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 88, 3, 16, 0, 73, 0, 0, 0, 158, 5, 0, 0, 33, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 208, 3, 16, 0, 73, 0, 0, 0, 169, 1, 0, 0, 28, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 102, 105, 108, 108, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 105, 109, 112, 108, 115, 46, 114, 115, 0, 0, 71, 4, 16, 0, 75, 0, 0, 0, 230, 0, 0, 0, 13, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 99, 114, 99, 46, 114, 115, 0, 164, 4, 16, 0, 87, 0, 0, 0, 105, 0, 0, 0, 26, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 40, 41, 32, 105, 115, 32, 100, 101, 112, 114, 101, 99, 97, 116, 101, 100, 59, 32, 117, 115, 101, 32, 68, 105, 115, 112, 108, 97, 121, 99, 97, 108, 108, 101, 100, 32, 96, 82, 101, 115, 117, 108, 116, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 110, 32, 96, 69, 114, 114, 96, 32, 118, 97, 108, 117, 101, 0, 19, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 100, 101, 102, 108, 97, 116, 101, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0, 184, 5, 16, 0, 27, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 122, 105, 111, 46, 114, 115, 0, 220, 5, 16, 0, 87, 0, 0, 0, 54, 0, 0, 0, 52, 0, 0, 0, 68, 101, 99, 111, 109, 112, 114, 101, 115, 115, 69, 114, 114, 111, 114, 73, 110, 110, 101, 114, 110, 101, 101, 100, 115, 95, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 19, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0, 68, 101, 99, 111, 109, 112, 114, 101, 115, 115, 69, 114, 114, 111, 114, 0, 19, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 22, 0, 0, 0, 67, 111, 109, 112, 114, 101, 115, 115, 69, 114, 114, 111, 114, 0, 0, 0, 19, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 23, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 103, 122, 92, 109, 111, 100, 46, 114, 115, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 230, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 231, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 232, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 233, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 234, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 235, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 236, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 237, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 238, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 250, 0, 0, 0, 9, 0, 0, 0, 24, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 25, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 83, 111, 109, 101, 78, 111, 110, 101, 31, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 82, 101, 115, 117, 108, 116, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 110, 32, 96, 69, 114, 114, 96, 32, 118, 97, 108, 117, 101, 0, 33, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 34, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 102, 102, 105, 92, 114, 117, 115, 116, 46, 114, 115, 48, 8, 16, 0, 92, 0, 0, 0, 60, 0, 0, 0, 48, 0, 0, 0, 48, 8, 16, 0, 92, 0, 0, 0, 138, 0, 0, 0, 48, 0, 0, 0, 99, 111, 114, 114, 117, 112, 116, 32, 103, 122, 105, 112, 32, 115, 116, 114, 101, 97, 109, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 104, 97, 118, 101, 32, 97, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 99, 104, 101, 99, 107, 115, 117, 109, 105, 110, 118, 97, 108, 105, 100, 32, 103, 122, 105, 112, 32, 104, 101, 97, 100, 101, 114, 40, 41, 0, 0, 35, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 6, 0, 0, 0, 36, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 100, 101, 102, 108, 97, 116, 101, 92, 99, 111, 114, 101, 46, 114, 115, 32, 9, 16, 0, 100, 0, 0, 0, 134, 1, 0, 0, 5, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 134, 1, 0, 0, 27, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 15, 2, 0, 0, 49, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 41, 2, 0, 0, 19, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 42, 2, 0, 0, 35, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 73, 2, 0, 0, 22, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 98, 105, 116, 115, 32, 60, 61, 32, 40, 40, 49, 117, 51, 50, 32, 60, 60, 32, 108, 101, 110, 41, 32, 45, 32, 49, 117, 51, 50, 41, 32, 9, 16, 0, 100, 0, 0, 0, 155, 2, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 159, 2, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 212, 2, 0, 0, 30, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 93, 3, 0, 0, 27, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 98, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 117, 3, 0, 0, 40, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 118, 3, 0, 0, 45, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 118, 3, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 122, 3, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 126, 3, 0, 0, 55, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 127, 3, 0, 0, 45, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 127, 3, 0, 0, 76, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 131, 3, 0, 0, 45, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 136, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 138, 3, 0, 0, 49, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 138, 3, 0, 0, 41, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 147, 3, 0, 0, 43, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 152, 3, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 179, 3, 0, 0, 20, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 181, 3, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 200, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 214, 3, 0, 0, 20, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 215, 3, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 224, 3, 0, 0, 22, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 230, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 240, 3, 0, 0, 36, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 241, 3, 0, 0, 32, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 242, 3, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 251, 3, 0, 0, 22, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 252, 3, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 8, 4, 0, 0, 28, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 60, 4, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 60, 4, 0, 0, 62, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 62, 4, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 63, 4, 0, 0, 31, 0, 0, 0, 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15, 0, 32, 9, 16, 0, 100, 0, 0, 0, 120, 4, 0, 0, 26, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 129, 4, 0, 0, 24, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 99, 111, 100, 101, 32, 60, 32, 77, 65, 88, 95, 72, 85, 70, 70, 95, 83, 89, 77, 66, 79, 76, 83, 95, 50, 0, 32, 9, 16, 0, 100, 0, 0, 0, 131, 4, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 138, 4, 0, 0, 31, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 139, 4, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 213, 4, 0, 0, 30, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 180, 5, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 194, 5, 0, 0, 14, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 17, 6, 0, 0, 27, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 236, 5, 0, 0, 29, 0, 0, 0, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 32, 9, 16, 0, 100, 0, 0, 0, 244, 5, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 15, 0, 0, 0, 31, 0, 0, 0, 63, 0, 0, 0, 127, 0, 0, 0, 255, 0, 0, 0, 255, 1, 0, 0, 255, 3, 0, 0, 255, 7, 0, 0, 255, 15, 0, 0, 255, 31, 0, 0, 255, 63, 0, 0, 255, 127, 0, 0, 255, 255, 0, 65, 128, 159, 192, 0, 11, 181, 22, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 32, 9, 16, 0, 100, 0, 0, 0, 248, 5, 0, 0, 46, 0, 0, 0, 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 32, 9, 16, 0, 100, 0, 0, 0, 0, 6, 0, 0, 23, 0, 0, 0, 0, 0, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 32, 9, 16, 0, 100, 0, 0, 0, 10, 6, 0, 0, 51, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 65, 6, 0, 0, 38, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 100, 46, 112, 97, 114, 97, 109, 115, 46, 102, 108, 117, 115, 104, 95, 114, 101, 109, 97, 105, 110, 105, 110, 103, 32, 61, 61, 32, 48, 0, 32, 9, 16, 0, 100, 0, 0, 0, 84, 6, 0, 0, 9, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 116, 99, 104, 95, 108, 101, 110, 32, 62, 61, 32, 77, 73, 78, 95, 77, 65, 84, 67, 72, 95, 76, 69, 78, 46, 105, 110, 116, 111, 40, 41, 0, 32, 9, 16, 0, 100, 0, 0, 0, 196, 6, 0, 0, 5, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 116, 99, 104, 95, 100, 105, 115, 116, 32, 62, 61, 32, 49, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 197, 6, 0, 0, 5, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 116, 99, 104, 95, 100, 105, 115, 116, 32, 97, 115, 32, 117, 115, 105, 122, 101, 32, 60, 61, 32, 76, 90, 95, 68, 73, 67, 84, 95, 83, 73, 90, 69, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 198, 6, 0, 0, 5, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 217, 6, 0, 0, 16, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 217, 6, 0, 0, 5, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 252, 6, 0, 0, 24, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 14, 7, 0, 0, 24, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 56, 7, 0, 0, 33, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 108, 111, 111, 107, 97, 104, 101, 97, 100, 95, 115, 105, 122, 101, 32, 62, 61, 32, 108, 101, 110, 95, 116, 111, 95, 109, 111, 118, 101, 0, 32, 9, 16, 0, 100, 0, 0, 0, 124, 7, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 184, 7, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 184, 7, 0, 0, 66, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 188, 7, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 189, 7, 0, 0, 39, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 15, 8, 0, 0, 34, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 18, 8, 0, 0, 41, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 18, 8, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 107, 8, 0, 0, 19, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 108, 8, 0, 0, 35, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 218, 8, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 128, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 220, 5, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 105, 110, 102, 108, 97, 116, 101, 92, 99, 111, 114, 101, 46, 114, 115, 20, 24, 16, 0, 100, 0, 0, 0, 55, 0, 0, 0, 32, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 83, 1, 0, 0, 25, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 215, 1, 0, 0, 29, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 116, 2, 0, 0, 26, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 123, 2, 0, 0, 28, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 124, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 143, 2, 0, 0, 29, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 148, 2, 0, 0, 32, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 176, 2, 0, 0, 20, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 187, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 242, 2, 0, 0, 30, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 242, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 243, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 243, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 244, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 244, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 245, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 245, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 2, 3, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 2, 3, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 3, 3, 0, 0, 38, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 3, 3, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 4, 3, 0, 0, 38, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 4, 3, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 254, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 254, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 255, 2, 0, 0, 38, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 255, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 252, 2, 0, 0, 35, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 252, 2, 0, 0, 14, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 25, 3, 0, 0, 30, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 25, 3, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 26, 3, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 26, 3, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 27, 3, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 27, 3, 0, 0, 9, 0, 65, 192, 181, 192, 0, 11, 196, 169, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13, 0, 15, 0, 17, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 43, 0, 51, 0, 59, 0, 67, 0, 83, 0, 99, 0, 115, 0, 131, 0, 163, 0, 195, 0, 227, 0, 2, 1, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 7, 0, 9, 0, 13, 0, 17, 0, 25, 0, 33, 0, 49, 0, 65, 0, 97, 0, 129, 0, 193, 0, 1, 1, 129, 1, 1, 2, 1, 3, 1, 4, 1, 6, 1, 8, 1, 12, 1, 16, 1, 24, 1, 32, 1, 48, 1, 64, 1, 96, 0, 128, 0, 128, 20, 24, 16, 0, 100, 0, 0, 0, 11, 6, 0, 0, 31, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 0, 5, 0, 0, 21, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 6, 5, 0, 0, 21, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 7, 5, 0, 0, 43, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 188, 4, 0, 0, 42, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 86, 6, 0, 0, 60, 0, 0, 0, 1, 1, 1, 0, 4, 0, 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 224, 4, 0, 0, 40, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 242, 4, 0, 0, 33, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 248, 4, 0, 0, 47, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 18, 5, 0, 0, 35, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 20, 5, 0, 0, 25, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 26, 5, 0, 0, 30, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 105, 110, 102, 108, 97, 116, 101, 92, 111, 117, 116, 112, 117, 116, 95, 98, 117, 102, 102, 101, 114, 46, 114, 115, 0, 0, 0, 84, 28, 16, 0, 109, 0, 0, 0, 32, 0, 0, 0, 9, 0, 0, 0, 84, 28, 16, 0, 109, 0, 0, 0, 42, 0, 0, 0, 9, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 105, 110, 102, 108, 97, 116, 101, 92, 115, 116, 114, 101, 97, 109, 46, 114, 115, 0, 0, 228, 28, 16, 0, 102, 0, 0, 0, 32, 1, 0, 0, 21, 0, 0, 0, 228, 28, 16, 0, 102, 0, 0, 0, 80, 1, 0, 0, 38, 0, 0, 0, 80, 97, 114, 97, 109, 86, 101, 114, 115, 105, 111, 110, 66, 117, 102, 77, 101, 109, 68, 97, 116, 97, 83, 116, 114, 101, 97, 109, 69, 114, 114, 78, 111, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 100, 101, 102, 108, 97, 116, 101, 92, 115, 116, 114, 101, 97, 109, 46, 114, 115, 0, 0, 164, 29, 16, 0, 102, 0, 0, 0, 58, 0, 0, 0, 20, 0, 0, 0, 164, 29, 16, 0, 102, 0, 0, 0, 59, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 150, 48, 7, 119, 44, 97, 14, 238, 186, 81, 9, 153, 25, 196, 109, 7, 143, 244, 106, 112, 53, 165, 99, 233, 163, 149, 100, 158, 50, 136, 219, 14, 164, 184, 220, 121, 30, 233, 213, 224, 136, 217, 210, 151, 43, 76, 182, 9, 189, 124, 177, 126, 7, 45, 184, 231, 145, 29, 191, 144, 100, 16, 183, 29, 242, 32, 176, 106, 72, 113, 185, 243, 222, 65, 190, 132, 125, 212, 218, 26, 235, 228, 221, 109, 81, 181, 212, 244, 199, 133, 211, 131, 86, 152, 108, 19, 192, 168, 107, 100, 122, 249, 98, 253, 236, 201, 101, 138, 79, 92, 1, 20, 217, 108, 6, 99, 99, 61, 15, 250, 245, 13, 8, 141, 200, 32, 110, 59, 94, 16, 105, 76, 228, 65, 96, 213, 114, 113, 103, 162, 209, 228, 3, 60, 71, 212, 4, 75, 253, 133, 13, 210, 107, 181, 10, 165, 250, 168, 181, 53, 108, 152, 178, 66, 214, 201, 187, 219, 64, 249, 188, 172, 227, 108, 216, 50, 117, 92, 223, 69, 207, 13, 214, 220, 89, 61, 209, 171, 172, 48, 217, 38, 58, 0, 222, 81, 128, 81, 215, 200, 22, 97, 208, 191, 181, 244, 180, 33, 35, 196, 179, 86, 153, 149, 186, 207, 15, 165, 189, 184, 158, 184, 2, 40, 8, 136, 5, 95, 178, 217, 12, 198, 36, 233, 11, 177, 135, 124, 111, 47, 17, 76, 104, 88, 171, 29, 97, 193, 61, 45, 102, 182, 144, 65, 220, 118, 6, 113, 219, 1, 188, 32, 210, 152, 42, 16, 213, 239, 137, 133, 177, 113, 31, 181, 182, 6, 165, 228, 191, 159, 51, 212, 184, 232, 162, 201, 7, 120, 52, 249, 0, 15, 142, 168, 9, 150, 24, 152, 14, 225, 187, 13, 106, 127, 45, 61, 109, 8, 151, 108, 100, 145, 1, 92, 99, 230, 244, 81, 107, 107, 98, 97, 108, 28, 216, 48, 101, 133, 78, 0, 98, 242, 237, 149, 6, 108, 123, 165, 1, 27, 193, 244, 8, 130, 87, 196, 15, 245, 198, 217, 176, 101, 80, 233, 183, 18, 234, 184, 190, 139, 124, 136, 185, 252, 223, 29, 221, 98, 73, 45, 218, 21, 243, 124, 211, 140, 101, 76, 212, 251, 88, 97, 178, 77, 206, 81, 181, 58, 116, 0, 188, 163, 226, 48, 187, 212, 65, 165, 223, 74, 215, 149, 216, 61, 109, 196, 209, 164, 251, 244, 214, 211, 106, 233, 105, 67, 252, 217, 110, 52, 70, 136, 103, 173, 208, 184, 96, 218, 115, 45, 4, 68, 229, 29, 3, 51, 95, 76, 10, 170, 201, 124, 13, 221, 60, 113, 5, 80, 170, 65, 2, 39, 16, 16, 11, 190, 134, 32, 12, 201, 37, 181, 104, 87, 179, 133, 111, 32, 9, 212, 102, 185, 159, 228, 97, 206, 14, 249, 222, 94, 152, 201, 217, 41, 34, 152, 208, 176, 180, 168, 215, 199, 23, 61, 179, 89, 129, 13, 180, 46, 59, 92, 189, 183, 173, 108, 186, 192, 32, 131, 184, 237, 182, 179, 191, 154, 12, 226, 182, 3, 154, 210, 177, 116, 57, 71, 213, 234, 175, 119, 210, 157, 21, 38, 219, 4, 131, 22, 220, 115, 18, 11, 99, 227, 132, 59, 100, 148, 62, 106, 109, 13, 168, 90, 106, 122, 11, 207, 14, 228, 157, 255, 9, 147, 39, 174, 0, 10, 177, 158, 7, 125, 68, 147, 15, 240, 210, 163, 8, 135, 104, 242, 1, 30, 254, 194, 6, 105, 93, 87, 98, 247, 203, 103, 101, 128, 113, 54, 108, 25, 231, 6, 107, 110, 118, 27, 212, 254, 224, 43, 211, 137, 90, 122, 218, 16, 204, 74, 221, 103, 111, 223, 185, 249, 249, 239, 190, 142, 67, 190, 183, 23, 213, 142, 176, 96, 232, 163, 214, 214, 126, 147, 209, 161, 196, 194, 216, 56, 82, 242, 223, 79, 241, 103, 187, 209, 103, 87, 188, 166, 221, 6, 181, 63, 75, 54, 178, 72, 218, 43, 13, 216, 76, 27, 10, 175, 246, 74, 3, 54, 96, 122, 4, 65, 195, 239, 96, 223, 85, 223, 103, 168, 239, 142, 110, 49, 121, 190, 105, 70, 140, 179, 97, 203, 26, 131, 102, 188, 160, 210, 111, 37, 54, 226, 104, 82, 149, 119, 12, 204, 3, 71, 11, 187, 185, 22, 2, 34, 47, 38, 5, 85, 190, 59, 186, 197, 40, 11, 189, 178, 146, 90, 180, 43, 4, 106, 179, 92, 167, 255, 215, 194, 49, 207, 208, 181, 139, 158, 217, 44, 29, 174, 222, 91, 176, 194, 100, 155, 38, 242, 99, 236, 156, 163, 106, 117, 10, 147, 109, 2, 169, 6, 9, 156, 63, 54, 14, 235, 133, 103, 7, 114, 19, 87, 0, 5, 130, 74, 191, 149, 20, 122, 184, 226, 174, 43, 177, 123, 56, 27, 182, 12, 155, 142, 210, 146, 13, 190, 213, 229, 183, 239, 220, 124, 33, 223, 219, 11, 212, 210, 211, 134, 66, 226, 212, 241, 248, 179, 221, 104, 110, 131, 218, 31, 205, 22, 190, 129, 91, 38, 185, 246, 225, 119, 176, 111, 119, 71, 183, 24, 230, 90, 8, 136, 112, 106, 15, 255, 202, 59, 6, 102, 92, 11, 1, 17, 255, 158, 101, 143, 105, 174, 98, 248, 211, 255, 107, 97, 69, 207, 108, 22, 120, 226, 10, 160, 238, 210, 13, 215, 84, 131, 4, 78, 194, 179, 3, 57, 97, 38, 103, 167, 247, 22, 96, 208, 77, 71, 105, 73, 219, 119, 110, 62, 74, 106, 209, 174, 220, 90, 214, 217, 102, 11, 223, 64, 240, 59, 216, 55, 83, 174, 188, 169, 197, 158, 187, 222, 127, 207, 178, 71, 233, 255, 181, 48, 28, 242, 189, 189, 138, 194, 186, 202, 48, 147, 179, 83, 166, 163, 180, 36, 5, 54, 208, 186, 147, 6, 215, 205, 41, 87, 222, 84, 191, 103, 217, 35, 46, 122, 102, 179, 184, 74, 97, 196, 2, 27, 104, 93, 148, 43, 111, 42, 55, 190, 11, 180, 161, 142, 12, 195, 27, 223, 5, 90, 141, 239, 2, 45, 0, 0, 0, 0, 65, 49, 27, 25, 130, 98, 54, 50, 195, 83, 45, 43, 4, 197, 108, 100, 69, 244, 119, 125, 134, 167, 90, 86, 199, 150, 65, 79, 8, 138, 217, 200, 73, 187, 194, 209, 138, 232, 239, 250, 203, 217, 244, 227, 12, 79, 181, 172, 77, 126, 174, 181, 142, 45, 131, 158, 207, 28, 152, 135, 81, 18, 194, 74, 16, 35, 217, 83, 211, 112, 244, 120, 146, 65, 239, 97, 85, 215, 174, 46, 20, 230, 181, 55, 215, 181, 152, 28, 150, 132, 131, 5, 89, 152, 27, 130, 24, 169, 0, 155, 219, 250, 45, 176, 154, 203, 54, 169, 93, 93, 119, 230, 28, 108, 108, 255, 223, 63, 65, 212, 158, 14, 90, 205, 162, 36, 132, 149, 227, 21, 159, 140, 32, 70, 178, 167, 97, 119, 169, 190, 166, 225, 232, 241, 231, 208, 243, 232, 36, 131, 222, 195, 101, 178, 197, 218, 170, 174, 93, 93, 235, 159, 70, 68, 40, 204, 107, 111, 105, 253, 112, 118, 174, 107, 49, 57, 239, 90, 42, 32, 44, 9, 7, 11, 109, 56, 28, 18, 243, 54, 70, 223, 178, 7, 93, 198, 113, 84, 112, 237, 48, 101, 107, 244, 247, 243, 42, 187, 182, 194, 49, 162, 117, 145, 28, 137, 52, 160, 7, 144, 251, 188, 159, 23, 186, 141, 132, 14, 121, 222, 169, 37, 56, 239, 178, 60, 255, 121, 243, 115, 190, 72, 232, 106, 125, 27, 197, 65, 60, 42, 222, 88, 5, 79, 121, 240, 68, 126, 98, 233, 135, 45, 79, 194, 198, 28, 84, 219, 1, 138, 21, 148, 64, 187, 14, 141, 131, 232, 35, 166, 194, 217, 56, 191, 13, 197, 160, 56, 76, 244, 187, 33, 143, 167, 150, 10, 206, 150, 141, 19, 9, 0, 204, 92, 72, 49, 215, 69, 139, 98, 250, 110, 202, 83, 225, 119, 84, 93, 187, 186, 21, 108, 160, 163, 214, 63, 141, 136, 151, 14, 150, 145, 80, 152, 215, 222, 17, 169, 204, 199, 210, 250, 225, 236, 147, 203, 250, 245, 92, 215, 98, 114, 29, 230, 121, 107, 222, 181, 84, 64, 159, 132, 79, 89, 88, 18, 14, 22, 25, 35, 21, 15, 218, 112, 56, 36, 155, 65, 35, 61, 167, 107, 253, 101, 230, 90, 230, 124, 37, 9, 203, 87, 100, 56, 208, 78, 163, 174, 145, 1, 226, 159, 138, 24, 33, 204, 167, 51, 96, 253, 188, 42, 175, 225, 36, 173, 238, 208, 63, 180, 45, 131, 18, 159, 108, 178, 9, 134, 171, 36, 72, 201, 234, 21, 83, 208, 41, 70, 126, 251, 104, 119, 101, 226, 246, 121, 63, 47, 183, 72, 36, 54, 116, 27, 9, 29, 53, 42, 18, 4, 242, 188, 83, 75, 179, 141, 72, 82, 112, 222, 101, 121, 49, 239, 126, 96, 254, 243, 230, 231, 191, 194, 253, 254, 124, 145, 208, 213, 61, 160, 203, 204, 250, 54, 138, 131, 187, 7, 145, 154, 120, 84, 188, 177, 57, 101, 167, 168, 75, 152, 131, 59, 10, 169, 152, 34, 201, 250, 181, 9, 136, 203, 174, 16, 79, 93, 239, 95, 14, 108, 244, 70, 205, 63, 217, 109, 140, 14, 194, 116, 67, 18, 90, 243, 2, 35, 65, 234, 193, 112, 108, 193, 128, 65, 119, 216, 71, 215, 54, 151, 6, 230, 45, 142, 197, 181, 0, 165, 132, 132, 27, 188, 26, 138, 65, 113, 91, 187, 90, 104, 152, 232, 119, 67, 217, 217, 108, 90, 30, 79, 45, 21, 95, 126, 54, 12, 156, 45, 27, 39, 221, 28, 0, 62, 18, 0, 152, 185, 83, 49, 131, 160, 144, 98, 174, 139, 209, 83, 181, 146, 22, 197, 244, 221, 87, 244, 239, 196, 148, 167, 194, 239, 213, 150, 217, 246, 233, 188, 7, 174, 168, 141, 28, 183, 107, 222, 49, 156, 42, 239, 42, 133, 237, 121, 107, 202, 172, 72, 112, 211, 111, 27, 93, 248, 46, 42, 70, 225, 225, 54, 222, 102, 160, 7, 197, 127, 99, 84, 232, 84, 34, 101, 243, 77, 229, 243, 178, 2, 164, 194, 169, 27, 103, 145, 132, 48, 38, 160, 159, 41, 184, 174, 197, 228, 249, 159, 222, 253, 58, 204, 243, 214, 123, 253, 232, 207, 188, 107, 169, 128, 253, 90, 178, 153, 62, 9, 159, 178, 127, 56, 132, 171, 176, 36, 28, 44, 241, 21, 7, 53, 50, 70, 42, 30, 115, 119, 49, 7, 180, 225, 112, 72, 245, 208, 107, 81, 54, 131, 70, 122, 119, 178, 93, 99, 78, 215, 250, 203, 15, 230, 225, 210, 204, 181, 204, 249, 141, 132, 215, 224, 74, 18, 150, 175, 11, 35, 141, 182, 200, 112, 160, 157, 137, 65, 187, 132, 70, 93, 35, 3, 7, 108, 56, 26, 196, 63, 21, 49, 133, 14, 14, 40, 66, 152, 79, 103, 3, 169, 84, 126, 192, 250, 121, 85, 129, 203, 98, 76, 31, 197, 56, 129, 94, 244, 35, 152, 157, 167, 14, 179, 220, 150, 21, 170, 27, 0, 84, 229, 90, 49, 79, 252, 153, 98, 98, 215, 216, 83, 121, 206, 23, 79, 225, 73, 86, 126, 250, 80, 149, 45, 215, 123, 212, 28, 204, 98, 19, 138, 141, 45, 82, 187, 150, 52, 145, 232, 187, 31, 208, 217, 160, 6, 236, 243, 126, 94, 173, 194, 101, 71, 110, 145, 72, 108, 47, 160, 83, 117, 232, 54, 18, 58, 169, 7, 9, 35, 106, 84, 36, 8, 43, 101, 63, 17, 228, 121, 167, 150, 165, 72, 188, 143, 102, 27, 145, 164, 39, 42, 138, 189, 224, 188, 203, 242, 161, 141, 208, 235, 98, 222, 253, 192, 35, 239, 230, 217, 189, 225, 188, 20, 252, 208, 167, 13, 63, 131, 138, 38, 126, 178, 145, 63, 185, 36, 208, 112, 248, 21, 203, 105, 59, 70, 230, 66, 122, 119, 253, 91, 181, 107, 101, 220, 244, 90, 126, 197, 55, 9, 83, 238, 118, 56, 72, 247, 177, 174, 9, 184, 240, 159, 18, 161, 51, 204, 63, 138, 114, 253, 36, 147, 0, 0, 0, 0, 55, 106, 194, 1, 110, 212, 132, 3, 89, 190, 70, 2, 220, 168, 9, 7, 235, 194, 203, 6, 178, 124, 141, 4, 133, 22, 79, 5, 184, 81, 19, 14, 143, 59, 209, 15, 214, 133, 151, 13, 225, 239, 85, 12, 100, 249, 26, 9, 83, 147, 216, 8, 10, 45, 158, 10, 61, 71, 92, 11, 112, 163, 38, 28, 71, 201, 228, 29, 30, 119, 162, 31, 41, 29, 96, 30, 172, 11, 47, 27, 155, 97, 237, 26, 194, 223, 171, 24, 245, 181, 105, 25, 200, 242, 53, 18, 255, 152, 247, 19, 166, 38, 177, 17, 145, 76, 115, 16, 20, 90, 60, 21, 35, 48, 254, 20, 122, 142, 184, 22, 77, 228, 122, 23, 224, 70, 77, 56, 215, 44, 143, 57, 142, 146, 201, 59, 185, 248, 11, 58, 60, 238, 68, 63, 11, 132, 134, 62, 82, 58, 192, 60, 101, 80, 2, 61, 88, 23, 94, 54, 111, 125, 156, 55, 54, 195, 218, 53, 1, 169, 24, 52, 132, 191, 87, 49, 179, 213, 149, 48, 234, 107, 211, 50, 221, 1, 17, 51, 144, 229, 107, 36, 167, 143, 169, 37, 254, 49, 239, 39, 201, 91, 45, 38, 76, 77, 98, 35, 123, 39, 160, 34, 34, 153, 230, 32, 21, 243, 36, 33, 40, 180, 120, 42, 31, 222, 186, 43, 70, 96, 252, 41, 113, 10, 62, 40, 244, 28, 113, 45, 195, 118, 179, 44, 154, 200, 245, 46, 173, 162, 55, 47, 192, 141, 154, 112, 247, 231, 88, 113, 174, 89, 30, 115, 153, 51, 220, 114, 28, 37, 147, 119, 43, 79, 81, 118, 114, 241, 23, 116, 69, 155, 213, 117, 120, 220, 137, 126, 79, 182, 75, 127, 22, 8, 13, 125, 33, 98, 207, 124, 164, 116, 128, 121, 147, 30, 66, 120, 202, 160, 4, 122, 253, 202, 198, 123, 176, 46, 188, 108, 135, 68, 126, 109, 222, 250, 56, 111, 233, 144, 250, 110, 108, 134, 181, 107, 91, 236, 119, 106, 2, 82, 49, 104, 53, 56, 243, 105, 8, 127, 175, 98, 63, 21, 109, 99, 102, 171, 43, 97, 81, 193, 233, 96, 212, 215, 166, 101, 227, 189, 100, 100, 186, 3, 34, 102, 141, 105, 224, 103, 32, 203, 215, 72, 23, 161, 21, 73, 78, 31, 83, 75, 121, 117, 145, 74, 252, 99, 222, 79, 203, 9, 28, 78, 146, 183, 90, 76, 165, 221, 152, 77, 152, 154, 196, 70, 175, 240, 6, 71, 246, 78, 64, 69, 193, 36, 130, 68, 68, 50, 205, 65, 115, 88, 15, 64, 42, 230, 73, 66, 29, 140, 139, 67, 80, 104, 241, 84, 103, 2, 51, 85, 62, 188, 117, 87, 9, 214, 183, 86, 140, 192, 248, 83, 187, 170, 58, 82, 226, 20, 124, 80, 213, 126, 190, 81, 232, 57, 226, 90, 223, 83, 32, 91, 134, 237, 102, 89, 177, 135, 164, 88, 52, 145, 235, 93, 3, 251, 41, 92, 90, 69, 111, 94, 109, 47, 173, 95, 128, 27, 53, 225, 183, 113, 247, 224, 238, 207, 177, 226, 217, 165, 115, 227, 92, 179, 60, 230, 107, 217, 254, 231, 50, 103, 184, 229, 5, 13, 122, 228, 56, 74, 38, 239, 15, 32, 228, 238, 86, 158, 162, 236, 97, 244, 96, 237, 228, 226, 47, 232, 211, 136, 237, 233, 138, 54, 171, 235, 189, 92, 105, 234, 240, 184, 19, 253, 199, 210, 209, 252, 158, 108, 151, 254, 169, 6, 85, 255, 44, 16, 26, 250, 27, 122, 216, 251, 66, 196, 158, 249, 117, 174, 92, 248, 72, 233, 0, 243, 127, 131, 194, 242, 38, 61, 132, 240, 17, 87, 70, 241, 148, 65, 9, 244, 163, 43, 203, 245, 250, 149, 141, 247, 205, 255, 79, 246, 96, 93, 120, 217, 87, 55, 186, 216, 14, 137, 252, 218, 57, 227, 62, 219, 188, 245, 113, 222, 139, 159, 179, 223, 210, 33, 245, 221, 229, 75, 55, 220, 216, 12, 107, 215, 239, 102, 169, 214, 182, 216, 239, 212, 129, 178, 45, 213, 4, 164, 98, 208, 51, 206, 160, 209, 106, 112, 230, 211, 93, 26, 36, 210, 16, 254, 94, 197, 39, 148, 156, 196, 126, 42, 218, 198, 73, 64, 24, 199, 204, 86, 87, 194, 251, 60, 149, 195, 162, 130, 211, 193, 149, 232, 17, 192, 168, 175, 77, 203, 159, 197, 143, 202, 198, 123, 201, 200, 241, 17, 11, 201, 116, 7, 68, 204, 67, 109, 134, 205, 26, 211, 192, 207, 45, 185, 2, 206, 64, 150, 175, 145, 119, 252, 109, 144, 46, 66, 43, 146, 25, 40, 233, 147, 156, 62, 166, 150, 171, 84, 100, 151, 242, 234, 34, 149, 197, 128, 224, 148, 248, 199, 188, 159, 207, 173, 126, 158, 150, 19, 56, 156, 161, 121, 250, 157, 36, 111, 181, 152, 19, 5, 119, 153, 74, 187, 49, 155, 125, 209, 243, 154, 48, 53, 137, 141, 7, 95, 75, 140, 94, 225, 13, 142, 105, 139, 207, 143, 236, 157, 128, 138, 219, 247, 66, 139, 130, 73, 4, 137, 181, 35, 198, 136, 136, 100, 154, 131, 191, 14, 88, 130, 230, 176, 30, 128, 209, 218, 220, 129, 84, 204, 147, 132, 99, 166, 81, 133, 58, 24, 23, 135, 13, 114, 213, 134, 160, 208, 226, 169, 151, 186, 32, 168, 206, 4, 102, 170, 249, 110, 164, 171, 124, 120, 235, 174, 75, 18, 41, 175, 18, 172, 111, 173, 37, 198, 173, 172, 24, 129, 241, 167, 47, 235, 51, 166, 118, 85, 117, 164, 65, 63, 183, 165, 196, 41, 248, 160, 243, 67, 58, 161, 170, 253, 124, 163, 157, 151, 190, 162, 208, 115, 196, 181, 231, 25, 6, 180, 190, 167, 64, 182, 137, 205, 130, 183, 12, 219, 205, 178, 59, 177, 15, 179, 98, 15, 73, 177, 85, 101, 139, 176, 104, 34, 215, 187, 95, 72, 21, 186, 6, 246, 83, 184, 49, 156, 145, 185, 180, 138, 222, 188, 131, 224, 28, 189, 218, 94, 90, 191, 237, 52, 152, 190, 0, 0, 0, 0, 101, 103, 188, 184, 139, 200, 9, 170, 238, 175, 181, 18, 87, 151, 98, 143, 50, 240, 222, 55, 220, 95, 107, 37, 185, 56, 215, 157, 239, 40, 180, 197, 138, 79, 8, 125, 100, 224, 189, 111, 1, 135, 1, 215, 184, 191, 214, 74, 221, 216, 106, 242, 51, 119, 223, 224, 86, 16, 99, 88, 159, 87, 25, 80, 250, 48, 165, 232, 20, 159, 16, 250, 113, 248, 172, 66, 200, 192, 123, 223, 173, 167, 199, 103, 67, 8, 114, 117, 38, 111, 206, 205, 112, 127, 173, 149, 21, 24, 17, 45, 251, 183, 164, 63, 158, 208, 24, 135, 39, 232, 207, 26, 66, 143, 115, 162, 172, 32, 198, 176, 201, 71, 122, 8, 62, 175, 50, 160, 91, 200, 142, 24, 181, 103, 59, 10, 208, 0, 135, 178, 105, 56, 80, 47, 12, 95, 236, 151, 226, 240, 89, 133, 135, 151, 229, 61, 209, 135, 134, 101, 180, 224, 58, 221, 90, 79, 143, 207, 63, 40, 51, 119, 134, 16, 228, 234, 227, 119, 88, 82, 13, 216, 237, 64, 104, 191, 81, 248, 161, 248, 43, 240, 196, 159, 151, 72, 42, 48, 34, 90, 79, 87, 158, 226, 246, 111, 73, 127, 147, 8, 245, 199, 125, 167, 64, 213, 24, 192, 252, 109, 78, 208, 159, 53, 43, 183, 35, 141, 197, 24, 150, 159, 160, 127, 42, 39, 25, 71, 253, 186, 124, 32, 65, 2, 146, 143, 244, 16, 247, 232, 72, 168, 61, 88, 20, 155, 88, 63, 168, 35, 182, 144, 29, 49, 211, 247, 161, 137, 106, 207, 118, 20, 15, 168, 202, 172, 225, 7, 127, 190, 132, 96, 195, 6, 210, 112, 160, 94, 183, 23, 28, 230, 89, 184, 169, 244, 60, 223, 21, 76, 133, 231, 194, 209, 224, 128, 126, 105, 14, 47, 203, 123, 107, 72, 119, 195, 162, 15, 13, 203, 199, 104, 177, 115, 41, 199, 4, 97, 76, 160, 184, 217, 245, 152, 111, 68, 144, 255, 211, 252, 126, 80, 102, 238, 27, 55, 218, 86, 77, 39, 185, 14, 40, 64, 5, 182, 198, 239, 176, 164, 163, 136, 12, 28, 26, 176, 219, 129, 127, 215, 103, 57, 145, 120, 210, 43, 244, 31, 110, 147, 3, 247, 38, 59, 102, 144, 154, 131, 136, 63, 47, 145, 237, 88, 147, 41, 84, 96, 68, 180, 49, 7, 248, 12, 223, 168, 77, 30, 186, 207, 241, 166, 236, 223, 146, 254, 137, 184, 46, 70, 103, 23, 155, 84, 2, 112, 39, 236, 187, 72, 240, 113, 222, 47, 76, 201, 48, 128, 249, 219, 85, 231, 69, 99, 156, 160, 63, 107, 249, 199, 131, 211, 23, 104, 54, 193, 114, 15, 138, 121, 203, 55, 93, 228, 174, 80, 225, 92, 64, 255, 84, 78, 37, 152, 232, 246, 115, 136, 139, 174, 22, 239, 55, 22, 248, 64, 130, 4, 157, 39, 62, 188, 36, 31, 233, 33, 65, 120, 85, 153, 175, 215, 224, 139, 202, 176, 92, 51, 59, 182, 89, 237, 94, 209, 229, 85, 176, 126, 80, 71, 213, 25, 236, 255, 108, 33, 59, 98, 9, 70, 135, 218, 231, 233, 50, 200, 130, 142, 142, 112, 212, 158, 237, 40, 177, 249, 81, 144, 95, 86, 228, 130, 58, 49, 88, 58, 131, 9, 143, 167, 230, 110, 51, 31, 8, 193, 134, 13, 109, 166, 58, 181, 164, 225, 64, 189, 193, 134, 252, 5, 47, 41, 73, 23, 74, 78, 245, 175, 243, 118, 34, 50, 150, 17, 158, 138, 120, 190, 43, 152, 29, 217, 151, 32, 75, 201, 244, 120, 46, 174, 72, 192, 192, 1, 253, 210, 165, 102, 65, 106, 28, 94, 150, 247, 121, 57, 42, 79, 151, 150, 159, 93, 242, 241, 35, 229, 5, 25, 107, 77, 96, 126, 215, 245, 142, 209, 98, 231, 235, 182, 222, 95, 82, 142, 9, 194, 55, 233, 181, 122, 217, 70, 0, 104, 188, 33, 188, 208, 234, 49, 223, 136, 143, 86, 99, 48, 97, 249, 214, 34, 4, 158, 106, 154, 189, 166, 189, 7, 216, 193, 1, 191, 54, 110, 180, 173, 83, 9, 8, 21, 154, 78, 114, 29, 255, 41, 206, 165, 17, 134, 123, 183, 116, 225, 199, 15, 205, 217, 16, 146, 168, 190, 172, 42, 70, 17, 25, 56, 35, 118, 165, 128, 117, 102, 198, 216, 16, 1, 122, 96, 254, 174, 207, 114, 155, 201, 115, 202, 34, 241, 164, 87, 71, 150, 24, 239, 169, 57, 173, 253, 204, 94, 17, 69, 6, 238, 77, 118, 99, 137, 241, 206, 141, 38, 68, 220, 232, 65, 248, 100, 81, 121, 47, 249, 52, 30, 147, 65, 218, 177, 38, 83, 191, 214, 154, 235, 233, 198, 249, 179, 140, 161, 69, 11, 98, 14, 240, 25, 7, 105, 76, 161, 190, 81, 155, 60, 219, 54, 39, 132, 53, 153, 146, 150, 80, 254, 46, 46, 153, 185, 84, 38, 252, 222, 232, 158, 18, 113, 93, 140, 119, 22, 225, 52, 206, 46, 54, 169, 171, 73, 138, 17, 69, 230, 63, 3, 32, 129, 131, 187, 118, 145, 224, 227, 19, 246, 92, 91, 253, 89, 233, 73, 152, 62, 85, 241, 33, 6, 130, 108, 68, 97, 62, 212, 170, 206, 139, 198, 207, 169, 55, 126, 56, 65, 127, 214, 93, 38, 195, 110, 179, 137, 118, 124, 214, 238, 202, 196, 111, 214, 29, 89, 10, 177, 161, 225, 228, 30, 20, 243, 129, 121, 168, 75, 215, 105, 203, 19, 178, 14, 119, 171, 92, 161, 194, 185, 57, 198, 126, 1, 128, 254, 169, 156, 229, 153, 21, 36, 11, 54, 160, 54, 110, 81, 28, 142, 167, 22, 102, 134, 194, 113, 218, 62, 44, 222, 111, 44, 73, 185, 211, 148, 240, 129, 4, 9, 149, 230, 184, 177, 123, 73, 13, 163, 30, 46, 177, 27, 72, 62, 210, 67, 45, 89, 110, 251, 195, 246, 219, 233, 166, 145, 103, 81, 31, 169, 176, 204, 122, 206, 12, 116, 148, 97, 185, 102, 241, 6, 5, 222, 0, 0, 0, 0, 176, 41, 96, 61, 96, 83, 192, 122, 208, 122, 160, 71, 192, 166, 128, 245, 112, 143, 224, 200, 160, 245, 64, 143, 16, 220, 32, 178, 193, 75, 112, 48, 113, 98, 16, 13, 161, 24, 176, 74, 17, 49, 208, 119, 1, 237, 240, 197, 177, 196, 144, 248, 97, 190, 48, 191, 209, 151, 80, 130, 130, 151, 224, 96, 50, 190, 128, 93, 226, 196, 32, 26, 82, 237, 64, 39, 66, 49, 96, 149, 242, 24, 0, 168, 34, 98, 160, 239, 146, 75, 192, 210, 67, 220, 144, 80, 243, 245, 240, 109, 35, 143, 80, 42, 147, 166, 48, 23, 131, 122, 16, 165, 51, 83, 112, 152, 227, 41, 208, 223, 83, 0, 176, 226, 4, 47, 193, 193, 180, 6, 161, 252, 100, 124, 1, 187, 212, 85, 97, 134, 196, 137, 65, 52, 116, 160, 33, 9, 164, 218, 129, 78, 20, 243, 225, 115, 197, 100, 177, 241, 117, 77, 209, 204, 165, 55, 113, 139, 21, 30, 17, 182, 5, 194, 49, 4, 181, 235, 81, 57, 101, 145, 241, 126, 213, 184, 145, 67, 134, 184, 33, 161, 54, 145, 65, 156, 230, 235, 225, 219, 86, 194, 129, 230, 70, 30, 161, 84, 246, 55, 193, 105, 38, 77, 97, 46, 150, 100, 1, 19, 71, 243, 81, 145, 247, 218, 49, 172, 39, 160, 145, 235, 151, 137, 241, 214, 135, 85, 209, 100, 55, 124, 177, 89, 231, 6, 17, 30, 87, 47, 113, 35, 73, 88, 243, 88, 249, 113, 147, 101, 41, 11, 51, 34, 153, 34, 83, 31, 137, 254, 115, 173, 57, 215, 19, 144, 233, 173, 179, 215, 89, 132, 211, 234, 136, 19, 131, 104, 56, 58, 227, 85, 232, 64, 67, 18, 88, 105, 35, 47, 72, 181, 3, 157, 248, 156, 99, 160, 40, 230, 195, 231, 152, 207, 163, 218, 203, 207, 19, 56, 123, 230, 115, 5, 171, 156, 211, 66, 27, 181, 179, 127, 11, 105, 147, 205, 187, 64, 243, 240, 107, 58, 83, 183, 219, 19, 51, 138, 10, 132, 99, 8, 186, 173, 3, 53, 106, 215, 163, 114, 218, 254, 195, 79, 202, 34, 227, 253, 122, 11, 131, 192, 170, 113, 35, 135, 26, 88, 67, 186, 77, 119, 50, 153, 253, 94, 82, 164, 45, 36, 242, 227, 157, 13, 146, 222, 141, 209, 178, 108, 61, 248, 210, 81, 237, 130, 114, 22, 93, 171, 18, 43, 140, 60, 66, 169, 60, 21, 34, 148, 236, 111, 130, 211, 92, 70, 226, 238, 76, 154, 194, 92, 252, 179, 162, 97, 44, 201, 2, 38, 156, 224, 98, 27, 207, 224, 210, 249, 127, 201, 178, 196, 175, 179, 18, 131, 31, 154, 114, 190, 15, 70, 82, 12, 191, 111, 50, 49, 111, 21, 146, 118, 223, 60, 242, 75, 14, 171, 162, 201, 190, 130, 194, 244, 110, 248, 98, 179, 222, 209, 2, 142, 206, 13, 34, 60, 126, 36, 66, 1, 174, 94, 226, 70, 30, 119, 130, 123, 146, 176, 230, 177, 34, 153, 134, 140, 242, 227, 38, 203, 66, 202, 70, 246, 82, 22, 102, 68, 226, 63, 6, 121, 50, 69, 166, 62, 130, 108, 198, 3, 83, 251, 150, 129, 227, 210, 246, 188, 51, 168, 86, 251, 131, 129, 54, 198, 147, 93, 22, 116, 35, 116, 118, 73, 243, 14, 214, 14, 67, 39, 182, 51, 16, 39, 6, 209, 160, 14, 102, 236, 112, 116, 198, 171, 192, 93, 166, 150, 208, 129, 134, 36, 96, 168, 230, 25, 176, 210, 70, 94, 0, 251, 38, 99, 209, 108, 118, 225, 97, 69, 22, 220, 177, 63, 182, 155, 1, 22, 214, 166, 17, 202, 246, 20, 161, 227, 150, 41, 113, 153, 54, 110, 193, 176, 86, 83, 150, 159, 39, 112, 38, 182, 71, 77, 246, 204, 231, 10, 70, 229, 135, 55, 86, 57, 167, 133, 230, 16, 199, 184, 54, 106, 103, 255, 134, 67, 7, 194, 87, 212, 87, 64, 231, 253, 55, 125, 55, 135, 151, 58, 135, 174, 247, 7, 151, 114, 215, 181, 39, 91, 183, 136, 247, 33, 23, 207, 71, 8, 119, 242, 20, 8, 199, 16, 164, 33, 167, 45, 116, 91, 7, 106, 196, 114, 103, 87, 212, 174, 71, 229, 100, 135, 39, 216, 180, 253, 135, 159, 4, 212, 231, 162, 213, 67, 183, 32, 101, 106, 215, 29, 181, 16, 119, 90, 5, 57, 23, 103, 21, 229, 55, 213, 165, 204, 87, 232, 117, 182, 247, 175, 197, 159, 151, 146, 219, 232, 21, 233, 107, 193, 117, 212, 187, 187, 213, 147, 11, 146, 181, 174, 27, 78, 149, 28, 171, 103, 245, 33, 123, 29, 85, 102, 203, 52, 53, 91, 26, 163, 101, 217, 170, 138, 5, 228, 122, 240, 165, 163, 202, 217, 197, 158, 218, 5, 229, 44, 106, 44, 133, 17, 186, 86, 37, 86, 10, 127, 69, 107, 89, 127, 245, 137, 233, 86, 149, 180, 57, 44, 53, 243, 137, 5, 85, 206, 153, 217, 117, 124, 41, 240, 21, 65, 249, 138, 181, 6, 73, 163, 213, 59, 152, 52, 133, 185, 40, 29, 229, 132, 248, 103, 69, 195, 72, 78, 37, 254, 88, 146, 5, 76, 232, 187, 101, 113, 56, 193, 197, 54, 136, 232, 165, 11, 223, 199, 212, 40, 111, 238, 180, 21, 191, 148, 20, 82, 15, 189, 116, 111, 31, 97, 84, 221, 175, 72, 52, 224, 127, 50, 148, 167, 207, 27, 244, 154, 30, 140, 164, 24, 174, 165, 196, 37, 126, 223, 100, 98, 206, 246, 4, 95, 222, 42, 36, 237, 110, 3, 68, 208, 190, 121, 228, 151, 14, 80, 132, 170, 93, 80, 52, 72, 237, 121, 84, 117, 61, 3, 244, 50, 141, 42, 148, 15, 157, 246, 180, 189, 45, 223, 212, 128, 253, 165, 116, 199, 77, 140, 20, 250, 156, 27, 68, 120, 44, 50, 36, 69, 252, 72, 132, 2, 76, 97, 228, 63, 92, 189, 196, 141, 236, 148, 164, 176, 60, 238, 4, 247, 140, 199, 100, 202, 0, 0, 0, 0, 165, 211, 92, 203, 11, 161, 200, 77, 174, 114, 148, 134, 22, 66, 145, 155, 179, 145, 205, 80, 29, 227, 89, 214, 184, 48, 5, 29, 109, 130, 83, 236, 200, 81, 15, 39, 102, 35, 155, 161, 195, 240, 199, 106, 123, 192, 194, 119, 222, 19, 158, 188, 112, 97, 10, 58, 213, 178, 86, 241, 155, 2, 214, 3, 62, 209, 138, 200, 144, 163, 30, 78, 53, 112, 66, 133, 141, 64, 71, 152, 40, 147, 27, 83, 134, 225, 143, 213, 35, 50, 211, 30, 246, 128, 133, 239, 83, 83, 217, 36, 253, 33, 77, 162, 88, 242, 17, 105, 224, 194, 20, 116, 69, 17, 72, 191, 235, 99, 220, 57, 78, 176, 128, 242, 54, 5, 172, 7, 147, 214, 240, 204, 61, 164, 100, 74, 152, 119, 56, 129, 32, 71, 61, 156, 133, 148, 97, 87, 43, 230, 245, 209, 142, 53, 169, 26, 91, 135, 255, 235, 254, 84, 163, 32, 80, 38, 55, 166, 245, 245, 107, 109, 77, 197, 110, 112, 232, 22, 50, 187, 70, 100, 166, 61, 227, 183, 250, 246, 173, 7, 122, 4, 8, 212, 38, 207, 166, 166, 178, 73, 3, 117, 238, 130, 187, 69, 235, 159, 30, 150, 183, 84, 176, 228, 35, 210, 21, 55, 127, 25, 192, 133, 41, 232, 101, 86, 117, 35, 203, 36, 225, 165, 110, 247, 189, 110, 214, 199, 184, 115, 115, 20, 228, 184, 221, 102, 112, 62, 120, 181, 44, 245, 108, 10, 88, 15, 201, 217, 4, 196, 103, 171, 144, 66, 194, 120, 204, 137, 122, 72, 201, 148, 223, 155, 149, 95, 113, 233, 1, 217, 212, 58, 93, 18, 1, 136, 11, 227, 164, 91, 87, 40, 10, 41, 195, 174, 175, 250, 159, 101, 23, 202, 154, 120, 178, 25, 198, 179, 28, 107, 82, 53, 185, 184, 14, 254, 247, 8, 142, 12, 82, 219, 210, 199, 252, 169, 70, 65, 89, 122, 26, 138, 225, 74, 31, 151, 68, 153, 67, 92, 234, 235, 215, 218, 79, 56, 139, 17, 154, 138, 221, 224, 63, 89, 129, 43, 145, 43, 21, 173, 52, 248, 73, 102, 140, 200, 76, 123, 41, 27, 16, 176, 135, 105, 132, 54, 34, 186, 216, 253, 90, 15, 244, 8, 255, 220, 168, 195, 81, 174, 60, 69, 244, 125, 96, 142, 76, 77, 101, 147, 233, 158, 57, 88, 71, 236, 173, 222, 226, 63, 241, 21, 55, 141, 167, 228, 146, 94, 251, 47, 60, 44, 111, 169, 153, 255, 51, 98, 33, 207, 54, 127, 132, 28, 106, 180, 42, 110, 254, 50, 143, 189, 162, 249, 193, 13, 34, 11, 100, 222, 126, 192, 202, 172, 234, 70, 111, 127, 182, 141, 215, 79, 179, 144, 114, 156, 239, 91, 220, 238, 123, 221, 121, 61, 39, 22, 172, 143, 113, 231, 9, 92, 45, 44, 167, 46, 185, 170, 2, 253, 229, 97, 186, 205, 224, 124, 31, 30, 188, 183, 177, 108, 40, 49, 20, 191, 116, 250, 216, 20, 176, 30, 125, 199, 236, 213, 211, 181, 120, 83, 118, 102, 36, 152, 206, 86, 33, 133, 107, 133, 125, 78, 197, 247, 233, 200, 96, 36, 181, 3, 181, 150, 227, 242, 16, 69, 191, 57, 190, 55, 43, 191, 27, 228, 119, 116, 163, 212, 114, 105, 6, 7, 46, 162, 168, 117, 186, 36, 13, 166, 230, 239, 67, 22, 102, 29, 230, 197, 58, 214, 72, 183, 174, 80, 237, 100, 242, 155, 85, 84, 247, 134, 240, 135, 171, 77, 94, 245, 63, 203, 251, 38, 99, 0, 46, 148, 53, 241, 139, 71, 105, 58, 37, 53, 253, 188, 128, 230, 161, 119, 56, 214, 164, 106, 157, 5, 248, 161, 51, 119, 108, 39, 150, 164, 48, 236, 238, 17, 28, 25, 75, 194, 64, 210, 229, 176, 212, 84, 64, 99, 136, 159, 248, 83, 141, 130, 93, 128, 209, 73, 243, 242, 69, 207, 86, 33, 25, 4, 131, 147, 79, 245, 38, 64, 19, 62, 136, 50, 135, 184, 45, 225, 219, 115, 149, 209, 222, 110, 48, 2, 130, 165, 158, 112, 22, 35, 59, 163, 74, 232, 117, 19, 202, 26, 208, 192, 150, 209, 126, 178, 2, 87, 219, 97, 94, 156, 99, 81, 91, 129, 198, 130, 7, 74, 104, 240, 147, 204, 205, 35, 207, 7, 24, 145, 153, 246, 189, 66, 197, 61, 19, 48, 81, 187, 182, 227, 13, 112, 14, 211, 8, 109, 171, 0, 84, 166, 5, 114, 192, 32, 160, 161, 156, 235, 180, 30, 232, 17, 17, 205, 180, 218, 191, 191, 32, 92, 26, 108, 124, 151, 162, 92, 121, 138, 7, 143, 37, 65, 169, 253, 177, 199, 12, 46, 237, 12, 217, 156, 187, 253, 124, 79, 231, 54, 210, 61, 115, 176, 119, 238, 47, 123, 207, 222, 42, 102, 106, 13, 118, 173, 196, 127, 226, 43, 97, 172, 190, 224, 47, 28, 62, 18, 138, 207, 98, 217, 36, 189, 246, 95, 129, 110, 170, 148, 57, 94, 175, 137, 156, 141, 243, 66, 50, 255, 103, 196, 151, 44, 59, 15, 66, 158, 109, 254, 231, 77, 49, 53, 73, 63, 165, 179, 236, 236, 249, 120, 84, 220, 252, 101, 241, 15, 160, 174, 95, 125, 52, 40, 250, 174, 104, 227, 130, 27, 68, 22, 39, 200, 24, 221, 137, 186, 140, 91, 44, 105, 208, 144, 148, 89, 213, 141, 49, 138, 137, 70, 159, 248, 29, 192, 58, 43, 65, 11, 239, 153, 23, 250, 74, 74, 75, 49, 228, 56, 223, 183, 65, 235, 131, 124, 249, 219, 134, 97, 92, 8, 218, 170, 242, 122, 78, 44, 87, 169, 18, 231, 25, 25, 146, 21, 188, 202, 206, 222, 18, 184, 90, 88, 183, 107, 6, 147, 15, 91, 3, 142, 170, 136, 95, 69, 4, 250, 203, 195, 161, 41, 151, 8, 116, 155, 193, 249, 209, 72, 157, 50, 127, 58, 9, 180, 218, 233, 85, 127, 98, 217, 80, 98, 199, 10, 12, 169, 105, 120, 152, 47, 204, 171, 196, 228, 0, 0, 0, 0, 180, 11, 119, 166, 41, 17, 159, 151, 157, 26, 232, 49, 19, 36, 79, 244, 167, 47, 56, 82, 58, 53, 208, 99, 142, 62, 167, 197, 103, 78, 239, 51, 211, 69, 152, 149, 78, 95, 112, 164, 250, 84, 7, 2, 116, 106, 160, 199, 192, 97, 215, 97, 93, 123, 63, 80, 233, 112, 72, 246, 206, 156, 222, 103, 122, 151, 169, 193, 231, 141, 65, 240, 83, 134, 54, 86, 221, 184, 145, 147, 105, 179, 230, 53, 244, 169, 14, 4, 64, 162, 121, 162, 169, 210, 49, 84, 29, 217, 70, 242, 128, 195, 174, 195, 52, 200, 217, 101, 186, 246, 126, 160, 14, 253, 9, 6, 147, 231, 225, 55, 39, 236, 150, 145, 156, 57, 189, 207, 40, 50, 202, 105, 181, 40, 34, 88, 1, 35, 85, 254, 143, 29, 242, 59, 59, 22, 133, 157, 166, 12, 109, 172, 18, 7, 26, 10, 251, 119, 82, 252, 79, 124, 37, 90, 210, 102, 205, 107, 102, 109, 186, 205, 232, 83, 29, 8, 92, 88, 106, 174, 193, 66, 130, 159, 117, 73, 245, 57, 82, 165, 99, 168, 230, 174, 20, 14, 123, 180, 252, 63, 207, 191, 139, 153, 65, 129, 44, 92, 245, 138, 91, 250, 104, 144, 179, 203, 220, 155, 196, 109, 53, 235, 140, 155, 129, 224, 251, 61, 28, 250, 19, 12, 168, 241, 100, 170, 38, 207, 195, 111, 146, 196, 180, 201, 15, 222, 92, 248, 187, 213, 43, 94, 121, 117, 11, 68, 205, 126, 124, 226, 80, 100, 148, 211, 228, 111, 227, 117, 106, 81, 68, 176, 222, 90, 51, 22, 67, 64, 219, 39, 247, 75, 172, 129, 30, 59, 228, 119, 170, 48, 147, 209, 55, 42, 123, 224, 131, 33, 12, 70, 13, 31, 171, 131, 185, 20, 220, 37, 36, 14, 52, 20, 144, 5, 67, 178, 183, 233, 213, 35, 3, 226, 162, 133, 158, 248, 74, 180, 42, 243, 61, 18, 164, 205, 154, 215, 16, 198, 237, 113, 141, 220, 5, 64, 57, 215, 114, 230, 208, 167, 58, 16, 100, 172, 77, 182, 249, 182, 165, 135, 77, 189, 210, 33, 195, 131, 117, 228, 119, 136, 2, 66, 234, 146, 234, 115, 94, 153, 157, 213, 229, 76, 182, 139, 81, 71, 193, 45, 204, 93, 41, 28, 120, 86, 94, 186, 246, 104, 249, 127, 66, 99, 142, 217, 223, 121, 102, 232, 107, 114, 17, 78, 130, 2, 89, 184, 54, 9, 46, 30, 171, 19, 198, 47, 31, 24, 177, 137, 145, 38, 22, 76, 37, 45, 97, 234, 184, 55, 137, 219, 12, 60, 254, 125, 43, 208, 104, 236, 159, 219, 31, 74, 2, 193, 247, 123, 182, 202, 128, 221, 56, 244, 39, 24, 140, 255, 80, 190, 17, 229, 184, 143, 165, 238, 207, 41, 76, 158, 135, 223, 248, 149, 240, 121, 101, 143, 24, 72, 209, 132, 111, 238, 95, 186, 200, 43, 235, 177, 191, 141, 118, 171, 87, 188, 194, 160, 32, 26, 242, 234, 22, 136, 70, 225, 97, 46, 219, 251, 137, 31, 111, 240, 254, 185, 225, 206, 89, 124, 85, 197, 46, 218, 200, 223, 198, 235, 124, 212, 177, 77, 149, 164, 249, 187, 33, 175, 142, 29, 188, 181, 102, 44, 8, 190, 17, 138, 134, 128, 182, 79, 50, 139, 193, 233, 175, 145, 41, 216, 27, 154, 94, 126, 60, 118, 200, 239, 136, 125, 191, 73, 21, 103, 87, 120, 161, 108, 32, 222, 47, 82, 135, 27, 155, 89, 240, 189, 6, 67, 24, 140, 178, 72, 111, 42, 91, 56, 39, 220, 239, 51, 80, 122, 114, 41, 184, 75, 198, 34, 207, 237, 72, 28, 104, 40, 252, 23, 31, 142, 97, 13, 247, 191, 213, 6, 128, 25, 110, 211, 171, 71, 218, 216, 220, 225, 71, 194, 52, 208, 243, 201, 67, 118, 125, 247, 228, 179, 201, 252, 147, 21, 84, 230, 123, 36, 224, 237, 12, 130, 9, 157, 68, 116, 189, 150, 51, 210, 32, 140, 219, 227, 148, 135, 172, 69, 26, 185, 11, 128, 174, 178, 124, 38, 51, 168, 148, 23, 135, 163, 227, 177, 160, 79, 117, 32, 20, 68, 2, 134, 137, 94, 234, 183, 61, 85, 157, 17, 179, 107, 58, 212, 7, 96, 77, 114, 154, 122, 165, 67, 46, 113, 210, 229, 199, 1, 154, 19, 115, 10, 237, 181, 238, 16, 5, 132, 90, 27, 114, 34, 212, 37, 213, 231, 96, 46, 162, 65, 253, 52, 74, 112, 73, 63, 61, 214, 139, 159, 29, 204, 63, 148, 106, 106, 162, 142, 130, 91, 22, 133, 245, 253, 152, 187, 82, 56, 44, 176, 37, 158, 177, 170, 205, 175, 5, 161, 186, 9, 236, 209, 242, 255, 88, 218, 133, 89, 197, 192, 109, 104, 113, 203, 26, 206, 255, 245, 189, 11, 75, 254, 202, 173, 214, 228, 34, 156, 98, 239, 85, 58, 69, 3, 195, 171, 241, 8, 180, 13, 108, 18, 92, 60, 216, 25, 43, 154, 86, 39, 140, 95, 226, 44, 251, 249, 127, 54, 19, 200, 203, 61, 100, 110, 34, 77, 44, 152, 150, 70, 91, 62, 11, 92, 179, 15, 191, 87, 196, 169, 49, 105, 99, 108, 133, 98, 20, 202, 24, 120, 252, 251, 172, 115, 139, 93, 23, 166, 160, 3, 163, 173, 215, 165, 62, 183, 63, 148, 138, 188, 72, 50, 4, 130, 239, 247, 176, 137, 152, 81, 45, 147, 112, 96, 153, 152, 7, 198, 112, 232, 79, 48, 196, 227, 56, 150, 89, 249, 208, 167, 237, 242, 167, 1, 99, 204, 0, 196, 215, 199, 119, 98, 74, 221, 159, 83, 254, 214, 232, 245, 217, 58, 126, 100, 109, 49, 9, 194, 240, 43, 225, 243, 68, 32, 150, 85, 202, 30, 49, 144, 126, 21, 70, 54, 227, 15, 174, 7, 87, 4, 217, 161, 190, 116, 145, 87, 10, 127, 230, 241, 151, 101, 14, 192, 35, 110, 121, 102, 173, 80, 222, 163, 25, 91, 169, 5, 132, 65, 65, 52, 48, 74, 54, 146, 0, 0, 0, 0, 158, 0, 170, 204, 125, 7, 37, 66, 227, 7, 143, 142, 250, 14, 74, 132, 100, 14, 224, 72, 135, 9, 111, 198, 25, 9, 197, 10, 181, 27, 229, 211, 43, 27, 79, 31, 200, 28, 192, 145, 86, 28, 106, 93, 79, 21, 175, 87, 209, 21, 5, 155, 50, 18, 138, 21, 172, 18, 32, 217, 43, 49, 187, 124, 181, 49, 17, 176, 86, 54, 158, 62, 200, 54, 52, 242, 209, 63, 241, 248, 79, 63, 91, 52, 172, 56, 212, 186, 50, 56, 126, 118, 158, 42, 94, 175, 0, 42, 244, 99, 227, 45, 123, 237, 125, 45, 209, 33, 100, 36, 20, 43, 250, 36, 190, 231, 25, 35, 49, 105, 135, 35, 155, 165, 86, 98, 118, 249, 200, 98, 220, 53, 43, 101, 83, 187, 181, 101, 249, 119, 172, 108, 60, 125, 50, 108, 150, 177, 209, 107, 25, 63, 79, 107, 179, 243, 227, 121, 147, 42, 125, 121, 57, 230, 158, 126, 182, 104, 0, 126, 28, 164, 25, 119, 217, 174, 135, 119, 115, 98, 100, 112, 252, 236, 250, 112, 86, 32, 125, 83, 205, 133, 227, 83, 103, 73, 0, 84, 232, 199, 158, 84, 66, 11, 135, 93, 135, 1, 25, 93, 45, 205, 250, 90, 162, 67, 100, 90, 8, 143, 200, 72, 40, 86, 86, 72, 130, 154, 181, 79, 13, 20, 43, 79, 167, 216, 50, 70, 98, 210, 172, 70, 200, 30, 79, 65, 71, 144, 209, 65, 237, 92, 237, 194, 157, 41, 115, 194, 55, 229, 144, 197, 184, 107, 14, 197, 18, 167, 23, 204, 215, 173, 137, 204, 125, 97, 106, 203, 242, 239, 244, 203, 88, 35, 88, 217, 120, 250, 198, 217, 210, 54, 37, 222, 93, 184, 187, 222, 247, 116, 162, 215, 50, 126, 60, 215, 152, 178, 223, 208, 23, 60, 65, 208, 189, 240, 198, 243, 38, 85, 88, 243, 140, 153, 187, 244, 3, 23, 37, 244, 169, 219, 60, 253, 108, 209, 162, 253, 198, 29, 65, 250, 73, 147, 223, 250, 227, 95, 115, 232, 195, 134, 237, 232, 105, 74, 14, 239, 230, 196, 144, 239, 76, 8, 137, 230, 137, 2, 23, 230, 35, 206, 244, 225, 172, 64, 106, 225, 6, 140, 187, 160, 235, 208, 37, 160, 65, 28, 198, 167, 206, 146, 88, 167, 100, 94, 65, 174, 161, 84, 223, 174, 11, 152, 60, 169, 132, 22, 162, 169, 46, 218, 14, 187, 14, 3, 144, 187, 164, 207, 115, 188, 43, 65, 237, 188, 129, 141, 244, 181, 68, 135, 106, 181, 238, 75, 137, 178, 97, 197, 23, 178, 203, 9, 144, 145, 80, 172, 14, 145, 250, 96, 237, 150, 117, 238, 115, 150, 223, 34, 106, 159, 26, 40, 244, 159, 176, 228, 23, 152, 63, 106, 137, 152, 149, 166, 37, 138, 181, 127, 187, 138, 31, 179, 88, 141, 144, 61, 198, 141, 58, 241, 223, 132, 255, 251, 65, 132, 85, 55, 162, 131, 218, 185, 60, 131, 112, 117, 218, 133, 59, 83, 68, 133, 145, 159, 167, 130, 30, 17, 57, 130, 180, 221, 32, 139, 113, 215, 190, 139, 219, 27, 93, 140, 84, 149, 195, 140, 254, 89, 111, 158, 222, 128, 241, 158, 116, 76, 18, 153, 251, 194, 140, 153, 81, 14, 149, 144, 148, 4, 11, 144, 62, 200, 232, 151, 177, 70, 118, 151, 27, 138, 241, 180, 128, 47, 111, 180, 42, 227, 140, 179, 165, 109, 18, 179, 15, 161, 11, 186, 202, 171, 149, 186, 96, 103, 118, 189, 239, 233, 232, 189, 69, 37, 68, 175, 101, 252, 218, 175, 207, 48, 57, 168, 64, 190, 167, 168, 234, 114, 190, 161, 47, 120, 32, 161, 133, 180, 195, 166, 10, 58, 93, 166, 160, 246, 140, 231, 77, 170, 18, 231, 231, 102, 241, 224, 104, 232, 111, 224, 194, 36, 118, 233, 7, 46, 232, 233, 173, 226, 11, 238, 34, 108, 149, 238, 136, 160, 57, 252, 168, 121, 167, 252, 2, 181, 68, 251, 141, 59, 218, 251, 39, 247, 195, 242, 226, 253, 93, 242, 72, 49, 190, 245, 199, 191, 32, 245, 109, 115, 167, 214, 246, 214, 57, 214, 92, 26, 218, 209, 211, 148, 68, 209, 121, 88, 93, 216, 188, 82, 195, 216, 22, 158, 32, 223, 153, 16, 190, 223, 51, 220, 18, 205, 19, 5, 140, 205, 185, 201, 111, 202, 54, 71, 241, 202, 156, 139, 232, 195, 89, 129, 118, 195, 243, 77, 149, 196, 124, 195, 11, 196, 214, 15, 55, 71, 166, 122, 169, 71, 12, 182, 74, 64, 131, 56, 212, 64, 41, 244, 205, 73, 236, 254, 83, 73, 70, 50, 176, 78, 201, 188, 46, 78, 99, 112, 130, 92, 67, 169, 28, 92, 233, 101, 255, 91, 102, 235, 97, 91, 204, 39, 120, 82, 9, 45, 230, 82, 163, 225, 5, 85, 44, 111, 155, 85, 134, 163, 28, 118, 29, 6, 130, 118, 183, 202, 97, 113, 56, 68, 255, 113, 146, 136, 230, 120, 87, 130, 120, 120, 253, 78, 155, 127, 114, 192, 5, 127, 216, 12, 169, 109, 248, 213, 55, 109, 82, 25, 212, 106, 221, 151, 74, 106, 119, 91, 83, 99, 178, 81, 205, 99, 24, 157, 46, 100, 151, 19, 176, 100, 61, 223, 97, 37, 208, 131, 255, 37, 122, 79, 28, 34, 245, 193, 130, 34, 95, 13, 155, 43, 154, 7, 5, 43, 48, 203, 230, 44, 191, 69, 120, 44, 21, 137, 212, 62, 53, 80, 74, 62, 159, 156, 169, 57, 16, 18, 55, 57, 186, 222, 46, 48, 127, 212, 176, 48, 213, 24, 83, 55, 90, 150, 205, 55, 240, 90, 74, 20, 107, 255, 212, 20, 193, 51, 55, 19, 78, 189, 169, 19, 228, 113, 176, 26, 33, 123, 46, 26, 139, 183, 205, 29, 4, 57, 83, 29, 174, 245, 255, 15, 142, 44, 97, 15, 36, 224, 130, 8, 171, 110, 28, 8, 1, 162, 5, 1, 196, 168, 155, 1, 110, 100, 120, 6, 225, 234, 230, 6, 75, 38, 0, 0, 0, 0, 67, 20, 123, 23, 134, 40, 246, 46, 197, 60, 141, 57, 12, 81, 236, 93, 79, 69, 151, 74, 138, 121, 26, 115, 201, 109, 97, 100, 24, 162, 216, 187, 91, 182, 163, 172, 158, 138, 46, 149, 221, 158, 85, 130, 20, 243, 52, 230, 87, 231, 79, 241, 146, 219, 194, 200, 209, 207, 185, 223, 113, 66, 192, 172, 50, 86, 187, 187, 247, 106, 54, 130, 180, 126, 77, 149, 125, 19, 44, 241, 62, 7, 87, 230, 251, 59, 218, 223, 184, 47, 161, 200, 105, 224, 24, 23, 42, 244, 99, 0, 239, 200, 238, 57, 172, 220, 149, 46, 101, 177, 244, 74, 38, 165, 143, 93, 227, 153, 2, 100, 160, 141, 121, 115, 163, 130, 241, 130, 224, 150, 138, 149, 37, 170, 7, 172, 102, 190, 124, 187, 175, 211, 29, 223, 236, 199, 102, 200, 41, 251, 235, 241, 106, 239, 144, 230, 187, 32, 41, 57, 248, 52, 82, 46, 61, 8, 223, 23, 126, 28, 164, 0, 183, 113, 197, 100, 244, 101, 190, 115, 49, 89, 51, 74, 114, 77, 72, 93, 210, 192, 49, 46, 145, 212, 74, 57, 84, 232, 199, 0, 23, 252, 188, 23, 222, 145, 221, 115, 157, 133, 166, 100, 88, 185, 43, 93, 27, 173, 80, 74, 202, 98, 233, 149, 137, 118, 146, 130, 76, 74, 31, 187, 15, 94, 100, 172, 198, 51, 5, 200, 133, 39, 126, 223, 64, 27, 243, 230, 3, 15, 136, 241, 7, 3, 146, 222, 68, 23, 233, 201, 129, 43, 100, 240, 194, 63, 31, 231, 11, 82, 126, 131, 72, 70, 5, 148, 141, 122, 136, 173, 206, 110, 243, 186, 31, 161, 74, 101, 92, 181, 49, 114, 153, 137, 188, 75, 218, 157, 199, 92, 19, 240, 166, 56, 80, 228, 221, 47, 149, 216, 80, 22, 214, 204, 43, 1, 118, 65, 82, 114, 53, 85, 41, 101, 240, 105, 164, 92, 179, 125, 223, 75, 122, 16, 190, 47, 57, 4, 197, 56, 252, 56, 72, 1, 191, 44, 51, 22, 110, 227, 138, 201, 45, 247, 241, 222, 232, 203, 124, 231, 171, 223, 7, 240, 98, 178, 102, 148, 33, 166, 29, 131, 228, 154, 144, 186, 167, 142, 235, 173, 164, 129, 99, 92, 231, 149, 24, 75, 34, 169, 149, 114, 97, 189, 238, 101, 168, 208, 143, 1, 235, 196, 244, 22, 46, 248, 121, 47, 109, 236, 2, 56, 188, 35, 187, 231, 255, 55, 192, 240, 58, 11, 77, 201, 121, 31, 54, 222, 176, 114, 87, 186, 243, 102, 44, 173, 54, 90, 161, 148, 117, 78, 218, 131, 213, 195, 163, 240, 150, 215, 216, 231, 83, 235, 85, 222, 16, 255, 46, 201, 217, 146, 79, 173, 154, 134, 52, 186, 95, 186, 185, 131, 28, 174, 194, 148, 205, 97, 123, 75, 142, 117, 0, 92, 75, 73, 141, 101, 8, 93, 246, 114, 193, 48, 151, 22, 130, 36, 236, 1, 71, 24, 97, 56, 4, 12, 26, 47, 79, 0, 85, 102, 12, 20, 46, 113, 201, 40, 163, 72, 138, 60, 216, 95, 67, 81, 185, 59, 0, 69, 194, 44, 197, 121, 79, 21, 134, 109, 52, 2, 87, 162, 141, 221, 20, 182, 246, 202, 209, 138, 123, 243, 146, 158, 0, 228, 91, 243, 97, 128, 24, 231, 26, 151, 221, 219, 151, 174, 158, 207, 236, 185, 62, 66, 149, 202, 125, 86, 238, 221, 184, 106, 99, 228, 251, 126, 24, 243, 50, 19, 121, 151, 113, 7, 2, 128, 180, 59, 143, 185, 247, 47, 244, 174, 38, 224, 77, 113, 101, 244, 54, 102, 160, 200, 187, 95, 227, 220, 192, 72, 42, 177, 161, 44, 105, 165, 218, 59, 172, 153, 87, 2, 239, 141, 44, 21, 236, 130, 164, 228, 175, 150, 223, 243, 106, 170, 82, 202, 41, 190, 41, 221, 224, 211, 72, 185, 163, 199, 51, 174, 102, 251, 190, 151, 37, 239, 197, 128, 244, 32, 124, 95, 183, 52, 7, 72, 114, 8, 138, 113, 49, 28, 241, 102, 248, 113, 144, 2, 187, 101, 235, 21, 126, 89, 102, 44, 61, 77, 29, 59, 157, 192, 100, 72, 222, 212, 31, 95, 27, 232, 146, 102, 88, 252, 233, 113, 145, 145, 136, 21, 210, 133, 243, 2, 23, 185, 126, 59, 84, 173, 5, 44, 133, 98, 188, 243, 198, 118, 199, 228, 3, 74, 74, 221, 64, 94, 49, 202, 137, 51, 80, 174, 202, 39, 43, 185, 15, 27, 166, 128, 76, 15, 221, 151, 72, 3, 199, 184, 11, 23, 188, 175, 206, 43, 49, 150, 141, 63, 74, 129, 68, 82, 43, 229, 7, 70, 80, 242, 194, 122, 221, 203, 129, 110, 166, 220, 80, 161, 31, 3, 19, 181, 100, 20, 214, 137, 233, 45, 149, 157, 146, 58, 92, 240, 243, 94, 31, 228, 136, 73, 218, 216, 5, 112, 153, 204, 126, 103, 57, 65, 7, 20, 122, 85, 124, 3, 191, 105, 241, 58, 252, 125, 138, 45, 53, 16, 235, 73, 118, 4, 144, 94, 179, 56, 29, 103, 240, 44, 102, 112, 33, 227, 223, 175, 98, 247, 164, 184, 167, 203, 41, 129, 228, 223, 82, 150, 45, 178, 51, 242, 110, 166, 72, 229, 171, 154, 197, 220, 232, 142, 190, 203, 235, 129, 54, 58, 168, 149, 77, 45, 109, 169, 192, 20, 46, 189, 187, 3, 231, 208, 218, 103, 164, 196, 161, 112, 97, 248, 44, 73, 34, 236, 87, 94, 243, 35, 238, 129, 176, 55, 149, 150, 117, 11, 24, 175, 54, 31, 99, 184, 255, 114, 2, 220, 188, 102, 121, 203, 121, 90, 244, 242, 58, 78, 143, 229, 154, 195, 246, 150, 217, 215, 141, 129, 28, 235, 0, 184, 95, 255, 123, 175, 150, 146, 26, 203, 213, 134, 97, 220, 16, 186, 236, 229, 83, 174, 151, 242, 130, 97, 46, 45, 193, 117, 85, 58, 4, 73, 216, 3, 71, 93, 163, 20, 142, 48, 194, 112, 205, 36, 185, 103, 8, 24, 52, 94, 75, 12, 79, 73, 0, 0, 0, 0, 62, 107, 194, 239, 61, 208, 245, 4, 3, 187, 55, 235, 122, 160, 235, 9, 68, 203, 41, 230, 71, 112, 30, 13, 121, 27, 220, 226, 244, 64, 215, 19, 202, 43, 21, 252, 201, 144, 34, 23, 247, 251, 224, 248, 142, 224, 60, 26, 176, 139, 254, 245, 179, 48, 201, 30, 141, 91, 11, 241, 232, 129, 174, 39, 214, 234, 108, 200, 213, 81, 91, 35, 235, 58, 153, 204, 146, 33, 69, 46, 172, 74, 135, 193, 175, 241, 176, 42, 145, 154, 114, 197, 28, 193, 121, 52, 34, 170, 187, 219, 33, 17, 140, 48, 31, 122, 78, 223, 102, 97, 146, 61, 88, 10, 80, 210, 91, 177, 103, 57, 101, 218, 165, 214, 208, 3, 93, 79, 238, 104, 159, 160, 237, 211, 168, 75, 211, 184, 106, 164, 170, 163, 182, 70, 148, 200, 116, 169, 151, 115, 67, 66, 169, 24, 129, 173, 36, 67, 138, 92, 26, 40, 72, 179, 25, 147, 127, 88, 39, 248, 189, 183, 94, 227, 97, 85, 96, 136, 163, 186, 99, 51, 148, 81, 93, 88, 86, 190, 56, 130, 243, 104, 6, 233, 49, 135, 5, 82, 6, 108, 59, 57, 196, 131, 66, 34, 24, 97, 124, 73, 218, 142, 127, 242, 237, 101, 65, 153, 47, 138, 204, 194, 36, 123, 242, 169, 230, 148, 241, 18, 209, 127, 207, 121, 19, 144, 182, 98, 207, 114, 136, 9, 13, 157, 139, 178, 58, 118, 181, 217, 248, 153, 160, 7, 186, 158, 158, 108, 120, 113, 157, 215, 79, 154, 163, 188, 141, 117, 218, 167, 81, 151, 228, 204, 147, 120, 231, 119, 164, 147, 217, 28, 102, 124, 84, 71, 109, 141, 106, 44, 175, 98, 105, 151, 152, 137, 87, 252, 90, 102, 46, 231, 134, 132, 16, 140, 68, 107, 19, 55, 115, 128, 45, 92, 177, 111, 72, 134, 20, 185, 118, 237, 214, 86, 117, 86, 225, 189, 75, 61, 35, 82, 50, 38, 255, 176, 12, 77, 61, 95, 15, 246, 10, 180, 49, 157, 200, 91, 188, 198, 195, 170, 130, 173, 1, 69, 129, 22, 54, 174, 191, 125, 244, 65, 198, 102, 40, 163, 248, 13, 234, 76, 251, 182, 221, 167, 197, 221, 31, 72, 112, 4, 231, 209, 78, 111, 37, 62, 77, 212, 18, 213, 115, 191, 208, 58, 10, 164, 12, 216, 52, 207, 206, 55, 55, 116, 249, 220, 9, 31, 59, 51, 132, 68, 48, 194, 186, 47, 242, 45, 185, 148, 197, 198, 135, 255, 7, 41, 254, 228, 219, 203, 192, 143, 25, 36, 195, 52, 46, 207, 253, 95, 236, 32, 152, 133, 73, 246, 166, 238, 139, 25, 165, 85, 188, 242, 155, 62, 126, 29, 226, 37, 162, 255, 220, 78, 96, 16, 223, 245, 87, 251, 225, 158, 149, 20, 108, 197, 158, 229, 82, 174, 92, 10, 81, 21, 107, 225, 111, 126, 169, 14, 22, 101, 117, 236, 40, 14, 183, 3, 43, 181, 128, 232, 21, 222, 66, 7, 1, 9, 5, 230, 63, 98, 199, 9, 60, 217, 240, 226, 2, 178, 50, 13, 123, 169, 238, 239, 69, 194, 44, 0, 70, 121, 27, 235, 120, 18, 217, 4, 245, 73, 210, 245, 203, 34, 16, 26, 200, 153, 39, 241, 246, 242, 229, 30, 143, 233, 57, 252, 177, 130, 251, 19, 178, 57, 204, 248, 140, 82, 14, 23, 233, 136, 171, 193, 215, 227, 105, 46, 212, 88, 94, 197, 234, 51, 156, 42, 147, 40, 64, 200, 173, 67, 130, 39, 174, 248, 181, 204, 144, 147, 119, 35, 29, 200, 124, 210, 35, 163, 190, 61, 32, 24, 137, 214, 30, 115, 75, 57, 103, 104, 151, 219, 89, 3, 85, 52, 90, 184, 98, 223, 100, 211, 160, 48, 209, 10, 88, 169, 239, 97, 154, 70, 236, 218, 173, 173, 210, 177, 111, 66, 171, 170, 179, 160, 149, 193, 113, 79, 150, 122, 70, 164, 168, 17, 132, 75, 37, 74, 143, 186, 27, 33, 77, 85, 24, 154, 122, 190, 38, 241, 184, 81, 95, 234, 100, 179, 97, 129, 166, 92, 98, 58, 145, 183, 92, 81, 83, 88, 57, 139, 246, 142, 7, 224, 52, 97, 4, 91, 3, 138, 58, 48, 193, 101, 67, 43, 29, 135, 125, 64, 223, 104, 126, 251, 232, 131, 64, 144, 42, 108, 205, 203, 33, 157, 243, 160, 227, 114, 240, 27, 212, 153, 206, 112, 22, 118, 183, 107, 202, 148, 137, 0, 8, 123, 138, 187, 63, 144, 180, 208, 253, 127, 161, 14, 191, 120, 159, 101, 125, 151, 156, 222, 74, 124, 162, 181, 136, 147, 219, 174, 84, 113, 229, 197, 150, 158, 230, 126, 161, 117, 216, 21, 99, 154, 85, 78, 104, 107, 107, 37, 170, 132, 104, 158, 157, 111, 86, 245, 95, 128, 47, 238, 131, 98, 17, 133, 65, 141, 18, 62, 118, 102, 44, 85, 180, 137, 73, 143, 17, 95, 119, 228, 211, 176, 116, 95, 228, 91, 74, 52, 38, 180, 51, 47, 250, 86, 13, 68, 56, 185, 14, 255, 15, 82, 48, 148, 205, 189, 189, 207, 198, 76, 131, 164, 4, 163, 128, 31, 51, 72, 190, 116, 241, 167, 199, 111, 45, 69, 249, 4, 239, 170, 250, 191, 216, 65, 196, 212, 26, 174, 113, 13, 226, 55, 79, 102, 32, 216, 76, 221, 23, 51, 114, 182, 213, 220, 11, 173, 9, 62, 53, 198, 203, 209, 54, 125, 252, 58, 8, 22, 62, 213, 133, 77, 53, 36, 187, 38, 247, 203, 184, 157, 192, 32, 134, 246, 2, 207, 255, 237, 222, 45, 193, 134, 28, 194, 194, 61, 43, 41, 252, 86, 233, 198, 153, 140, 76, 16, 167, 231, 142, 255, 164, 92, 185, 20, 154, 55, 123, 251, 227, 44, 167, 25, 221, 71, 101, 246, 222, 252, 82, 29, 224, 151, 144, 242, 109, 204, 155, 3, 83, 167, 89, 236, 80, 28, 110, 7, 110, 119, 172, 232, 23, 108, 112, 10, 41, 7, 178, 229, 42, 188, 133, 14, 20, 215, 71, 225, 0, 0, 0, 0, 192, 223, 142, 193, 193, 185, 108, 88, 1, 102, 226, 153, 130, 115, 217, 176, 66, 172, 87, 113, 67, 202, 181, 232, 131, 21, 59, 41, 69, 225, 195, 186, 133, 62, 77, 123, 132, 88, 175, 226, 68, 135, 33, 35, 199, 146, 26, 10, 7, 77, 148, 203, 6, 43, 118, 82, 198, 244, 248, 147, 203, 196, 246, 174, 11, 27, 120, 111, 10, 125, 154, 246, 202, 162, 20, 55, 73, 183, 47, 30, 137, 104, 161, 223, 136, 14, 67, 70, 72, 209, 205, 135, 142, 37, 53, 20, 78, 250, 187, 213, 79, 156, 89, 76, 143, 67, 215, 141, 12, 86, 236, 164, 204, 137, 98, 101, 205, 239, 128, 252, 13, 48, 14, 61, 215, 143, 156, 134, 23, 80, 18, 71, 22, 54, 240, 222, 214, 233, 126, 31, 85, 252, 69, 54, 149, 35, 203, 247, 148, 69, 41, 110, 84, 154, 167, 175, 146, 110, 95, 60, 82, 177, 209, 253, 83, 215, 51, 100, 147, 8, 189, 165, 16, 29, 134, 140, 208, 194, 8, 77, 209, 164, 234, 212, 17, 123, 100, 21, 28, 75, 106, 40, 220, 148, 228, 233, 221, 242, 6, 112, 29, 45, 136, 177, 158, 56, 179, 152, 94, 231, 61, 89, 95, 129, 223, 192, 159, 94, 81, 1, 89, 170, 169, 146, 153, 117, 39, 83, 152, 19, 197, 202, 88, 204, 75, 11, 219, 217, 112, 34, 27, 6, 254, 227, 26, 96, 28, 122, 218, 191, 146, 187, 239, 25, 72, 214, 47, 198, 198, 23, 46, 160, 36, 142, 238, 127, 170, 79, 109, 106, 145, 102, 173, 181, 31, 167, 172, 211, 253, 62, 108, 12, 115, 255, 170, 248, 139, 108, 106, 39, 5, 173, 107, 65, 231, 52, 171, 158, 105, 245, 40, 139, 82, 220, 232, 84, 220, 29, 233, 50, 62, 132, 41, 237, 176, 69, 36, 221, 190, 120, 228, 2, 48, 185, 229, 100, 210, 32, 37, 187, 92, 225, 166, 174, 103, 200, 102, 113, 233, 9, 103, 23, 11, 144, 167, 200, 133, 81, 97, 60, 125, 194, 161, 227, 243, 3, 160, 133, 17, 154, 96, 90, 159, 91, 227, 79, 164, 114, 35, 144, 42, 179, 34, 246, 200, 42, 226, 41, 70, 235, 56, 150, 212, 80, 248, 73, 90, 145, 249, 47, 184, 8, 57, 240, 54, 201, 186, 229, 13, 224, 122, 58, 131, 33, 123, 92, 97, 184, 187, 131, 239, 121, 125, 119, 23, 234, 189, 168, 153, 43, 188, 206, 123, 178, 124, 17, 245, 115, 255, 4, 206, 90, 63, 219, 64, 155, 62, 189, 162, 2, 254, 98, 44, 195, 243, 82, 34, 254, 51, 141, 172, 63, 50, 235, 78, 166, 242, 52, 192, 103, 113, 33, 251, 78, 177, 254, 117, 143, 176, 152, 151, 22, 112, 71, 25, 215, 182, 179, 225, 68, 118, 108, 111, 133, 119, 10, 141, 28, 183, 213, 3, 221, 52, 192, 56, 244, 244, 31, 182, 53, 245, 121, 84, 172, 53, 166, 218, 109, 159, 53, 225, 119, 95, 234, 111, 182, 94, 140, 141, 47, 158, 83, 3, 238, 29, 70, 56, 199, 221, 153, 182, 6, 220, 255, 84, 159, 28, 32, 218, 94, 218, 212, 34, 205, 26, 11, 172, 12, 27, 109, 78, 149, 219, 178, 192, 84, 88, 167, 251, 125, 152, 120, 117, 188, 153, 30, 151, 37, 89, 193, 25, 228, 84, 241, 23, 217, 148, 46, 153, 24, 149, 72, 123, 129, 85, 151, 245, 64, 214, 130, 206, 105, 22, 93, 64, 168, 23, 59, 162, 49, 215, 228, 44, 240, 17, 16, 212, 99, 209, 207, 90, 162, 208, 169, 184, 59, 16, 118, 54, 250, 147, 99, 13, 211, 83, 188, 131, 18, 82, 218, 97, 139, 146, 5, 239, 74, 72, 186, 125, 241, 136, 101, 243, 48, 137, 3, 17, 169, 73, 220, 159, 104, 202, 201, 164, 65, 10, 22, 42, 128, 11, 112, 200, 25, 203, 175, 70, 216, 13, 91, 190, 75, 205, 132, 48, 138, 204, 226, 210, 19, 12, 61, 92, 210, 143, 40, 103, 251, 79, 247, 233, 58, 78, 145, 11, 163, 142, 78, 133, 98, 131, 126, 139, 95, 67, 161, 5, 158, 66, 199, 231, 7, 130, 24, 105, 198, 1, 13, 82, 239, 193, 210, 220, 46, 192, 180, 62, 183, 0, 107, 176, 118, 198, 159, 72, 229, 6, 64, 198, 36, 7, 38, 36, 189, 199, 249, 170, 124, 68, 236, 145, 85, 132, 51, 31, 148, 133, 85, 253, 13, 69, 138, 115, 204, 112, 44, 169, 161, 176, 243, 39, 96, 177, 149, 197, 249, 113, 74, 75, 56, 242, 95, 112, 17, 50, 128, 254, 208, 51, 230, 28, 73, 243, 57, 146, 136, 53, 205, 106, 27, 245, 18, 228, 218, 244, 116, 6, 67, 52, 171, 136, 130, 183, 190, 179, 171, 119, 97, 61, 106, 118, 7, 223, 243, 182, 216, 81, 50, 187, 232, 95, 15, 123, 55, 209, 206, 122, 81, 51, 87, 186, 142, 189, 150, 57, 155, 134, 191, 249, 68, 8, 126, 248, 34, 234, 231, 56, 253, 100, 38, 254, 9, 156, 181, 62, 214, 18, 116, 63, 176, 240, 237, 255, 111, 126, 44, 124, 122, 69, 5, 188, 165, 203, 196, 189, 195, 41, 93, 125, 28, 167, 156, 167, 163, 53, 39, 103, 124, 187, 230, 102, 26, 89, 127, 166, 197, 215, 190, 37, 208, 236, 151, 229, 15, 98, 86, 228, 105, 128, 207, 36, 182, 14, 14, 226, 66, 246, 157, 34, 157, 120, 92, 35, 251, 154, 197, 227, 36, 20, 4, 96, 49, 47, 45, 160, 238, 161, 236, 161, 136, 67, 117, 97, 87, 205, 180, 108, 103, 195, 137, 172, 184, 77, 72, 173, 222, 175, 209, 109, 1, 33, 16, 238, 20, 26, 57, 46, 203, 148, 248, 47, 173, 118, 97, 239, 114, 248, 160, 41, 134, 0, 51, 233, 89, 142, 242, 232, 63, 108, 107, 40, 224, 226, 170, 171, 245, 217, 131, 107, 42, 87, 66, 106, 76, 181, 219, 170, 147, 59, 26, 0, 0, 0, 0, 111, 76, 165, 155, 159, 158, 59, 236, 240, 210, 158, 119, 127, 59, 6, 3, 16, 119, 163, 152, 224, 165, 61, 239, 143, 233, 152, 116, 254, 118, 12, 6, 145, 58, 169, 157, 97, 232, 55, 234, 14, 164, 146, 113, 129, 77, 10, 5, 238, 1, 175, 158, 30, 211, 49, 233, 113, 159, 148, 114, 252, 237, 24, 12, 147, 161, 189, 151, 99, 115, 35, 224, 12, 63, 134, 123, 131, 214, 30, 15, 236, 154, 187, 148, 28, 72, 37, 227, 115, 4, 128, 120, 2, 155, 20, 10, 109, 215, 177, 145, 157, 5, 47, 230, 242, 73, 138, 125, 125, 160, 18, 9, 18, 236, 183, 146, 226, 62, 41, 229, 141, 114, 140, 126, 248, 219, 49, 24, 151, 151, 148, 131, 103, 69, 10, 244, 8, 9, 175, 111, 135, 224, 55, 27, 232, 172, 146, 128, 24, 126, 12, 247, 119, 50, 169, 108, 6, 173, 61, 30, 105, 225, 152, 133, 153, 51, 6, 242, 246, 127, 163, 105, 121, 150, 59, 29, 22, 218, 158, 134, 230, 8, 0, 241, 137, 68, 165, 106, 4, 54, 41, 20, 107, 122, 140, 143, 155, 168, 18, 248, 244, 228, 183, 99, 123, 13, 47, 23, 20, 65, 138, 140, 228, 147, 20, 251, 139, 223, 177, 96, 250, 64, 37, 18, 149, 12, 128, 137, 101, 222, 30, 254, 10, 146, 187, 101, 133, 123, 35, 17, 234, 55, 134, 138, 26, 229, 24, 253, 117, 169, 189, 102, 240, 183, 99, 48, 159, 251, 198, 171, 111, 41, 88, 220, 0, 101, 253, 71, 143, 140, 101, 51, 224, 192, 192, 168, 16, 18, 94, 223, 127, 94, 251, 68, 14, 193, 111, 54, 97, 141, 202, 173, 145, 95, 84, 218, 254, 19, 241, 65, 113, 250, 105, 53, 30, 182, 204, 174, 238, 100, 82, 217, 129, 40, 247, 66, 12, 90, 123, 60, 99, 22, 222, 167, 147, 196, 64, 208, 252, 136, 229, 75, 115, 97, 125, 63, 28, 45, 216, 164, 236, 255, 70, 211, 131, 179, 227, 72, 242, 44, 119, 58, 157, 96, 210, 161, 109, 178, 76, 214, 2, 254, 233, 77, 141, 23, 113, 57, 226, 91, 212, 162, 18, 137, 74, 213, 125, 197, 239, 78, 8, 108, 82, 40, 103, 32, 247, 179, 151, 242, 105, 196, 248, 190, 204, 95, 119, 87, 84, 43, 24, 27, 241, 176, 232, 201, 111, 199, 135, 133, 202, 92, 246, 26, 94, 46, 153, 86, 251, 181, 105, 132, 101, 194, 6, 200, 192, 89, 137, 33, 88, 45, 230, 109, 253, 182, 22, 191, 99, 193, 121, 243, 198, 90, 244, 129, 74, 36, 155, 205, 239, 191, 107, 31, 113, 200, 4, 83, 212, 83, 139, 186, 76, 39, 228, 246, 233, 188, 20, 36, 119, 203, 123, 104, 210, 80, 10, 247, 70, 34, 101, 187, 227, 185, 149, 105, 125, 206, 250, 37, 216, 85, 117, 204, 64, 33, 26, 128, 229, 186, 234, 82, 123, 205, 133, 30, 222, 86, 224, 111, 199, 96, 143, 35, 98, 251, 127, 241, 252, 140, 16, 189, 89, 23, 159, 84, 193, 99, 240, 24, 100, 248, 0, 202, 250, 143, 111, 134, 95, 20, 30, 25, 203, 102, 113, 85, 110, 253, 129, 135, 240, 138, 238, 203, 85, 17, 97, 34, 205, 101, 14, 110, 104, 254, 254, 188, 246, 137, 145, 240, 83, 18, 28, 130, 223, 108, 115, 206, 122, 247, 131, 28, 228, 128, 236, 80, 65, 27, 99, 185, 217, 111, 12, 245, 124, 244, 252, 39, 226, 131, 147, 107, 71, 24, 226, 244, 211, 106, 141, 184, 118, 241, 125, 106, 232, 134, 18, 38, 77, 29, 157, 207, 213, 105, 242, 131, 112, 242, 2, 81, 238, 133, 109, 29, 75, 30, 24, 180, 246, 120, 119, 248, 83, 227, 135, 42, 205, 148, 232, 102, 104, 15, 103, 143, 240, 123, 8, 195, 85, 224, 248, 17, 203, 151, 151, 93, 110, 12, 230, 194, 250, 126, 137, 142, 95, 229, 121, 92, 193, 146, 22, 16, 100, 9, 153, 249, 252, 125, 246, 181, 89, 230, 6, 103, 199, 145, 105, 43, 98, 10, 228, 89, 238, 116, 139, 21, 75, 239, 123, 199, 213, 152, 20, 139, 112, 3, 155, 98, 232, 119, 244, 46, 77, 236, 4, 252, 211, 155, 107, 176, 118, 0, 26, 47, 226, 114, 117, 99, 71, 233, 133, 177, 217, 158, 234, 253, 124, 5, 101, 20, 228, 113, 10, 88, 65, 234, 250, 138, 223, 157, 149, 198, 122, 6, 16, 216, 164, 80, 127, 148, 1, 203, 143, 70, 159, 188, 224, 10, 58, 39, 111, 227, 162, 83, 0, 175, 7, 200, 240, 125, 153, 191, 159, 49, 60, 36, 238, 174, 168, 86, 129, 226, 13, 205, 113, 48, 147, 186, 30, 124, 54, 33, 145, 149, 174, 85, 254, 217, 11, 206, 14, 11, 149, 185, 97, 71, 48, 34, 236, 53, 188, 92, 131, 121, 25, 199, 115, 171, 135, 176, 28, 231, 34, 43, 147, 14, 186, 95, 252, 66, 31, 196, 12, 144, 129, 179, 99, 220, 36, 40, 18, 67, 176, 90, 125, 15, 21, 193, 141, 221, 139, 182, 226, 145, 46, 45, 109, 120, 182, 89, 2, 52, 19, 194, 242, 230, 141, 181, 157, 170, 40, 46, 232, 3, 149, 72, 135, 79, 48, 211, 119, 157, 174, 164, 24, 209, 11, 63, 151, 56, 147, 75, 248, 116, 54, 208, 8, 166, 168, 167, 103, 234, 13, 60, 22, 117, 153, 78, 121, 57, 60, 213, 137, 235, 162, 162, 230, 167, 7, 57, 105, 78, 159, 77, 6, 2, 58, 214, 246, 208, 164, 161, 153, 156, 1, 58, 20, 238, 141, 68, 123, 162, 40, 223, 139, 112, 182, 168, 228, 60, 19, 51, 107, 213, 139, 71, 4, 153, 46, 220, 244, 75, 176, 171, 155, 7, 21, 48, 234, 152, 129, 66, 133, 212, 36, 217, 117, 6, 186, 174, 26, 74, 31, 53, 149, 163, 135, 65, 250, 239, 34, 218, 10, 61, 188, 173, 101, 113, 25, 54, 0, 0, 0, 0, 133, 217, 150, 221, 75, 181, 92, 96, 206, 108, 202, 189, 150, 106, 185, 192, 19, 179, 47, 29, 221, 223, 229, 160, 88, 6, 115, 125, 109, 211, 3, 90, 232, 10, 149, 135, 38, 102, 95, 58, 163, 191, 201, 231, 251, 185, 186, 154, 126, 96, 44, 71, 176, 12, 230, 250, 53, 213, 112, 39, 218, 166, 7, 180, 95, 127, 145, 105, 145, 19, 91, 212, 20, 202, 205, 9, 76, 204, 190, 116, 201, 21, 40, 169, 7, 121, 226, 20, 130, 160, 116, 201, 183, 117, 4, 238, 50, 172, 146, 51, 252, 192, 88, 142, 121, 25, 206, 83, 33, 31, 189, 46, 164, 198, 43, 243, 106, 170, 225, 78, 239, 115, 119, 147, 245, 75, 126, 179, 112, 146, 232, 110, 190, 254, 34, 211, 59, 39, 180, 14, 99, 33, 199, 115, 230, 248, 81, 174, 40, 148, 155, 19, 173, 77, 13, 206, 152, 152, 125, 233, 29, 65, 235, 52, 211, 45, 33, 137, 86, 244, 183, 84, 14, 242, 196, 41, 139, 43, 82, 244, 69, 71, 152, 73, 192, 158, 14, 148, 47, 237, 121, 7, 170, 52, 239, 218, 100, 88, 37, 103, 225, 129, 179, 186, 185, 135, 192, 199, 60, 94, 86, 26, 242, 50, 156, 167, 119, 235, 10, 122, 66, 62, 122, 93, 199, 231, 236, 128, 9, 139, 38, 61, 140, 82, 176, 224, 212, 84, 195, 157, 81, 141, 85, 64, 159, 225, 159, 253, 26, 56, 9, 32, 171, 145, 141, 189, 46, 72, 27, 96, 224, 36, 209, 221, 101, 253, 71, 0, 61, 251, 52, 125, 184, 34, 162, 160, 118, 78, 104, 29, 243, 151, 254, 192, 198, 66, 142, 231, 67, 155, 24, 58, 141, 247, 210, 135, 8, 46, 68, 90, 80, 40, 55, 39, 213, 241, 161, 250, 27, 157, 107, 71, 158, 68, 253, 154, 113, 55, 138, 9, 244, 238, 28, 212, 58, 130, 214, 105, 191, 91, 64, 180, 231, 93, 51, 201, 98, 132, 165, 20, 172, 232, 111, 169, 41, 49, 249, 116, 28, 228, 137, 83, 153, 61, 31, 142, 87, 81, 213, 51, 210, 136, 67, 238, 138, 142, 48, 147, 15, 87, 166, 78, 193, 59, 108, 243, 68, 226, 250, 46, 94, 218, 243, 14, 219, 3, 101, 211, 21, 111, 175, 110, 144, 182, 57, 179, 200, 176, 74, 206, 77, 105, 220, 19, 131, 5, 22, 174, 6, 220, 128, 115, 51, 9, 240, 84, 182, 208, 102, 137, 120, 188, 172, 52, 253, 101, 58, 233, 165, 99, 73, 148, 32, 186, 223, 73, 238, 214, 21, 244, 107, 15, 131, 41, 132, 124, 244, 186, 1, 165, 98, 103, 207, 201, 168, 218, 74, 16, 62, 7, 18, 22, 77, 122, 151, 207, 219, 167, 89, 163, 17, 26, 220, 122, 135, 199, 233, 175, 247, 224, 108, 118, 97, 61, 162, 26, 171, 128, 39, 195, 61, 93, 127, 197, 78, 32, 250, 28, 216, 253, 52, 112, 18, 64, 177, 169, 132, 157, 23, 37, 106, 160, 146, 252, 252, 125, 92, 144, 54, 192, 217, 73, 160, 29, 129, 79, 211, 96, 4, 150, 69, 189, 202, 250, 143, 0, 79, 35, 25, 221, 122, 246, 105, 250, 255, 47, 255, 39, 49, 67, 53, 154, 180, 154, 163, 71, 236, 156, 208, 58, 105, 69, 70, 231, 167, 41, 140, 90, 34, 240, 26, 135, 205, 131, 109, 20, 72, 90, 251, 201, 134, 54, 49, 116, 3, 239, 167, 169, 91, 233, 212, 212, 222, 48, 66, 9, 16, 92, 136, 180, 149, 133, 30, 105, 160, 80, 110, 78, 37, 137, 248, 147, 235, 229, 50, 46, 110, 60, 164, 243, 54, 58, 215, 142, 179, 227, 65, 83, 125, 143, 139, 238, 248, 86, 29, 51, 226, 110, 20, 19, 103, 183, 130, 206, 169, 219, 72, 115, 44, 2, 222, 174, 116, 4, 173, 211, 241, 221, 59, 14, 63, 177, 241, 179, 186, 104, 103, 110, 143, 189, 23, 73, 10, 100, 129, 148, 196, 8, 75, 41, 65, 209, 221, 244, 25, 215, 174, 137, 156, 14, 56, 84, 82, 98, 242, 233, 215, 187, 100, 52, 56, 200, 19, 167, 189, 17, 133, 122, 115, 125, 79, 199, 246, 164, 217, 26, 174, 162, 170, 103, 43, 123, 60, 186, 229, 23, 246, 7, 96, 206, 96, 218, 85, 27, 16, 253, 208, 194, 134, 32, 30, 174, 76, 157, 155, 119, 218, 64, 195, 113, 169, 61, 70, 168, 63, 224, 136, 196, 245, 93, 13, 29, 99, 128, 188, 180, 231, 29, 57, 109, 113, 192, 247, 1, 187, 125, 114, 216, 45, 160, 42, 222, 94, 221, 175, 7, 200, 0, 97, 107, 2, 189, 228, 178, 148, 96, 209, 103, 228, 71, 84, 190, 114, 154, 154, 210, 184, 39, 31, 11, 46, 250, 71, 13, 93, 135, 194, 212, 203, 90, 12, 184, 1, 231, 137, 97, 151, 58, 102, 18, 224, 169, 227, 203, 118, 116, 45, 167, 188, 201, 168, 126, 42, 20, 240, 120, 89, 105, 117, 161, 207, 180, 187, 205, 5, 9, 62, 20, 147, 212, 11, 193, 227, 243, 142, 24, 117, 46, 64, 116, 191, 147, 197, 173, 41, 78, 157, 171, 90, 51, 24, 114, 204, 238, 214, 30, 6, 83, 83, 199, 144, 142, 73, 255, 153, 174, 204, 38, 15, 115, 2, 74, 197, 206, 135, 147, 83, 19, 223, 149, 32, 110, 90, 76, 182, 179, 148, 32, 124, 14, 17, 249, 234, 211, 36, 44, 154, 244, 161, 245, 12, 41, 111, 153, 198, 148, 234, 64, 80, 73, 178, 70, 35, 52, 55, 159, 181, 233, 249, 243, 127, 84, 124, 42, 233, 137, 147, 89, 158, 26, 22, 128, 8, 199, 216, 236, 194, 122, 93, 53, 84, 167, 5, 51, 39, 218, 128, 234, 177, 7, 78, 134, 123, 186, 203, 95, 237, 103, 254, 138, 157, 64, 123, 83, 11, 157, 181, 63, 193, 32, 48, 230, 87, 253, 104, 224, 36, 128, 237, 57, 178, 93, 35, 85, 120, 224, 166, 140, 238, 61, 0, 0, 0, 0, 118, 225, 15, 157, 173, 196, 110, 225, 219, 37, 97, 124, 27, 143, 172, 25, 109, 110, 163, 132, 182, 75, 194, 248, 192, 170, 205, 101, 54, 30, 89, 51, 64, 255, 86, 174, 155, 218, 55, 210, 237, 59, 56, 79, 45, 145, 245, 42, 91, 112, 250, 183, 128, 85, 155, 203, 246, 180, 148, 86, 108, 60, 178, 102, 26, 221, 189, 251, 193, 248, 220, 135, 183, 25, 211, 26, 119, 179, 30, 127, 1, 82, 17, 226, 218, 119, 112, 158, 172, 150, 127, 3, 90, 34, 235, 85, 44, 195, 228, 200, 247, 230, 133, 180, 129, 7, 138, 41, 65, 173, 71, 76, 55, 76, 72, 209, 236, 105, 41, 173, 154, 136, 38, 48, 216, 120, 100, 205, 174, 153, 107, 80, 117, 188, 10, 44, 3, 93, 5, 177, 195, 247, 200, 212, 181, 22, 199, 73, 110, 51, 166, 53, 24, 210, 169, 168, 238, 102, 61, 254, 152, 135, 50, 99, 67, 162, 83, 31, 53, 67, 92, 130, 245, 233, 145, 231, 131, 8, 158, 122, 88, 45, 255, 6, 46, 204, 240, 155, 180, 68, 214, 171, 194, 165, 217, 54, 25, 128, 184, 74, 111, 97, 183, 215, 175, 203, 122, 178, 217, 42, 117, 47, 2, 15, 20, 83, 116, 238, 27, 206, 130, 90, 143, 152, 244, 187, 128, 5, 47, 158, 225, 121, 89, 127, 238, 228, 153, 213, 35, 129, 239, 52, 44, 28, 52, 17, 77, 96, 66, 240, 66, 253, 241, 247, 185, 65, 135, 22, 182, 220, 92, 51, 215, 160, 42, 210, 216, 61, 234, 120, 21, 88, 156, 153, 26, 197, 71, 188, 123, 185, 49, 93, 116, 36, 199, 233, 224, 114, 177, 8, 239, 239, 106, 45, 142, 147, 28, 204, 129, 14, 220, 102, 76, 107, 170, 135, 67, 246, 113, 162, 34, 138, 7, 67, 45, 23, 157, 203, 11, 39, 235, 42, 4, 186, 48, 15, 101, 198, 70, 238, 106, 91, 134, 68, 167, 62, 240, 165, 168, 163, 43, 128, 201, 223, 93, 97, 198, 66, 171, 213, 82, 20, 221, 52, 93, 137, 6, 17, 60, 245, 112, 240, 51, 104, 176, 90, 254, 13, 198, 187, 241, 144, 29, 158, 144, 236, 107, 127, 159, 113, 41, 143, 221, 140, 95, 110, 210, 17, 132, 75, 179, 109, 242, 170, 188, 240, 50, 0, 113, 149, 68, 225, 126, 8, 159, 196, 31, 116, 233, 37, 16, 233, 31, 145, 132, 191, 105, 112, 139, 34, 178, 85, 234, 94, 196, 180, 229, 195, 4, 30, 40, 166, 114, 255, 39, 59, 169, 218, 70, 71, 223, 59, 73, 218, 69, 179, 111, 234, 51, 82, 96, 119, 232, 119, 1, 11, 158, 150, 14, 150, 94, 60, 195, 243, 40, 221, 204, 110, 243, 248, 173, 18, 133, 25, 162, 143, 115, 173, 54, 217, 5, 76, 57, 68, 222, 105, 88, 56, 168, 136, 87, 165, 104, 34, 154, 192, 30, 195, 149, 93, 197, 230, 244, 33, 179, 7, 251, 188, 226, 239, 115, 131, 148, 14, 124, 30, 79, 43, 29, 98, 57, 202, 18, 255, 249, 96, 223, 154, 143, 129, 208, 7, 84, 164, 177, 123, 34, 69, 190, 230, 212, 241, 42, 176, 162, 16, 37, 45, 121, 53, 68, 81, 15, 212, 75, 204, 207, 126, 134, 169, 185, 159, 137, 52, 98, 186, 232, 72, 20, 91, 231, 213, 142, 211, 193, 229, 248, 50, 206, 120, 35, 23, 175, 4, 85, 246, 160, 153, 149, 92, 109, 252, 227, 189, 98, 97, 56, 152, 3, 29, 78, 121, 12, 128, 184, 205, 152, 214, 206, 44, 151, 75, 21, 9, 246, 55, 99, 232, 249, 170, 163, 66, 52, 207, 213, 163, 59, 82, 14, 134, 90, 46, 120, 103, 85, 179, 58, 151, 23, 78, 76, 118, 24, 211, 151, 83, 121, 175, 225, 178, 118, 50, 33, 24, 187, 87, 87, 249, 180, 202, 140, 220, 213, 182, 250, 61, 218, 43, 12, 137, 78, 125, 122, 104, 65, 224, 161, 77, 32, 156, 215, 172, 47, 1, 23, 6, 226, 100, 97, 231, 237, 249, 186, 194, 140, 133, 204, 35, 131, 24, 86, 171, 165, 40, 32, 74, 170, 181, 251, 111, 203, 201, 141, 142, 196, 84, 77, 36, 9, 49, 59, 197, 6, 172, 224, 224, 103, 208, 150, 1, 104, 77, 96, 181, 252, 27, 22, 84, 243, 134, 205, 113, 146, 250, 187, 144, 157, 103, 123, 58, 80, 2, 13, 219, 95, 159, 214, 254, 62, 227, 160, 31, 49, 126, 19, 24, 202, 194, 101, 249, 197, 95, 190, 220, 164, 35, 200, 61, 171, 190, 8, 151, 102, 219, 126, 118, 105, 70, 165, 83, 8, 58, 211, 178, 7, 167, 37, 6, 147, 241, 83, 231, 156, 108, 136, 194, 253, 16, 254, 35, 242, 141, 62, 137, 63, 232, 72, 104, 48, 117, 147, 77, 81, 9, 229, 172, 94, 148, 127, 36, 120, 164, 9, 197, 119, 57, 210, 224, 22, 69, 164, 1, 25, 216, 100, 171, 212, 189, 18, 74, 219, 32, 201, 111, 186, 92, 191, 142, 181, 193, 73, 58, 33, 151, 63, 219, 46, 10, 228, 254, 79, 118, 146, 31, 64, 235, 82, 181, 141, 142, 36, 84, 130, 19, 255, 113, 227, 111, 137, 144, 236, 242, 203, 96, 174, 15, 189, 129, 161, 146, 102, 164, 192, 238, 16, 69, 207, 115, 208, 239, 2, 22, 166, 14, 13, 139, 125, 43, 108, 247, 11, 202, 99, 106, 253, 126, 247, 60, 139, 159, 248, 161, 80, 186, 153, 221, 38, 91, 150, 64, 230, 241, 91, 37, 144, 16, 84, 184, 75, 53, 53, 196, 61, 212, 58, 89, 167, 92, 28, 105, 209, 189, 19, 244, 10, 152, 114, 136, 124, 121, 125, 21, 188, 211, 176, 112, 202, 50, 191, 237, 17, 23, 222, 145, 103, 246, 209, 12, 145, 66, 69, 90, 231, 163, 74, 199, 60, 134, 43, 187, 74, 103, 36, 38, 138, 205, 233, 67, 252, 44, 230, 222, 39, 9, 135, 162, 81, 232, 136, 63, 0, 0, 0, 0, 232, 219, 251, 185, 145, 177, 134, 168, 121, 106, 125, 17, 99, 101, 124, 138, 139, 190, 135, 51, 242, 212, 250, 34, 26, 15, 1, 155, 135, 204, 137, 207, 111, 23, 114, 118, 22, 125, 15, 103, 254, 166, 244, 222, 228, 169, 245, 69, 12, 114, 14, 252, 117, 24, 115, 237, 157, 195, 136, 84, 79, 159, 98, 68, 167, 68, 153, 253, 222, 46, 228, 236, 54, 245, 31, 85, 44, 250, 30, 206, 196, 33, 229, 119, 189, 75, 152, 102, 85, 144, 99, 223, 200, 83, 235, 139, 32, 136, 16, 50, 89, 226, 109, 35, 177, 57, 150, 154, 171, 54, 151, 1, 67, 237, 108, 184, 58, 135, 17, 169, 210, 92, 234, 16, 158, 62, 197, 136, 118, 229, 62, 49, 15, 143, 67, 32, 231, 84, 184, 153, 253, 91, 185, 2, 21, 128, 66, 187, 108, 234, 63, 170, 132, 49, 196, 19, 25, 242, 76, 71, 241, 41, 183, 254, 136, 67, 202, 239, 96, 152, 49, 86, 122, 151, 48, 205, 146, 76, 203, 116, 235, 38, 182, 101, 3, 253, 77, 220, 209, 161, 167, 204, 57, 122, 92, 117, 64, 16, 33, 100, 168, 203, 218, 221, 178, 196, 219, 70, 90, 31, 32, 255, 35, 117, 93, 238, 203, 174, 166, 87, 86, 109, 46, 3, 190, 182, 213, 186, 199, 220, 168, 171, 47, 7, 83, 18, 53, 8, 82, 137, 221, 211, 169, 48, 164, 185, 212, 33, 76, 98, 47, 152, 125, 123, 251, 202, 149, 160, 0, 115, 236, 202, 125, 98, 4, 17, 134, 219, 30, 30, 135, 64, 246, 197, 124, 249, 143, 175, 1, 232, 103, 116, 250, 81, 250, 183, 114, 5, 18, 108, 137, 188, 107, 6, 244, 173, 131, 221, 15, 20, 153, 210, 14, 143, 113, 9, 245, 54, 8, 99, 136, 39, 224, 184, 115, 158, 50, 228, 153, 142, 218, 63, 98, 55, 163, 85, 31, 38, 75, 142, 228, 159, 81, 129, 229, 4, 185, 90, 30, 189, 192, 48, 99, 172, 40, 235, 152, 21, 181, 40, 16, 65, 93, 243, 235, 248, 36, 153, 150, 233, 204, 66, 109, 80, 214, 77, 108, 203, 62, 150, 151, 114, 71, 252, 234, 99, 175, 39, 17, 218, 227, 69, 62, 66, 11, 158, 197, 251, 114, 244, 184, 234, 154, 47, 67, 83, 128, 32, 66, 200, 104, 251, 185, 113, 17, 145, 196, 96, 249, 74, 63, 217, 100, 137, 183, 141, 140, 82, 76, 52, 245, 56, 49, 37, 29, 227, 202, 156, 7, 236, 203, 7, 239, 55, 48, 190, 150, 93, 77, 175, 126, 134, 182, 22, 172, 218, 92, 6, 68, 1, 167, 191, 61, 107, 218, 174, 213, 176, 33, 23, 207, 191, 32, 140, 39, 100, 219, 53, 94, 14, 166, 36, 182, 213, 93, 157, 43, 22, 213, 201, 195, 205, 46, 112, 186, 167, 83, 97, 82, 124, 168, 216, 72, 115, 169, 67, 160, 168, 82, 250, 217, 194, 47, 235, 49, 25, 212, 82, 187, 240, 135, 78, 83, 43, 124, 247, 42, 65, 1, 230, 194, 154, 250, 95, 216, 149, 251, 196, 48, 78, 0, 125, 73, 36, 125, 108, 161, 255, 134, 213, 60, 60, 14, 129, 212, 231, 245, 56, 173, 141, 136, 41, 69, 86, 115, 144, 95, 89, 114, 11, 183, 130, 137, 178, 206, 232, 244, 163, 38, 51, 15, 26, 244, 111, 229, 10, 28, 180, 30, 179, 101, 222, 99, 162, 141, 5, 152, 27, 151, 10, 153, 128, 127, 209, 98, 57, 6, 187, 31, 40, 238, 96, 228, 145, 115, 163, 108, 197, 155, 120, 151, 124, 226, 18, 234, 109, 10, 201, 17, 212, 16, 198, 16, 79, 248, 29, 235, 246, 129, 119, 150, 231, 105, 172, 109, 94, 37, 206, 66, 198, 205, 21, 185, 127, 180, 127, 196, 110, 92, 164, 63, 215, 70, 171, 62, 76, 174, 112, 197, 245, 215, 26, 184, 228, 63, 193, 67, 93, 162, 2, 203, 9, 74, 217, 48, 176, 51, 179, 77, 161, 219, 104, 182, 24, 193, 103, 183, 131, 41, 188, 76, 58, 80, 214, 49, 43, 184, 13, 202, 146, 106, 81, 32, 130, 130, 138, 219, 59, 251, 224, 166, 42, 19, 59, 93, 147, 9, 52, 92, 8, 225, 239, 167, 177, 152, 133, 218, 160, 112, 94, 33, 25, 237, 157, 169, 77, 5, 70, 82, 244, 124, 44, 47, 229, 148, 247, 212, 92, 142, 248, 213, 199, 102, 35, 46, 126, 31, 73, 83, 111, 247, 146, 168, 214, 198, 139, 124, 132, 46, 80, 135, 61, 87, 58, 250, 44, 191, 225, 1, 149, 165, 238, 0, 14, 77, 53, 251, 183, 52, 95, 134, 166, 220, 132, 125, 31, 65, 71, 245, 75, 169, 156, 14, 242, 208, 246, 115, 227, 56, 45, 136, 90, 34, 34, 137, 193, 202, 249, 114, 120, 179, 147, 15, 105, 91, 72, 244, 208, 137, 20, 30, 192, 97, 207, 229, 121, 24, 165, 152, 104, 240, 126, 99, 209, 234, 113, 98, 74, 2, 170, 153, 243, 123, 192, 228, 226, 147, 27, 31, 91, 14, 216, 151, 15, 230, 3, 108, 182, 159, 105, 17, 167, 119, 178, 234, 30, 109, 189, 235, 133, 133, 102, 16, 60, 252, 12, 109, 45, 20, 215, 150, 148, 88, 181, 185, 12, 176, 110, 66, 181, 201, 4, 63, 164, 33, 223, 196, 29, 59, 208, 197, 134, 211, 11, 62, 63, 170, 97, 67, 46, 66, 186, 184, 151, 223, 121, 48, 195, 55, 162, 203, 122, 78, 200, 182, 107, 166, 19, 77, 210, 188, 28, 76, 73, 84, 199, 183, 240, 45, 173, 202, 225, 197, 118, 49, 88, 23, 42, 219, 72, 255, 241, 32, 241, 134, 155, 93, 224, 110, 64, 166, 89, 116, 79, 167, 194, 156, 148, 92, 123, 229, 254, 33, 106, 13, 37, 218, 211, 144, 230, 82, 135, 120, 61, 169, 62, 1, 87, 212, 47, 233, 140, 47, 150, 243, 131, 46, 13, 27, 88, 213, 180, 98, 50, 168, 165, 138, 233, 83, 28, 0, 0, 0, 0, 145, 145, 104, 174, 99, 37, 160, 135, 242, 180, 200, 41, 135, 76, 49, 212, 22, 221, 89, 122, 228, 105, 145, 83, 117, 248, 249, 253, 79, 159, 19, 115, 222, 14, 123, 221, 44, 186, 179, 244, 189, 43, 219, 90, 200, 211, 34, 167, 89, 66, 74, 9, 171, 246, 130, 32, 58, 103, 234, 142, 158, 62, 39, 230, 15, 175, 79, 72, 253, 27, 135, 97, 108, 138, 239, 207, 25, 114, 22, 50, 136, 227, 126, 156, 122, 87, 182, 181, 235, 198, 222, 27, 209, 161, 52, 149, 64, 48, 92, 59, 178, 132, 148, 18, 35, 21, 252, 188, 86, 237, 5, 65, 199, 124, 109, 239, 53, 200, 165, 198, 164, 89, 205, 104, 125, 123, 63, 23, 236, 234, 87, 185, 30, 94, 159, 144, 143, 207, 247, 62, 250, 55, 14, 195, 107, 166, 102, 109, 153, 18, 174, 68, 8, 131, 198, 234, 50, 228, 44, 100, 163, 117, 68, 202, 81, 193, 140, 227, 192, 80, 228, 77, 181, 168, 29, 176, 36, 57, 117, 30, 214, 141, 189, 55, 71, 28, 213, 153, 227, 69, 24, 241, 114, 212, 112, 95, 128, 96, 184, 118, 17, 241, 208, 216, 100, 9, 41, 37, 245, 152, 65, 139, 7, 44, 137, 162, 150, 189, 225, 12, 172, 218, 11, 130, 61, 75, 99, 44, 207, 255, 171, 5, 94, 110, 195, 171, 43, 150, 58, 86, 186, 7, 82, 248, 72, 179, 154, 209, 217, 34, 242, 127, 250, 246, 126, 46, 107, 103, 22, 128, 153, 211, 222, 169, 8, 66, 182, 7, 125, 186, 79, 250, 236, 43, 39, 84, 30, 159, 239, 125, 143, 14, 135, 211, 181, 105, 109, 93, 36, 248, 5, 243, 214, 76, 205, 218, 71, 221, 165, 116, 50, 37, 92, 137, 163, 180, 52, 39, 81, 0, 252, 14, 192, 145, 148, 160, 100, 200, 89, 200, 245, 89, 49, 102, 7, 237, 249, 79, 150, 124, 145, 225, 227, 132, 104, 28, 114, 21, 0, 178, 128, 161, 200, 155, 17, 48, 160, 53, 43, 87, 74, 187, 186, 198, 34, 21, 72, 114, 234, 60, 217, 227, 130, 146, 172, 27, 123, 111, 61, 138, 19, 193, 207, 62, 219, 232, 94, 175, 179, 70, 135, 141, 65, 57, 22, 28, 41, 151, 228, 168, 225, 190, 117, 57, 137, 16, 0, 193, 112, 237, 145, 80, 24, 67, 99, 228, 208, 106, 242, 117, 184, 196, 200, 18, 82, 74, 89, 131, 58, 228, 171, 55, 242, 205, 58, 166, 154, 99, 79, 94, 99, 158, 222, 207, 11, 48, 44, 123, 195, 25, 189, 234, 171, 183, 25, 179, 102, 223, 136, 34, 14, 113, 122, 150, 198, 88, 235, 7, 174, 246, 158, 255, 87, 11, 15, 110, 63, 165, 253, 218, 247, 140, 108, 75, 159, 34, 86, 44, 117, 172, 199, 189, 29, 2, 53, 9, 213, 43, 164, 152, 189, 133, 209, 96, 68, 120, 64, 241, 44, 214, 178, 69, 228, 255, 35, 212, 140, 81, 244, 237, 253, 92, 101, 124, 149, 242, 151, 200, 93, 219, 6, 89, 53, 117, 115, 161, 204, 136, 226, 48, 164, 38, 16, 132, 108, 15, 129, 21, 4, 161, 187, 114, 238, 47, 42, 227, 134, 129, 216, 87, 78, 168, 73, 198, 38, 6, 60, 62, 223, 251, 173, 175, 183, 85, 95, 27, 127, 124, 206, 138, 23, 210, 106, 211, 218, 186, 251, 66, 178, 20, 9, 246, 122, 61, 152, 103, 18, 147, 237, 159, 235, 110, 124, 14, 131, 192, 142, 186, 75, 233, 31, 43, 35, 71, 37, 76, 201, 201, 180, 221, 161, 103, 70, 105, 105, 78, 215, 248, 1, 224, 162, 0, 248, 29, 51, 145, 144, 179, 193, 37, 88, 154, 80, 180, 48, 52, 137, 150, 194, 75, 24, 7, 170, 229, 234, 179, 98, 204, 123, 34, 10, 98, 14, 218, 243, 159, 159, 75, 155, 49, 109, 255, 83, 24, 252, 110, 59, 182, 198, 9, 209, 56, 87, 152, 185, 150, 165, 44, 113, 191, 52, 189, 25, 17, 65, 69, 224, 236, 208, 212, 136, 66, 34, 96, 64, 107, 179, 241, 40, 197, 23, 168, 229, 173, 134, 57, 141, 3, 116, 141, 69, 42, 229, 28, 45, 132, 144, 228, 212, 121, 1, 117, 188, 215, 243, 193, 116, 254, 98, 80, 28, 80, 88, 55, 246, 222, 201, 166, 158, 112, 59, 18, 86, 89, 170, 131, 62, 247, 223, 123, 199, 10, 78, 234, 175, 164, 188, 94, 103, 141, 45, 207, 15, 35, 14, 27, 131, 114, 159, 138, 235, 220, 109, 62, 35, 245, 252, 175, 75, 91, 137, 87, 178, 166, 24, 198, 218, 8, 234, 114, 18, 33, 123, 227, 122, 143, 65, 132, 144, 1, 208, 21, 248, 175, 34, 161, 48, 134, 179, 48, 88, 40, 198, 200, 161, 213, 87, 89, 201, 123, 165, 237, 1, 82, 52, 124, 105, 252, 144, 37, 164, 148, 1, 180, 204, 58, 243, 0, 4, 19, 98, 145, 108, 189, 23, 105, 149, 64, 134, 248, 253, 238, 116, 76, 53, 199, 229, 221, 93, 105, 223, 186, 183, 231, 78, 43, 223, 73, 188, 159, 23, 96, 45, 14, 127, 206, 88, 246, 134, 51, 201, 103, 238, 157, 59, 211, 38, 180, 170, 66, 78, 26, 115, 96, 188, 101, 226, 241, 212, 203, 16, 69, 28, 226, 129, 212, 116, 76, 244, 44, 141, 177, 101, 189, 229, 31, 151, 9, 45, 54, 6, 152, 69, 152, 60, 255, 175, 22, 173, 110, 199, 184, 95, 218, 15, 145, 206, 75, 103, 63, 187, 179, 158, 194, 42, 34, 246, 108, 216, 150, 62, 69, 73, 7, 86, 235, 237, 94, 155, 131, 124, 207, 243, 45, 142, 123, 59, 4, 31, 234, 83, 170, 106, 18, 170, 87, 251, 131, 194, 249, 9, 55, 10, 208, 152, 166, 98, 126, 162, 193, 136, 240, 51, 80, 224, 94, 193, 228, 40, 119, 80, 117, 64, 217, 37, 141, 185, 36, 180, 28, 209, 138, 70, 168, 25, 163, 215, 57, 113, 13, 43, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 47, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 0, 68, 94, 16, 0, 0, 0, 0, 0, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 111, 102, 32, 102, 105, 108, 101, 111, 116, 104, 101, 114, 32, 111, 115, 32, 101, 114, 114, 111, 114, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 119, 114, 105, 116, 101, 32, 122, 101, 114, 111, 116, 105, 109, 101, 100, 32, 111, 117, 116, 105, 110, 118, 97, 108, 105, 100, 32, 100, 97, 116, 97, 105, 110, 118, 97, 108, 105, 100, 32, 105, 110, 112, 117, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 119, 111, 117, 108, 100, 32, 98, 108, 111, 99, 107, 101, 110, 116, 105, 116, 121, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 98, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 97, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 101, 110, 116, 105, 116, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 40, 111, 115, 32, 101, 114, 114, 111, 114, 32, 41, 0, 0, 0, 68, 94, 16, 0, 0, 0, 0, 0, 177, 95, 16, 0, 11, 0, 0, 0, 188, 95, 16, 0, 1, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 112, 97, 110, 105, 99, 107, 105, 110, 103, 46, 114, 115, 216, 95, 16, 0, 28, 0, 0, 0, 235, 1, 0, 0, 31, 0, 0, 0, 216, 95, 16, 0, 28, 0, 0, 0, 236, 1, 0, 0, 30, 0, 0, 0, 48, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 43, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 54, 0, 0, 0, 43, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 55, 0, 0, 0, 85, 110, 101, 120, 112, 101, 99, 116, 101, 100, 69, 111, 102, 79, 116, 104, 101, 114, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 87, 114, 105, 116, 101, 90, 101, 114, 111, 84, 105, 109, 101, 100, 79, 117, 116, 73, 110, 118, 97, 108, 105, 100, 68, 97, 116, 97, 73, 110, 118, 97, 108, 105, 100, 73, 110, 112, 117, 116, 87, 111, 117, 108, 100, 66, 108, 111, 99, 107, 65, 108, 114, 101, 97, 100, 121, 69, 120, 105, 115, 116, 115, 66, 114, 111, 107, 101, 110, 80, 105, 112, 101, 65, 100, 100, 114, 78, 111, 116, 65, 118, 97, 105, 108, 97, 98, 108, 101, 65, 100, 100, 114, 73, 110, 85, 115, 101, 78, 111, 116, 67, 111, 110, 110, 101, 99, 116, 101, 100, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 65, 98, 111, 114, 116, 101, 100, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 82, 101, 115, 101, 116, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 82, 101, 102, 117, 115, 101, 100, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 68, 101, 110, 105, 101, 100, 78, 111, 116, 70, 111, 117, 110, 100, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 56, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 109, 111, 100, 46, 114, 115, 0, 92, 97, 16, 0, 75, 0, 0, 0, 90, 1, 0, 0, 19, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 60, 0, 0, 0, 97, 32, 102, 111, 114, 109, 97, 116, 116, 105, 110, 103, 32, 116, 114, 97, 105, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 97, 110, 32, 101, 114, 114, 111, 114, 108, 105, 98, 114, 97, 114, 121, 47, 97, 108, 108, 111, 99, 47, 115, 114, 99, 47, 102, 109, 116, 46, 114, 115, 0, 251, 97, 16, 0, 24, 0, 0, 0, 66, 2, 0, 0, 28, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 97, 108, 108, 111, 99, 47, 115, 114, 99, 47, 114, 97, 119, 95, 118, 101, 99, 46, 114, 115, 99, 97, 112, 97, 99, 105, 116, 121, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0, 0, 0, 36, 98, 16, 0, 28, 0, 0, 0, 24, 2, 0, 0, 5, 0, 0, 0, 96, 46, 46, 0, 101, 98, 16, 0, 2, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 58, 32, 0, 0, 0, 100, 98, 16, 0, 0, 0, 0, 0, 155, 98, 16, 0, 2, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 68, 0, 0, 0, 105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 116, 104, 101, 32, 108, 101, 110, 32, 105, 115, 32, 32, 98, 117, 116, 32, 116, 104, 101, 32, 105, 110, 100, 101, 120, 32, 105, 115, 32, 0, 0, 192, 98, 16, 0, 32, 0, 0, 0, 224, 98, 16, 0, 18, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 98, 117, 105, 108, 100, 101, 114, 115, 46, 114, 115, 67, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 32, 32, 32, 32, 4, 99, 16, 0, 32, 0, 0, 0, 50, 0, 0, 0, 33, 0, 0, 0, 4, 99, 16, 0, 32, 0, 0, 0, 51, 0, 0, 0, 18, 0, 0, 0, 32, 123, 10, 44, 10, 44, 32, 32, 123, 32, 125, 32, 125, 40, 10, 40, 44, 41, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 110, 117, 109, 46, 114, 115, 0, 0, 0, 114, 99, 16, 0, 27, 0, 0, 0, 101, 0, 0, 0, 20, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 67, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 74, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 109, 111, 100, 46, 114, 115, 0, 132, 100, 16, 0, 27, 0, 0, 0, 16, 8, 0, 0, 30, 0, 0, 0, 132, 100, 16, 0, 27, 0, 0, 0, 23, 8, 0, 0, 22, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 115, 108, 105, 99, 101, 47, 109, 101, 109, 99, 104, 114, 46, 114, 115, 192, 100, 16, 0, 32, 0, 0, 0, 90, 0, 0, 0, 5, 0, 0, 0, 114, 97, 110, 103, 101, 32, 115, 116, 97, 114, 116, 32, 105, 110, 100, 101, 120, 32, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 102, 111, 114, 32, 115, 108, 105, 99, 101, 32, 111, 102, 32, 108, 101, 110, 103, 116, 104, 32, 240, 100, 16, 0, 18, 0, 0, 0, 2, 101, 16, 0, 34, 0, 0, 0, 114, 97, 110, 103, 101, 32, 101, 110, 100, 32, 105, 110, 100, 101, 120, 32, 52, 101, 16, 0, 16, 0, 0, 0, 2, 101, 16, 0, 34, 0, 0, 0, 115, 108, 105, 99, 101, 32, 105, 110, 100, 101, 120, 32, 115, 116, 97, 114, 116, 115, 32, 97, 116, 32, 32, 98, 117, 116, 32, 101, 110, 100, 115, 32, 97, 116, 32, 0, 84, 101, 16, 0, 22, 0, 0, 0, 106, 101, 16, 0, 13, 0, 0, 0, 91, 46, 46, 46, 93, 98, 121, 116, 101, 32, 105, 110, 100, 101, 120, 32, 32, 105, 115, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 32, 111, 102, 32, 96, 0, 0, 141, 101, 16, 0, 11, 0, 0, 0, 152, 101, 16, 0, 22, 0, 0, 0, 100, 98, 16, 0, 1, 0, 0, 0, 98, 101, 103, 105, 110, 32, 60, 61, 32, 101, 110, 100, 32, 40, 32, 60, 61, 32, 41, 32, 119, 104, 101, 110, 32, 115, 108, 105, 99, 105, 110, 103, 32, 96, 0, 0, 200, 101, 16, 0, 14, 0, 0, 0, 214, 101, 16, 0, 4, 0, 0, 0, 218, 101, 16, 0, 16, 0, 0, 0, 100, 98, 16, 0, 1, 0, 0, 0, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 99, 104, 97, 114, 32, 98, 111, 117, 110, 100, 97, 114, 121, 59, 32, 105, 116, 32, 105, 115, 32, 105, 110, 115, 105, 100, 101, 32, 32, 40, 98, 121, 116, 101, 115, 32, 41, 32, 111, 102, 32, 96, 141, 101, 16, 0, 11, 0, 0, 0, 12, 102, 16, 0, 38, 0, 0, 0, 50, 102, 16, 0, 8, 0, 0, 0, 58, 102, 16, 0, 6, 0, 0, 0, 100, 98, 16, 0, 1, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 117, 110, 105, 99, 111, 100, 101, 47, 112, 114, 105, 110, 116, 97, 98, 108, 101, 46, 114, 115, 0, 0, 0, 104, 102, 16, 0, 37, 0, 0, 0, 10, 0, 0, 0, 28, 0, 0, 0, 104, 102, 16, 0, 37, 0, 0, 0, 26, 0, 0, 0, 54, 0, 0, 0, 0, 1, 3, 5, 5, 6, 6, 3, 7, 6, 8, 8, 9, 17, 10, 28, 11, 25, 12, 20, 13, 16, 14, 13, 15, 4, 16, 3, 18, 18, 19, 9, 22, 1, 23, 5, 24, 2, 25, 3, 26, 7, 28, 2, 29, 1, 31, 22, 32, 3, 43, 3, 44, 2, 45, 11, 46, 1, 48, 3, 49, 2, 50, 1, 167, 2, 169, 2, 170, 4, 171, 8, 250, 2, 251, 5, 253, 4, 254, 3, 255, 9, 173, 120, 121, 139, 141, 162, 48, 87, 88, 139, 140, 144, 28, 29, 221, 14, 15, 75, 76, 251, 252, 46, 47, 63, 92, 93, 95, 181, 226, 132, 141, 142, 145, 146, 169, 177, 186, 187, 197, 198, 201, 202, 222, 228, 229, 255, 0, 4, 17, 18, 41, 49, 52, 55, 58, 59, 61, 73, 74, 93, 132, 142, 146, 169, 177, 180, 186, 187, 198, 202, 206, 207, 228, 229, 0, 4, 13, 14, 17, 18, 41, 49, 52, 58, 59, 69, 70, 73, 74, 94, 100, 101, 132, 145, 155, 157, 201, 206, 207, 13, 17, 41, 69, 73, 87, 100, 101, 141, 145, 169, 180, 186, 187, 197, 201, 223, 228, 229, 240, 13, 17, 69, 73, 100, 101, 128, 132, 178, 188, 190, 191, 213, 215, 240, 241, 131, 133, 139, 164, 166, 190, 191, 197, 199, 206, 207, 218, 219, 72, 152, 189, 205, 198, 206, 207, 73, 78, 79, 87, 89, 94, 95, 137, 142, 143, 177, 182, 183, 191, 193, 198, 199, 215, 17, 22, 23, 91, 92, 246, 247, 254, 255, 128, 13, 109, 113, 222, 223, 14, 15, 31, 110, 111, 28, 29, 95, 125, 126, 174, 175, 187, 188, 250, 22, 23, 30, 31, 70, 71, 78, 79, 88, 90, 92, 94, 126, 127, 181, 197, 212, 213, 220, 240, 241, 245, 114, 115, 143, 116, 117, 150, 47, 95, 38, 46, 47, 167, 175, 183, 191, 199, 207, 215, 223, 154, 64, 151, 152, 48, 143, 31, 192, 193, 206, 255, 78, 79, 90, 91, 7, 8, 15, 16, 39, 47, 238, 239, 110, 111, 55, 61, 63, 66, 69, 144, 145, 254, 255, 83, 103, 117, 200, 201, 208, 209, 216, 217, 231, 254, 255, 0, 32, 95, 34, 130, 223, 4, 130, 68, 8, 27, 4, 6, 17, 129, 172, 14, 128, 171, 53, 40, 11, 128, 224, 3, 25, 8, 1, 4, 47, 4, 52, 4, 7, 3, 1, 7, 6, 7, 17, 10, 80, 15, 18, 7, 85, 7, 3, 4, 28, 10, 9, 3, 8, 3, 7, 3, 2, 3, 3, 3, 12, 4, 5, 3, 11, 6, 1, 14, 21, 5, 58, 3, 17, 7, 6, 5, 16, 7, 87, 7, 2, 7, 21, 13, 80, 4, 67, 3, 45, 3, 1, 4, 17, 6, 15, 12, 58, 4, 29, 37, 95, 32, 109, 4, 106, 37, 128, 200, 5, 130, 176, 3, 26, 6, 130, 253, 3, 89, 7, 21, 11, 23, 9, 20, 12, 20, 12, 106, 6, 10, 6, 26, 6, 89, 7, 43, 5, 70, 10, 44, 4, 12, 4, 1, 3, 49, 11, 44, 4, 26, 6, 11, 3, 128, 172, 6, 10, 6, 33, 63, 76, 4, 45, 3, 116, 8, 60, 3, 15, 3, 60, 7, 56, 8, 43, 5, 130, 255, 17, 24, 8, 47, 17, 45, 3, 32, 16, 33, 15, 128, 140, 4, 130, 151, 25, 11, 21, 136, 148, 5, 47, 5, 59, 7, 2, 14, 24, 9, 128, 179, 45, 116, 12, 128, 214, 26, 12, 5, 128, 255, 5, 128, 223, 12, 238, 13, 3, 132, 141, 3, 55, 9, 129, 92, 20, 128, 184, 8, 128, 203, 42, 56, 3, 10, 6, 56, 8, 70, 8, 12, 6, 116, 11, 30, 3, 90, 4, 89, 9, 128, 131, 24, 28, 10, 22, 9, 76, 4, 128, 138, 6, 171, 164, 12, 23, 4, 49, 161, 4, 129, 218, 38, 7, 12, 5, 5, 128, 165, 17, 129, 109, 16, 120, 40, 42, 6, 76, 4, 128, 141, 4, 128, 190, 3, 27, 3, 15, 13, 0, 6, 1, 1, 3, 1, 4, 2, 8, 8, 9, 2, 10, 5, 11, 2, 14, 4, 16, 1, 17, 2, 18, 5, 19, 17, 20, 1, 21, 2, 23, 2, 25, 13, 28, 5, 29, 8, 36, 1, 106, 3, 107, 2, 188, 2, 209, 2, 212, 12, 213, 9, 214, 2, 215, 2, 218, 1, 224, 5, 225, 2, 232, 2, 238, 32, 240, 4, 248, 2, 249, 2, 250, 2, 251, 1, 12, 39, 59, 62, 78, 79, 143, 158, 158, 159, 6, 7, 9, 54, 61, 62, 86, 243, 208, 209, 4, 20, 24, 54, 55, 86, 87, 127, 170, 174, 175, 189, 53, 224, 18, 135, 137, 142, 158, 4, 13, 14, 17, 18, 41, 49, 52, 58, 69, 70, 73, 74, 78, 79, 100, 101, 92, 182, 183, 27, 28, 7, 8, 10, 11, 20, 23, 54, 57, 58, 168, 169, 216, 217, 9, 55, 144, 145, 168, 7, 10, 59, 62, 102, 105, 143, 146, 111, 95, 238, 239, 90, 98, 154, 155, 39, 40, 85, 157, 160, 161, 163, 164, 167, 168, 173, 186, 188, 196, 6, 11, 12, 21, 29, 58, 63, 69, 81, 166, 167, 204, 205, 160, 7, 25, 26, 34, 37, 62, 63, 197, 198, 4, 32, 35, 37, 38, 40, 51, 56, 58, 72, 74, 76, 80, 83, 85, 86, 88, 90, 92, 94, 96, 99, 101, 102, 107, 115, 120, 125, 127, 138, 164, 170, 175, 176, 192, 208, 174, 175, 121, 204, 110, 111, 147, 94, 34, 123, 5, 3, 4, 45, 3, 102, 3, 1, 47, 46, 128, 130, 29, 3, 49, 15, 28, 4, 36, 9, 30, 5, 43, 5, 68, 4, 14, 42, 128, 170, 6, 36, 4, 36, 4, 40, 8, 52, 11, 1, 128, 144, 129, 55, 9, 22, 10, 8, 128, 152, 57, 3, 99, 8, 9, 48, 22, 5, 33, 3, 27, 5, 1, 64, 56, 4, 75, 5, 47, 4, 10, 7, 9, 7, 64, 32, 39, 4, 12, 9, 54, 3, 58, 5, 26, 7, 4, 12, 7, 80, 73, 55, 51, 13, 51, 7, 46, 8, 10, 129, 38, 82, 78, 40, 8, 42, 86, 28, 20, 23, 9, 78, 4, 30, 15, 67, 14, 25, 7, 10, 6, 72, 8, 39, 9, 117, 11, 63, 65, 42, 6, 59, 5, 10, 6, 81, 6, 1, 5, 16, 3, 5, 128, 139, 98, 30, 72, 8, 10, 128, 166, 94, 34, 69, 11, 10, 6, 13, 19, 57, 7, 10, 54, 44, 4, 16, 128, 192, 60, 100, 83, 12, 72, 9, 10, 70, 69, 27, 72, 8, 83, 29, 57, 129, 7, 70, 10, 29, 3, 71, 73, 55, 3, 14, 8, 10, 6, 57, 7, 10, 129, 54, 25, 128, 183, 1, 15, 50, 13, 131, 155, 102, 117, 11, 128, 196, 138, 188, 132, 47, 143, 209, 130, 71, 161, 185, 130, 57, 7, 42, 4, 2, 96, 38, 10, 70, 10, 40, 5, 19, 130, 176, 91, 101, 75, 4, 57, 7, 17, 64, 5, 11, 2, 14, 151, 248, 8, 132, 214, 42, 9, 162, 247, 129, 31, 49, 3, 17, 4, 8, 129, 140, 137, 4, 107, 5, 13, 3, 9, 7, 16, 147, 96, 128, 246, 10, 115, 8, 110, 23, 70, 128, 154, 20, 12, 87, 9, 25, 128, 135, 129, 71, 3, 133, 66, 15, 21, 133, 80, 43, 128, 213, 45, 3, 26, 4, 2, 129, 112, 58, 5, 1, 133, 0, 128, 215, 41, 76, 4, 10, 4, 2, 131, 17, 68, 76, 61, 128, 194, 60, 6, 1, 4, 85, 5, 27, 52, 2, 129, 14, 44, 4, 100, 12, 86, 10, 128, 174, 56, 29, 13, 44, 4, 9, 7, 2, 14, 6, 128, 154, 131, 216, 8, 13, 3, 13, 3, 116, 12, 89, 7, 12, 20, 12, 4, 56, 8, 10, 6, 40, 8, 34, 78, 129, 84, 12, 21, 3, 3, 5, 7, 9, 25, 7, 7, 9, 3, 13, 7, 41, 128, 203, 37, 10, 132, 6, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 117, 110, 105, 99, 111, 100, 101, 47, 117, 110, 105, 99, 111, 100, 101, 95, 100, 97, 116, 97, 46, 114, 115, 0, 247, 107, 16, 0, 40, 0, 0, 0, 75, 0, 0, 0, 40, 0, 0, 0, 247, 107, 16, 0, 40, 0, 0, 0, 87, 0, 0, 0, 22, 0, 0, 0, 247, 107, 16, 0, 40, 0, 0, 0, 82, 0, 0, 0, 62, 0, 0, 0, 69, 114, 114, 111, 114, 0, 0, 0, 0, 3, 0, 0, 131, 4, 32, 0, 145, 5, 96, 0, 93, 19, 160, 0, 18, 23, 160, 30, 12, 32, 224, 30, 239, 44, 32, 43, 42, 48, 160, 43, 111, 166, 96, 44, 2, 168, 224, 44, 30, 251, 224, 45, 0, 254, 160, 53, 158, 255, 224, 53, 253, 1, 97, 54, 1, 10, 161, 54, 36, 13, 97, 55, 171, 14, 225, 56, 47, 24, 33, 57, 48, 28, 97, 70, 243, 30, 161, 74, 240, 106, 97, 78, 79, 111, 161, 78, 157, 188, 33, 79, 101, 209, 225, 79, 0, 218, 33, 80, 0, 224, 225, 81, 48, 225, 97, 83, 236, 226, 161, 84, 208, 232, 225, 84, 32, 0, 46, 85, 240, 1, 191, 85, 0, 112, 0, 7, 0, 45, 1, 1, 1, 2, 1, 2, 1, 1, 72, 11, 48, 21, 16, 1, 101, 7, 2, 6, 2, 2, 1, 4, 35, 1, 30, 27, 91, 11, 58, 9, 9, 1, 24, 4, 1, 9, 1, 3, 1, 5, 43, 3, 119, 15, 1, 32, 55, 1, 1, 1, 4, 8, 4, 1, 3, 7, 10, 2, 29, 1, 58, 1, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 26, 1, 2, 2, 57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2, 57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22, 6, 1, 1, 58, 1, 1, 2, 1, 4, 8, 1, 7, 3, 10, 2, 30, 1, 59, 1, 1, 1, 12, 1, 9, 1, 40, 1, 3, 1, 57, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 2, 1, 3, 1, 5, 2, 7, 2, 11, 2, 28, 2, 57, 2, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 29, 1, 72, 1, 4, 1, 2, 3, 1, 1, 8, 1, 81, 1, 2, 7, 12, 8, 98, 1, 2, 9, 11, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1, 102, 4, 1, 6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 0, 3, 0, 3, 29, 3, 29, 2, 30, 2, 64, 2, 1, 7, 8, 1, 2, 11, 9, 1, 45, 3, 119, 2, 34, 1, 118, 3, 4, 2, 9, 1, 6, 3, 219, 2, 2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 48, 17, 63, 4, 48, 7, 1, 1, 5, 1, 40, 9, 12, 2, 32, 4, 2, 2, 1, 3, 56, 1, 1, 2, 3, 1, 1, 3, 58, 8, 2, 2, 152, 3, 1, 13, 1, 7, 4, 1, 6, 1, 3, 2, 198, 58, 1, 5, 0, 1, 195, 33, 0, 3, 141, 1, 96, 32, 0, 6, 105, 2, 0, 4, 1, 10, 32, 2, 80, 2, 0, 1, 3, 1, 4, 1, 25, 2, 5, 1, 151, 2, 26, 18, 13, 1, 38, 8, 25, 11, 46, 3, 48, 1, 2, 4, 2, 2, 39, 1, 67, 6, 2, 2, 2, 2, 12, 1, 8, 1, 47, 1, 51, 1, 1, 3, 2, 2, 5, 2, 1, 1, 42, 2, 8, 1, 238, 1, 2, 1, 4, 1, 0, 1, 0, 16, 16, 16, 0, 2, 0, 1, 226, 1, 149, 5, 0, 3, 1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2, 153, 11, 176, 1, 54, 15, 56, 3, 49, 4, 2, 2, 69, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 160, 1, 3, 8, 21, 2, 57, 2, 1, 1, 1, 1, 22, 1, 14, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 81, 1, 2, 6, 1, 1, 2, 1, 1, 2, 1, 2, 235, 1, 2, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 245, 1, 10, 2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0, 7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1, 0, 2, 0, 5, 59, 7, 0, 1, 63, 4, 81, 1, 0, 2, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 0, 7, 0, 4, 0, 7, 109, 7, 0, 96, 128, 240, 0, 123, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 2, 8, 108, 97, 110, 103, 117, 97, 103, 101, 1, 4, 82, 117, 115, 116, 0, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 3, 5, 114, 117, 115, 116, 99, 29, 49, 46, 53, 49, 46, 48, 32, 40, 50, 102, 100, 55, 51, 102, 97, 98, 101, 32, 50, 48, 50, 49, 45, 48, 51, 45, 50, 51, 41, 6, 119, 97, 108, 114, 117, 115, 6, 48, 46, 49, 56, 46, 48, 12, 119, 97, 115, 109, 45, 98, 105, 110, 100, 103, 101, 110, 18, 48, 46, 50, 46, 55, 51, 32, 40, 51, 99, 101, 102, 101, 50, 99, 56, 50, 41]);

// https://deno.land/x/denoflate@1.2.1/mod.ts
await denoflate_default(wasm2);

// https://deno.land/x/esbuild@v0.24.0/mod.js
var __defProp2 = Object.defineProperty;
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var mod_exports2 = {};
__export2(mod_exports2, {
  analyzeMetafile: () => analyzeMetafile,
  analyzeMetafileSync: () => analyzeMetafileSync,
  build: () => build,
  buildSync: () => buildSync,
  context: () => context,
  formatMessages: () => formatMessages,
  formatMessagesSync: () => formatMessagesSync,
  initialize: () => initialize,
  stop: () => stop,
  transform: () => transform,
  transformSync: () => transformSync,
  version: () => version
});
function encodePacket(packet) {
  let visit = (value) => {
    if (value === null) {
      bb.write8(0);
    } else if (typeof value === "boolean") {
      bb.write8(1);
      bb.write8(+value);
    } else if (typeof value === "number") {
      bb.write8(2);
      bb.write32(value | 0);
    } else if (typeof value === "string") {
      bb.write8(3);
      bb.write(encodeUTF8(value));
    } else if (value instanceof Uint8Array) {
      bb.write8(4);
      bb.write(value);
    } else if (value instanceof Array) {
      bb.write8(5);
      bb.write32(value.length);
      for (let item of value) {
        visit(item);
      }
    } else {
      let keys = Object.keys(value);
      bb.write8(6);
      bb.write32(keys.length);
      for (let key of keys) {
        bb.write(encodeUTF8(key));
        visit(value[key]);
      }
    }
  };
  let bb = new ByteBuffer();
  bb.write32(0);
  bb.write32(packet.id << 1 | +!packet.isRequest);
  visit(packet.value);
  writeUInt32LE(bb.buf, bb.len - 4, 0);
  return bb.buf.subarray(0, bb.len);
}
function decodePacket(bytes) {
  let visit = () => {
    switch (bb.read8()) {
      case 0:
        return null;
      case 1:
        return !!bb.read8();
      case 2:
        return bb.read32();
      case 3:
        return decodeUTF8(bb.read());
      case 4:
        return bb.read();
      case 5: {
        let count = bb.read32();
        let value2 = [];
        for (let i7 = 0; i7 < count; i7++) {
          value2.push(visit());
        }
        return value2;
      }
      case 6: {
        let count = bb.read32();
        let value2 = {};
        for (let i7 = 0; i7 < count; i7++) {
          value2[decodeUTF8(bb.read())] = visit();
        }
        return value2;
      }
      default:
        throw new Error("Invalid packet");
    }
  };
  let bb = new ByteBuffer(bytes);
  let id = bb.read32();
  let isRequest2 = (id & 1) === 0;
  id >>>= 1;
  let value = visit();
  if (bb.ptr !== bytes.length) {
    throw new Error("Invalid packet");
  }
  return { id, isRequest: isRequest2, value };
}
var ByteBuffer = class {
  constructor(buf = new Uint8Array(1024)) {
    this.buf = buf;
    this.len = 0;
    this.ptr = 0;
  }
  _write(delta) {
    if (this.len + delta > this.buf.length) {
      let clone = new Uint8Array((this.len + delta) * 2);
      clone.set(this.buf);
      this.buf = clone;
    }
    this.len += delta;
    return this.len - delta;
  }
  write8(value) {
    let offset = this._write(1);
    this.buf[offset] = value;
  }
  write32(value) {
    let offset = this._write(4);
    writeUInt32LE(this.buf, value, offset);
  }
  write(bytes) {
    let offset = this._write(4 + bytes.length);
    writeUInt32LE(this.buf, bytes.length, offset);
    this.buf.set(bytes, offset + 4);
  }
  _read(delta) {
    if (this.ptr + delta > this.buf.length) {
      throw new Error("Invalid packet");
    }
    this.ptr += delta;
    return this.ptr - delta;
  }
  read8() {
    return this.buf[this._read(1)];
  }
  read32() {
    return readUInt32LE(this.buf, this._read(4));
  }
  read() {
    let length = this.read32();
    let bytes = new Uint8Array(length);
    let ptr = this._read(bytes.length);
    bytes.set(this.buf.subarray(ptr, ptr + length));
    return bytes;
  }
};
var encodeUTF8;
var decodeUTF8;
var encodeInvariant;
if (typeof TextEncoder !== "undefined" && typeof TextDecoder !== "undefined") {
  let encoder = new TextEncoder();
  let decoder2 = new TextDecoder();
  encodeUTF8 = (text) => encoder.encode(text);
  decodeUTF8 = (bytes) => decoder2.decode(bytes);
  encodeInvariant = 'new TextEncoder().encode("")';
} else if (typeof Buffer !== "undefined") {
  encodeUTF8 = (text) => Buffer.from(text);
  decodeUTF8 = (bytes) => {
    let { buffer, byteOffset, byteLength: byteLength2 } = bytes;
    return Buffer.from(buffer, byteOffset, byteLength2).toString();
  };
  encodeInvariant = 'Buffer.from("")';
} else {
  throw new Error("No UTF-8 codec found");
}
if (!(encodeUTF8("") instanceof Uint8Array))
  throw new Error(`Invariant violation: "${encodeInvariant} instanceof Uint8Array" is incorrectly false

This indicates that your JavaScript environment is broken. You cannot use
esbuild in this environment because esbuild relies on this invariant. This
is not a problem with esbuild. You need to fix your environment instead.
`);
function readUInt32LE(buffer, offset) {
  return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;
}
function writeUInt32LE(buffer, value, offset) {
  buffer[offset++] = value;
  buffer[offset++] = value >> 8;
  buffer[offset++] = value >> 16;
  buffer[offset++] = value >> 24;
}
var quote = JSON.stringify;
var buildLogLevelDefault = "warning";
var transformLogLevelDefault = "silent";
function validateTarget(target) {
  validateStringValue(target, "target");
  if (target.indexOf(",") >= 0) throw new Error(`Invalid target: ${target}`);
  return target;
}
var canBeAnything = () => null;
var mustBeBoolean = (value) => typeof value === "boolean" ? null : "a boolean";
var mustBeString = (value) => typeof value === "string" ? null : "a string";
var mustBeRegExp = (value) => value instanceof RegExp ? null : "a RegExp object";
var mustBeInteger = (value) => typeof value === "number" && value === (value | 0) ? null : "an integer";
var mustBeFunction = (value) => typeof value === "function" ? null : "a function";
var mustBeArray = (value) => Array.isArray(value) ? null : "an array";
var mustBeObject = (value) => typeof value === "object" && value !== null && !Array.isArray(value) ? null : "an object";
var mustBeEntryPoints = (value) => typeof value === "object" && value !== null ? null : "an array or an object";
var mustBeWebAssemblyModule = (value) => value instanceof WebAssembly.Module ? null : "a WebAssembly.Module";
var mustBeObjectOrNull = (value) => typeof value === "object" && !Array.isArray(value) ? null : "an object or null";
var mustBeStringOrBoolean = (value) => typeof value === "string" || typeof value === "boolean" ? null : "a string or a boolean";
var mustBeStringOrObject = (value) => typeof value === "string" || typeof value === "object" && value !== null && !Array.isArray(value) ? null : "a string or an object";
var mustBeStringOrArray = (value) => typeof value === "string" || Array.isArray(value) ? null : "a string or an array";
var mustBeStringOrUint8Array = (value) => typeof value === "string" || value instanceof Uint8Array ? null : "a string or a Uint8Array";
var mustBeStringOrURL = (value) => typeof value === "string" || value instanceof URL ? null : "a string or a URL";
function getFlag(object, keys, key, mustBeFn) {
  let value = object[key];
  keys[key + ""] = true;
  if (value === void 0) return void 0;
  let mustBe = mustBeFn(value);
  if (mustBe !== null) throw new Error(`${quote(key)} must be ${mustBe}`);
  return value;
}
function checkForInvalidFlags(object, keys, where) {
  for (let key in object) {
    if (!(key in keys)) {
      throw new Error(`Invalid option ${where}: ${quote(key)}`);
    }
  }
}
function validateInitializeOptions(options) {
  let keys = /* @__PURE__ */ Object.create(null);
  let wasmURL = getFlag(options, keys, "wasmURL", mustBeStringOrURL);
  let wasmModule = getFlag(options, keys, "wasmModule", mustBeWebAssemblyModule);
  let worker = getFlag(options, keys, "worker", mustBeBoolean);
  checkForInvalidFlags(options, keys, "in initialize() call");
  return {
    wasmURL,
    wasmModule,
    worker
  };
}
function validateMangleCache(mangleCache) {
  let validated;
  if (mangleCache !== void 0) {
    validated = /* @__PURE__ */ Object.create(null);
    for (let key in mangleCache) {
      let value = mangleCache[key];
      if (typeof value === "string" || value === false) {
        validated[key] = value;
      } else {
        throw new Error(`Expected ${quote(key)} in mangle cache to map to either a string or false`);
      }
    }
  }
  return validated;
}
function pushLogFlags(flags2, options, keys, isTTY, logLevelDefault) {
  let color = getFlag(options, keys, "color", mustBeBoolean);
  let logLevel = getFlag(options, keys, "logLevel", mustBeString);
  let logLimit = getFlag(options, keys, "logLimit", mustBeInteger);
  if (color !== void 0) flags2.push(`--color=${color}`);
  else if (isTTY) flags2.push(`--color=true`);
  flags2.push(`--log-level=${logLevel || logLevelDefault}`);
  flags2.push(`--log-limit=${logLimit || 0}`);
}
function validateStringValue(value, what, key) {
  if (typeof value !== "string") {
    throw new Error(`Expected value for ${what}${key !== void 0 ? " " + quote(key) : ""} to be a string, got ${typeof value} instead`);
  }
  return value;
}
function pushCommonFlags(flags2, options, keys) {
  let legalComments = getFlag(options, keys, "legalComments", mustBeString);
  let sourceRoot = getFlag(options, keys, "sourceRoot", mustBeString);
  let sourcesContent = getFlag(options, keys, "sourcesContent", mustBeBoolean);
  let target = getFlag(options, keys, "target", mustBeStringOrArray);
  let format10 = getFlag(options, keys, "format", mustBeString);
  let globalName = getFlag(options, keys, "globalName", mustBeString);
  let mangleProps = getFlag(options, keys, "mangleProps", mustBeRegExp);
  let reserveProps = getFlag(options, keys, "reserveProps", mustBeRegExp);
  let mangleQuoted = getFlag(options, keys, "mangleQuoted", mustBeBoolean);
  let minify = getFlag(options, keys, "minify", mustBeBoolean);
  let minifySyntax = getFlag(options, keys, "minifySyntax", mustBeBoolean);
  let minifyWhitespace = getFlag(options, keys, "minifyWhitespace", mustBeBoolean);
  let minifyIdentifiers = getFlag(options, keys, "minifyIdentifiers", mustBeBoolean);
  let lineLimit = getFlag(options, keys, "lineLimit", mustBeInteger);
  let drop = getFlag(options, keys, "drop", mustBeArray);
  let dropLabels = getFlag(options, keys, "dropLabels", mustBeArray);
  let charset = getFlag(options, keys, "charset", mustBeString);
  let treeShaking = getFlag(options, keys, "treeShaking", mustBeBoolean);
  let ignoreAnnotations = getFlag(options, keys, "ignoreAnnotations", mustBeBoolean);
  let jsx = getFlag(options, keys, "jsx", mustBeString);
  let jsxFactory = getFlag(options, keys, "jsxFactory", mustBeString);
  let jsxFragment = getFlag(options, keys, "jsxFragment", mustBeString);
  let jsxImportSource = getFlag(options, keys, "jsxImportSource", mustBeString);
  let jsxDev = getFlag(options, keys, "jsxDev", mustBeBoolean);
  let jsxSideEffects = getFlag(options, keys, "jsxSideEffects", mustBeBoolean);
  let define = getFlag(options, keys, "define", mustBeObject);
  let logOverride = getFlag(options, keys, "logOverride", mustBeObject);
  let supported = getFlag(options, keys, "supported", mustBeObject);
  let pure = getFlag(options, keys, "pure", mustBeArray);
  let keepNames = getFlag(options, keys, "keepNames", mustBeBoolean);
  let platform2 = getFlag(options, keys, "platform", mustBeString);
  let tsconfigRaw = getFlag(options, keys, "tsconfigRaw", mustBeStringOrObject);
  if (legalComments) flags2.push(`--legal-comments=${legalComments}`);
  if (sourceRoot !== void 0) flags2.push(`--source-root=${sourceRoot}`);
  if (sourcesContent !== void 0) flags2.push(`--sources-content=${sourcesContent}`);
  if (target) {
    if (Array.isArray(target)) flags2.push(`--target=${Array.from(target).map(validateTarget).join(",")}`);
    else flags2.push(`--target=${validateTarget(target)}`);
  }
  if (format10) flags2.push(`--format=${format10}`);
  if (globalName) flags2.push(`--global-name=${globalName}`);
  if (platform2) flags2.push(`--platform=${platform2}`);
  if (tsconfigRaw) flags2.push(`--tsconfig-raw=${typeof tsconfigRaw === "string" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);
  if (minify) flags2.push("--minify");
  if (minifySyntax) flags2.push("--minify-syntax");
  if (minifyWhitespace) flags2.push("--minify-whitespace");
  if (minifyIdentifiers) flags2.push("--minify-identifiers");
  if (lineLimit) flags2.push(`--line-limit=${lineLimit}`);
  if (charset) flags2.push(`--charset=${charset}`);
  if (treeShaking !== void 0) flags2.push(`--tree-shaking=${treeShaking}`);
  if (ignoreAnnotations) flags2.push(`--ignore-annotations`);
  if (drop) for (let what of drop) flags2.push(`--drop:${validateStringValue(what, "drop")}`);
  if (dropLabels) flags2.push(`--drop-labels=${Array.from(dropLabels).map((what) => validateStringValue(what, "dropLabels")).join(",")}`);
  if (mangleProps) flags2.push(`--mangle-props=${mangleProps.source}`);
  if (reserveProps) flags2.push(`--reserve-props=${reserveProps.source}`);
  if (mangleQuoted !== void 0) flags2.push(`--mangle-quoted=${mangleQuoted}`);
  if (jsx) flags2.push(`--jsx=${jsx}`);
  if (jsxFactory) flags2.push(`--jsx-factory=${jsxFactory}`);
  if (jsxFragment) flags2.push(`--jsx-fragment=${jsxFragment}`);
  if (jsxImportSource) flags2.push(`--jsx-import-source=${jsxImportSource}`);
  if (jsxDev) flags2.push(`--jsx-dev`);
  if (jsxSideEffects) flags2.push(`--jsx-side-effects`);
  if (define) {
    for (let key in define) {
      if (key.indexOf("=") >= 0) throw new Error(`Invalid define: ${key}`);
      flags2.push(`--define:${key}=${validateStringValue(define[key], "define", key)}`);
    }
  }
  if (logOverride) {
    for (let key in logOverride) {
      if (key.indexOf("=") >= 0) throw new Error(`Invalid log override: ${key}`);
      flags2.push(`--log-override:${key}=${validateStringValue(logOverride[key], "log override", key)}`);
    }
  }
  if (supported) {
    for (let key in supported) {
      if (key.indexOf("=") >= 0) throw new Error(`Invalid supported: ${key}`);
      const value = supported[key];
      if (typeof value !== "boolean") throw new Error(`Expected value for supported ${quote(key)} to be a boolean, got ${typeof value} instead`);
      flags2.push(`--supported:${key}=${value}`);
    }
  }
  if (pure) for (let fn of pure) flags2.push(`--pure:${validateStringValue(fn, "pure")}`);
  if (keepNames) flags2.push(`--keep-names`);
}
function flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {
  let flags2 = [];
  let entries = [];
  let keys = /* @__PURE__ */ Object.create(null);
  let stdinContents = null;
  let stdinResolveDir = null;
  pushLogFlags(flags2, options, keys, isTTY, logLevelDefault);
  pushCommonFlags(flags2, options, keys);
  let sourcemap = getFlag(options, keys, "sourcemap", mustBeStringOrBoolean);
  let bundle = getFlag(options, keys, "bundle", mustBeBoolean);
  let splitting = getFlag(options, keys, "splitting", mustBeBoolean);
  let preserveSymlinks = getFlag(options, keys, "preserveSymlinks", mustBeBoolean);
  let metafile = getFlag(options, keys, "metafile", mustBeBoolean);
  let outfile = getFlag(options, keys, "outfile", mustBeString);
  let outdir = getFlag(options, keys, "outdir", mustBeString);
  let outbase = getFlag(options, keys, "outbase", mustBeString);
  let tsconfig = getFlag(options, keys, "tsconfig", mustBeString);
  let resolveExtensions = getFlag(options, keys, "resolveExtensions", mustBeArray);
  let nodePathsInput = getFlag(options, keys, "nodePaths", mustBeArray);
  let mainFields = getFlag(options, keys, "mainFields", mustBeArray);
  let conditions = getFlag(options, keys, "conditions", mustBeArray);
  let external = getFlag(options, keys, "external", mustBeArray);
  let packages = getFlag(options, keys, "packages", mustBeString);
  let alias = getFlag(options, keys, "alias", mustBeObject);
  let loader = getFlag(options, keys, "loader", mustBeObject);
  let outExtension = getFlag(options, keys, "outExtension", mustBeObject);
  let publicPath = getFlag(options, keys, "publicPath", mustBeString);
  let entryNames = getFlag(options, keys, "entryNames", mustBeString);
  let chunkNames = getFlag(options, keys, "chunkNames", mustBeString);
  let assetNames = getFlag(options, keys, "assetNames", mustBeString);
  let inject = getFlag(options, keys, "inject", mustBeArray);
  let banner = getFlag(options, keys, "banner", mustBeObject);
  let footer = getFlag(options, keys, "footer", mustBeObject);
  let entryPoints = getFlag(options, keys, "entryPoints", mustBeEntryPoints);
  let absWorkingDir = getFlag(options, keys, "absWorkingDir", mustBeString);
  let stdin4 = getFlag(options, keys, "stdin", mustBeObject);
  let write3 = getFlag(options, keys, "write", mustBeBoolean) ?? writeDefault;
  let allowOverwrite = getFlag(options, keys, "allowOverwrite", mustBeBoolean);
  let mangleCache = getFlag(options, keys, "mangleCache", mustBeObject);
  keys.plugins = true;
  checkForInvalidFlags(options, keys, `in ${callName}() call`);
  if (sourcemap) flags2.push(`--sourcemap${sourcemap === true ? "" : `=${sourcemap}`}`);
  if (bundle) flags2.push("--bundle");
  if (allowOverwrite) flags2.push("--allow-overwrite");
  if (splitting) flags2.push("--splitting");
  if (preserveSymlinks) flags2.push("--preserve-symlinks");
  if (metafile) flags2.push(`--metafile`);
  if (outfile) flags2.push(`--outfile=${outfile}`);
  if (outdir) flags2.push(`--outdir=${outdir}`);
  if (outbase) flags2.push(`--outbase=${outbase}`);
  if (tsconfig) flags2.push(`--tsconfig=${tsconfig}`);
  if (packages) flags2.push(`--packages=${packages}`);
  if (resolveExtensions) {
    let values = [];
    for (let value of resolveExtensions) {
      validateStringValue(value, "resolve extension");
      if (value.indexOf(",") >= 0) throw new Error(`Invalid resolve extension: ${value}`);
      values.push(value);
    }
    flags2.push(`--resolve-extensions=${values.join(",")}`);
  }
  if (publicPath) flags2.push(`--public-path=${publicPath}`);
  if (entryNames) flags2.push(`--entry-names=${entryNames}`);
  if (chunkNames) flags2.push(`--chunk-names=${chunkNames}`);
  if (assetNames) flags2.push(`--asset-names=${assetNames}`);
  if (mainFields) {
    let values = [];
    for (let value of mainFields) {
      validateStringValue(value, "main field");
      if (value.indexOf(",") >= 0) throw new Error(`Invalid main field: ${value}`);
      values.push(value);
    }
    flags2.push(`--main-fields=${values.join(",")}`);
  }
  if (conditions) {
    let values = [];
    for (let value of conditions) {
      validateStringValue(value, "condition");
      if (value.indexOf(",") >= 0) throw new Error(`Invalid condition: ${value}`);
      values.push(value);
    }
    flags2.push(`--conditions=${values.join(",")}`);
  }
  if (external) for (let name of external) flags2.push(`--external:${validateStringValue(name, "external")}`);
  if (alias) {
    for (let old in alias) {
      if (old.indexOf("=") >= 0) throw new Error(`Invalid package name in alias: ${old}`);
      flags2.push(`--alias:${old}=${validateStringValue(alias[old], "alias", old)}`);
    }
  }
  if (banner) {
    for (let type in banner) {
      if (type.indexOf("=") >= 0) throw new Error(`Invalid banner file type: ${type}`);
      flags2.push(`--banner:${type}=${validateStringValue(banner[type], "banner", type)}`);
    }
  }
  if (footer) {
    for (let type in footer) {
      if (type.indexOf("=") >= 0) throw new Error(`Invalid footer file type: ${type}`);
      flags2.push(`--footer:${type}=${validateStringValue(footer[type], "footer", type)}`);
    }
  }
  if (inject) for (let path7 of inject) flags2.push(`--inject:${validateStringValue(path7, "inject")}`);
  if (loader) {
    for (let ext in loader) {
      if (ext.indexOf("=") >= 0) throw new Error(`Invalid loader extension: ${ext}`);
      flags2.push(`--loader:${ext}=${validateStringValue(loader[ext], "loader", ext)}`);
    }
  }
  if (outExtension) {
    for (let ext in outExtension) {
      if (ext.indexOf("=") >= 0) throw new Error(`Invalid out extension: ${ext}`);
      flags2.push(`--out-extension:${ext}=${validateStringValue(outExtension[ext], "out extension", ext)}`);
    }
  }
  if (entryPoints) {
    if (Array.isArray(entryPoints)) {
      for (let i7 = 0, n12 = entryPoints.length; i7 < n12; i7++) {
        let entryPoint = entryPoints[i7];
        if (typeof entryPoint === "object" && entryPoint !== null) {
          let entryPointKeys = /* @__PURE__ */ Object.create(null);
          let input = getFlag(entryPoint, entryPointKeys, "in", mustBeString);
          let output2 = getFlag(entryPoint, entryPointKeys, "out", mustBeString);
          checkForInvalidFlags(entryPoint, entryPointKeys, "in entry point at index " + i7);
          if (input === void 0) throw new Error('Missing property "in" for entry point at index ' + i7);
          if (output2 === void 0) throw new Error('Missing property "out" for entry point at index ' + i7);
          entries.push([output2, input]);
        } else {
          entries.push(["", validateStringValue(entryPoint, "entry point at index " + i7)]);
        }
      }
    } else {
      for (let key in entryPoints) {
        entries.push([key, validateStringValue(entryPoints[key], "entry point", key)]);
      }
    }
  }
  if (stdin4) {
    let stdinKeys = /* @__PURE__ */ Object.create(null);
    let contents = getFlag(stdin4, stdinKeys, "contents", mustBeStringOrUint8Array);
    let resolveDir = getFlag(stdin4, stdinKeys, "resolveDir", mustBeString);
    let sourcefile = getFlag(stdin4, stdinKeys, "sourcefile", mustBeString);
    let loader2 = getFlag(stdin4, stdinKeys, "loader", mustBeString);
    checkForInvalidFlags(stdin4, stdinKeys, 'in "stdin" object');
    if (sourcefile) flags2.push(`--sourcefile=${sourcefile}`);
    if (loader2) flags2.push(`--loader=${loader2}`);
    if (resolveDir) stdinResolveDir = resolveDir;
    if (typeof contents === "string") stdinContents = encodeUTF8(contents);
    else if (contents instanceof Uint8Array) stdinContents = contents;
  }
  let nodePaths = [];
  if (nodePathsInput) {
    for (let value of nodePathsInput) {
      value += "";
      nodePaths.push(value);
    }
  }
  return {
    entries,
    flags: flags2,
    write: write3,
    stdinContents,
    stdinResolveDir,
    absWorkingDir,
    nodePaths,
    mangleCache: validateMangleCache(mangleCache)
  };
}
function flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {
  let flags2 = [];
  let keys = /* @__PURE__ */ Object.create(null);
  pushLogFlags(flags2, options, keys, isTTY, logLevelDefault);
  pushCommonFlags(flags2, options, keys);
  let sourcemap = getFlag(options, keys, "sourcemap", mustBeStringOrBoolean);
  let sourcefile = getFlag(options, keys, "sourcefile", mustBeString);
  let loader = getFlag(options, keys, "loader", mustBeString);
  let banner = getFlag(options, keys, "banner", mustBeString);
  let footer = getFlag(options, keys, "footer", mustBeString);
  let mangleCache = getFlag(options, keys, "mangleCache", mustBeObject);
  checkForInvalidFlags(options, keys, `in ${callName}() call`);
  if (sourcemap) flags2.push(`--sourcemap=${sourcemap === true ? "external" : sourcemap}`);
  if (sourcefile) flags2.push(`--sourcefile=${sourcefile}`);
  if (loader) flags2.push(`--loader=${loader}`);
  if (banner) flags2.push(`--banner=${banner}`);
  if (footer) flags2.push(`--footer=${footer}`);
  return {
    flags: flags2,
    mangleCache: validateMangleCache(mangleCache)
  };
}
function createChannel(streamIn) {
  const requestCallbacksByKey = {};
  const closeData = { didClose: false, reason: "" };
  let responseCallbacks = {};
  let nextRequestID = 0;
  let nextBuildKey = 0;
  let stdout4 = new Uint8Array(16 * 1024);
  let stdoutUsed = 0;
  let readFromStdout = (chunk) => {
    let limit = stdoutUsed + chunk.length;
    if (limit > stdout4.length) {
      let swap2 = new Uint8Array(limit * 2);
      swap2.set(stdout4);
      stdout4 = swap2;
    }
    stdout4.set(chunk, stdoutUsed);
    stdoutUsed += chunk.length;
    let offset = 0;
    while (offset + 4 <= stdoutUsed) {
      let length = readUInt32LE(stdout4, offset);
      if (offset + 4 + length > stdoutUsed) {
        break;
      }
      offset += 4;
      handleIncomingPacket(stdout4.subarray(offset, offset + length));
      offset += length;
    }
    if (offset > 0) {
      stdout4.copyWithin(0, offset, stdoutUsed);
      stdoutUsed -= offset;
    }
  };
  let afterClose = (error) => {
    closeData.didClose = true;
    if (error) closeData.reason = ": " + (error.message || error);
    const text = "The service was stopped" + closeData.reason;
    for (let id in responseCallbacks) {
      responseCallbacks[id](text, null);
    }
    responseCallbacks = {};
  };
  let sendRequest = (refs, value, callback) => {
    if (closeData.didClose) return callback("The service is no longer running" + closeData.reason, null);
    let id = nextRequestID++;
    responseCallbacks[id] = (error, response) => {
      try {
        callback(error, response);
      } finally {
        if (refs) refs.unref();
      }
    };
    if (refs) refs.ref();
    streamIn.writeToStdin(encodePacket({ id, isRequest: true, value }));
  };
  let sendResponse = (id, value) => {
    if (closeData.didClose) throw new Error("The service is no longer running" + closeData.reason);
    streamIn.writeToStdin(encodePacket({ id, isRequest: false, value }));
  };
  let handleRequest = async (id, request) => {
    try {
      if (request.command === "ping") {
        sendResponse(id, {});
        return;
      }
      if (typeof request.key === "number") {
        const requestCallbacks = requestCallbacksByKey[request.key];
        if (!requestCallbacks) {
          return;
        }
        const callback = requestCallbacks[request.command];
        if (callback) {
          await callback(id, request);
          return;
        }
      }
      throw new Error(`Invalid command: ` + request.command);
    } catch (e6) {
      const errors2 = [extractErrorMessageV8(e6, streamIn, null, void 0, "")];
      try {
        sendResponse(id, { errors: errors2 });
      } catch {
      }
    }
  };
  let isFirstPacket = true;
  let handleIncomingPacket = (bytes) => {
    if (isFirstPacket) {
      isFirstPacket = false;
      let binaryVersion = String.fromCharCode(...bytes);
      if (binaryVersion !== "0.24.0") {
        throw new Error(`Cannot start service: Host version "${"0.24.0"}" does not match binary version ${quote(binaryVersion)}`);
      }
      return;
    }
    let packet = decodePacket(bytes);
    if (packet.isRequest) {
      handleRequest(packet.id, packet.value);
    } else {
      let callback = responseCallbacks[packet.id];
      delete responseCallbacks[packet.id];
      if (packet.value.error) callback(packet.value.error, {});
      else callback(null, packet.value);
    }
  };
  let buildOrContext = ({ callName, refs, options, isTTY, defaultWD: defaultWD2, callback }) => {
    let refCount = 0;
    const buildKey = nextBuildKey++;
    const requestCallbacks = {};
    const buildRefs = {
      ref() {
        if (++refCount === 1) {
          if (refs) refs.ref();
        }
      },
      unref() {
        if (--refCount === 0) {
          delete requestCallbacksByKey[buildKey];
          if (refs) refs.unref();
        }
      }
    };
    requestCallbacksByKey[buildKey] = requestCallbacks;
    buildRefs.ref();
    buildOrContextImpl(
      callName,
      buildKey,
      sendRequest,
      sendResponse,
      buildRefs,
      streamIn,
      requestCallbacks,
      options,
      isTTY,
      defaultWD2,
      (err, res) => {
        try {
          callback(err, res);
        } finally {
          buildRefs.unref();
        }
      }
    );
  };
  let transform2 = ({ callName, refs, input, options, isTTY, fs: fs2, callback }) => {
    const details = createObjectStash();
    let start = (inputPath) => {
      try {
        if (typeof input !== "string" && !(input instanceof Uint8Array))
          throw new Error('The input to "transform" must be a string or a Uint8Array');
        let {
          flags: flags2,
          mangleCache
        } = flagsForTransformOptions(callName, options, isTTY, transformLogLevelDefault);
        let request = {
          command: "transform",
          flags: flags2,
          inputFS: inputPath !== null,
          input: inputPath !== null ? encodeUTF8(inputPath) : typeof input === "string" ? encodeUTF8(input) : input
        };
        if (mangleCache) request.mangleCache = mangleCache;
        sendRequest(refs, request, (error, response) => {
          if (error) return callback(new Error(error), null);
          let errors2 = replaceDetailsInMessages(response.errors, details);
          let warnings = replaceDetailsInMessages(response.warnings, details);
          let outstanding = 1;
          let next = () => {
            if (--outstanding === 0) {
              let result = {
                warnings,
                code: response.code,
                map: response.map,
                mangleCache: void 0,
                legalComments: void 0
              };
              if ("legalComments" in response) result.legalComments = response == null ? void 0 : response.legalComments;
              if (response.mangleCache) result.mangleCache = response == null ? void 0 : response.mangleCache;
              callback(null, result);
            }
          };
          if (errors2.length > 0) return callback(failureErrorWithLog("Transform failed", errors2, warnings), null);
          if (response.codeFS) {
            outstanding++;
            fs2.readFile(response.code, (err, contents) => {
              if (err !== null) {
                callback(err, null);
              } else {
                response.code = contents;
                next();
              }
            });
          }
          if (response.mapFS) {
            outstanding++;
            fs2.readFile(response.map, (err, contents) => {
              if (err !== null) {
                callback(err, null);
              } else {
                response.map = contents;
                next();
              }
            });
          }
          next();
        });
      } catch (e6) {
        let flags2 = [];
        try {
          pushLogFlags(flags2, options, {}, isTTY, transformLogLevelDefault);
        } catch {
        }
        const error = extractErrorMessageV8(e6, streamIn, details, void 0, "");
        sendRequest(refs, { command: "error", flags: flags2, error }, () => {
          error.detail = details.load(error.detail);
          callback(failureErrorWithLog("Transform failed", [error], []), null);
        });
      }
    };
    if ((typeof input === "string" || input instanceof Uint8Array) && input.length > 1024 * 1024) {
      let next = start;
      start = () => fs2.writeFile(input, next);
    }
    start(null);
  };
  let formatMessages2 = ({ callName, refs, messages, options, callback }) => {
    if (!options) throw new Error(`Missing second argument in ${callName}() call`);
    let keys = {};
    let kind = getFlag(options, keys, "kind", mustBeString);
    let color = getFlag(options, keys, "color", mustBeBoolean);
    let terminalWidth = getFlag(options, keys, "terminalWidth", mustBeInteger);
    checkForInvalidFlags(options, keys, `in ${callName}() call`);
    if (kind === void 0) throw new Error(`Missing "kind" in ${callName}() call`);
    if (kind !== "error" && kind !== "warning") throw new Error(`Expected "kind" to be "error" or "warning" in ${callName}() call`);
    let request = {
      command: "format-msgs",
      messages: sanitizeMessages(messages, "messages", null, "", terminalWidth),
      isWarning: kind === "warning"
    };
    if (color !== void 0) request.color = color;
    if (terminalWidth !== void 0) request.terminalWidth = terminalWidth;
    sendRequest(refs, request, (error, response) => {
      if (error) return callback(new Error(error), null);
      callback(null, response.messages);
    });
  };
  let analyzeMetafile2 = ({ callName, refs, metafile, options, callback }) => {
    if (options === void 0) options = {};
    let keys = {};
    let color = getFlag(options, keys, "color", mustBeBoolean);
    let verbose = getFlag(options, keys, "verbose", mustBeBoolean);
    checkForInvalidFlags(options, keys, `in ${callName}() call`);
    let request = {
      command: "analyze-metafile",
      metafile
    };
    if (color !== void 0) request.color = color;
    if (verbose !== void 0) request.verbose = verbose;
    sendRequest(refs, request, (error, response) => {
      if (error) return callback(new Error(error), null);
      callback(null, response.result);
    });
  };
  return {
    readFromStdout,
    afterClose,
    service: {
      buildOrContext,
      transform: transform2,
      formatMessages: formatMessages2,
      analyzeMetafile: analyzeMetafile2
    }
  };
}
function buildOrContextImpl(callName, buildKey, sendRequest, sendResponse, refs, streamIn, requestCallbacks, options, isTTY, defaultWD2, callback) {
  const details = createObjectStash();
  const isContext = callName === "context";
  const handleError = (e6, pluginName) => {
    const flags2 = [];
    try {
      pushLogFlags(flags2, options, {}, isTTY, buildLogLevelDefault);
    } catch {
    }
    const message = extractErrorMessageV8(e6, streamIn, details, void 0, pluginName);
    sendRequest(refs, { command: "error", flags: flags2, error: message }, () => {
      message.detail = details.load(message.detail);
      callback(failureErrorWithLog(isContext ? "Context failed" : "Build failed", [message], []), null);
    });
  };
  let plugins;
  if (typeof options === "object") {
    const value = options.plugins;
    if (value !== void 0) {
      if (!Array.isArray(value)) return handleError(new Error(`"plugins" must be an array`), "");
      plugins = value;
    }
  }
  if (plugins && plugins.length > 0) {
    if (streamIn.isSync) return handleError(new Error("Cannot use plugins in synchronous API calls"), "");
    handlePlugins(
      buildKey,
      sendRequest,
      sendResponse,
      refs,
      streamIn,
      requestCallbacks,
      options,
      plugins,
      details
    ).then(
      (result) => {
        if (!result.ok) return handleError(result.error, result.pluginName);
        try {
          buildOrContextContinue(result.requestPlugins, result.runOnEndCallbacks, result.scheduleOnDisposeCallbacks);
        } catch (e6) {
          handleError(e6, "");
        }
      },
      (e6) => handleError(e6, "")
    );
    return;
  }
  try {
    buildOrContextContinue(null, (result, done) => done([], []), () => {
    });
  } catch (e6) {
    handleError(e6, "");
  }
  function buildOrContextContinue(requestPlugins, runOnEndCallbacks, scheduleOnDisposeCallbacks) {
    const writeDefault = streamIn.hasFS;
    const {
      entries,
      flags: flags2,
      write: write3,
      stdinContents,
      stdinResolveDir,
      absWorkingDir,
      nodePaths,
      mangleCache
    } = flagsForBuildOptions(callName, options, isTTY, buildLogLevelDefault, writeDefault);
    if (write3 && !streamIn.hasFS) throw new Error(`The "write" option is unavailable in this environment`);
    const request = {
      command: "build",
      key: buildKey,
      entries,
      flags: flags2,
      write: write3,
      stdinContents,
      stdinResolveDir,
      absWorkingDir: absWorkingDir || defaultWD2,
      nodePaths,
      context: isContext
    };
    if (requestPlugins) request.plugins = requestPlugins;
    if (mangleCache) request.mangleCache = mangleCache;
    const buildResponseToResult = (response, callback2) => {
      const result = {
        errors: replaceDetailsInMessages(response.errors, details),
        warnings: replaceDetailsInMessages(response.warnings, details),
        outputFiles: void 0,
        metafile: void 0,
        mangleCache: void 0
      };
      const originalErrors = result.errors.slice();
      const originalWarnings = result.warnings.slice();
      if (response.outputFiles) result.outputFiles = response.outputFiles.map(convertOutputFiles);
      if (response.metafile) result.metafile = JSON.parse(response.metafile);
      if (response.mangleCache) result.mangleCache = response.mangleCache;
      if (response.writeToStdout !== void 0) console.log(decodeUTF8(response.writeToStdout).replace(/\n$/, ""));
      runOnEndCallbacks(result, (onEndErrors, onEndWarnings) => {
        if (originalErrors.length > 0 || onEndErrors.length > 0) {
          const error = failureErrorWithLog("Build failed", originalErrors.concat(onEndErrors), originalWarnings.concat(onEndWarnings));
          return callback2(error, null, onEndErrors, onEndWarnings);
        }
        callback2(null, result, onEndErrors, onEndWarnings);
      });
    };
    let latestResultPromise;
    let provideLatestResult;
    if (isContext)
      requestCallbacks["on-end"] = (id, request2) => new Promise((resolve10) => {
        buildResponseToResult(request2, (err, result, onEndErrors, onEndWarnings) => {
          const response = {
            errors: onEndErrors,
            warnings: onEndWarnings
          };
          if (provideLatestResult) provideLatestResult(err, result);
          latestResultPromise = void 0;
          provideLatestResult = void 0;
          sendResponse(id, response);
          resolve10();
        });
      });
    sendRequest(refs, request, (error, response) => {
      if (error) return callback(new Error(error), null);
      if (!isContext) {
        return buildResponseToResult(response, (err, res) => {
          scheduleOnDisposeCallbacks();
          return callback(err, res);
        });
      }
      if (response.errors.length > 0) {
        return callback(failureErrorWithLog("Context failed", response.errors, response.warnings), null);
      }
      let didDispose = false;
      const result = {
        rebuild: () => {
          if (!latestResultPromise) latestResultPromise = new Promise((resolve10, reject) => {
            let settlePromise;
            provideLatestResult = (err, result2) => {
              if (!settlePromise) settlePromise = () => err ? reject(err) : resolve10(result2);
            };
            const triggerAnotherBuild = () => {
              const request2 = {
                command: "rebuild",
                key: buildKey
              };
              sendRequest(refs, request2, (error2, response2) => {
                if (error2) {
                  reject(new Error(error2));
                } else if (settlePromise) {
                  settlePromise();
                } else {
                  triggerAnotherBuild();
                }
              });
            };
            triggerAnotherBuild();
          });
          return latestResultPromise;
        },
        watch: (options2 = {}) => new Promise((resolve10, reject) => {
          if (!streamIn.hasFS) throw new Error(`Cannot use the "watch" API in this environment`);
          const keys = {};
          checkForInvalidFlags(options2, keys, `in watch() call`);
          const request2 = {
            command: "watch",
            key: buildKey
          };
          sendRequest(refs, request2, (error2) => {
            if (error2) reject(new Error(error2));
            else resolve10(void 0);
          });
        }),
        serve: (options2 = {}) => new Promise((resolve10, reject) => {
          if (!streamIn.hasFS) throw new Error(`Cannot use the "serve" API in this environment`);
          const keys = {};
          const port = getFlag(options2, keys, "port", mustBeInteger);
          const host = getFlag(options2, keys, "host", mustBeString);
          const servedir = getFlag(options2, keys, "servedir", mustBeString);
          const keyfile = getFlag(options2, keys, "keyfile", mustBeString);
          const certfile = getFlag(options2, keys, "certfile", mustBeString);
          const fallback = getFlag(options2, keys, "fallback", mustBeString);
          const onRequest = getFlag(options2, keys, "onRequest", mustBeFunction);
          checkForInvalidFlags(options2, keys, `in serve() call`);
          const request2 = {
            command: "serve",
            key: buildKey,
            onRequest: !!onRequest
          };
          if (port !== void 0) request2.port = port;
          if (host !== void 0) request2.host = host;
          if (servedir !== void 0) request2.servedir = servedir;
          if (keyfile !== void 0) request2.keyfile = keyfile;
          if (certfile !== void 0) request2.certfile = certfile;
          if (fallback !== void 0) request2.fallback = fallback;
          sendRequest(refs, request2, (error2, response2) => {
            if (error2) return reject(new Error(error2));
            if (onRequest) {
              requestCallbacks["serve-request"] = (id, request3) => {
                onRequest(request3.args);
                sendResponse(id, {});
              };
            }
            resolve10(response2);
          });
        }),
        cancel: () => new Promise((resolve10) => {
          if (didDispose) return resolve10();
          const request2 = {
            command: "cancel",
            key: buildKey
          };
          sendRequest(refs, request2, () => {
            resolve10();
          });
        }),
        dispose: () => new Promise((resolve10) => {
          if (didDispose) return resolve10();
          didDispose = true;
          const request2 = {
            command: "dispose",
            key: buildKey
          };
          sendRequest(refs, request2, () => {
            resolve10();
            scheduleOnDisposeCallbacks();
            refs.unref();
          });
        })
      };
      refs.ref();
      callback(null, result);
    });
  }
}
var handlePlugins = async (buildKey, sendRequest, sendResponse, refs, streamIn, requestCallbacks, initialOptions, plugins, details) => {
  let onStartCallbacks = [];
  let onEndCallbacks = [];
  let onResolveCallbacks = {};
  let onLoadCallbacks = {};
  let onDisposeCallbacks = [];
  let nextCallbackID = 0;
  let i7 = 0;
  let requestPlugins = [];
  let isSetupDone = false;
  plugins = [...plugins];
  for (let item of plugins) {
    let keys = {};
    if (typeof item !== "object") throw new Error(`Plugin at index ${i7} must be an object`);
    const name = getFlag(item, keys, "name", mustBeString);
    if (typeof name !== "string" || name === "") throw new Error(`Plugin at index ${i7} is missing a name`);
    try {
      let setup = getFlag(item, keys, "setup", mustBeFunction);
      if (typeof setup !== "function") throw new Error(`Plugin is missing a setup function`);
      checkForInvalidFlags(item, keys, `on plugin ${quote(name)}`);
      let plugin = {
        name,
        onStart: false,
        onEnd: false,
        onResolve: [],
        onLoad: []
      };
      i7++;
      let resolve10 = (path7, options = {}) => {
        if (!isSetupDone) throw new Error('Cannot call "resolve" before plugin setup has completed');
        if (typeof path7 !== "string") throw new Error(`The path to resolve must be a string`);
        let keys2 = /* @__PURE__ */ Object.create(null);
        let pluginName = getFlag(options, keys2, "pluginName", mustBeString);
        let importer = getFlag(options, keys2, "importer", mustBeString);
        let namespace = getFlag(options, keys2, "namespace", mustBeString);
        let resolveDir = getFlag(options, keys2, "resolveDir", mustBeString);
        let kind = getFlag(options, keys2, "kind", mustBeString);
        let pluginData = getFlag(options, keys2, "pluginData", canBeAnything);
        let importAttributes = getFlag(options, keys2, "with", mustBeObject);
        checkForInvalidFlags(options, keys2, "in resolve() call");
        return new Promise((resolve22, reject) => {
          const request = {
            command: "resolve",
            path: path7,
            key: buildKey,
            pluginName: name
          };
          if (pluginName != null) request.pluginName = pluginName;
          if (importer != null) request.importer = importer;
          if (namespace != null) request.namespace = namespace;
          if (resolveDir != null) request.resolveDir = resolveDir;
          if (kind != null) request.kind = kind;
          else throw new Error(`Must specify "kind" when calling "resolve"`);
          if (pluginData != null) request.pluginData = details.store(pluginData);
          if (importAttributes != null) request.with = sanitizeStringMap(importAttributes, "with");
          sendRequest(refs, request, (error, response) => {
            if (error !== null) reject(new Error(error));
            else resolve22({
              errors: replaceDetailsInMessages(response.errors, details),
              warnings: replaceDetailsInMessages(response.warnings, details),
              path: response.path,
              external: response.external,
              sideEffects: response.sideEffects,
              namespace: response.namespace,
              suffix: response.suffix,
              pluginData: details.load(response.pluginData)
            });
          });
        });
      };
      let promise = setup({
        initialOptions,
        resolve: resolve10,
        onStart(callback) {
          let registeredText = `This error came from the "onStart" callback registered here:`;
          let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onStart");
          onStartCallbacks.push({ name, callback, note: registeredNote });
          plugin.onStart = true;
        },
        onEnd(callback) {
          let registeredText = `This error came from the "onEnd" callback registered here:`;
          let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onEnd");
          onEndCallbacks.push({ name, callback, note: registeredNote });
          plugin.onEnd = true;
        },
        onResolve(options, callback) {
          let registeredText = `This error came from the "onResolve" callback registered here:`;
          let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onResolve");
          let keys2 = {};
          let filter = getFlag(options, keys2, "filter", mustBeRegExp);
          let namespace = getFlag(options, keys2, "namespace", mustBeString);
          checkForInvalidFlags(options, keys2, `in onResolve() call for plugin ${quote(name)}`);
          if (filter == null) throw new Error(`onResolve() call is missing a filter`);
          let id = nextCallbackID++;
          onResolveCallbacks[id] = { name, callback, note: registeredNote };
          plugin.onResolve.push({ id, filter: filter.source, namespace: namespace || "" });
        },
        onLoad(options, callback) {
          let registeredText = `This error came from the "onLoad" callback registered here:`;
          let registeredNote = extractCallerV8(new Error(registeredText), streamIn, "onLoad");
          let keys2 = {};
          let filter = getFlag(options, keys2, "filter", mustBeRegExp);
          let namespace = getFlag(options, keys2, "namespace", mustBeString);
          checkForInvalidFlags(options, keys2, `in onLoad() call for plugin ${quote(name)}`);
          if (filter == null) throw new Error(`onLoad() call is missing a filter`);
          let id = nextCallbackID++;
          onLoadCallbacks[id] = { name, callback, note: registeredNote };
          plugin.onLoad.push({ id, filter: filter.source, namespace: namespace || "" });
        },
        onDispose(callback) {
          onDisposeCallbacks.push(callback);
        },
        esbuild: streamIn.esbuild
      });
      if (promise) await promise;
      requestPlugins.push(plugin);
    } catch (e6) {
      return { ok: false, error: e6, pluginName: name };
    }
  }
  requestCallbacks["on-start"] = async (id, request) => {
    details.clear();
    let response = { errors: [], warnings: [] };
    await Promise.all(onStartCallbacks.map(async ({ name, callback, note }) => {
      try {
        let result = await callback();
        if (result != null) {
          if (typeof result !== "object") throw new Error(`Expected onStart() callback in plugin ${quote(name)} to return an object`);
          let keys = {};
          let errors2 = getFlag(result, keys, "errors", mustBeArray);
          let warnings = getFlag(result, keys, "warnings", mustBeArray);
          checkForInvalidFlags(result, keys, `from onStart() callback in plugin ${quote(name)}`);
          if (errors2 != null) response.errors.push(...sanitizeMessages(errors2, "errors", details, name, void 0));
          if (warnings != null) response.warnings.push(...sanitizeMessages(warnings, "warnings", details, name, void 0));
        }
      } catch (e6) {
        response.errors.push(extractErrorMessageV8(e6, streamIn, details, note && note(), name));
      }
    }));
    sendResponse(id, response);
  };
  requestCallbacks["on-resolve"] = async (id, request) => {
    let response = {}, name = "", callback, note;
    for (let id2 of request.ids) {
      try {
        ({ name, callback, note } = onResolveCallbacks[id2]);
        let result = await callback({
          path: request.path,
          importer: request.importer,
          namespace: request.namespace,
          resolveDir: request.resolveDir,
          kind: request.kind,
          pluginData: details.load(request.pluginData),
          with: request.with
        });
        if (result != null) {
          if (typeof result !== "object") throw new Error(`Expected onResolve() callback in plugin ${quote(name)} to return an object`);
          let keys = {};
          let pluginName = getFlag(result, keys, "pluginName", mustBeString);
          let path7 = getFlag(result, keys, "path", mustBeString);
          let namespace = getFlag(result, keys, "namespace", mustBeString);
          let suffix = getFlag(result, keys, "suffix", mustBeString);
          let external = getFlag(result, keys, "external", mustBeBoolean);
          let sideEffects = getFlag(result, keys, "sideEffects", mustBeBoolean);
          let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
          let errors2 = getFlag(result, keys, "errors", mustBeArray);
          let warnings = getFlag(result, keys, "warnings", mustBeArray);
          let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
          let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
          checkForInvalidFlags(result, keys, `from onResolve() callback in plugin ${quote(name)}`);
          response.id = id2;
          if (pluginName != null) response.pluginName = pluginName;
          if (path7 != null) response.path = path7;
          if (namespace != null) response.namespace = namespace;
          if (suffix != null) response.suffix = suffix;
          if (external != null) response.external = external;
          if (sideEffects != null) response.sideEffects = sideEffects;
          if (pluginData != null) response.pluginData = details.store(pluginData);
          if (errors2 != null) response.errors = sanitizeMessages(errors2, "errors", details, name, void 0);
          if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", details, name, void 0);
          if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
          if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
          break;
        }
      } catch (e6) {
        response = { id: id2, errors: [extractErrorMessageV8(e6, streamIn, details, note && note(), name)] };
        break;
      }
    }
    sendResponse(id, response);
  };
  requestCallbacks["on-load"] = async (id, request) => {
    let response = {}, name = "", callback, note;
    for (let id2 of request.ids) {
      try {
        ({ name, callback, note } = onLoadCallbacks[id2]);
        let result = await callback({
          path: request.path,
          namespace: request.namespace,
          suffix: request.suffix,
          pluginData: details.load(request.pluginData),
          with: request.with
        });
        if (result != null) {
          if (typeof result !== "object") throw new Error(`Expected onLoad() callback in plugin ${quote(name)} to return an object`);
          let keys = {};
          let pluginName = getFlag(result, keys, "pluginName", mustBeString);
          let contents = getFlag(result, keys, "contents", mustBeStringOrUint8Array);
          let resolveDir = getFlag(result, keys, "resolveDir", mustBeString);
          let pluginData = getFlag(result, keys, "pluginData", canBeAnything);
          let loader = getFlag(result, keys, "loader", mustBeString);
          let errors2 = getFlag(result, keys, "errors", mustBeArray);
          let warnings = getFlag(result, keys, "warnings", mustBeArray);
          let watchFiles = getFlag(result, keys, "watchFiles", mustBeArray);
          let watchDirs = getFlag(result, keys, "watchDirs", mustBeArray);
          checkForInvalidFlags(result, keys, `from onLoad() callback in plugin ${quote(name)}`);
          response.id = id2;
          if (pluginName != null) response.pluginName = pluginName;
          if (contents instanceof Uint8Array) response.contents = contents;
          else if (contents != null) response.contents = encodeUTF8(contents);
          if (resolveDir != null) response.resolveDir = resolveDir;
          if (pluginData != null) response.pluginData = details.store(pluginData);
          if (loader != null) response.loader = loader;
          if (errors2 != null) response.errors = sanitizeMessages(errors2, "errors", details, name, void 0);
          if (warnings != null) response.warnings = sanitizeMessages(warnings, "warnings", details, name, void 0);
          if (watchFiles != null) response.watchFiles = sanitizeStringArray(watchFiles, "watchFiles");
          if (watchDirs != null) response.watchDirs = sanitizeStringArray(watchDirs, "watchDirs");
          break;
        }
      } catch (e6) {
        response = { id: id2, errors: [extractErrorMessageV8(e6, streamIn, details, note && note(), name)] };
        break;
      }
    }
    sendResponse(id, response);
  };
  let runOnEndCallbacks = (result, done) => done([], []);
  if (onEndCallbacks.length > 0) {
    runOnEndCallbacks = (result, done) => {
      (async () => {
        const onEndErrors = [];
        const onEndWarnings = [];
        for (const { name, callback, note } of onEndCallbacks) {
          let newErrors;
          let newWarnings;
          try {
            const value = await callback(result);
            if (value != null) {
              if (typeof value !== "object") throw new Error(`Expected onEnd() callback in plugin ${quote(name)} to return an object`);
              let keys = {};
              let errors2 = getFlag(value, keys, "errors", mustBeArray);
              let warnings = getFlag(value, keys, "warnings", mustBeArray);
              checkForInvalidFlags(value, keys, `from onEnd() callback in plugin ${quote(name)}`);
              if (errors2 != null) newErrors = sanitizeMessages(errors2, "errors", details, name, void 0);
              if (warnings != null) newWarnings = sanitizeMessages(warnings, "warnings", details, name, void 0);
            }
          } catch (e6) {
            newErrors = [extractErrorMessageV8(e6, streamIn, details, note && note(), name)];
          }
          if (newErrors) {
            onEndErrors.push(...newErrors);
            try {
              result.errors.push(...newErrors);
            } catch {
            }
          }
          if (newWarnings) {
            onEndWarnings.push(...newWarnings);
            try {
              result.warnings.push(...newWarnings);
            } catch {
            }
          }
        }
        done(onEndErrors, onEndWarnings);
      })();
    };
  }
  let scheduleOnDisposeCallbacks = () => {
    for (const cb of onDisposeCallbacks) {
      setTimeout(() => cb(), 0);
    }
  };
  isSetupDone = true;
  return {
    ok: true,
    requestPlugins,
    runOnEndCallbacks,
    scheduleOnDisposeCallbacks
  };
};
function createObjectStash() {
  const map = /* @__PURE__ */ new Map();
  let nextID = 0;
  return {
    clear() {
      map.clear();
    },
    load(id) {
      return map.get(id);
    },
    store(value) {
      if (value === void 0) return -1;
      const id = nextID++;
      map.set(id, value);
      return id;
    }
  };
}
function extractCallerV8(e6, streamIn, ident) {
  let note;
  let tried = false;
  return () => {
    if (tried) return note;
    tried = true;
    try {
      let lines = (e6.stack + "").split("\n");
      lines.splice(1, 1);
      let location = parseStackLinesV8(streamIn, lines, ident);
      if (location) {
        note = { text: e6.message, location };
        return note;
      }
    } catch {
    }
  };
}
function extractErrorMessageV8(e6, streamIn, stash, note, pluginName) {
  let text = "Internal error";
  let location = null;
  try {
    text = (e6 && e6.message || e6) + "";
  } catch {
  }
  try {
    location = parseStackLinesV8(streamIn, (e6.stack + "").split("\n"), "");
  } catch {
  }
  return { id: "", pluginName, text, location, notes: note ? [note] : [], detail: stash ? stash.store(e6) : -1 };
}
function parseStackLinesV8(streamIn, lines, ident) {
  let at = "    at ";
  if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {
    for (let i7 = 1; i7 < lines.length; i7++) {
      let line = lines[i7];
      if (!line.startsWith(at)) continue;
      line = line.slice(at.length);
      while (true) {
        let match = /^(?:new |async )?\S+ \((.*)\)$/.exec(line);
        if (match) {
          line = match[1];
          continue;
        }
        match = /^eval at \S+ \((.*)\)(?:, \S+:\d+:\d+)?$/.exec(line);
        if (match) {
          line = match[1];
          continue;
        }
        match = /^(\S+):(\d+):(\d+)$/.exec(line);
        if (match) {
          let contents;
          try {
            contents = streamIn.readFileSync(match[1], "utf8");
          } catch {
            break;
          }
          let lineText = contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2] - 1] || "";
          let column = +match[3] - 1;
          let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;
          return {
            file: match[1],
            namespace: "file",
            line: +match[2],
            column: encodeUTF8(lineText.slice(0, column)).length,
            length: encodeUTF8(lineText.slice(column, column + length)).length,
            lineText: lineText + "\n" + lines.slice(1).join("\n"),
            suggestion: ""
          };
        }
        break;
      }
    }
  }
  return null;
}
function failureErrorWithLog(text, errors2, warnings) {
  let limit = 5;
  text += errors2.length < 1 ? "" : ` with ${errors2.length} error${errors2.length < 2 ? "" : "s"}:` + errors2.slice(0, limit + 1).map((e6, i7) => {
    if (i7 === limit) return "\n...";
    if (!e6.location) return `
error: ${e6.text}`;
    let { file, line, column } = e6.location;
    let pluginText = e6.pluginName ? `[plugin: ${e6.pluginName}] ` : "";
    return `
${file}:${line}:${column}: ERROR: ${pluginText}${e6.text}`;
  }).join("");
  let error = new Error(text);
  for (const [key, value] of [["errors", errors2], ["warnings", warnings]]) {
    Object.defineProperty(error, key, {
      configurable: true,
      enumerable: true,
      get: () => value,
      set: (value2) => Object.defineProperty(error, key, {
        configurable: true,
        enumerable: true,
        value: value2
      })
    });
  }
  return error;
}
function replaceDetailsInMessages(messages, stash) {
  for (const message of messages) {
    message.detail = stash.load(message.detail);
  }
  return messages;
}
function sanitizeLocation(location, where, terminalWidth) {
  if (location == null) return null;
  let keys = {};
  let file = getFlag(location, keys, "file", mustBeString);
  let namespace = getFlag(location, keys, "namespace", mustBeString);
  let line = getFlag(location, keys, "line", mustBeInteger);
  let column = getFlag(location, keys, "column", mustBeInteger);
  let length = getFlag(location, keys, "length", mustBeInteger);
  let lineText = getFlag(location, keys, "lineText", mustBeString);
  let suggestion = getFlag(location, keys, "suggestion", mustBeString);
  checkForInvalidFlags(location, keys, where);
  if (lineText) {
    const relevantASCII = lineText.slice(
      0,
      (column && column > 0 ? column : 0) + (length && length > 0 ? length : 0) + (terminalWidth && terminalWidth > 0 ? terminalWidth : 80)
    );
    if (!/[\x7F-\uFFFF]/.test(relevantASCII) && !/\n/.test(lineText)) {
      lineText = relevantASCII;
    }
  }
  return {
    file: file || "",
    namespace: namespace || "",
    line: line || 0,
    column: column || 0,
    length: length || 0,
    lineText: lineText || "",
    suggestion: suggestion || ""
  };
}
function sanitizeMessages(messages, property, stash, fallbackPluginName, terminalWidth) {
  let messagesClone = [];
  let index = 0;
  for (const message of messages) {
    let keys = {};
    let id = getFlag(message, keys, "id", mustBeString);
    let pluginName = getFlag(message, keys, "pluginName", mustBeString);
    let text = getFlag(message, keys, "text", mustBeString);
    let location = getFlag(message, keys, "location", mustBeObjectOrNull);
    let notes = getFlag(message, keys, "notes", mustBeArray);
    let detail = getFlag(message, keys, "detail", canBeAnything);
    let where = `in element ${index} of "${property}"`;
    checkForInvalidFlags(message, keys, where);
    let notesClone = [];
    if (notes) {
      for (const note of notes) {
        let noteKeys = {};
        let noteText = getFlag(note, noteKeys, "text", mustBeString);
        let noteLocation = getFlag(note, noteKeys, "location", mustBeObjectOrNull);
        checkForInvalidFlags(note, noteKeys, where);
        notesClone.push({
          text: noteText || "",
          location: sanitizeLocation(noteLocation, where, terminalWidth)
        });
      }
    }
    messagesClone.push({
      id: id || "",
      pluginName: pluginName || fallbackPluginName,
      text: text || "",
      location: sanitizeLocation(location, where, terminalWidth),
      notes: notesClone,
      detail: stash ? stash.store(detail) : -1
    });
    index++;
  }
  return messagesClone;
}
function sanitizeStringArray(values, property) {
  const result = [];
  for (const value of values) {
    if (typeof value !== "string") throw new Error(`${quote(property)} must be an array of strings`);
    result.push(value);
  }
  return result;
}
function sanitizeStringMap(map, property) {
  const result = /* @__PURE__ */ Object.create(null);
  for (const key in map) {
    const value = map[key];
    if (typeof value !== "string") throw new Error(`key ${quote(key)} in object ${quote(property)} must be a string`);
    result[key] = value;
  }
  return result;
}
function convertOutputFiles({ path: path7, contents, hash }) {
  let text = null;
  return {
    path: path7,
    contents,
    hash,
    get text() {
      const binary = this.contents;
      if (text === null || binary !== contents) {
        contents = binary;
        text = decodeUTF8(binary);
      }
      return text;
    }
  };
}
var version = "0.24.0";
var build = (options) => ensureServiceIsRunning().then((service) => service.build(options));
var context = (options) => ensureServiceIsRunning().then((service) => service.context(options));
var transform = (input, options) => ensureServiceIsRunning().then((service) => service.transform(input, options));
var formatMessages = (messages, options) => ensureServiceIsRunning().then((service) => service.formatMessages(messages, options));
var analyzeMetafile = (metafile, options) => ensureServiceIsRunning().then((service) => service.analyzeMetafile(metafile, options));
var buildSync = () => {
  throw new Error(`The "buildSync" API does not work in Deno`);
};
var transformSync = () => {
  throw new Error(`The "transformSync" API does not work in Deno`);
};
var formatMessagesSync = () => {
  throw new Error(`The "formatMessagesSync" API does not work in Deno`);
};
var analyzeMetafileSync = () => {
  throw new Error(`The "analyzeMetafileSync" API does not work in Deno`);
};
var stop = async () => {
  if (stopService) await stopService();
};
var initializeWasCalled = false;
var initialize = async (options) => {
  options = validateInitializeOptions(options || {});
  if (options.wasmURL) throw new Error(`The "wasmURL" option only works in the browser`);
  if (options.wasmModule) throw new Error(`The "wasmModule" option only works in the browser`);
  if (options.worker) throw new Error(`The "worker" option only works in the browser`);
  if (initializeWasCalled) throw new Error('Cannot call "initialize" more than once');
  await ensureServiceIsRunning();
  initializeWasCalled = true;
};
async function installFromNPM(name, subpath) {
  const { finalPath, finalDir } = getCachePath(name);
  try {
    await Deno.stat(finalPath);
    return finalPath;
  } catch (e6) {
  }
  const npmRegistry = Deno.env.get("NPM_CONFIG_REGISTRY") || "https://registry.npmjs.org";
  const url = `${npmRegistry}/${name}/-/${name.replace("@esbuild/", "")}-${version}.tgz`;
  const buffer = await fetch(url).then((r14) => r14.arrayBuffer());
  const executable = extractFileFromTarGzip(new Uint8Array(buffer), subpath);
  await Deno.mkdir(finalDir, {
    recursive: true,
    mode: 448
    // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
  });
  await Deno.writeFile(finalPath, executable, { mode: 493 });
  return finalPath;
}
function getCachePath(name) {
  let baseDir;
  switch (Deno.build.os) {
    case "darwin":
      baseDir = Deno.env.get("HOME");
      if (baseDir) baseDir += "/Library/Caches";
      break;
    case "windows":
      baseDir = Deno.env.get("LOCALAPPDATA");
      if (!baseDir) {
        baseDir = Deno.env.get("USERPROFILE");
        if (baseDir) baseDir += "/AppData/Local";
      }
      if (baseDir) baseDir += "/Cache";
      break;
    case "linux":
      const xdg = Deno.env.get("XDG_CACHE_HOME");
      if (xdg && xdg[0] === "/") baseDir = xdg;
      break;
  }
  if (!baseDir) {
    baseDir = Deno.env.get("HOME");
    if (baseDir) baseDir += "/.cache";
  }
  if (!baseDir) throw new Error("Failed to find cache directory");
  const finalDir = baseDir + `/esbuild/bin`;
  const finalPath = finalDir + `/${name.replace("/", "-")}@${version}`;
  return { finalPath, finalDir };
}
function extractFileFromTarGzip(buffer, file) {
  try {
    buffer = gunzip(buffer);
  } catch (err) {
    throw new Error(`Invalid gzip data in archive: ${err && err.message || err}`);
  }
  let str = (i7, n12) => String.fromCharCode(...buffer.subarray(i7, i7 + n12)).replace(/\0.*$/, "");
  let offset = 0;
  file = `package/${file}`;
  while (offset < buffer.length) {
    let name = str(offset, 100);
    let size = parseInt(str(offset + 124, 12), 8);
    offset += 512;
    if (!isNaN(size)) {
      if (name === file) return buffer.subarray(offset, offset + size);
      offset += size + 511 & ~511;
    }
  }
  throw new Error(`Could not find ${JSON.stringify(file)} in archive`);
}
async function install() {
  const overridePath = Deno.env.get("ESBUILD_BINARY_PATH");
  if (overridePath) return overridePath;
  const platformKey = Deno.build.target;
  const knownWindowsPackages = {
    "x86_64-pc-windows-msvc": "@esbuild/win32-x64"
  };
  const knownUnixlikePackages = {
    // These are the only platforms that Deno supports
    "aarch64-apple-darwin": "@esbuild/darwin-arm64",
    "aarch64-unknown-linux-gnu": "@esbuild/linux-arm64",
    "x86_64-apple-darwin": "@esbuild/darwin-x64",
    "x86_64-unknown-linux-gnu": "@esbuild/linux-x64",
    // These platforms are not supported by Deno
    "aarch64-linux-android": "@esbuild/android-arm64",
    "x86_64-unknown-freebsd": "@esbuild/freebsd-x64",
    "x86_64-alpine-linux-musl": "@esbuild/linux-x64"
  };
  if (platformKey in knownWindowsPackages) {
    return await installFromNPM(knownWindowsPackages[platformKey], "esbuild.exe");
  } else if (platformKey in knownUnixlikePackages) {
    return await installFromNPM(knownUnixlikePackages[platformKey], "bin/esbuild");
  } else {
    throw new Error(`Unsupported platform: ${platformKey}`);
  }
}
var defaultWD = Deno.cwd();
var longLivedService;
var stopService;
var spawnNew = (cmd, { args: args2, stdin: stdin4, stdout: stdout4, stderr: stderr4 }) => {
  const child = new Deno.Command(cmd, {
    args: args2,
    cwd: defaultWD,
    stdin: stdin4,
    stdout: stdout4,
    stderr: stderr4
  }).spawn();
  const writer = stdin4 === "piped" ? child.stdin.getWriter() : null;
  const reader = stdout4 === "piped" ? child.stdout.getReader() : null;
  return {
    write: writer ? (bytes) => writer.write(bytes) : () => Promise.resolve(),
    read: reader ? () => reader.read().then((x5) => x5.value || null) : () => Promise.resolve(null),
    close: async () => {
      if (writer) await writer.close();
      if (reader) await reader.cancel();
      await child.status;
    },
    status: () => child.status
  };
};
var spawnOld = (cmd, { args: args2, stdin: stdin4, stdout: stdout4, stderr: stderr4 }) => {
  const child = Deno.run({
    cmd: [cmd].concat(args2),
    cwd: defaultWD,
    stdin: stdin4,
    stdout: stdout4,
    stderr: stderr4
  });
  const stdoutBuffer = new Uint8Array(4 * 1024 * 1024);
  let writeQueue = [];
  let isQueueLocked = false;
  const startWriteFromQueueWorker = () => {
    if (isQueueLocked || writeQueue.length === 0) return;
    isQueueLocked = true;
    child.stdin.write(writeQueue[0]).then((bytesWritten) => {
      isQueueLocked = false;
      if (bytesWritten === writeQueue[0].length) writeQueue.shift();
      else writeQueue[0] = writeQueue[0].subarray(bytesWritten);
      startWriteFromQueueWorker();
    });
  };
  return {
    write: (bytes) => {
      writeQueue.push(bytes);
      startWriteFromQueueWorker();
    },
    read: () => child.stdout.read(stdoutBuffer).then((n12) => n12 === null ? null : stdoutBuffer.subarray(0, n12)),
    close: () => {
      child.stdin.close();
      child.stdout.close();
      child.close();
    },
    status: () => child.status()
  };
};
var spawn = Deno.Command ? spawnNew : spawnOld;
var ensureServiceIsRunning = () => {
  if (!longLivedService) {
    longLivedService = (async () => {
      const binPath = await install();
      const isTTY = Deno.stderr.isTerminal ? Deno.stderr.isTerminal() : Deno.isatty(Deno.stderr.rid);
      const child = spawn(binPath, {
        args: [`--service=${version}`],
        stdin: "piped",
        stdout: "piped",
        stderr: "inherit"
      });
      stopService = async () => {
        await child.close();
        initializeWasCalled = false;
        longLivedService = void 0;
        stopService = void 0;
      };
      const { readFromStdout, afterClose, service } = createChannel({
        writeToStdin(bytes) {
          child.write(bytes);
        },
        isSync: false,
        hasFS: true,
        esbuild: mod_exports2
      });
      const readMoreStdout = () => child.read().then((buffer) => {
        if (buffer === null) {
          afterClose(null);
        } else {
          readFromStdout(buffer);
          readMoreStdout();
        }
      }).catch((e6) => {
        if (e6 instanceof Deno.errors.Interrupted || e6 instanceof Deno.errors.BadResource) {
          afterClose(e6);
        } else {
          throw e6;
        }
      });
      readMoreStdout();
      return {
        build: (options) => new Promise((resolve10, reject) => {
          service.buildOrContext({
            callName: "build",
            refs: null,
            options,
            isTTY,
            defaultWD,
            callback: (err, res) => err ? reject(err) : resolve10(res)
          });
        }),
        context: (options) => new Promise((resolve10, reject) => service.buildOrContext({
          callName: "context",
          refs: null,
          options,
          isTTY,
          defaultWD,
          callback: (err, res) => err ? reject(err) : resolve10(res)
        })),
        transform: (input, options) => new Promise((resolve10, reject) => service.transform({
          callName: "transform",
          refs: null,
          input,
          options: options || {},
          isTTY,
          fs: {
            readFile(tempFile, callback) {
              Deno.readFile(tempFile).then(
                (bytes) => {
                  let text = new TextDecoder().decode(bytes);
                  try {
                    Deno.remove(tempFile);
                  } catch (e6) {
                  }
                  callback(null, text);
                },
                (err) => callback(err, null)
              );
            },
            writeFile(contents, callback) {
              Deno.makeTempFile().then(
                (tempFile) => Deno.writeFile(tempFile, typeof contents === "string" ? new TextEncoder().encode(contents) : contents).then(
                  () => callback(tempFile),
                  () => callback(null)
                ),
                () => callback(null)
              );
            }
          },
          callback: (err, res) => err ? reject(err) : resolve10(res)
        })),
        formatMessages: (messages, options) => new Promise((resolve10, reject) => service.formatMessages({
          callName: "formatMessages",
          refs: null,
          messages,
          options,
          callback: (err, res) => err ? reject(err) : resolve10(res)
        })),
        analyzeMetafile: (metafile, options) => new Promise((resolve10, reject) => service.analyzeMetafile({
          callName: "analyzeMetafile",
          refs: null,
          metafile: typeof metafile === "string" ? metafile : JSON.stringify(metafile),
          options,
          callback: (err, res) => err ? reject(err) : resolve10(res)
        }))
      };
    })();
  }
  return longLivedService;
};
if (import.meta.main) {
  spawn(await install(), {
    args: Deno.args,
    stdin: "inherit",
    stdout: "inherit",
    stderr: "inherit"
  }).status().then(({ code }) => {
    Deno.exit(code);
  });
}

// https://esm.sh/@jsr/std__encoding@1.0.1/deno/_validate_binary_like.mjs
var t = new TextEncoder();
function r(e6) {
  let n12 = typeof e6;
  return n12 !== "object" ? n12 : e6 === null ? "null" : e6?.constructor?.name ?? "object";
}
function i(e6) {
  if (typeof e6 == "string") return t.encode(e6);
  if (e6 instanceof Uint8Array) return e6;
  if (e6 instanceof ArrayBuffer) return new Uint8Array(e6);
  throw new TypeError(`The input must be a Uint8Array, a string, or an ArrayBuffer. Received a value of the type ${r(e6)}.`);
}

// https://esm.sh/@jsr/std__encoding@1.0.1/deno/base32.mjs
var s = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567".split("");
var n = [];
s.forEach((t18, f7) => n[t18.charCodeAt(0)] = f7);
function C(t18, f7, h8) {
  let x5, r14 = [];
  for (let e6 = f7; e6 < h8; e6 += 5) x5 = t18[e6] << 16 & 16711680 | t18[e6 + 1] << 8 & 65280 | t18[e6 + 2] & 255, r14.push(s[x5 >> 19 & 31]), r14.push(s[x5 >> 14 & 31]), r14.push(s[x5 >> 9 & 31]), r14.push(s[x5 >> 4 & 31]), x5 = (x5 & 15) << 16 | t18[e6 + 3] << 8 & 65280 | t18[e6 + 4] & 255, r14.push(s[x5 >> 15 & 31]), r14.push(s[x5 >> 10 & 31]), r14.push(s[x5 >> 5 & 31]), r14.push(s[x5 & 31]);
  return r14.join("");
}
function g(t18) {
  let f7 = i(t18), h8, x5 = f7.length, r14 = x5 % 5, e6 = [], c12 = 16385, o9 = x5 - r14;
  for (let u3 = 0; u3 < o9; u3 += c12) e6.push(C(f7, u3, u3 + c12 > o9 ? o9 : u3 + c12));
  return r14 === 4 ? (h8 = (f7[o9] & 255) << 16 | (f7[o9 + 1] & 255) << 8 | f7[o9 + 2] & 255, e6.push(s[h8 >> 19 & 31]), e6.push(s[h8 >> 14 & 31]), e6.push(s[h8 >> 9 & 31]), e6.push(s[h8 >> 4 & 31]), h8 = (h8 & 15) << 11 | f7[o9 + 3] << 3, e6.push(s[h8 >> 10 & 31]), e6.push(s[h8 >> 5 & 31]), e6.push(s[h8 & 31]), e6.push("=")) : r14 === 3 ? (h8 = (f7[o9] & 255) << 17 | (f7[o9 + 1] & 255) << 9 | (f7[o9 + 2] & 255) << 1, e6.push(s[h8 >> 20 & 31]), e6.push(s[h8 >> 15 & 31]), e6.push(s[h8 >> 10 & 31]), e6.push(s[h8 >> 5 & 31]), e6.push(s[h8 & 31]), e6.push("===")) : r14 === 2 ? (h8 = (f7[o9] & 255) << 12 | (f7[o9 + 1] & 255) << 4, e6.push(s[h8 >> 15 & 31]), e6.push(s[h8 >> 10 & 31]), e6.push(s[h8 >> 5 & 31]), e6.push(s[h8 & 31]), e6.push("====")) : r14 === 1 && (h8 = (f7[o9] & 255) << 2, e6.push(s[h8 >> 5 & 31]), e6.push(s[h8 & 31]), e6.push("======")), e6.join("");
}

// https://deno.land/std@0.177.1/node/internal_binding/uv.ts
var uv_exports = {};
__export(uv_exports, {
  UV_EAI_MEMORY: () => UV_EAI_MEMORY,
  UV_EBADF: () => UV_EBADF,
  UV_EEXIST: () => UV_EEXIST,
  UV_EINVAL: () => UV_EINVAL,
  UV_ENOENT: () => UV_ENOENT,
  UV_ENOTSOCK: () => UV_ENOTSOCK,
  UV_UNKNOWN: () => UV_UNKNOWN,
  codeMap: () => codeMap,
  errorMap: () => errorMap,
  mapSysErrnoToUvErrno: () => mapSysErrnoToUvErrno
});

// https://deno.land/std@0.177.1/_util/asserts.ts
var DenoStdInternalError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError(msg);
  }
}
function unreachable() {
  throw new DenoStdInternalError("unreachable");
}

// https://deno.land/std@0.177.1/_util/os.ts
var osType = (() => {
  const { Deno: Deno5 } = globalThis;
  if (typeof Deno5?.build?.os === "string") {
    return Deno5.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win")) {
    return "windows";
  }
  return "linux";
})();
var isWindows = osType === "windows";
var isLinux = osType === "linux";

// https://deno.land/std@0.177.1/node/internal_binding/_winerror.ts
var ERROR_INVALID_FUNCTION = 1;
var ERROR_FILE_NOT_FOUND = 2;
var ERROR_PATH_NOT_FOUND = 3;
var ERROR_TOO_MANY_OPEN_FILES = 4;
var ERROR_ACCESS_DENIED = 5;
var ERROR_INVALID_HANDLE = 6;
var ERROR_NOT_ENOUGH_MEMORY = 8;
var ERROR_INVALID_DATA = 13;
var ERROR_OUTOFMEMORY = 14;
var ERROR_INVALID_DRIVE = 15;
var ERROR_NOT_SAME_DEVICE = 17;
var ERROR_WRITE_PROTECT = 19;
var ERROR_CRC = 23;
var ERROR_GEN_FAILURE = 31;
var ERROR_SHARING_VIOLATION = 32;
var ERROR_LOCK_VIOLATION = 33;
var ERROR_HANDLE_DISK_FULL = 39;
var ERROR_NOT_SUPPORTED = 50;
var ERROR_NETNAME_DELETED = 64;
var ERROR_FILE_EXISTS = 80;
var ERROR_CANNOT_MAKE = 82;
var ERROR_INVALID_PARAMETER = 87;
var ERROR_BROKEN_PIPE = 109;
var ERROR_OPEN_FAILED = 110;
var ERROR_BUFFER_OVERFLOW = 111;
var ERROR_DISK_FULL = 112;
var ERROR_SEM_TIMEOUT = 121;
var ERROR_INSUFFICIENT_BUFFER = 122;
var ERROR_INVALID_NAME = 123;
var ERROR_MOD_NOT_FOUND = 126;
var ERROR_DIR_NOT_EMPTY = 145;
var ERROR_SIGNAL_REFUSED = 156;
var ERROR_BAD_PATHNAME = 161;
var ERROR_ALREADY_EXISTS = 183;
var ERROR_ENVVAR_NOT_FOUND = 203;
var ERROR_NO_SIGNAL_SENT = 205;
var ERROR_FILENAME_EXCED_RANGE = 206;
var ERROR_META_EXPANSION_TOO_LONG = 208;
var ERROR_BAD_PIPE = 230;
var ERROR_PIPE_BUSY = 231;
var ERROR_NO_DATA = 232;
var ERROR_PIPE_NOT_CONNECTED = 233;
var ERROR_DIRECTORY = 267;
var ERROR_EA_TABLE_FULL = 277;
var ERROR_OPERATION_ABORTED = 995;
var ERROR_NOACCESS = 998;
var ERROR_INVALID_FLAGS = 1004;
var ERROR_END_OF_MEDIA = 1100;
var ERROR_FILEMARK_DETECTED = 1101;
var ERROR_BEGINNING_OF_MEDIA = 1102;
var ERROR_SETMARK_DETECTED = 1103;
var ERROR_NO_DATA_DETECTED = 1104;
var ERROR_INVALID_BLOCK_LENGTH = 1106;
var ERROR_BUS_RESET = 1111;
var ERROR_NO_UNICODE_TRANSLATION = 1113;
var ERROR_IO_DEVICE = 1117;
var ERROR_EOM_OVERFLOW = 1129;
var ERROR_DEVICE_REQUIRES_CLEANING = 1165;
var ERROR_DEVICE_DOOR_OPEN = 1166;
var ERROR_CONNECTION_REFUSED = 1225;
var ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;
var ERROR_NETWORK_UNREACHABLE = 1231;
var ERROR_HOST_UNREACHABLE = 1232;
var ERROR_CONNECTION_ABORTED = 1236;
var ERROR_PRIVILEGE_NOT_HELD = 1314;
var ERROR_DISK_CORRUPT = 1393;
var ERROR_CANT_ACCESS_FILE = 1920;
var ERROR_CANT_RESOLVE_FILENAME = 1921;
var ERROR_NOT_CONNECTED = 2250;
var ERROR_INVALID_REPARSE_DATA = 4392;
var WSAEINTR = 10004;
var WSAEACCES = 10013;
var WSAEFAULT = 10014;
var WSAEINVAL = 10022;
var WSAEMFILE = 10024;
var WSAEWOULDBLOCK = 10035;
var WSAEALREADY = 10037;
var WSAENOTSOCK = 10038;
var WSAEMSGSIZE = 10040;
var WSAEPROTONOSUPPORT = 10043;
var WSAESOCKTNOSUPPORT = 10044;
var WSAEPFNOSUPPORT = 10046;
var WSAEAFNOSUPPORT = 10047;
var WSAEADDRINUSE = 10048;
var WSAEADDRNOTAVAIL = 10049;
var WSAENETUNREACH = 10051;
var WSAECONNABORTED = 10053;
var WSAECONNRESET = 10054;
var WSAENOBUFS = 10055;
var WSAEISCONN = 10056;
var WSAENOTCONN = 10057;
var WSAESHUTDOWN = 10058;
var WSAETIMEDOUT = 10060;
var WSAECONNREFUSED = 10061;
var WSAEHOSTUNREACH = 10065;
var WSAHOST_NOT_FOUND = 11001;
var WSANO_DATA = 11004;

// https://deno.land/std@0.177.1/node/internal_binding/_libuv_winerror.ts
function uvTranslateSysError(sysErrno) {
  switch (sysErrno) {
    case ERROR_ACCESS_DENIED:
      return "EACCES";
    case ERROR_NOACCESS:
      return "EACCES";
    case WSAEACCES:
      return "EACCES";
    // case winErrors.ERROR_ELEVATION_REQUIRED:          return "EACCES";
    case ERROR_CANT_ACCESS_FILE:
      return "EACCES";
    case ERROR_ADDRESS_ALREADY_ASSOCIATED:
      return "EADDRINUSE";
    case WSAEADDRINUSE:
      return "EADDRINUSE";
    case WSAEADDRNOTAVAIL:
      return "EADDRNOTAVAIL";
    case WSAEAFNOSUPPORT:
      return "EAFNOSUPPORT";
    case WSAEWOULDBLOCK:
      return "EAGAIN";
    case WSAEALREADY:
      return "EALREADY";
    case ERROR_INVALID_FLAGS:
      return "EBADF";
    case ERROR_INVALID_HANDLE:
      return "EBADF";
    case ERROR_LOCK_VIOLATION:
      return "EBUSY";
    case ERROR_PIPE_BUSY:
      return "EBUSY";
    case ERROR_SHARING_VIOLATION:
      return "EBUSY";
    case ERROR_OPERATION_ABORTED:
      return "ECANCELED";
    case WSAEINTR:
      return "ECANCELED";
    case ERROR_NO_UNICODE_TRANSLATION:
      return "ECHARSET";
    case ERROR_CONNECTION_ABORTED:
      return "ECONNABORTED";
    case WSAECONNABORTED:
      return "ECONNABORTED";
    case ERROR_CONNECTION_REFUSED:
      return "ECONNREFUSED";
    case WSAECONNREFUSED:
      return "ECONNREFUSED";
    case ERROR_NETNAME_DELETED:
      return "ECONNRESET";
    case WSAECONNRESET:
      return "ECONNRESET";
    case ERROR_ALREADY_EXISTS:
      return "EEXIST";
    case ERROR_FILE_EXISTS:
      return "EEXIST";
    case ERROR_BUFFER_OVERFLOW:
      return "EFAULT";
    case WSAEFAULT:
      return "EFAULT";
    case ERROR_HOST_UNREACHABLE:
      return "EHOSTUNREACH";
    case WSAEHOSTUNREACH:
      return "EHOSTUNREACH";
    case ERROR_INSUFFICIENT_BUFFER:
      return "EINVAL";
    case ERROR_INVALID_DATA:
      return "EINVAL";
    case ERROR_INVALID_NAME:
      return "EINVAL";
    case ERROR_INVALID_PARAMETER:
      return "EINVAL";
    // case winErrors.ERROR_SYMLINK_NOT_SUPPORTED:       return "EINVAL";
    case WSAEINVAL:
      return "EINVAL";
    case WSAEPFNOSUPPORT:
      return "EINVAL";
    case ERROR_BEGINNING_OF_MEDIA:
      return "EIO";
    case ERROR_BUS_RESET:
      return "EIO";
    case ERROR_CRC:
      return "EIO";
    case ERROR_DEVICE_DOOR_OPEN:
      return "EIO";
    case ERROR_DEVICE_REQUIRES_CLEANING:
      return "EIO";
    case ERROR_DISK_CORRUPT:
      return "EIO";
    case ERROR_EOM_OVERFLOW:
      return "EIO";
    case ERROR_FILEMARK_DETECTED:
      return "EIO";
    case ERROR_GEN_FAILURE:
      return "EIO";
    case ERROR_INVALID_BLOCK_LENGTH:
      return "EIO";
    case ERROR_IO_DEVICE:
      return "EIO";
    case ERROR_NO_DATA_DETECTED:
      return "EIO";
    case ERROR_NO_SIGNAL_SENT:
      return "EIO";
    case ERROR_OPEN_FAILED:
      return "EIO";
    case ERROR_SETMARK_DETECTED:
      return "EIO";
    case ERROR_SIGNAL_REFUSED:
      return "EIO";
    case WSAEISCONN:
      return "EISCONN";
    case ERROR_CANT_RESOLVE_FILENAME:
      return "ELOOP";
    case ERROR_TOO_MANY_OPEN_FILES:
      return "EMFILE";
    case WSAEMFILE:
      return "EMFILE";
    case WSAEMSGSIZE:
      return "EMSGSIZE";
    case ERROR_FILENAME_EXCED_RANGE:
      return "ENAMETOOLONG";
    case ERROR_NETWORK_UNREACHABLE:
      return "ENETUNREACH";
    case WSAENETUNREACH:
      return "ENETUNREACH";
    case WSAENOBUFS:
      return "ENOBUFS";
    case ERROR_BAD_PATHNAME:
      return "ENOENT";
    case ERROR_DIRECTORY:
      return "ENOTDIR";
    case ERROR_ENVVAR_NOT_FOUND:
      return "ENOENT";
    case ERROR_FILE_NOT_FOUND:
      return "ENOENT";
    case ERROR_INVALID_DRIVE:
      return "ENOENT";
    case ERROR_INVALID_REPARSE_DATA:
      return "ENOENT";
    case ERROR_MOD_NOT_FOUND:
      return "ENOENT";
    case ERROR_PATH_NOT_FOUND:
      return "ENOENT";
    case WSAHOST_NOT_FOUND:
      return "ENOENT";
    case WSANO_DATA:
      return "ENOENT";
    case ERROR_NOT_ENOUGH_MEMORY:
      return "ENOMEM";
    case ERROR_OUTOFMEMORY:
      return "ENOMEM";
    case ERROR_CANNOT_MAKE:
      return "ENOSPC";
    case ERROR_DISK_FULL:
      return "ENOSPC";
    case ERROR_EA_TABLE_FULL:
      return "ENOSPC";
    case ERROR_END_OF_MEDIA:
      return "ENOSPC";
    case ERROR_HANDLE_DISK_FULL:
      return "ENOSPC";
    case ERROR_NOT_CONNECTED:
      return "ENOTCONN";
    case WSAENOTCONN:
      return "ENOTCONN";
    case ERROR_DIR_NOT_EMPTY:
      return "ENOTEMPTY";
    case WSAENOTSOCK:
      return "ENOTSOCK";
    case ERROR_NOT_SUPPORTED:
      return "ENOTSUP";
    case ERROR_BROKEN_PIPE:
      return "EOF";
    case ERROR_PRIVILEGE_NOT_HELD:
      return "EPERM";
    case ERROR_BAD_PIPE:
      return "EPIPE";
    case ERROR_NO_DATA:
      return "EPIPE";
    case ERROR_PIPE_NOT_CONNECTED:
      return "EPIPE";
    case WSAESHUTDOWN:
      return "EPIPE";
    case WSAEPROTONOSUPPORT:
      return "EPROTONOSUPPORT";
    case ERROR_WRITE_PROTECT:
      return "EROFS";
    case ERROR_SEM_TIMEOUT:
      return "ETIMEDOUT";
    case WSAETIMEDOUT:
      return "ETIMEDOUT";
    case ERROR_NOT_SAME_DEVICE:
      return "EXDEV";
    case ERROR_INVALID_FUNCTION:
      return "EISDIR";
    case ERROR_META_EXPANSION_TOO_LONG:
      return "E2BIG";
    case WSAESOCKTNOSUPPORT:
      return "ESOCKTNOSUPPORT";
    default:
      return "UNKNOWN";
  }
}

// https://deno.land/std@0.177.1/node/internal_binding/uv.ts
var codeToErrorWindows = [
  [-4093, ["E2BIG", "argument list too long"]],
  [-4092, ["EACCES", "permission denied"]],
  [-4091, ["EADDRINUSE", "address already in use"]],
  [-4090, ["EADDRNOTAVAIL", "address not available"]],
  [-4089, ["EAFNOSUPPORT", "address family not supported"]],
  [-4088, ["EAGAIN", "resource temporarily unavailable"]],
  [-3e3, ["EAI_ADDRFAMILY", "address family not supported"]],
  [-3001, ["EAI_AGAIN", "temporary failure"]],
  [-3002, ["EAI_BADFLAGS", "bad ai_flags value"]],
  [-3013, ["EAI_BADHINTS", "invalid value for hints"]],
  [-3003, ["EAI_CANCELED", "request canceled"]],
  [-3004, ["EAI_FAIL", "permanent failure"]],
  [-3005, ["EAI_FAMILY", "ai_family not supported"]],
  [-3006, ["EAI_MEMORY", "out of memory"]],
  [-3007, ["EAI_NODATA", "no address"]],
  [-3008, ["EAI_NONAME", "unknown node or service"]],
  [-3009, ["EAI_OVERFLOW", "argument buffer overflow"]],
  [-3014, ["EAI_PROTOCOL", "resolved protocol is unknown"]],
  [-3010, ["EAI_SERVICE", "service not available for socket type"]],
  [-3011, ["EAI_SOCKTYPE", "socket type not supported"]],
  [-4084, ["EALREADY", "connection already in progress"]],
  [-4083, ["EBADF", "bad file descriptor"]],
  [-4082, ["EBUSY", "resource busy or locked"]],
  [-4081, ["ECANCELED", "operation canceled"]],
  [-4080, ["ECHARSET", "invalid Unicode character"]],
  [-4079, ["ECONNABORTED", "software caused connection abort"]],
  [-4078, ["ECONNREFUSED", "connection refused"]],
  [-4077, ["ECONNRESET", "connection reset by peer"]],
  [-4076, ["EDESTADDRREQ", "destination address required"]],
  [-4075, ["EEXIST", "file already exists"]],
  [-4074, ["EFAULT", "bad address in system call argument"]],
  [-4036, ["EFBIG", "file too large"]],
  [-4073, ["EHOSTUNREACH", "host is unreachable"]],
  [-4072, ["EINTR", "interrupted system call"]],
  [-4071, ["EINVAL", "invalid argument"]],
  [-4070, ["EIO", "i/o error"]],
  [-4069, ["EISCONN", "socket is already connected"]],
  [-4068, ["EISDIR", "illegal operation on a directory"]],
  [-4067, ["ELOOP", "too many symbolic links encountered"]],
  [-4066, ["EMFILE", "too many open files"]],
  [-4065, ["EMSGSIZE", "message too long"]],
  [-4064, ["ENAMETOOLONG", "name too long"]],
  [-4063, ["ENETDOWN", "network is down"]],
  [-4062, ["ENETUNREACH", "network is unreachable"]],
  [-4061, ["ENFILE", "file table overflow"]],
  [-4060, ["ENOBUFS", "no buffer space available"]],
  [-4059, ["ENODEV", "no such device"]],
  [-4058, ["ENOENT", "no such file or directory"]],
  [-4057, ["ENOMEM", "not enough memory"]],
  [-4056, ["ENONET", "machine is not on the network"]],
  [-4035, ["ENOPROTOOPT", "protocol not available"]],
  [-4055, ["ENOSPC", "no space left on device"]],
  [-4054, ["ENOSYS", "function not implemented"]],
  [-4053, ["ENOTCONN", "socket is not connected"]],
  [-4052, ["ENOTDIR", "not a directory"]],
  [-4051, ["ENOTEMPTY", "directory not empty"]],
  [-4050, ["ENOTSOCK", "socket operation on non-socket"]],
  [-4049, ["ENOTSUP", "operation not supported on socket"]],
  [-4048, ["EPERM", "operation not permitted"]],
  [-4047, ["EPIPE", "broken pipe"]],
  [-4046, ["EPROTO", "protocol error"]],
  [-4045, ["EPROTONOSUPPORT", "protocol not supported"]],
  [-4044, ["EPROTOTYPE", "protocol wrong type for socket"]],
  [-4034, ["ERANGE", "result too large"]],
  [-4043, ["EROFS", "read-only file system"]],
  [-4042, ["ESHUTDOWN", "cannot send after transport endpoint shutdown"]],
  [-4041, ["ESPIPE", "invalid seek"]],
  [-4040, ["ESRCH", "no such process"]],
  [-4039, ["ETIMEDOUT", "connection timed out"]],
  [-4038, ["ETXTBSY", "text file is busy"]],
  [-4037, ["EXDEV", "cross-device link not permitted"]],
  [-4094, ["UNKNOWN", "unknown error"]],
  [-4095, ["EOF", "end of file"]],
  [-4033, ["ENXIO", "no such device or address"]],
  [-4032, ["EMLINK", "too many links"]],
  [-4031, ["EHOSTDOWN", "host is down"]],
  [-4030, ["EREMOTEIO", "remote I/O error"]],
  [-4029, ["ENOTTY", "inappropriate ioctl for device"]],
  [-4028, ["EFTYPE", "inappropriate file type or format"]],
  [-4027, ["EILSEQ", "illegal byte sequence"]]
];
var errorToCodeWindows = codeToErrorWindows.map(([status, [error]]) => [error, status]);
var codeToErrorDarwin = [
  [-7, ["E2BIG", "argument list too long"]],
  [-13, ["EACCES", "permission denied"]],
  [-48, ["EADDRINUSE", "address already in use"]],
  [-49, ["EADDRNOTAVAIL", "address not available"]],
  [-47, ["EAFNOSUPPORT", "address family not supported"]],
  [-35, ["EAGAIN", "resource temporarily unavailable"]],
  [-3e3, ["EAI_ADDRFAMILY", "address family not supported"]],
  [-3001, ["EAI_AGAIN", "temporary failure"]],
  [-3002, ["EAI_BADFLAGS", "bad ai_flags value"]],
  [-3013, ["EAI_BADHINTS", "invalid value for hints"]],
  [-3003, ["EAI_CANCELED", "request canceled"]],
  [-3004, ["EAI_FAIL", "permanent failure"]],
  [-3005, ["EAI_FAMILY", "ai_family not supported"]],
  [-3006, ["EAI_MEMORY", "out of memory"]],
  [-3007, ["EAI_NODATA", "no address"]],
  [-3008, ["EAI_NONAME", "unknown node or service"]],
  [-3009, ["EAI_OVERFLOW", "argument buffer overflow"]],
  [-3014, ["EAI_PROTOCOL", "resolved protocol is unknown"]],
  [-3010, ["EAI_SERVICE", "service not available for socket type"]],
  [-3011, ["EAI_SOCKTYPE", "socket type not supported"]],
  [-37, ["EALREADY", "connection already in progress"]],
  [-9, ["EBADF", "bad file descriptor"]],
  [-16, ["EBUSY", "resource busy or locked"]],
  [-89, ["ECANCELED", "operation canceled"]],
  [-4080, ["ECHARSET", "invalid Unicode character"]],
  [-53, ["ECONNABORTED", "software caused connection abort"]],
  [-61, ["ECONNREFUSED", "connection refused"]],
  [-54, ["ECONNRESET", "connection reset by peer"]],
  [-39, ["EDESTADDRREQ", "destination address required"]],
  [-17, ["EEXIST", "file already exists"]],
  [-14, ["EFAULT", "bad address in system call argument"]],
  [-27, ["EFBIG", "file too large"]],
  [-65, ["EHOSTUNREACH", "host is unreachable"]],
  [-4, ["EINTR", "interrupted system call"]],
  [-22, ["EINVAL", "invalid argument"]],
  [-5, ["EIO", "i/o error"]],
  [-56, ["EISCONN", "socket is already connected"]],
  [-21, ["EISDIR", "illegal operation on a directory"]],
  [-62, ["ELOOP", "too many symbolic links encountered"]],
  [-24, ["EMFILE", "too many open files"]],
  [-40, ["EMSGSIZE", "message too long"]],
  [-63, ["ENAMETOOLONG", "name too long"]],
  [-50, ["ENETDOWN", "network is down"]],
  [-51, ["ENETUNREACH", "network is unreachable"]],
  [-23, ["ENFILE", "file table overflow"]],
  [-55, ["ENOBUFS", "no buffer space available"]],
  [-19, ["ENODEV", "no such device"]],
  [-2, ["ENOENT", "no such file or directory"]],
  [-12, ["ENOMEM", "not enough memory"]],
  [-4056, ["ENONET", "machine is not on the network"]],
  [-42, ["ENOPROTOOPT", "protocol not available"]],
  [-28, ["ENOSPC", "no space left on device"]],
  [-78, ["ENOSYS", "function not implemented"]],
  [-57, ["ENOTCONN", "socket is not connected"]],
  [-20, ["ENOTDIR", "not a directory"]],
  [-66, ["ENOTEMPTY", "directory not empty"]],
  [-38, ["ENOTSOCK", "socket operation on non-socket"]],
  [-45, ["ENOTSUP", "operation not supported on socket"]],
  [-1, ["EPERM", "operation not permitted"]],
  [-32, ["EPIPE", "broken pipe"]],
  [-100, ["EPROTO", "protocol error"]],
  [-43, ["EPROTONOSUPPORT", "protocol not supported"]],
  [-41, ["EPROTOTYPE", "protocol wrong type for socket"]],
  [-34, ["ERANGE", "result too large"]],
  [-30, ["EROFS", "read-only file system"]],
  [-58, ["ESHUTDOWN", "cannot send after transport endpoint shutdown"]],
  [-29, ["ESPIPE", "invalid seek"]],
  [-3, ["ESRCH", "no such process"]],
  [-60, ["ETIMEDOUT", "connection timed out"]],
  [-26, ["ETXTBSY", "text file is busy"]],
  [-18, ["EXDEV", "cross-device link not permitted"]],
  [-4094, ["UNKNOWN", "unknown error"]],
  [-4095, ["EOF", "end of file"]],
  [-6, ["ENXIO", "no such device or address"]],
  [-31, ["EMLINK", "too many links"]],
  [-64, ["EHOSTDOWN", "host is down"]],
  [-4030, ["EREMOTEIO", "remote I/O error"]],
  [-25, ["ENOTTY", "inappropriate ioctl for device"]],
  [-79, ["EFTYPE", "inappropriate file type or format"]],
  [-92, ["EILSEQ", "illegal byte sequence"]]
];
var errorToCodeDarwin = codeToErrorDarwin.map(([status, [code]]) => [code, status]);
var codeToErrorLinux = [
  [-7, ["E2BIG", "argument list too long"]],
  [-13, ["EACCES", "permission denied"]],
  [-98, ["EADDRINUSE", "address already in use"]],
  [-99, ["EADDRNOTAVAIL", "address not available"]],
  [-97, ["EAFNOSUPPORT", "address family not supported"]],
  [-11, ["EAGAIN", "resource temporarily unavailable"]],
  [-3e3, ["EAI_ADDRFAMILY", "address family not supported"]],
  [-3001, ["EAI_AGAIN", "temporary failure"]],
  [-3002, ["EAI_BADFLAGS", "bad ai_flags value"]],
  [-3013, ["EAI_BADHINTS", "invalid value for hints"]],
  [-3003, ["EAI_CANCELED", "request canceled"]],
  [-3004, ["EAI_FAIL", "permanent failure"]],
  [-3005, ["EAI_FAMILY", "ai_family not supported"]],
  [-3006, ["EAI_MEMORY", "out of memory"]],
  [-3007, ["EAI_NODATA", "no address"]],
  [-3008, ["EAI_NONAME", "unknown node or service"]],
  [-3009, ["EAI_OVERFLOW", "argument buffer overflow"]],
  [-3014, ["EAI_PROTOCOL", "resolved protocol is unknown"]],
  [-3010, ["EAI_SERVICE", "service not available for socket type"]],
  [-3011, ["EAI_SOCKTYPE", "socket type not supported"]],
  [-114, ["EALREADY", "connection already in progress"]],
  [-9, ["EBADF", "bad file descriptor"]],
  [-16, ["EBUSY", "resource busy or locked"]],
  [-125, ["ECANCELED", "operation canceled"]],
  [-4080, ["ECHARSET", "invalid Unicode character"]],
  [-103, ["ECONNABORTED", "software caused connection abort"]],
  [-111, ["ECONNREFUSED", "connection refused"]],
  [-104, ["ECONNRESET", "connection reset by peer"]],
  [-89, ["EDESTADDRREQ", "destination address required"]],
  [-17, ["EEXIST", "file already exists"]],
  [-14, ["EFAULT", "bad address in system call argument"]],
  [-27, ["EFBIG", "file too large"]],
  [-113, ["EHOSTUNREACH", "host is unreachable"]],
  [-4, ["EINTR", "interrupted system call"]],
  [-22, ["EINVAL", "invalid argument"]],
  [-5, ["EIO", "i/o error"]],
  [-106, ["EISCONN", "socket is already connected"]],
  [-21, ["EISDIR", "illegal operation on a directory"]],
  [-40, ["ELOOP", "too many symbolic links encountered"]],
  [-24, ["EMFILE", "too many open files"]],
  [-90, ["EMSGSIZE", "message too long"]],
  [-36, ["ENAMETOOLONG", "name too long"]],
  [-100, ["ENETDOWN", "network is down"]],
  [-101, ["ENETUNREACH", "network is unreachable"]],
  [-23, ["ENFILE", "file table overflow"]],
  [-105, ["ENOBUFS", "no buffer space available"]],
  [-19, ["ENODEV", "no such device"]],
  [-2, ["ENOENT", "no such file or directory"]],
  [-12, ["ENOMEM", "not enough memory"]],
  [-64, ["ENONET", "machine is not on the network"]],
  [-92, ["ENOPROTOOPT", "protocol not available"]],
  [-28, ["ENOSPC", "no space left on device"]],
  [-38, ["ENOSYS", "function not implemented"]],
  [-107, ["ENOTCONN", "socket is not connected"]],
  [-20, ["ENOTDIR", "not a directory"]],
  [-39, ["ENOTEMPTY", "directory not empty"]],
  [-88, ["ENOTSOCK", "socket operation on non-socket"]],
  [-95, ["ENOTSUP", "operation not supported on socket"]],
  [-1, ["EPERM", "operation not permitted"]],
  [-32, ["EPIPE", "broken pipe"]],
  [-71, ["EPROTO", "protocol error"]],
  [-93, ["EPROTONOSUPPORT", "protocol not supported"]],
  [-91, ["EPROTOTYPE", "protocol wrong type for socket"]],
  [-34, ["ERANGE", "result too large"]],
  [-30, ["EROFS", "read-only file system"]],
  [-108, ["ESHUTDOWN", "cannot send after transport endpoint shutdown"]],
  [-29, ["ESPIPE", "invalid seek"]],
  [-3, ["ESRCH", "no such process"]],
  [-110, ["ETIMEDOUT", "connection timed out"]],
  [-26, ["ETXTBSY", "text file is busy"]],
  [-18, ["EXDEV", "cross-device link not permitted"]],
  [-4094, ["UNKNOWN", "unknown error"]],
  [-4095, ["EOF", "end of file"]],
  [-6, ["ENXIO", "no such device or address"]],
  [-31, ["EMLINK", "too many links"]],
  [-112, ["EHOSTDOWN", "host is down"]],
  [-121, ["EREMOTEIO", "remote I/O error"]],
  [-25, ["ENOTTY", "inappropriate ioctl for device"]],
  [-4028, ["EFTYPE", "inappropriate file type or format"]],
  [-84, ["EILSEQ", "illegal byte sequence"]]
];
var errorToCodeLinux = codeToErrorLinux.map(([status, [code]]) => [code, status]);
var codeToErrorFreebsd = [
  [-7, ["E2BIG", "argument list too long"]],
  [-13, ["EACCES", "permission denied"]],
  [-48, ["EADDRINUSE", "address already in use"]],
  [-49, ["EADDRNOTAVAIL", "address not available"]],
  [-47, ["EAFNOSUPPORT", "address family not supported"]],
  [-35, ["EAGAIN", "resource temporarily unavailable"]],
  [-3e3, ["EAI_ADDRFAMILY", "address family not supported"]],
  [-3001, ["EAI_AGAIN", "temporary failure"]],
  [-3002, ["EAI_BADFLAGS", "bad ai_flags value"]],
  [-3013, ["EAI_BADHINTS", "invalid value for hints"]],
  [-3003, ["EAI_CANCELED", "request canceled"]],
  [-3004, ["EAI_FAIL", "permanent failure"]],
  [-3005, ["EAI_FAMILY", "ai_family not supported"]],
  [-3006, ["EAI_MEMORY", "out of memory"]],
  [-3007, ["EAI_NODATA", "no address"]],
  [-3008, ["EAI_NONAME", "unknown node or service"]],
  [-3009, ["EAI_OVERFLOW", "argument buffer overflow"]],
  [-3014, ["EAI_PROTOCOL", "resolved protocol is unknown"]],
  [-3010, ["EAI_SERVICE", "service not available for socket type"]],
  [-3011, ["EAI_SOCKTYPE", "socket type not supported"]],
  [-37, ["EALREADY", "connection already in progress"]],
  [-9, ["EBADF", "bad file descriptor"]],
  [-16, ["EBUSY", "resource busy or locked"]],
  [-85, ["ECANCELED", "operation canceled"]],
  [-4080, ["ECHARSET", "invalid Unicode character"]],
  [-53, ["ECONNABORTED", "software caused connection abort"]],
  [-61, ["ECONNREFUSED", "connection refused"]],
  [-54, ["ECONNRESET", "connection reset by peer"]],
  [-39, ["EDESTADDRREQ", "destination address required"]],
  [-17, ["EEXIST", "file already exists"]],
  [-14, ["EFAULT", "bad address in system call argument"]],
  [-27, ["EFBIG", "file too large"]],
  [-65, ["EHOSTUNREACH", "host is unreachable"]],
  [-4, ["EINTR", "interrupted system call"]],
  [-22, ["EINVAL", "invalid argument"]],
  [-5, ["EIO", "i/o error"]],
  [-56, ["EISCONN", "socket is already connected"]],
  [-21, ["EISDIR", "illegal operation on a directory"]],
  [-62, ["ELOOP", "too many symbolic links encountered"]],
  [-24, ["EMFILE", "too many open files"]],
  [-40, ["EMSGSIZE", "message too long"]],
  [-63, ["ENAMETOOLONG", "name too long"]],
  [-50, ["ENETDOWN", "network is down"]],
  [-51, ["ENETUNREACH", "network is unreachable"]],
  [-23, ["ENFILE", "file table overflow"]],
  [-55, ["ENOBUFS", "no buffer space available"]],
  [-19, ["ENODEV", "no such device"]],
  [-2, ["ENOENT", "no such file or directory"]],
  [-12, ["ENOMEM", "not enough memory"]],
  [-4056, ["ENONET", "machine is not on the network"]],
  [-42, ["ENOPROTOOPT", "protocol not available"]],
  [-28, ["ENOSPC", "no space left on device"]],
  [-78, ["ENOSYS", "function not implemented"]],
  [-57, ["ENOTCONN", "socket is not connected"]],
  [-20, ["ENOTDIR", "not a directory"]],
  [-66, ["ENOTEMPTY", "directory not empty"]],
  [-38, ["ENOTSOCK", "socket operation on non-socket"]],
  [-45, ["ENOTSUP", "operation not supported on socket"]],
  [-84, ["EOVERFLOW", "value too large for defined data type"]],
  [-1, ["EPERM", "operation not permitted"]],
  [-32, ["EPIPE", "broken pipe"]],
  [-92, ["EPROTO", "protocol error"]],
  [-43, ["EPROTONOSUPPORT", "protocol not supported"]],
  [-41, ["EPROTOTYPE", "protocol wrong type for socket"]],
  [-34, ["ERANGE", "result too large"]],
  [-30, ["EROFS", "read-only file system"]],
  [-58, ["ESHUTDOWN", "cannot send after transport endpoint shutdown"]],
  [-29, ["ESPIPE", "invalid seek"]],
  [-3, ["ESRCH", "no such process"]],
  [-60, ["ETIMEDOUT", "connection timed out"]],
  [-26, ["ETXTBSY", "text file is busy"]],
  [-18, ["EXDEV", "cross-device link not permitted"]],
  [-4094, ["UNKNOWN", "unknown error"]],
  [-4095, ["EOF", "end of file"]],
  [-6, ["ENXIO", "no such device or address"]],
  [-31, ["EMLINK", "too many links"]],
  [-64, ["EHOSTDOWN", "host is down"]],
  [-4030, ["EREMOTEIO", "remote I/O error"]],
  [-25, ["ENOTTY", "inappropriate ioctl for device"]],
  [-79, ["EFTYPE", "inappropriate file type or format"]],
  [-86, ["EILSEQ", "illegal byte sequence"]],
  [-44, ["ESOCKTNOSUPPORT", "socket type not supported"]]
];
var errorToCodeFreebsd = codeToErrorFreebsd.map(([status, [code]]) => [code, status]);
var errorMap = new Map(
  osType === "windows" ? codeToErrorWindows : osType === "darwin" ? codeToErrorDarwin : osType === "linux" ? codeToErrorLinux : osType === "freebsd" ? codeToErrorFreebsd : unreachable()
);
var codeMap = new Map(
  osType === "windows" ? errorToCodeWindows : osType === "darwin" ? errorToCodeDarwin : osType === "linux" ? errorToCodeLinux : osType === "freebsd" ? errorToCodeFreebsd : unreachable()
);
function mapSysErrnoToUvErrno(sysErrno) {
  if (osType === "windows") {
    const code = uvTranslateSysError(sysErrno);
    return codeMap.get(code) ?? -sysErrno;
  } else {
    return -sysErrno;
  }
}
var UV_EAI_MEMORY = codeMap.get("EAI_MEMORY");
var UV_EBADF = codeMap.get("EBADF");
var UV_EEXIST = codeMap.get("EEXIST");
var UV_EINVAL = codeMap.get("EINVAL");
var UV_ENOENT = codeMap.get("ENOENT");
var UV_ENOTSOCK = codeMap.get("ENOTSOCK");
var UV_UNKNOWN = codeMap.get("UNKNOWN");

// https://deno.land/std@0.177.1/node/internal/error_codes.ts
var codes = {};

// https://deno.land/std@0.177.1/node/_utils.ts
function notImplemented(msg) {
  const message = msg ? `Not implemented: ${msg}` : "Not implemented";
  throw new Error(message);
}
function warnNotImplemented(msg) {
  const message = msg ? `Warning: Not implemented: ${msg}` : "Warning: Not implemented";
  console.warn(message);
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function normalizeEncoding(enc) {
  if (enc == null || enc === "utf8" || enc === "utf-8") return "utf8";
  return slowCases(enc);
}
function slowCases(enc) {
  switch (enc.length) {
    case 4:
      if (enc === "UTF8") return "utf8";
      if (enc === "ucs2" || enc === "UCS2") return "utf16le";
      enc = `${enc}`.toLowerCase();
      if (enc === "utf8") return "utf8";
      if (enc === "ucs2") return "utf16le";
      break;
    case 3:
      if (enc === "hex" || enc === "HEX" || `${enc}`.toLowerCase() === "hex") {
        return "hex";
      }
      break;
    case 5:
      if (enc === "ascii") return "ascii";
      if (enc === "ucs-2") return "utf16le";
      if (enc === "UTF-8") return "utf8";
      if (enc === "ASCII") return "ascii";
      if (enc === "UCS-2") return "utf16le";
      enc = `${enc}`.toLowerCase();
      if (enc === "utf-8") return "utf8";
      if (enc === "ascii") return "ascii";
      if (enc === "ucs-2") return "utf16le";
      break;
    case 6:
      if (enc === "base64") return "base64";
      if (enc === "latin1" || enc === "binary") return "latin1";
      if (enc === "BASE64") return "base64";
      if (enc === "LATIN1" || enc === "BINARY") return "latin1";
      enc = `${enc}`.toLowerCase();
      if (enc === "base64") return "base64";
      if (enc === "latin1" || enc === "binary") return "latin1";
      break;
    case 7:
      if (enc === "utf16le" || enc === "UTF16LE" || `${enc}`.toLowerCase() === "utf16le") {
        return "utf16le";
      }
      break;
    case 8:
      if (enc === "utf-16le" || enc === "UTF-16LE" || `${enc}`.toLowerCase() === "utf-16le") {
        return "utf16le";
      }
      break;
    default:
      if (enc === "") return "utf8";
  }
}
var NumberIsSafeInteger = Number.isSafeInteger;
function getSystemErrorName(code) {
  if (typeof code !== "number") {
    throw new codes.ERR_INVALID_ARG_TYPE("err", "number", code);
  }
  if (code >= 0 || !NumberIsSafeInteger(code)) {
    throw new codes.ERR_OUT_OF_RANGE("err", "a negative integer", code);
  }
  return errorMap.get(code)?.[0];
}

// https://deno.land/std@0.177.1/node/internal_binding/types.ts
var types_exports = {};
__export(types_exports, {
  default: () => types_default,
  isAnyArrayBuffer: () => isAnyArrayBuffer,
  isArgumentsObject: () => isArgumentsObject,
  isArrayBuffer: () => isArrayBuffer,
  isAsyncFunction: () => isAsyncFunction,
  isBigIntObject: () => isBigIntObject,
  isBooleanObject: () => isBooleanObject,
  isBoxedPrimitive: () => isBoxedPrimitive,
  isDataView: () => isDataView,
  isDate: () => isDate,
  isGeneratorFunction: () => isGeneratorFunction,
  isGeneratorObject: () => isGeneratorObject,
  isMap: () => isMap,
  isMapIterator: () => isMapIterator,
  isModuleNamespaceObject: () => isModuleNamespaceObject,
  isNativeError: () => isNativeError,
  isNumberObject: () => isNumberObject,
  isPromise: () => isPromise,
  isProxy: () => isProxy,
  isRegExp: () => isRegExp,
  isSet: () => isSet,
  isSetIterator: () => isSetIterator,
  isSharedArrayBuffer: () => isSharedArrayBuffer,
  isStringObject: () => isStringObject,
  isSymbolObject: () => isSymbolObject,
  isWeakMap: () => isWeakMap,
  isWeakSet: () => isWeakSet
});

// https://deno.land/std@0.177.1/node/_core.ts
var DenoCore;
var { Deno: Deno2 } = globalThis;
if (Deno2?.[Deno2.internal]?.core) {
  DenoCore = Deno2[Deno2.internal].core;
} else if (Deno2?.core) {
  DenoCore = Deno2.core;
} else {
  DenoCore = {};
}
var core = {
  runMicrotasks: DenoCore.runMicrotasks ?? function() {
    throw new Error(
      "Deno.core.runMicrotasks() is not supported in this environment"
    );
  },
  setHasTickScheduled: DenoCore.setHasTickScheduled ?? function() {
    throw new Error(
      "Deno.core.setHasTickScheduled() is not supported in this environment"
    );
  },
  hasTickScheduled: DenoCore.hasTickScheduled ?? function() {
    throw new Error(
      "Deno.core.hasTickScheduled() is not supported in this environment"
    );
  },
  setNextTickCallback: DenoCore.setNextTickCallback ?? void 0,
  setMacrotaskCallback: DenoCore.setMacrotaskCallback ?? function() {
    throw new Error(
      "Deno.core.setNextTickCallback() is not supported in this environment"
    );
  },
  evalContext: DenoCore.evalContext ?? function(_code, _filename) {
    throw new Error(
      "Deno.core.evalContext is not supported in this environment"
    );
  },
  encode: DenoCore.encode ?? function(chunk) {
    return new TextEncoder().encode(chunk);
  },
  eventLoopHasMoreWork: DenoCore.eventLoopHasMoreWork ?? function() {
    return false;
  },
  isProxy: DenoCore.isProxy ?? function() {
    return false;
  },
  getPromiseDetails: DenoCore.getPromiseDetails ?? function(_promise) {
    throw new Error(
      "Deno.core.getPromiseDetails is not supported in this environment"
    );
  },
  setPromiseHooks: DenoCore.setPromiseHooks ?? function() {
    throw new Error(
      "Deno.core.setPromiseHooks is not supported in this environment"
    );
  },
  ops: DenoCore.ops ?? {
    op_napi_open(_filename) {
      throw new Error(
        "Node API is not supported in this environment"
      );
    }
  }
};

// https://deno.land/std@0.177.1/node/internal_binding/types.ts
var _toString = Object.prototype.toString;
var _bigIntValueOf = BigInt.prototype.valueOf;
var _booleanValueOf = Boolean.prototype.valueOf;
var _dateValueOf = Date.prototype.valueOf;
var _numberValueOf = Number.prototype.valueOf;
var _stringValueOf = String.prototype.valueOf;
var _symbolValueOf = Symbol.prototype.valueOf;
var _weakMapHas = WeakMap.prototype.has;
var _weakSetHas = WeakSet.prototype.has;
var _getArrayBufferByteLength = Object.getOwnPropertyDescriptor(
  ArrayBuffer.prototype,
  "byteLength"
).get;
var _getSharedArrayBufferByteLength = globalThis.SharedArrayBuffer ? Object.getOwnPropertyDescriptor(
  SharedArrayBuffer.prototype,
  "byteLength"
).get : void 0;
var _getTypedArrayToStringTag = Object.getOwnPropertyDescriptor(
  Object.getPrototypeOf(Uint8Array).prototype,
  Symbol.toStringTag
).get;
var _getSetSize = Object.getOwnPropertyDescriptor(
  Set.prototype,
  "size"
).get;
var _getMapSize = Object.getOwnPropertyDescriptor(
  Map.prototype,
  "size"
).get;
function isObjectLike(value) {
  return value !== null && typeof value === "object";
}
function isAnyArrayBuffer(value) {
  return isArrayBuffer(value) || isSharedArrayBuffer(value);
}
function isArgumentsObject(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === void 0 && _toString.call(value) === "[object Arguments]";
}
function isArrayBuffer(value) {
  try {
    _getArrayBufferByteLength.call(value);
    return true;
  } catch {
    return false;
  }
}
function isAsyncFunction(value) {
  return typeof value === "function" && // @ts-ignore: function is a kind of object
  value[Symbol.toStringTag] === "AsyncFunction";
}
function isBooleanObject(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  try {
    _booleanValueOf.call(value);
    return true;
  } catch {
    return false;
  }
}
function isBoxedPrimitive(value) {
  return isBooleanObject(value) || isStringObject(value) || isNumberObject(value) || isSymbolObject(value) || isBigIntObject(value);
}
function isDataView(value) {
  return ArrayBuffer.isView(value) && _getTypedArrayToStringTag.call(value) === void 0;
}
function isDate(value) {
  try {
    _dateValueOf.call(value);
    return true;
  } catch {
    return false;
  }
}
function isGeneratorFunction(value) {
  return typeof value === "function" && // @ts-ignore: function is a kind of object
  value[Symbol.toStringTag] === "GeneratorFunction";
}
function isGeneratorObject(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === "Generator";
}
function isMap(value) {
  try {
    _getMapSize.call(value);
    return true;
  } catch {
    return false;
  }
}
function isMapIterator(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === "Map Iterator";
}
function isModuleNamespaceObject(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === "Module";
}
function isNativeError(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === void 0 && _toString.call(value) === "[object Error]";
}
function isNumberObject(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  try {
    _numberValueOf.call(value);
    return true;
  } catch {
    return false;
  }
}
function isBigIntObject(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  try {
    _bigIntValueOf.call(value);
    return true;
  } catch {
    return false;
  }
}
function isPromise(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === "Promise";
}
function isProxy(value) {
  return core.isProxy(value);
}
function isRegExp(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === void 0 && _toString.call(value) === "[object RegExp]";
}
function isSet(value) {
  try {
    _getSetSize.call(value);
    return true;
  } catch {
    return false;
  }
}
function isSetIterator(value) {
  return isObjectLike(value) && value[Symbol.toStringTag] === "Set Iterator";
}
function isSharedArrayBuffer(value) {
  if (_getSharedArrayBufferByteLength === void 0) {
    return false;
  }
  try {
    _getSharedArrayBufferByteLength.call(value);
    return true;
  } catch {
    return false;
  }
}
function isStringObject(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  try {
    _stringValueOf.call(value);
    return true;
  } catch {
    return false;
  }
}
function isSymbolObject(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  try {
    _symbolValueOf.call(value);
    return true;
  } catch {
    return false;
  }
}
function isWeakMap(value) {
  try {
    _weakMapHas.call(value, null);
    return true;
  } catch {
    return false;
  }
}
function isWeakSet(value) {
  try {
    _weakSetHas.call(value, null);
    return true;
  } catch {
    return false;
  }
}
var types_default = {
  isAsyncFunction,
  isGeneratorFunction,
  isAnyArrayBuffer,
  isArrayBuffer,
  isArgumentsObject,
  isBoxedPrimitive,
  isDataView,
  // isExternal,
  isMap,
  isMapIterator,
  isModuleNamespaceObject,
  isNativeError,
  isPromise,
  isSet,
  isSetIterator,
  isWeakMap,
  isWeakSet,
  isRegExp,
  isDate,
  isStringObject,
  isNumberObject,
  isBooleanObject,
  isBigIntObject
};

// https://deno.land/std@0.177.1/node/internal/crypto/constants.ts
var kHandle = Symbol("kHandle");
var kKeyObject = Symbol("kKeyObject");

// https://deno.land/std@0.177.1/node/internal/crypto/_keys.ts
var kKeyType = Symbol("kKeyType");

// https://deno.land/std@0.177.1/node/internal/util/types.ts
var _getTypedArrayToStringTag2 = Object.getOwnPropertyDescriptor(
  Object.getPrototypeOf(Uint8Array).prototype,
  Symbol.toStringTag
).get;
function isArrayBufferView(value) {
  return ArrayBuffer.isView(value);
}
function isTypedArray(value) {
  return _getTypedArrayToStringTag2.call(value) !== void 0;
}
function isUint8Array(value) {
  return _getTypedArrayToStringTag2.call(value) === "Uint8Array";
}
var {
  // isExternal,
  isDate: isDate2,
  isArgumentsObject: isArgumentsObject2,
  isBigIntObject: isBigIntObject2,
  isBooleanObject: isBooleanObject2,
  isNumberObject: isNumberObject2,
  isStringObject: isStringObject2,
  isSymbolObject: isSymbolObject2,
  isNativeError: isNativeError2,
  isRegExp: isRegExp2,
  isAsyncFunction: isAsyncFunction2,
  isGeneratorFunction: isGeneratorFunction2,
  isGeneratorObject: isGeneratorObject2,
  isPromise: isPromise2,
  isMap: isMap2,
  isSet: isSet2,
  isMapIterator: isMapIterator2,
  isSetIterator: isSetIterator2,
  isWeakMap: isWeakMap2,
  isWeakSet: isWeakSet2,
  isArrayBuffer: isArrayBuffer2,
  isDataView: isDataView2,
  isSharedArrayBuffer: isSharedArrayBuffer2,
  isProxy: isProxy2,
  isModuleNamespaceObject: isModuleNamespaceObject2,
  isAnyArrayBuffer: isAnyArrayBuffer2,
  isBoxedPrimitive: isBoxedPrimitive2
} = types_exports;

// https://deno.land/std@0.177.1/node/internal/hide_stack_frames.ts
function hideStackFrames(fn) {
  const hidden = "__node_internal_" + fn.name;
  Object.defineProperty(fn, "name", { value: hidden });
  return fn;
}

// https://deno.land/std@0.177.1/node/internal/normalize_encoding.mjs
function normalizeEncoding2(enc) {
  if (enc == null || enc === "utf8" || enc === "utf-8") return "utf8";
  return slowCases2(enc);
}
function slowCases2(enc) {
  switch (enc.length) {
    case 4:
      if (enc === "UTF8") return "utf8";
      if (enc === "ucs2" || enc === "UCS2") return "utf16le";
      enc = `${enc}`.toLowerCase();
      if (enc === "utf8") return "utf8";
      if (enc === "ucs2") return "utf16le";
      break;
    case 3:
      if (enc === "hex" || enc === "HEX" || `${enc}`.toLowerCase() === "hex") {
        return "hex";
      }
      break;
    case 5:
      if (enc === "ascii") return "ascii";
      if (enc === "ucs-2") return "utf16le";
      if (enc === "UTF-8") return "utf8";
      if (enc === "ASCII") return "ascii";
      if (enc === "UCS-2") return "utf16le";
      enc = `${enc}`.toLowerCase();
      if (enc === "utf-8") return "utf8";
      if (enc === "ascii") return "ascii";
      if (enc === "ucs-2") return "utf16le";
      break;
    case 6:
      if (enc === "base64") return "base64";
      if (enc === "latin1" || enc === "binary") return "latin1";
      if (enc === "BASE64") return "base64";
      if (enc === "LATIN1" || enc === "BINARY") return "latin1";
      enc = `${enc}`.toLowerCase();
      if (enc === "base64") return "base64";
      if (enc === "latin1" || enc === "binary") return "latin1";
      break;
    case 7:
      if (enc === "utf16le" || enc === "UTF16LE" || `${enc}`.toLowerCase() === "utf16le") {
        return "utf16le";
      }
      break;
    case 8:
      if (enc === "utf-16le" || enc === "UTF-16LE" || `${enc}`.toLowerCase() === "utf-16le") {
        return "utf16le";
      }
      break;
    case 9:
      if (enc === "base64url" || enc === "BASE64URL" || `${enc}`.toLowerCase() === "base64url") {
        return "base64url";
      }
      break;
    default:
      if (enc === "") return "utf8";
  }
}

// https://deno.land/std@0.177.1/node/internal/validators.mjs
function isInt32(value) {
  return value === (value | 0);
}
function isUint32(value) {
  return value === value >>> 0;
}
var validateBuffer = hideStackFrames((buffer, name = "buffer") => {
  if (!isArrayBufferView(buffer)) {
    throw new codes.ERR_INVALID_ARG_TYPE(
      name,
      ["Buffer", "TypedArray", "DataView"],
      buffer
    );
  }
});
var validateInteger = hideStackFrames(
  (value, name, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) => {
    if (typeof value !== "number") {
      throw new codes.ERR_INVALID_ARG_TYPE(name, "number", value);
    }
    if (!Number.isInteger(value)) {
      throw new codes.ERR_OUT_OF_RANGE(name, "an integer", value);
    }
    if (value < min || value > max) {
      throw new codes.ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
    }
  }
);
var validateObject = hideStackFrames((value, name, options) => {
  const useDefaultOptions = options == null;
  const allowArray = useDefaultOptions ? false : options.allowArray;
  const allowFunction = useDefaultOptions ? false : options.allowFunction;
  const nullable = useDefaultOptions ? false : options.nullable;
  if (!nullable && value === null || !allowArray && Array.isArray(value) || typeof value !== "object" && (!allowFunction || typeof value !== "function")) {
    throw new codes.ERR_INVALID_ARG_TYPE(name, "Object", value);
  }
});
var validateInt32 = hideStackFrames(
  (value, name, min = -2147483648, max = 2147483647) => {
    if (!isInt32(value)) {
      if (typeof value !== "number") {
        throw new codes.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
      if (!Number.isInteger(value)) {
        throw new codes.ERR_OUT_OF_RANGE(name, "an integer", value);
      }
      throw new codes.ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
    }
    if (value < min || value > max) {
      throw new codes.ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
    }
  }
);
var validateUint32 = hideStackFrames(
  (value, name, positive) => {
    if (!isUint32(value)) {
      if (typeof value !== "number") {
        throw new codes.ERR_INVALID_ARG_TYPE(name, "number", value);
      }
      if (!Number.isInteger(value)) {
        throw new codes.ERR_OUT_OF_RANGE(name, "an integer", value);
      }
      const min = positive ? 1 : 0;
      throw new codes.ERR_OUT_OF_RANGE(
        name,
        `>= ${min} && < 4294967296`,
        value
      );
    }
    if (positive && value === 0) {
      throw new codes.ERR_OUT_OF_RANGE(name, ">= 1 && < 4294967296", value);
    }
  }
);
function validateString(value, name) {
  if (typeof value !== "string") {
    throw new codes.ERR_INVALID_ARG_TYPE(name, "string", value);
  }
}
function validateBoolean(value, name) {
  if (typeof value !== "boolean") {
    throw new codes.ERR_INVALID_ARG_TYPE(name, "boolean", value);
  }
}
var validateOneOf = hideStackFrames(
  (value, name, oneOf) => {
    if (!Array.prototype.includes.call(oneOf, value)) {
      const allowed = Array.prototype.join.call(
        Array.prototype.map.call(
          oneOf,
          (v4) => typeof v4 === "string" ? `'${v4}'` : String(v4)
        ),
        ", "
      );
      const reason = "must be one of: " + allowed;
      throw new codes.ERR_INVALID_ARG_VALUE(name, value, reason);
    }
  }
);
var validateAbortSignal = hideStackFrames(
  (signal, name) => {
    if (signal !== void 0 && (signal === null || typeof signal !== "object" || !("aborted" in signal))) {
      throw new codes.ERR_INVALID_ARG_TYPE(name, "AbortSignal", signal);
    }
  }
);
var validateFunction = hideStackFrames(
  (value, name) => {
    if (typeof value !== "function") {
      throw new codes.ERR_INVALID_ARG_TYPE(name, "Function", value);
    }
  }
);
var validateArray = hideStackFrames(
  (value, name, minLength = 0) => {
    if (!Array.isArray(value)) {
      throw new codes.ERR_INVALID_ARG_TYPE(name, "Array", value);
    }
    if (value.length < minLength) {
      const reason = `must be longer than ${minLength}`;
      throw new codes.ERR_INVALID_ARG_VALUE(name, value, reason);
    }
  }
);

// https://deno.land/std@0.177.1/node/internal_binding/util.ts
var util_exports = {};
__export(util_exports, {
  ALL_PROPERTIES: () => ALL_PROPERTIES,
  ONLY_CONFIGURABLE: () => ONLY_CONFIGURABLE,
  ONLY_ENUMERABLE: () => ONLY_ENUMERABLE,
  ONLY_ENUM_WRITABLE: () => ONLY_ENUM_WRITABLE,
  ONLY_WRITABLE: () => ONLY_WRITABLE,
  SKIP_STRINGS: () => SKIP_STRINGS,
  SKIP_SYMBOLS: () => SKIP_SYMBOLS,
  getOwnNonIndexProperties: () => getOwnNonIndexProperties,
  guessHandleType: () => guessHandleType,
  isArrayIndex: () => isArrayIndex
});
function guessHandleType(_fd) {
  notImplemented("util.guessHandleType");
}
var ALL_PROPERTIES = 0;
var ONLY_WRITABLE = 1;
var ONLY_ENUMERABLE = 2;
var ONLY_CONFIGURABLE = 4;
var ONLY_ENUM_WRITABLE = 6;
var SKIP_STRINGS = 8;
var SKIP_SYMBOLS = 16;
var isNumericLookup = {};
function isArrayIndex(value) {
  switch (typeof value) {
    case "number":
      return value >= 0 && (value | 0) === value;
    case "string": {
      const result = isNumericLookup[value];
      if (result !== void 0) {
        return result;
      }
      const length = value.length;
      if (length === 0) {
        return isNumericLookup[value] = false;
      }
      let ch = 0;
      let i7 = 0;
      for (; i7 < length; ++i7) {
        ch = value.charCodeAt(i7);
        if (i7 === 0 && ch === 48 && length > 1 || ch < 48 || ch > 57) {
          return isNumericLookup[value] = false;
        }
      }
      return isNumericLookup[value] = true;
    }
    default:
      return false;
  }
}
function getOwnNonIndexProperties(obj, filter) {
  let allProperties = [
    ...Object.getOwnPropertyNames(obj),
    ...Object.getOwnPropertySymbols(obj)
  ];
  if (Array.isArray(obj)) {
    allProperties = allProperties.filter((k5) => !isArrayIndex(k5));
  }
  if (filter === ALL_PROPERTIES) {
    return allProperties;
  }
  const result = [];
  for (const key of allProperties) {
    const desc = Object.getOwnPropertyDescriptor(obj, key);
    if (desc === void 0) {
      continue;
    }
    if (filter & ONLY_WRITABLE && !desc.writable) {
      continue;
    }
    if (filter & ONLY_ENUMERABLE && !desc.enumerable) {
      continue;
    }
    if (filter & ONLY_CONFIGURABLE && !desc.configurable) {
      continue;
    }
    if (filter & SKIP_STRINGS && typeof key === "string") {
      continue;
    }
    if (filter & SKIP_SYMBOLS && typeof key === "symbol") {
      continue;
    }
    result.push(key);
  }
  return result;
}

// https://deno.land/std@0.177.1/node/internal/util/inspect.mjs
var kObjectType = 0;
var kArrayType = 1;
var kArrayExtrasType = 2;
var kMinLineLength = 16;
var kWeak = 0;
var kIterator = 1;
var kMapEntries = 2;
var kPending = 0;
var kRejected = 2;
var meta = [
  "\\x00",
  "\\x01",
  "\\x02",
  "\\x03",
  "\\x04",
  "\\x05",
  "\\x06",
  "\\x07",
  // x07
  "\\b",
  "\\t",
  "\\n",
  "\\x0B",
  "\\f",
  "\\r",
  "\\x0E",
  "\\x0F",
  // x0F
  "\\x10",
  "\\x11",
  "\\x12",
  "\\x13",
  "\\x14",
  "\\x15",
  "\\x16",
  "\\x17",
  // x17
  "\\x18",
  "\\x19",
  "\\x1A",
  "\\x1B",
  "\\x1C",
  "\\x1D",
  "\\x1E",
  "\\x1F",
  // x1F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\'",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // x2F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // x3F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // x4F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\\\",
  "",
  "",
  "",
  // x5F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  // x6F
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "\\x7F",
  // x7F
  "\\x80",
  "\\x81",
  "\\x82",
  "\\x83",
  "\\x84",
  "\\x85",
  "\\x86",
  "\\x87",
  // x87
  "\\x88",
  "\\x89",
  "\\x8A",
  "\\x8B",
  "\\x8C",
  "\\x8D",
  "\\x8E",
  "\\x8F",
  // x8F
  "\\x90",
  "\\x91",
  "\\x92",
  "\\x93",
  "\\x94",
  "\\x95",
  "\\x96",
  "\\x97",
  // x97
  "\\x98",
  "\\x99",
  "\\x9A",
  "\\x9B",
  "\\x9C",
  "\\x9D",
  "\\x9E",
  "\\x9F"
  // x9F
];
var isUndetectableObject = (v4) => typeof v4 === "undefined" && v4 !== void 0;
var strEscapeSequencesRegExp = /[\x00-\x1f\x27\x5c\x7f-\x9f]/;
var strEscapeSequencesReplacer = /[\x00-\x1f\x27\x5c\x7f-\x9f]/g;
var strEscapeSequencesRegExpSingle = /[\x00-\x1f\x5c\x7f-\x9f]/;
var strEscapeSequencesReplacerSingle = /[\x00-\x1f\x5c\x7f-\x9f]/g;
var keyStrRegExp = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
var numberRegExp = /^(0|[1-9][0-9]*)$/;
var nodeModulesRegExp = /[/\\]node_modules[/\\](.+?)(?=[/\\])/g;
var classRegExp = /^(\s+[^(]*?)\s*{/;
var stripCommentsRegExp = /(\/\/.*?\n)|(\/\*(.|\n)*?\*\/)/g;
var inspectDefaultOptions = {
  showHidden: false,
  depth: 2,
  colors: false,
  customInspect: true,
  showProxy: false,
  maxArrayLength: 100,
  maxStringLength: 1e4,
  breakLength: 80,
  compact: 3,
  sorted: false,
  getters: false
};
function getUserOptions(ctx, isCrossContext) {
  const ret = {
    stylize: ctx.stylize,
    showHidden: ctx.showHidden,
    depth: ctx.depth,
    colors: ctx.colors,
    customInspect: ctx.customInspect,
    showProxy: ctx.showProxy,
    maxArrayLength: ctx.maxArrayLength,
    maxStringLength: ctx.maxStringLength,
    breakLength: ctx.breakLength,
    compact: ctx.compact,
    sorted: ctx.sorted,
    getters: ctx.getters,
    ...ctx.userOptions
  };
  if (isCrossContext) {
    Object.setPrototypeOf(ret, null);
    for (const key of Object.keys(ret)) {
      if ((typeof ret[key] === "object" || typeof ret[key] === "function") && ret[key] !== null) {
        delete ret[key];
      }
    }
    ret.stylize = Object.setPrototypeOf((value, flavour) => {
      let stylized;
      try {
        stylized = `${ctx.stylize(value, flavour)}`;
      } catch {
      }
      if (typeof stylized !== "string") return value;
      return stylized;
    }, null);
  }
  return ret;
}
function inspect(value, opts) {
  const ctx = {
    budget: {},
    indentationLvl: 0,
    seen: [],
    currentDepth: 0,
    stylize: stylizeNoColor,
    showHidden: inspectDefaultOptions.showHidden,
    depth: inspectDefaultOptions.depth,
    colors: inspectDefaultOptions.colors,
    customInspect: inspectDefaultOptions.customInspect,
    showProxy: inspectDefaultOptions.showProxy,
    maxArrayLength: inspectDefaultOptions.maxArrayLength,
    maxStringLength: inspectDefaultOptions.maxStringLength,
    breakLength: inspectDefaultOptions.breakLength,
    compact: inspectDefaultOptions.compact,
    sorted: inspectDefaultOptions.sorted,
    getters: inspectDefaultOptions.getters
  };
  if (arguments.length > 1) {
    if (arguments.length > 2) {
      if (arguments[2] !== void 0) {
        ctx.depth = arguments[2];
      }
      if (arguments.length > 3 && arguments[3] !== void 0) {
        ctx.colors = arguments[3];
      }
    }
    if (typeof opts === "boolean") {
      ctx.showHidden = opts;
    } else if (opts) {
      const optKeys = Object.keys(opts);
      for (let i7 = 0; i7 < optKeys.length; ++i7) {
        const key = optKeys[i7];
        if (
          // deno-lint-ignore no-prototype-builtins
          inspectDefaultOptions.hasOwnProperty(key) || key === "stylize"
        ) {
          ctx[key] = opts[key];
        } else if (ctx.userOptions === void 0) {
          ctx.userOptions = opts;
        }
      }
    }
  }
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  if (ctx.maxArrayLength === null) ctx.maxArrayLength = Infinity;
  if (ctx.maxStringLength === null) ctx.maxStringLength = Infinity;
  return formatValue(ctx, value, 0);
}
var customInspectSymbol = Symbol.for("nodejs.util.inspect.custom");
inspect.custom = customInspectSymbol;
Object.defineProperty(inspect, "defaultOptions", {
  get() {
    return inspectDefaultOptions;
  },
  set(options) {
    validateObject(options, "options");
    return Object.assign(inspectDefaultOptions, options);
  }
});
var defaultFG = 39;
var defaultBG = 49;
inspect.colors = Object.assign(/* @__PURE__ */ Object.create(null), {
  reset: [0, 0],
  bold: [1, 22],
  dim: [2, 22],
  // Alias: faint
  italic: [3, 23],
  underline: [4, 24],
  blink: [5, 25],
  // Swap foreground and background colors
  inverse: [7, 27],
  // Alias: swapcolors, swapColors
  hidden: [8, 28],
  // Alias: conceal
  strikethrough: [9, 29],
  // Alias: strikeThrough, crossedout, crossedOut
  doubleunderline: [21, 24],
  // Alias: doubleUnderline
  black: [30, defaultFG],
  red: [31, defaultFG],
  green: [32, defaultFG],
  yellow: [33, defaultFG],
  blue: [34, defaultFG],
  magenta: [35, defaultFG],
  cyan: [36, defaultFG],
  white: [37, defaultFG],
  bgBlack: [40, defaultBG],
  bgRed: [41, defaultBG],
  bgGreen: [42, defaultBG],
  bgYellow: [43, defaultBG],
  bgBlue: [44, defaultBG],
  bgMagenta: [45, defaultBG],
  bgCyan: [46, defaultBG],
  bgWhite: [47, defaultBG],
  framed: [51, 54],
  overlined: [53, 55],
  gray: [90, defaultFG],
  // Alias: grey, blackBright
  redBright: [91, defaultFG],
  greenBright: [92, defaultFG],
  yellowBright: [93, defaultFG],
  blueBright: [94, defaultFG],
  magentaBright: [95, defaultFG],
  cyanBright: [96, defaultFG],
  whiteBright: [97, defaultFG],
  bgGray: [100, defaultBG],
  // Alias: bgGrey, bgBlackBright
  bgRedBright: [101, defaultBG],
  bgGreenBright: [102, defaultBG],
  bgYellowBright: [103, defaultBG],
  bgBlueBright: [104, defaultBG],
  bgMagentaBright: [105, defaultBG],
  bgCyanBright: [106, defaultBG],
  bgWhiteBright: [107, defaultBG]
});
function defineColorAlias(target, alias) {
  Object.defineProperty(inspect.colors, alias, {
    get() {
      return this[target];
    },
    set(value) {
      this[target] = value;
    },
    configurable: true,
    enumerable: false
  });
}
defineColorAlias("gray", "grey");
defineColorAlias("gray", "blackBright");
defineColorAlias("bgGray", "bgGrey");
defineColorAlias("bgGray", "bgBlackBright");
defineColorAlias("dim", "faint");
defineColorAlias("strikethrough", "crossedout");
defineColorAlias("strikethrough", "strikeThrough");
defineColorAlias("strikethrough", "crossedOut");
defineColorAlias("hidden", "conceal");
defineColorAlias("inverse", "swapColors");
defineColorAlias("inverse", "swapcolors");
defineColorAlias("doubleunderline", "doubleUnderline");
inspect.styles = Object.assign(/* @__PURE__ */ Object.create(null), {
  special: "cyan",
  number: "yellow",
  bigint: "yellow",
  boolean: "yellow",
  undefined: "grey",
  null: "bold",
  string: "green",
  symbol: "green",
  date: "magenta",
  // "name": intentionally not styling
  // TODO(BridgeAR): Highlight regular expressions properly.
  regexp: "red",
  module: "underline"
});
function addQuotes(str, quotes) {
  if (quotes === -1) {
    return `"${str}"`;
  }
  if (quotes === -2) {
    return `\`${str}\``;
  }
  return `'${str}'`;
}
var escapeFn = (str) => meta[str.charCodeAt(0)];
function strEscape(str) {
  let escapeTest = strEscapeSequencesRegExp;
  let escapeReplace = strEscapeSequencesReplacer;
  let singleQuote = 39;
  if (str.includes("'")) {
    if (!str.includes('"')) {
      singleQuote = -1;
    } else if (!str.includes("`") && !str.includes("${")) {
      singleQuote = -2;
    }
    if (singleQuote !== 39) {
      escapeTest = strEscapeSequencesRegExpSingle;
      escapeReplace = strEscapeSequencesReplacerSingle;
    }
  }
  if (str.length < 5e3 && !escapeTest.test(str)) {
    return addQuotes(str, singleQuote);
  }
  if (str.length > 100) {
    str = str.replace(escapeReplace, escapeFn);
    return addQuotes(str, singleQuote);
  }
  let result = "";
  let last = 0;
  const lastIndex = str.length;
  for (let i7 = 0; i7 < lastIndex; i7++) {
    const point = str.charCodeAt(i7);
    if (point === singleQuote || point === 92 || point < 32 || point > 126 && point < 160) {
      if (last === i7) {
        result += meta[point];
      } else {
        result += `${str.slice(last, i7)}${meta[point]}`;
      }
      last = i7 + 1;
    }
  }
  if (last !== lastIndex) {
    result += str.slice(last);
  }
  return addQuotes(result, singleQuote);
}
function stylizeWithColor(str, styleType) {
  const style = inspect.styles[styleType];
  if (style !== void 0) {
    const color = inspect.colors[style];
    if (color !== void 0) {
      return `\x1B[${color[0]}m${str}\x1B[${color[1]}m`;
    }
  }
  return str;
}
function stylizeNoColor(str) {
  return str;
}
function formatValue(ctx, value, recurseTimes, typedArray) {
  if (typeof value !== "object" && typeof value !== "function" && !isUndetectableObject(value)) {
    return formatPrimitive(ctx.stylize, value, ctx);
  }
  if (value === null) {
    return ctx.stylize("null", "null");
  }
  const context2 = value;
  const proxy = void 0;
  if (ctx.customInspect) {
    const maybeCustom = value[customInspectSymbol];
    if (typeof maybeCustom === "function" && // Filter out the util module, its inspect function is special.
    maybeCustom !== inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
      const depth = ctx.depth === null ? null : ctx.depth - recurseTimes;
      const isCrossContext = proxy !== void 0 || !(context2 instanceof Object);
      const ret = maybeCustom.call(
        context2,
        depth,
        getUserOptions(ctx, isCrossContext)
      );
      if (ret !== context2) {
        if (typeof ret !== "string") {
          return formatValue(ctx, ret, recurseTimes);
        }
        return ret.replace(/\n/g, `
${" ".repeat(ctx.indentationLvl)}`);
      }
    }
  }
  if (ctx.seen.includes(value)) {
    let index = 1;
    if (ctx.circular === void 0) {
      ctx.circular = /* @__PURE__ */ new Map();
      ctx.circular.set(value, index);
    } else {
      index = ctx.circular.get(value);
      if (index === void 0) {
        index = ctx.circular.size + 1;
        ctx.circular.set(value, index);
      }
    }
    return ctx.stylize(`[Circular *${index}]`, "special");
  }
  return formatRaw(ctx, value, recurseTimes, typedArray);
}
function formatRaw(ctx, value, recurseTimes, typedArray) {
  let keys;
  let protoProps;
  if (ctx.showHidden && (recurseTimes <= ctx.depth || ctx.depth === null)) {
    protoProps = [];
  }
  const constructor = getConstructorName(value, ctx, recurseTimes, protoProps);
  if (protoProps !== void 0 && protoProps.length === 0) {
    protoProps = void 0;
  }
  let tag = value[Symbol.toStringTag];
  if (typeof tag !== "string") {
    tag = "";
  }
  let base = "";
  let formatter = getEmptyFormatArray;
  let braces;
  let noIterator = true;
  let i7 = 0;
  const filter = ctx.showHidden ? ALL_PROPERTIES : ONLY_ENUMERABLE;
  let extrasType = kObjectType;
  if (value[Symbol.iterator] || constructor === null) {
    noIterator = false;
    if (Array.isArray(value)) {
      const prefix = constructor !== "Array" || tag !== "" ? getPrefix(constructor, tag, "Array", `(${value.length})`) : "";
      keys = getOwnNonIndexProperties(value, filter);
      braces = [`${prefix}[`, "]"];
      if (value.length === 0 && keys.length === 0 && protoProps === void 0) {
        return `${braces[0]}]`;
      }
      extrasType = kArrayExtrasType;
      formatter = formatArray;
    } else if (isSet2(value)) {
      const size = value.size;
      const prefix = getPrefix(constructor, tag, "Set", `(${size})`);
      keys = getKeys(value, ctx.showHidden);
      formatter = constructor !== null ? formatSet.bind(null, value) : formatSet.bind(null, value.values());
      if (size === 0 && keys.length === 0 && protoProps === void 0) {
        return `${prefix}{}`;
      }
      braces = [`${prefix}{`, "}"];
    } else if (isMap2(value)) {
      const size = value.size;
      const prefix = getPrefix(constructor, tag, "Map", `(${size})`);
      keys = getKeys(value, ctx.showHidden);
      formatter = constructor !== null ? formatMap.bind(null, value) : formatMap.bind(null, value.entries());
      if (size === 0 && keys.length === 0 && protoProps === void 0) {
        return `${prefix}{}`;
      }
      braces = [`${prefix}{`, "}"];
    } else if (isTypedArray(value)) {
      keys = getOwnNonIndexProperties(value, filter);
      const bound = value;
      const fallback = "";
      if (constructor === null) {
      }
      const size = value.length;
      const prefix = getPrefix(constructor, tag, fallback, `(${size})`);
      braces = [`${prefix}[`, "]"];
      if (value.length === 0 && keys.length === 0 && !ctx.showHidden) {
        return `${braces[0]}]`;
      }
      formatter = formatTypedArray.bind(null, bound, size);
      extrasType = kArrayExtrasType;
    } else if (isMapIterator2(value)) {
      keys = getKeys(value, ctx.showHidden);
      braces = getIteratorBraces("Map", tag);
      formatter = formatIterator.bind(null, braces);
    } else if (isSetIterator2(value)) {
      keys = getKeys(value, ctx.showHidden);
      braces = getIteratorBraces("Set", tag);
      formatter = formatIterator.bind(null, braces);
    } else {
      noIterator = true;
    }
  }
  if (noIterator) {
    keys = getKeys(value, ctx.showHidden);
    braces = ["{", "}"];
    if (constructor === "Object") {
      if (isArgumentsObject2(value)) {
        braces[0] = "[Arguments] {";
      } else if (tag !== "") {
        braces[0] = `${getPrefix(constructor, tag, "Object")}{`;
      }
      if (keys.length === 0 && protoProps === void 0) {
        return `${braces[0]}}`;
      }
    } else if (typeof value === "function") {
      base = getFunctionBase(value, constructor, tag);
      if (keys.length === 0 && protoProps === void 0) {
        return ctx.stylize(base, "special");
      }
    } else if (isRegExp2(value)) {
      base = RegExp(constructor !== null ? value : new RegExp(value)).toString();
      const prefix = getPrefix(constructor, tag, "RegExp");
      if (prefix !== "RegExp ") {
        base = `${prefix}${base}`;
      }
      if (keys.length === 0 && protoProps === void 0 || recurseTimes > ctx.depth && ctx.depth !== null) {
        return ctx.stylize(base, "regexp");
      }
    } else if (isDate2(value)) {
      base = Number.isNaN(value.getTime()) ? value.toString() : value.toISOString();
      const prefix = getPrefix(constructor, tag, "Date");
      if (prefix !== "Date ") {
        base = `${prefix}${base}`;
      }
      if (keys.length === 0 && protoProps === void 0) {
        return ctx.stylize(base, "date");
      }
    } else if (value instanceof Error) {
      base = formatError(value, constructor, tag, ctx, keys);
      if (keys.length === 0 && protoProps === void 0) {
        return base;
      }
    } else if (isAnyArrayBuffer2(value)) {
      const arrayType = isArrayBuffer2(value) ? "ArrayBuffer" : "SharedArrayBuffer";
      const prefix = getPrefix(constructor, tag, arrayType);
      if (typedArray === void 0) {
        formatter = formatArrayBuffer;
      } else if (keys.length === 0 && protoProps === void 0) {
        return prefix + `{ byteLength: ${formatNumber(ctx.stylize, value.byteLength)} }`;
      }
      braces[0] = `${prefix}{`;
      Array.prototype.unshift.call(keys, "byteLength");
    } else if (isDataView2(value)) {
      braces[0] = `${getPrefix(constructor, tag, "DataView")}{`;
      Array.prototype.unshift.call(keys, "byteLength", "byteOffset", "buffer");
    } else if (isPromise2(value)) {
      braces[0] = `${getPrefix(constructor, tag, "Promise")}{`;
      formatter = formatPromise;
    } else if (isWeakSet2(value)) {
      braces[0] = `${getPrefix(constructor, tag, "WeakSet")}{`;
      formatter = ctx.showHidden ? formatWeakSet : formatWeakCollection;
    } else if (isWeakMap2(value)) {
      braces[0] = `${getPrefix(constructor, tag, "WeakMap")}{`;
      formatter = ctx.showHidden ? formatWeakMap : formatWeakCollection;
    } else if (isModuleNamespaceObject2(value)) {
      braces[0] = `${getPrefix(constructor, tag, "Module")}{`;
      formatter = formatNamespaceObject.bind(null, keys);
    } else if (isBoxedPrimitive2(value)) {
      base = getBoxedBase(value, ctx, keys, constructor, tag);
      if (keys.length === 0 && protoProps === void 0) {
        return base;
      }
    } else {
      if (keys.length === 0 && protoProps === void 0) {
        return `${getCtxStyle(value, constructor, tag)}{}`;
      }
      braces[0] = `${getCtxStyle(value, constructor, tag)}{`;
    }
  }
  if (recurseTimes > ctx.depth && ctx.depth !== null) {
    let constructorName = getCtxStyle(value, constructor, tag).slice(0, -1);
    if (constructor !== null) {
      constructorName = `[${constructorName}]`;
    }
    return ctx.stylize(constructorName, "special");
  }
  recurseTimes += 1;
  ctx.seen.push(value);
  ctx.currentDepth = recurseTimes;
  let output2;
  const indentationLvl = ctx.indentationLvl;
  try {
    output2 = formatter(ctx, value, recurseTimes);
    for (i7 = 0; i7 < keys.length; i7++) {
      output2.push(
        formatProperty(ctx, value, recurseTimes, keys[i7], extrasType)
      );
    }
    if (protoProps !== void 0) {
      output2.push(...protoProps);
    }
  } catch (err) {
    const constructorName = getCtxStyle(value, constructor, tag).slice(0, -1);
    return handleMaxCallStackSize(ctx, err, constructorName, indentationLvl);
  }
  if (ctx.circular !== void 0) {
    const index = ctx.circular.get(value);
    if (index !== void 0) {
      const reference = ctx.stylize(`<ref *${index}>`, "special");
      if (ctx.compact !== true) {
        base = base === "" ? reference : `${reference} ${base}`;
      } else {
        braces[0] = `${reference} ${braces[0]}`;
      }
    }
  }
  ctx.seen.pop();
  if (ctx.sorted) {
    const comparator = ctx.sorted === true ? void 0 : ctx.sorted;
    if (extrasType === kObjectType) {
      output2 = output2.sort(comparator);
    } else if (keys.length > 1) {
      const sorted = output2.slice(output2.length - keys.length).sort(comparator);
      output2.splice(output2.length - keys.length, keys.length, ...sorted);
    }
  }
  const res = reduceToSingleString(
    ctx,
    output2,
    base,
    braces,
    extrasType,
    recurseTimes,
    value
  );
  const budget = ctx.budget[ctx.indentationLvl] || 0;
  const newLength = budget + res.length;
  ctx.budget[ctx.indentationLvl] = newLength;
  if (newLength > 2 ** 27) {
    ctx.depth = -1;
  }
  return res;
}
var builtInObjects = new Set(
  Object.getOwnPropertyNames(globalThis).filter(
    (e6) => /^[A-Z][a-zA-Z0-9]+$/.test(e6)
  )
);
function addPrototypeProperties(ctx, main, obj, recurseTimes, output2) {
  let depth = 0;
  let keys;
  let keySet;
  do {
    if (depth !== 0 || main === obj) {
      obj = Object.getPrototypeOf(obj);
      if (obj === null) {
        return;
      }
      const descriptor = Object.getOwnPropertyDescriptor(obj, "constructor");
      if (descriptor !== void 0 && typeof descriptor.value === "function" && builtInObjects.has(descriptor.value.name)) {
        return;
      }
    }
    if (depth === 0) {
      keySet = /* @__PURE__ */ new Set();
    } else {
      Array.prototype.forEach.call(keys, (key) => keySet.add(key));
    }
    keys = Reflect.ownKeys(obj);
    Array.prototype.push.call(ctx.seen, main);
    for (const key of keys) {
      if (key === "constructor" || // deno-lint-ignore no-prototype-builtins
      main.hasOwnProperty(key) || depth !== 0 && keySet.has(key)) {
        continue;
      }
      const desc = Object.getOwnPropertyDescriptor(obj, key);
      if (typeof desc.value === "function") {
        continue;
      }
      const value = formatProperty(
        ctx,
        obj,
        recurseTimes,
        key,
        kObjectType,
        desc,
        main
      );
      if (ctx.colors) {
        Array.prototype.push.call(output2, `\x1B[2m${value}\x1B[22m`);
      } else {
        Array.prototype.push.call(output2, value);
      }
    }
    Array.prototype.pop.call(ctx.seen);
  } while (++depth !== 3);
}
function getConstructorName(obj, ctx, recurseTimes, protoProps) {
  let firstProto;
  const tmp = obj;
  while (obj || isUndetectableObject(obj)) {
    const descriptor = Object.getOwnPropertyDescriptor(obj, "constructor");
    if (descriptor !== void 0 && typeof descriptor.value === "function" && descriptor.value.name !== "" && isInstanceof(tmp, descriptor.value)) {
      if (protoProps !== void 0 && (firstProto !== obj || !builtInObjects.has(descriptor.value.name))) {
        addPrototypeProperties(
          ctx,
          tmp,
          firstProto || tmp,
          recurseTimes,
          protoProps
        );
      }
      return descriptor.value.name;
    }
    obj = Object.getPrototypeOf(obj);
    if (firstProto === void 0) {
      firstProto = obj;
    }
  }
  if (firstProto === null) {
    return null;
  }
  const res = void 0;
  if (recurseTimes > ctx.depth && ctx.depth !== null) {
    return `${res} <Complex prototype>`;
  }
  const protoConstr = getConstructorName(
    firstProto,
    ctx,
    recurseTimes + 1,
    protoProps
  );
  if (protoConstr === null) {
    return `${res} <${inspect(firstProto, {
      ...ctx,
      customInspect: false,
      depth: -1
    })}>`;
  }
  return `${res} <${protoConstr}>`;
}
function formatPrimitive(fn, value, ctx) {
  if (typeof value === "string") {
    let trailer = "";
    if (value.length > ctx.maxStringLength) {
      const remaining = value.length - ctx.maxStringLength;
      value = value.slice(0, ctx.maxStringLength);
      trailer = `... ${remaining} more character${remaining > 1 ? "s" : ""}`;
    }
    if (ctx.compact !== true && // TODO(BridgeAR): Add unicode support. Use the readline getStringWidth
    // function.
    value.length > kMinLineLength && value.length > ctx.breakLength - ctx.indentationLvl - 4) {
      return value.split(/(?<=\n)/).map((line) => fn(strEscape(line), "string")).join(` +
${" ".repeat(ctx.indentationLvl + 2)}`) + trailer;
    }
    return fn(strEscape(value), "string") + trailer;
  }
  if (typeof value === "number") {
    return formatNumber(fn, value);
  }
  if (typeof value === "bigint") {
    return formatBigInt(fn, value);
  }
  if (typeof value === "boolean") {
    return fn(`${value}`, "boolean");
  }
  if (typeof value === "undefined") {
    return fn("undefined", "undefined");
  }
  return fn(value.toString(), "symbol");
}
function getEmptyFormatArray() {
  return [];
}
function isInstanceof(object, proto) {
  try {
    return object instanceof proto;
  } catch {
    return false;
  }
}
function getPrefix(constructor, tag, fallback, size = "") {
  if (constructor === null) {
    if (tag !== "" && fallback !== tag) {
      return `[${fallback}${size}: null prototype] [${tag}] `;
    }
    return `[${fallback}${size}: null prototype] `;
  }
  if (tag !== "" && constructor !== tag) {
    return `${constructor}${size} [${tag}] `;
  }
  return `${constructor}${size} `;
}
function formatArray(ctx, value, recurseTimes) {
  const valLen = value.length;
  const len = Math.min(Math.max(0, ctx.maxArrayLength), valLen);
  const remaining = valLen - len;
  const output2 = [];
  for (let i7 = 0; i7 < len; i7++) {
    if (!value.hasOwnProperty(i7)) {
      return formatSpecialArray(ctx, value, recurseTimes, len, output2, i7);
    }
    output2.push(formatProperty(ctx, value, recurseTimes, i7, kArrayType));
  }
  if (remaining > 0) {
    output2.push(`... ${remaining} more item${remaining > 1 ? "s" : ""}`);
  }
  return output2;
}
function getCtxStyle(_value, constructor, tag) {
  let fallback = "";
  if (constructor === null) {
    if (fallback === tag) {
      fallback = "Object";
    }
  }
  return getPrefix(constructor, tag, fallback);
}
function getKeys(value, showHidden) {
  let keys;
  const symbols = Object.getOwnPropertySymbols(value);
  if (showHidden) {
    keys = Object.getOwnPropertyNames(value);
    if (symbols.length !== 0) {
      Array.prototype.push.apply(keys, symbols);
    }
  } else {
    try {
      keys = Object.keys(value);
    } catch (_err) {
      keys = Object.getOwnPropertyNames(value);
    }
    if (symbols.length !== 0) {
    }
  }
  return keys;
}
function formatSet(value, ctx, _ignored, recurseTimes) {
  const output2 = [];
  ctx.indentationLvl += 2;
  for (const v4 of value) {
    Array.prototype.push.call(output2, formatValue(ctx, v4, recurseTimes));
  }
  ctx.indentationLvl -= 2;
  return output2;
}
function formatMap(value, ctx, _gnored, recurseTimes) {
  const output2 = [];
  ctx.indentationLvl += 2;
  for (const { 0: k5, 1: v4 } of value) {
    output2.push(
      `${formatValue(ctx, k5, recurseTimes)} => ${formatValue(ctx, v4, recurseTimes)}`
    );
  }
  ctx.indentationLvl -= 2;
  return output2;
}
function formatTypedArray(value, length, ctx, _ignored, recurseTimes) {
  const maxLength = Math.min(Math.max(0, ctx.maxArrayLength), length);
  const remaining = value.length - maxLength;
  const output2 = new Array(maxLength);
  const elementFormatter = value.length > 0 && typeof value[0] === "number" ? formatNumber : formatBigInt;
  for (let i7 = 0; i7 < maxLength; ++i7) {
    output2[i7] = elementFormatter(ctx.stylize, value[i7]);
  }
  if (remaining > 0) {
    output2[maxLength] = `... ${remaining} more item${remaining > 1 ? "s" : ""}`;
  }
  if (ctx.showHidden) {
    ctx.indentationLvl += 2;
    for (const key of [
      "BYTES_PER_ELEMENT",
      "length",
      "byteLength",
      "byteOffset",
      "buffer"
    ]) {
      const str = formatValue(ctx, value[key], recurseTimes, true);
      Array.prototype.push.call(output2, `[${key}]: ${str}`);
    }
    ctx.indentationLvl -= 2;
  }
  return output2;
}
function getIteratorBraces(type, tag) {
  if (tag !== `${type} Iterator`) {
    if (tag !== "") {
      tag += "] [";
    }
    tag += `${type} Iterator`;
  }
  return [`[${tag}] {`, "}"];
}
function formatIterator(braces, ctx, value, recurseTimes) {
  const { 0: entries, 1: isKeyValue } = value;
  if (isKeyValue) {
    braces[0] = braces[0].replace(/ Iterator] {$/, " Entries] {");
    return formatMapIterInner(ctx, recurseTimes, entries, kMapEntries);
  }
  return formatSetIterInner(ctx, recurseTimes, entries, kIterator);
}
function getFunctionBase(value, constructor, tag) {
  const stringified = Function.prototype.toString.call(value);
  if (stringified.slice(0, 5) === "class" && stringified.endsWith("}")) {
    const slice2 = stringified.slice(5, -1);
    const bracketIndex = slice2.indexOf("{");
    if (bracketIndex !== -1 && (!slice2.slice(0, bracketIndex).includes("(") || // Slow path to guarantee that it's indeed a class.
    classRegExp.test(slice2.replace(stripCommentsRegExp)))) {
      return getClassBase(value, constructor, tag);
    }
  }
  let type = "Function";
  if (isGeneratorFunction2(value)) {
    type = `Generator${type}`;
  }
  if (isAsyncFunction2(value)) {
    type = `Async${type}`;
  }
  let base = `[${type}`;
  if (constructor === null) {
    base += " (null prototype)";
  }
  if (value.name === "") {
    base += " (anonymous)";
  } else {
    base += `: ${value.name}`;
  }
  base += "]";
  if (constructor !== type && constructor !== null) {
    base += ` ${constructor}`;
  }
  if (tag !== "" && constructor !== tag) {
    base += ` [${tag}]`;
  }
  return base;
}
function formatError(err, constructor, tag, ctx, keys) {
  const name = err.name != null ? String(err.name) : "Error";
  let len = name.length;
  let stack = err.stack ? String(err.stack) : err.toString();
  if (!ctx.showHidden && keys.length !== 0) {
    for (const name2 of ["name", "message", "stack"]) {
      const index = keys.indexOf(name2);
      if (index !== -1 && stack.includes(err[name2])) {
        keys.splice(index, 1);
      }
    }
  }
  if (constructor === null || name.endsWith("Error") && stack.startsWith(name) && (stack.length === len || stack[len] === ":" || stack[len] === "\n")) {
    let fallback = "Error";
    if (constructor === null) {
      const start = stack.match(/^([A-Z][a-z_ A-Z0-9[\]()-]+)(?::|\n {4}at)/) || stack.match(/^([a-z_A-Z0-9-]*Error)$/);
      fallback = start && start[1] || "";
      len = fallback.length;
      fallback = fallback || "Error";
    }
    const prefix = getPrefix(constructor, tag, fallback).slice(0, -1);
    if (name !== prefix) {
      if (prefix.includes(name)) {
        if (len === 0) {
          stack = `${prefix}: ${stack}`;
        } else {
          stack = `${prefix}${stack.slice(len)}`;
        }
      } else {
        stack = `${prefix} [${name}]${stack.slice(len)}`;
      }
    }
  }
  let pos = err.message && stack.indexOf(err.message) || -1;
  if (pos !== -1) {
    pos += err.message.length;
  }
  const stackStart = stack.indexOf("\n    at", pos);
  if (stackStart === -1) {
    stack = `[${stack}]`;
  } else if (ctx.colors) {
    let newStack = stack.slice(0, stackStart);
    const lines = stack.slice(stackStart + 1).split("\n");
    for (const line of lines) {
      let nodeModule;
      newStack += "\n";
      let pos2 = 0;
      while (nodeModule = nodeModulesRegExp.exec(line)) {
        newStack += line.slice(pos2, nodeModule.index + 14);
        newStack += ctx.stylize(nodeModule[1], "module");
        pos2 = nodeModule.index + nodeModule[0].length;
      }
      newStack += pos2 === 0 ? line : line.slice(pos2);
    }
    stack = newStack;
  }
  if (ctx.indentationLvl !== 0) {
    const indentation = " ".repeat(ctx.indentationLvl);
    stack = stack.replace(/\n/g, `
${indentation}`);
  }
  return stack;
}
var hexSlice;
function formatArrayBuffer(ctx, value) {
  let buffer;
  try {
    buffer = new Uint8Array(value);
  } catch {
    return [ctx.stylize("(detached)", "special")];
  }
  let str = hexSlice(buffer, 0, Math.min(ctx.maxArrayLength, buffer.length)).replace(/(.{2})/g, "$1 ").trim();
  const remaining = buffer.length - ctx.maxArrayLength;
  if (remaining > 0) {
    str += ` ... ${remaining} more byte${remaining > 1 ? "s" : ""}`;
  }
  return [`${ctx.stylize("[Uint8Contents]", "special")}: <${str}>`];
}
function formatNumber(fn, value) {
  return fn(Object.is(value, -0) ? "-0" : `${value}`, "number");
}
function formatPromise(ctx, value, recurseTimes) {
  let output2;
  const { 0: state, 1: result } = value;
  if (state === kPending) {
    output2 = [ctx.stylize("<pending>", "special")];
  } else {
    ctx.indentationLvl += 2;
    const str = formatValue(ctx, result, recurseTimes);
    ctx.indentationLvl -= 2;
    output2 = [
      state === kRejected ? `${ctx.stylize("<rejected>", "special")} ${str}` : str
    ];
  }
  return output2;
}
function formatWeakCollection(ctx) {
  return [ctx.stylize("<items unknown>", "special")];
}
function formatWeakSet(ctx, value, recurseTimes) {
  const entries = value;
  return formatSetIterInner(ctx, recurseTimes, entries, kWeak);
}
function formatWeakMap(ctx, value, recurseTimes) {
  const entries = value;
  return formatMapIterInner(ctx, recurseTimes, entries, kWeak);
}
function formatProperty(ctx, value, recurseTimes, key, type, desc, original = value) {
  let name, str;
  let extra = " ";
  desc = desc || Object.getOwnPropertyDescriptor(value, key) || { value: value[key], enumerable: true };
  if (desc.value !== void 0) {
    const diff = ctx.compact !== true || type !== kObjectType ? 2 : 3;
    ctx.indentationLvl += diff;
    str = formatValue(ctx, desc.value, recurseTimes);
    if (diff === 3 && ctx.breakLength < getStringWidth(str, ctx.colors)) {
      extra = `
${" ".repeat(ctx.indentationLvl)}`;
    }
    ctx.indentationLvl -= diff;
  } else if (desc.get !== void 0) {
    const label = desc.set !== void 0 ? "Getter/Setter" : "Getter";
    const s16 = ctx.stylize;
    const sp = "special";
    if (ctx.getters && (ctx.getters === true || ctx.getters === "get" && desc.set === void 0 || ctx.getters === "set" && desc.set !== void 0)) {
      try {
        const tmp = desc.get.call(original);
        ctx.indentationLvl += 2;
        if (tmp === null) {
          str = `${s16(`[${label}:`, sp)} ${s16("null", "null")}${s16("]", sp)}`;
        } else if (typeof tmp === "object") {
          str = `${s16(`[${label}]`, sp)} ${formatValue(ctx, tmp, recurseTimes)}`;
        } else {
          const primitive = formatPrimitive(s16, tmp, ctx);
          str = `${s16(`[${label}:`, sp)} ${primitive}${s16("]", sp)}`;
        }
        ctx.indentationLvl -= 2;
      } catch (err) {
        const message = `<Inspection threw (${err.message})>`;
        str = `${s16(`[${label}:`, sp)} ${message}${s16("]", sp)}`;
      }
    } else {
      str = ctx.stylize(`[${label}]`, sp);
    }
  } else if (desc.set !== void 0) {
    str = ctx.stylize("[Setter]", "special");
  } else {
    str = ctx.stylize("undefined", "undefined");
  }
  if (type === kArrayType) {
    return str;
  }
  if (typeof key === "symbol") {
    const tmp = key.toString().replace(strEscapeSequencesReplacer, escapeFn);
    name = `[${ctx.stylize(tmp, "symbol")}]`;
  } else if (key === "__proto__") {
    name = "['__proto__']";
  } else if (desc.enumerable === false) {
    const tmp = key.replace(strEscapeSequencesReplacer, escapeFn);
    name = `[${tmp}]`;
  } else if (keyStrRegExp.test(key)) {
    name = ctx.stylize(key, "name");
  } else {
    name = ctx.stylize(strEscape(key), "string");
  }
  return `${name}:${extra}${str}`;
}
function handleMaxCallStackSize(_ctx, _err, _constructorName, _indentationLvl) {
}
var colorRegExp = /\u001b\[\d\d?m/g;
function removeColors(str) {
  return str.replace(colorRegExp, "");
}
function isBelowBreakLength(ctx, output2, start, base) {
  let totalLength = output2.length + start;
  if (totalLength + output2.length > ctx.breakLength) {
    return false;
  }
  for (let i7 = 0; i7 < output2.length; i7++) {
    if (ctx.colors) {
      totalLength += removeColors(output2[i7]).length;
    } else {
      totalLength += output2[i7].length;
    }
    if (totalLength > ctx.breakLength) {
      return false;
    }
  }
  return base === "" || !base.includes("\n");
}
function formatBigInt(fn, value) {
  return fn(`${value}n`, "bigint");
}
function formatNamespaceObject(keys, ctx, value, recurseTimes) {
  const output2 = new Array(keys.length);
  for (let i7 = 0; i7 < keys.length; i7++) {
    try {
      output2[i7] = formatProperty(
        ctx,
        value,
        recurseTimes,
        keys[i7],
        kObjectType
      );
    } catch (_err) {
      const tmp = { [keys[i7]]: "" };
      output2[i7] = formatProperty(ctx, tmp, recurseTimes, keys[i7], kObjectType);
      const pos = output2[i7].lastIndexOf(" ");
      output2[i7] = output2[i7].slice(0, pos + 1) + ctx.stylize("<uninitialized>", "special");
    }
  }
  keys.length = 0;
  return output2;
}
function formatSpecialArray(ctx, value, recurseTimes, maxLength, output2, i7) {
  const keys = Object.keys(value);
  let index = i7;
  for (; i7 < keys.length && output2.length < maxLength; i7++) {
    const key = keys[i7];
    const tmp = +key;
    if (tmp > 2 ** 32 - 2) {
      break;
    }
    if (`${index}` !== key) {
      if (!numberRegExp.test(key)) {
        break;
      }
      const emptyItems = tmp - index;
      const ending = emptyItems > 1 ? "s" : "";
      const message = `<${emptyItems} empty item${ending}>`;
      output2.push(ctx.stylize(message, "undefined"));
      index = tmp;
      if (output2.length === maxLength) {
        break;
      }
    }
    output2.push(formatProperty(ctx, value, recurseTimes, key, kArrayType));
    index++;
  }
  const remaining = value.length - index;
  if (output2.length !== maxLength) {
    if (remaining > 0) {
      const ending = remaining > 1 ? "s" : "";
      const message = `<${remaining} empty item${ending}>`;
      output2.push(ctx.stylize(message, "undefined"));
    }
  } else if (remaining > 0) {
    output2.push(`... ${remaining} more item${remaining > 1 ? "s" : ""}`);
  }
  return output2;
}
function getBoxedBase(value, ctx, keys, constructor, tag) {
  let type;
  if (isNumberObject2(value)) {
    type = "Number";
  } else if (isStringObject2(value)) {
    type = "String";
    keys.splice(0, value.length);
  } else if (isBooleanObject2(value)) {
    type = "Boolean";
  } else if (isBigIntObject2(value)) {
    type = "BigInt";
  } else {
    type = "Symbol";
  }
  let base = `[${type}`;
  if (type !== constructor) {
    if (constructor === null) {
      base += " (null prototype)";
    } else {
      base += ` (${constructor})`;
    }
  }
  base += `: ${formatPrimitive(stylizeNoColor, value.valueOf(), ctx)}]`;
  if (tag !== "" && tag !== constructor) {
    base += ` [${tag}]`;
  }
  if (keys.length !== 0 || ctx.stylize === stylizeNoColor) {
    return base;
  }
  return ctx.stylize(base, type.toLowerCase());
}
function getClassBase(value, constructor, tag) {
  const hasName = value.hasOwnProperty("name");
  const name = hasName && value.name || "(anonymous)";
  let base = `class ${name}`;
  if (constructor !== "Function" && constructor !== null) {
    base += ` [${constructor}]`;
  }
  if (tag !== "" && constructor !== tag) {
    base += ` [${tag}]`;
  }
  if (constructor !== null) {
    const superName = Object.getPrototypeOf(value).name;
    if (superName) {
      base += ` extends ${superName}`;
    }
  } else {
    base += " extends [null prototype]";
  }
  return `[${base}]`;
}
function reduceToSingleString(ctx, output2, base, braces, extrasType, recurseTimes, value) {
  if (ctx.compact !== true) {
    if (typeof ctx.compact === "number" && ctx.compact >= 1) {
      const entries = output2.length;
      if (extrasType === kArrayExtrasType && entries > 6) {
        output2 = groupArrayElements(ctx, output2, value);
      }
      if (ctx.currentDepth - recurseTimes < ctx.compact && entries === output2.length) {
        const start = output2.length + ctx.indentationLvl + braces[0].length + base.length + 10;
        if (isBelowBreakLength(ctx, output2, start, base)) {
          return `${base ? `${base} ` : ""}${braces[0]} ${join(output2, ", ")} ${braces[1]}`;
        }
      }
    }
    const indentation2 = `
${" ".repeat(ctx.indentationLvl)}`;
    return `${base ? `${base} ` : ""}${braces[0]}${indentation2}  ${join(output2, `,${indentation2}  `)}${indentation2}${braces[1]}`;
  }
  if (isBelowBreakLength(ctx, output2, 0, base)) {
    return `${braces[0]}${base ? ` ${base}` : ""} ${join(output2, ", ")} ` + braces[1];
  }
  const indentation = " ".repeat(ctx.indentationLvl);
  const ln = base === "" && braces[0].length === 1 ? " " : `${base ? ` ${base}` : ""}
${indentation}  `;
  return `${braces[0]}${ln}${join(output2, `,
${indentation}  `)} ${braces[1]}`;
}
function join(output2, separator) {
  let str = "";
  if (output2.length !== 0) {
    const lastIndex = output2.length - 1;
    for (let i7 = 0; i7 < lastIndex; i7++) {
      str += output2[i7];
      str += separator;
    }
    str += output2[lastIndex];
  }
  return str;
}
function groupArrayElements(ctx, output2, value) {
  let totalLength = 0;
  let maxLength = 0;
  let i7 = 0;
  let outputLength = output2.length;
  if (ctx.maxArrayLength < output2.length) {
    outputLength--;
  }
  const separatorSpace = 2;
  const dataLen = new Array(outputLength);
  for (; i7 < outputLength; i7++) {
    const len = getStringWidth(output2[i7], ctx.colors);
    dataLen[i7] = len;
    totalLength += len + separatorSpace;
    if (maxLength < len) {
      maxLength = len;
    }
  }
  const actualMax = maxLength + separatorSpace;
  if (actualMax * 3 + ctx.indentationLvl < ctx.breakLength && (totalLength / actualMax > 5 || maxLength <= 6)) {
    const approxCharHeights = 2.5;
    const averageBias = Math.sqrt(actualMax - totalLength / output2.length);
    const biasedMax = Math.max(actualMax - 3 - averageBias, 1);
    const columns = Math.min(
      // Ideally a square should be drawn. We expect a character to be about 2.5
      // times as high as wide. This is the area formula to calculate a square
      // which contains n rectangles of size `actualMax * approxCharHeights`.
      // Divide that by `actualMax` to receive the correct number of columns.
      // The added bias increases the columns for short entries.
      Math.round(
        Math.sqrt(
          approxCharHeights * biasedMax * outputLength
        ) / biasedMax
      ),
      // Do not exceed the breakLength.
      Math.floor((ctx.breakLength - ctx.indentationLvl) / actualMax),
      // Limit array grouping for small `compact` modes as the user requested
      // minimal grouping.
      ctx.compact * 4,
      // Limit the columns to a maximum of fifteen.
      15
    );
    if (columns <= 1) {
      return output2;
    }
    const tmp = [];
    const maxLineLength = [];
    for (let i8 = 0; i8 < columns; i8++) {
      let lineMaxLength = 0;
      for (let j3 = i8; j3 < output2.length; j3 += columns) {
        if (dataLen[j3] > lineMaxLength) {
          lineMaxLength = dataLen[j3];
        }
      }
      lineMaxLength += separatorSpace;
      maxLineLength[i8] = lineMaxLength;
    }
    let order = String.prototype.padStart;
    if (value !== void 0) {
      for (let i8 = 0; i8 < output2.length; i8++) {
        if (typeof value[i8] !== "number" && typeof value[i8] !== "bigint") {
          order = String.prototype.padEnd;
          break;
        }
      }
    }
    for (let i8 = 0; i8 < outputLength; i8 += columns) {
      const max = Math.min(i8 + columns, outputLength);
      let str = "";
      let j3 = i8;
      for (; j3 < max - 1; j3++) {
        const padding = maxLineLength[j3 - i8] + output2[j3].length - dataLen[j3];
        str += `${output2[j3]}, `.padStart(padding, " ");
      }
      if (order === String.prototype.padStart) {
        const padding = maxLineLength[j3 - i8] + output2[j3].length - dataLen[j3] - separatorSpace;
        str += output2[j3].padStart(padding, " ");
      } else {
        str += output2[j3];
      }
      Array.prototype.push.call(tmp, str);
    }
    if (ctx.maxArrayLength < output2.length) {
      Array.prototype.push.call(tmp, output2[outputLength]);
    }
    output2 = tmp;
  }
  return output2;
}
function formatMapIterInner(ctx, recurseTimes, entries, state) {
  const maxArrayLength = Math.max(ctx.maxArrayLength, 0);
  const len = entries.length / 2;
  const remaining = len - maxArrayLength;
  const maxLength = Math.min(maxArrayLength, len);
  let output2 = new Array(maxLength);
  let i7 = 0;
  ctx.indentationLvl += 2;
  if (state === kWeak) {
    for (; i7 < maxLength; i7++) {
      const pos = i7 * 2;
      output2[i7] = `${formatValue(ctx, entries[pos], recurseTimes)} => ${formatValue(ctx, entries[pos + 1], recurseTimes)}`;
    }
    if (!ctx.sorted) {
      output2 = output2.sort();
    }
  } else {
    for (; i7 < maxLength; i7++) {
      const pos = i7 * 2;
      const res = [
        formatValue(ctx, entries[pos], recurseTimes),
        formatValue(ctx, entries[pos + 1], recurseTimes)
      ];
      output2[i7] = reduceToSingleString(
        ctx,
        res,
        "",
        ["[", "]"],
        kArrayExtrasType,
        recurseTimes
      );
    }
  }
  ctx.indentationLvl -= 2;
  if (remaining > 0) {
    output2.push(`... ${remaining} more item${remaining > 1 ? "s" : ""}`);
  }
  return output2;
}
function formatSetIterInner(ctx, recurseTimes, entries, state) {
  const maxArrayLength = Math.max(ctx.maxArrayLength, 0);
  const maxLength = Math.min(maxArrayLength, entries.length);
  const output2 = new Array(maxLength);
  ctx.indentationLvl += 2;
  for (let i7 = 0; i7 < maxLength; i7++) {
    output2[i7] = formatValue(ctx, entries[i7], recurseTimes);
  }
  ctx.indentationLvl -= 2;
  if (state === kWeak && !ctx.sorted) {
    output2.sort();
  }
  const remaining = entries.length - maxLength;
  if (remaining > 0) {
    Array.prototype.push.call(
      output2,
      `... ${remaining} more item${remaining > 1 ? "s" : ""}`
    );
  }
  return output2;
}
var ansiPattern = "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))";
var ansi = new RegExp(ansiPattern, "g");
function getStringWidth(str, removeControlChars = true) {
  let width = 0;
  if (removeControlChars) {
    str = stripVTControlCharacters(str);
  }
  str = str.normalize("NFC");
  for (const char of str[Symbol.iterator]()) {
    const code = char.codePointAt(0);
    if (isFullWidthCodePoint(code)) {
      width += 2;
    } else if (!isZeroWidthCodePoint(code)) {
      width++;
    }
  }
  return width;
}
var isFullWidthCodePoint = (code) => {
  return code >= 4352 && (code <= 4447 || // Hangul Jamo
  code === 9001 || // LEFT-POINTING ANGLE BRACKET
  code === 9002 || // RIGHT-POINTING ANGLE BRACKET
  // CJK Radicals Supplement .. Enclosed CJK Letters and Months
  code >= 11904 && code <= 12871 && code !== 12351 || // Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
  code >= 12880 && code <= 19903 || // CJK Unified Ideographs .. Yi Radicals
  code >= 19968 && code <= 42182 || // Hangul Jamo Extended-A
  code >= 43360 && code <= 43388 || // Hangul Syllables
  code >= 44032 && code <= 55203 || // CJK Compatibility Ideographs
  code >= 63744 && code <= 64255 || // Vertical Forms
  code >= 65040 && code <= 65049 || // CJK Compatibility Forms .. Small Form Variants
  code >= 65072 && code <= 65131 || // Halfwidth and Fullwidth Forms
  code >= 65281 && code <= 65376 || code >= 65504 && code <= 65510 || // Kana Supplement
  code >= 110592 && code <= 110593 || // Enclosed Ideographic Supplement
  code >= 127488 && code <= 127569 || // Miscellaneous Symbols and Pictographs 0x1f300 - 0x1f5ff
  // Emoticons 0x1f600 - 0x1f64f
  code >= 127744 && code <= 128591 || // CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
  code >= 131072 && code <= 262141);
};
var isZeroWidthCodePoint = (code) => {
  return code <= 31 || // C0 control codes
  code >= 127 && code <= 159 || // C1 control codes
  code >= 768 && code <= 879 || // Combining Diacritical Marks
  code >= 8203 && code <= 8207 || // Modifying Invisible Characters
  // Combining Diacritical Marks for Symbols
  code >= 8400 && code <= 8447 || code >= 65024 && code <= 65039 || // Variation Selectors
  code >= 65056 && code <= 65071 || // Combining Half Marks
  code >= 917760 && code <= 917999;
};
function stripVTControlCharacters(str) {
  validateString(str, "str");
  return str.replace(ansi, "");
}

// https://deno.land/std@0.177.1/node/internal_binding/constants.ts
var constants_exports = {};
__export(constants_exports, {
  crypto: () => crypto,
  fs: () => fs,
  os: () => os,
  trace: () => trace,
  zlib: () => zlib2
});
var os;
if (Deno.build.os === "darwin") {
  os = {
    UV_UDP_REUSEADDR: 4,
    dlopen: {
      RTLD_LAZY: 1,
      RTLD_NOW: 2,
      RTLD_GLOBAL: 8,
      RTLD_LOCAL: 4
    },
    errno: {
      E2BIG: 7,
      EACCES: 13,
      EADDRINUSE: 48,
      EADDRNOTAVAIL: 49,
      EAFNOSUPPORT: 47,
      EAGAIN: 35,
      EALREADY: 37,
      EBADF: 9,
      EBADMSG: 94,
      EBUSY: 16,
      ECANCELED: 89,
      ECHILD: 10,
      ECONNABORTED: 53,
      ECONNREFUSED: 61,
      ECONNRESET: 54,
      EDEADLK: 11,
      EDESTADDRREQ: 39,
      EDOM: 33,
      EDQUOT: 69,
      EEXIST: 17,
      EFAULT: 14,
      EFBIG: 27,
      EHOSTUNREACH: 65,
      EIDRM: 90,
      EILSEQ: 92,
      EINPROGRESS: 36,
      EINTR: 4,
      EINVAL: 22,
      EIO: 5,
      EISCONN: 56,
      EISDIR: 21,
      ELOOP: 62,
      EMFILE: 24,
      EMLINK: 31,
      EMSGSIZE: 40,
      EMULTIHOP: 95,
      ENAMETOOLONG: 63,
      ENETDOWN: 50,
      ENETRESET: 52,
      ENETUNREACH: 51,
      ENFILE: 23,
      ENOBUFS: 55,
      ENODATA: 96,
      ENODEV: 19,
      ENOENT: 2,
      ENOEXEC: 8,
      ENOLCK: 77,
      ENOLINK: 97,
      ENOMEM: 12,
      ENOMSG: 91,
      ENOPROTOOPT: 42,
      ENOSPC: 28,
      ENOSR: 98,
      ENOSTR: 99,
      ENOSYS: 78,
      ENOTCONN: 57,
      ENOTDIR: 20,
      ENOTEMPTY: 66,
      ENOTSOCK: 38,
      ENOTSUP: 45,
      ENOTTY: 25,
      ENXIO: 6,
      EOPNOTSUPP: 102,
      EOVERFLOW: 84,
      EPERM: 1,
      EPIPE: 32,
      EPROTO: 100,
      EPROTONOSUPPORT: 43,
      EPROTOTYPE: 41,
      ERANGE: 34,
      EROFS: 30,
      ESPIPE: 29,
      ESRCH: 3,
      ESTALE: 70,
      ETIME: 101,
      ETIMEDOUT: 60,
      ETXTBSY: 26,
      EWOULDBLOCK: 35,
      EXDEV: 18
    },
    signals: {
      SIGHUP: 1,
      SIGINT: 2,
      SIGQUIT: 3,
      SIGILL: 4,
      SIGTRAP: 5,
      SIGABRT: 6,
      SIGIOT: 6,
      SIGBUS: 10,
      SIGFPE: 8,
      SIGKILL: 9,
      SIGUSR1: 30,
      SIGSEGV: 11,
      SIGUSR2: 31,
      SIGPIPE: 13,
      SIGALRM: 14,
      SIGTERM: 15,
      SIGCHLD: 20,
      SIGCONT: 19,
      SIGSTOP: 17,
      SIGTSTP: 18,
      SIGTTIN: 21,
      SIGTTOU: 22,
      SIGURG: 16,
      SIGXCPU: 24,
      SIGXFSZ: 25,
      SIGVTALRM: 26,
      SIGPROF: 27,
      SIGWINCH: 28,
      SIGIO: 23,
      SIGINFO: 29,
      SIGSYS: 12
    },
    priority: {
      PRIORITY_LOW: 19,
      PRIORITY_BELOW_NORMAL: 10,
      PRIORITY_NORMAL: 0,
      PRIORITY_ABOVE_NORMAL: -7,
      PRIORITY_HIGH: -14,
      PRIORITY_HIGHEST: -20
    }
  };
} else if (Deno.build.os === "linux") {
  os = {
    UV_UDP_REUSEADDR: 4,
    dlopen: {
      RTLD_LAZY: 1,
      RTLD_NOW: 2,
      RTLD_GLOBAL: 256,
      RTLD_LOCAL: 0,
      RTLD_DEEPBIND: 8
    },
    errno: {
      E2BIG: 7,
      EACCES: 13,
      EADDRINUSE: 98,
      EADDRNOTAVAIL: 99,
      EAFNOSUPPORT: 97,
      EAGAIN: 11,
      EALREADY: 114,
      EBADF: 9,
      EBADMSG: 74,
      EBUSY: 16,
      ECANCELED: 125,
      ECHILD: 10,
      ECONNABORTED: 103,
      ECONNREFUSED: 111,
      ECONNRESET: 104,
      EDEADLK: 35,
      EDESTADDRREQ: 89,
      EDOM: 33,
      EDQUOT: 122,
      EEXIST: 17,
      EFAULT: 14,
      EFBIG: 27,
      EHOSTUNREACH: 113,
      EIDRM: 43,
      EILSEQ: 84,
      EINPROGRESS: 115,
      EINTR: 4,
      EINVAL: 22,
      EIO: 5,
      EISCONN: 106,
      EISDIR: 21,
      ELOOP: 40,
      EMFILE: 24,
      EMLINK: 31,
      EMSGSIZE: 90,
      EMULTIHOP: 72,
      ENAMETOOLONG: 36,
      ENETDOWN: 100,
      ENETRESET: 102,
      ENETUNREACH: 101,
      ENFILE: 23,
      ENOBUFS: 105,
      ENODATA: 61,
      ENODEV: 19,
      ENOENT: 2,
      ENOEXEC: 8,
      ENOLCK: 37,
      ENOLINK: 67,
      ENOMEM: 12,
      ENOMSG: 42,
      ENOPROTOOPT: 92,
      ENOSPC: 28,
      ENOSR: 63,
      ENOSTR: 60,
      ENOSYS: 38,
      ENOTCONN: 107,
      ENOTDIR: 20,
      ENOTEMPTY: 39,
      ENOTSOCK: 88,
      ENOTSUP: 95,
      ENOTTY: 25,
      ENXIO: 6,
      EOPNOTSUPP: 95,
      EOVERFLOW: 75,
      EPERM: 1,
      EPIPE: 32,
      EPROTO: 71,
      EPROTONOSUPPORT: 93,
      EPROTOTYPE: 91,
      ERANGE: 34,
      EROFS: 30,
      ESPIPE: 29,
      ESRCH: 3,
      ESTALE: 116,
      ETIME: 62,
      ETIMEDOUT: 110,
      ETXTBSY: 26,
      EWOULDBLOCK: 11,
      EXDEV: 18
    },
    signals: {
      SIGHUP: 1,
      SIGINT: 2,
      SIGQUIT: 3,
      SIGILL: 4,
      SIGTRAP: 5,
      SIGABRT: 6,
      SIGIOT: 6,
      SIGBUS: 7,
      SIGFPE: 8,
      SIGKILL: 9,
      SIGUSR1: 10,
      SIGSEGV: 11,
      SIGUSR2: 12,
      SIGPIPE: 13,
      SIGALRM: 14,
      SIGTERM: 15,
      SIGCHLD: 17,
      SIGSTKFLT: 16,
      SIGCONT: 18,
      SIGSTOP: 19,
      SIGTSTP: 20,
      SIGTTIN: 21,
      SIGTTOU: 22,
      SIGURG: 23,
      SIGXCPU: 24,
      SIGXFSZ: 25,
      SIGVTALRM: 26,
      SIGPROF: 27,
      SIGWINCH: 28,
      SIGIO: 29,
      SIGPOLL: 29,
      SIGPWR: 30,
      SIGSYS: 31,
      SIGUNUSED: 31
    },
    priority: {
      PRIORITY_LOW: 19,
      PRIORITY_BELOW_NORMAL: 10,
      PRIORITY_NORMAL: 0,
      PRIORITY_ABOVE_NORMAL: -7,
      PRIORITY_HIGH: -14,
      PRIORITY_HIGHEST: -20
    }
  };
} else {
  os = {
    UV_UDP_REUSEADDR: 4,
    dlopen: {},
    errno: {
      E2BIG: 7,
      EACCES: 13,
      EADDRINUSE: 100,
      EADDRNOTAVAIL: 101,
      EAFNOSUPPORT: 102,
      EAGAIN: 11,
      EALREADY: 103,
      EBADF: 9,
      EBADMSG: 104,
      EBUSY: 16,
      ECANCELED: 105,
      ECHILD: 10,
      ECONNABORTED: 106,
      ECONNREFUSED: 107,
      ECONNRESET: 108,
      EDEADLK: 36,
      EDESTADDRREQ: 109,
      EDOM: 33,
      EEXIST: 17,
      EFAULT: 14,
      EFBIG: 27,
      EHOSTUNREACH: 110,
      EIDRM: 111,
      EILSEQ: 42,
      EINPROGRESS: 112,
      EINTR: 4,
      EINVAL: 22,
      EIO: 5,
      EISCONN: 113,
      EISDIR: 21,
      ELOOP: 114,
      EMFILE: 24,
      EMLINK: 31,
      EMSGSIZE: 115,
      ENAMETOOLONG: 38,
      ENETDOWN: 116,
      ENETRESET: 117,
      ENETUNREACH: 118,
      ENFILE: 23,
      ENOBUFS: 119,
      ENODATA: 120,
      ENODEV: 19,
      ENOENT: 2,
      ENOEXEC: 8,
      ENOLCK: 39,
      ENOLINK: 121,
      ENOMEM: 12,
      ENOMSG: 122,
      ENOPROTOOPT: 123,
      ENOSPC: 28,
      ENOSR: 124,
      ENOSTR: 125,
      ENOSYS: 40,
      ENOTCONN: 126,
      ENOTDIR: 20,
      ENOTEMPTY: 41,
      ENOTSOCK: 128,
      ENOTSUP: 129,
      ENOTTY: 25,
      ENXIO: 6,
      EOPNOTSUPP: 130,
      EOVERFLOW: 132,
      EPERM: 1,
      EPIPE: 32,
      EPROTO: 134,
      EPROTONOSUPPORT: 135,
      EPROTOTYPE: 136,
      ERANGE: 34,
      EROFS: 30,
      ESPIPE: 29,
      ESRCH: 3,
      ETIME: 137,
      ETIMEDOUT: 138,
      ETXTBSY: 139,
      EWOULDBLOCK: 140,
      EXDEV: 18,
      WSAEINTR: 10004,
      WSAEBADF: 10009,
      WSAEACCES: 10013,
      WSAEFAULT: 10014,
      WSAEINVAL: 10022,
      WSAEMFILE: 10024,
      WSAEWOULDBLOCK: 10035,
      WSAEINPROGRESS: 10036,
      WSAEALREADY: 10037,
      WSAENOTSOCK: 10038,
      WSAEDESTADDRREQ: 10039,
      WSAEMSGSIZE: 10040,
      WSAEPROTOTYPE: 10041,
      WSAENOPROTOOPT: 10042,
      WSAEPROTONOSUPPORT: 10043,
      WSAESOCKTNOSUPPORT: 10044,
      WSAEOPNOTSUPP: 10045,
      WSAEPFNOSUPPORT: 10046,
      WSAEAFNOSUPPORT: 10047,
      WSAEADDRINUSE: 10048,
      WSAEADDRNOTAVAIL: 10049,
      WSAENETDOWN: 10050,
      WSAENETUNREACH: 10051,
      WSAENETRESET: 10052,
      WSAECONNABORTED: 10053,
      WSAECONNRESET: 10054,
      WSAENOBUFS: 10055,
      WSAEISCONN: 10056,
      WSAENOTCONN: 10057,
      WSAESHUTDOWN: 10058,
      WSAETOOMANYREFS: 10059,
      WSAETIMEDOUT: 10060,
      WSAECONNREFUSED: 10061,
      WSAELOOP: 10062,
      WSAENAMETOOLONG: 10063,
      WSAEHOSTDOWN: 10064,
      WSAEHOSTUNREACH: 10065,
      WSAENOTEMPTY: 10066,
      WSAEPROCLIM: 10067,
      WSAEUSERS: 10068,
      WSAEDQUOT: 10069,
      WSAESTALE: 10070,
      WSAEREMOTE: 10071,
      WSASYSNOTREADY: 10091,
      WSAVERNOTSUPPORTED: 10092,
      WSANOTINITIALISED: 10093,
      WSAEDISCON: 10101,
      WSAENOMORE: 10102,
      WSAECANCELLED: 10103,
      WSAEINVALIDPROCTABLE: 10104,
      WSAEINVALIDPROVIDER: 10105,
      WSAEPROVIDERFAILEDINIT: 10106,
      WSASYSCALLFAILURE: 10107,
      WSASERVICE_NOT_FOUND: 10108,
      WSATYPE_NOT_FOUND: 10109,
      WSA_E_NO_MORE: 10110,
      WSA_E_CANCELLED: 10111,
      WSAEREFUSED: 10112
    },
    signals: {
      SIGHUP: 1,
      SIGINT: 2,
      SIGILL: 4,
      SIGABRT: 22,
      SIGFPE: 8,
      SIGKILL: 9,
      SIGSEGV: 11,
      SIGTERM: 15,
      SIGBREAK: 21,
      SIGWINCH: 28
    },
    priority: {
      PRIORITY_LOW: 19,
      PRIORITY_BELOW_NORMAL: 10,
      PRIORITY_NORMAL: 0,
      PRIORITY_ABOVE_NORMAL: -7,
      PRIORITY_HIGH: -14,
      PRIORITY_HIGHEST: -20
    }
  };
}
var fs = {
  UV_FS_SYMLINK_DIR: 1,
  UV_FS_SYMLINK_JUNCTION: 2,
  O_RDONLY: 0,
  O_WRONLY: 1,
  O_RDWR: 2,
  UV_DIRENT_UNKNOWN: 0,
  UV_DIRENT_FILE: 1,
  UV_DIRENT_DIR: 2,
  UV_DIRENT_LINK: 3,
  UV_DIRENT_FIFO: 4,
  UV_DIRENT_SOCKET: 5,
  UV_DIRENT_CHAR: 6,
  UV_DIRENT_BLOCK: 7,
  S_IFMT: 61440,
  S_IFREG: 32768,
  S_IFDIR: 16384,
  S_IFCHR: 8192,
  S_IFBLK: 24576,
  S_IFIFO: 4096,
  S_IFLNK: 40960,
  S_IFSOCK: 49152,
  O_CREAT: 512,
  O_EXCL: 2048,
  UV_FS_O_FILEMAP: 0,
  O_NOCTTY: 131072,
  O_TRUNC: 1024,
  O_APPEND: 8,
  O_DIRECTORY: 1048576,
  O_NOFOLLOW: 256,
  O_SYNC: 128,
  O_DSYNC: 4194304,
  O_SYMLINK: 2097152,
  O_NONBLOCK: 4,
  S_IRWXU: 448,
  S_IRUSR: 256,
  S_IWUSR: 128,
  S_IXUSR: 64,
  S_IRWXG: 56,
  S_IRGRP: 32,
  S_IWGRP: 16,
  S_IXGRP: 8,
  S_IRWXO: 7,
  S_IROTH: 4,
  S_IWOTH: 2,
  S_IXOTH: 1,
  F_OK: 0,
  R_OK: 4,
  W_OK: 2,
  X_OK: 1,
  UV_FS_COPYFILE_EXCL: 1,
  COPYFILE_EXCL: 1,
  UV_FS_COPYFILE_FICLONE: 2,
  COPYFILE_FICLONE: 2,
  UV_FS_COPYFILE_FICLONE_FORCE: 4,
  COPYFILE_FICLONE_FORCE: 4
};
var crypto = {
  OPENSSL_VERSION_NUMBER: 269488319,
  SSL_OP_ALL: 2147485780,
  SSL_OP_ALLOW_NO_DHE_KEX: 1024,
  SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: 262144,
  SSL_OP_CIPHER_SERVER_PREFERENCE: 4194304,
  SSL_OP_CISCO_ANYCONNECT: 32768,
  SSL_OP_COOKIE_EXCHANGE: 8192,
  SSL_OP_CRYPTOPRO_TLSEXT_BUG: 2147483648,
  SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: 2048,
  SSL_OP_EPHEMERAL_RSA: 0,
  SSL_OP_LEGACY_SERVER_CONNECT: 4,
  SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: 0,
  SSL_OP_MICROSOFT_SESS_ID_BUG: 0,
  SSL_OP_MSIE_SSLV2_RSA_PADDING: 0,
  SSL_OP_NETSCAPE_CA_DN_BUG: 0,
  SSL_OP_NETSCAPE_CHALLENGE_BUG: 0,
  SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: 0,
  SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: 0,
  SSL_OP_NO_COMPRESSION: 131072,
  SSL_OP_NO_ENCRYPT_THEN_MAC: 524288,
  SSL_OP_NO_QUERY_MTU: 4096,
  SSL_OP_NO_RENEGOTIATION: 1073741824,
  SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: 65536,
  SSL_OP_NO_SSLv2: 0,
  SSL_OP_NO_SSLv3: 33554432,
  SSL_OP_NO_TICKET: 16384,
  SSL_OP_NO_TLSv1: 67108864,
  SSL_OP_NO_TLSv1_1: 268435456,
  SSL_OP_NO_TLSv1_2: 134217728,
  SSL_OP_NO_TLSv1_3: 536870912,
  SSL_OP_PKCS1_CHECK_1: 0,
  SSL_OP_PKCS1_CHECK_2: 0,
  SSL_OP_PRIORITIZE_CHACHA: 2097152,
  SSL_OP_SINGLE_DH_USE: 0,
  SSL_OP_SINGLE_ECDH_USE: 0,
  SSL_OP_SSLEAY_080_CLIENT_DH_BUG: 0,
  SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: 0,
  SSL_OP_TLS_BLOCK_PADDING_BUG: 0,
  SSL_OP_TLS_D5_BUG: 0,
  SSL_OP_TLS_ROLLBACK_BUG: 8388608,
  ENGINE_METHOD_RSA: 1,
  ENGINE_METHOD_DSA: 2,
  ENGINE_METHOD_DH: 4,
  ENGINE_METHOD_RAND: 8,
  ENGINE_METHOD_EC: 2048,
  ENGINE_METHOD_CIPHERS: 64,
  ENGINE_METHOD_DIGESTS: 128,
  ENGINE_METHOD_PKEY_METHS: 512,
  ENGINE_METHOD_PKEY_ASN1_METHS: 1024,
  ENGINE_METHOD_ALL: 65535,
  ENGINE_METHOD_NONE: 0,
  DH_CHECK_P_NOT_SAFE_PRIME: 2,
  DH_CHECK_P_NOT_PRIME: 1,
  DH_UNABLE_TO_CHECK_GENERATOR: 4,
  DH_NOT_SUITABLE_GENERATOR: 8,
  ALPN_ENABLED: 1,
  RSA_PKCS1_PADDING: 1,
  RSA_SSLV23_PADDING: 2,
  RSA_NO_PADDING: 3,
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_X931_PADDING: 5,
  RSA_PKCS1_PSS_PADDING: 6,
  RSA_PSS_SALTLEN_DIGEST: -1,
  RSA_PSS_SALTLEN_MAX_SIGN: -2,
  RSA_PSS_SALTLEN_AUTO: -2,
  defaultCoreCipherList: "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA",
  TLS1_VERSION: 769,
  TLS1_1_VERSION: 770,
  TLS1_2_VERSION: 771,
  TLS1_3_VERSION: 772,
  POINT_CONVERSION_COMPRESSED: 2,
  POINT_CONVERSION_UNCOMPRESSED: 4,
  POINT_CONVERSION_HYBRID: 6
};
var zlib2 = {
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  Z_MEM_ERROR: -4,
  Z_BUF_ERROR: -5,
  Z_VERSION_ERROR: -6,
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  ZLIB_VERNUM: 4784,
  DEFLATE: 1,
  INFLATE: 2,
  GZIP: 3,
  GUNZIP: 4,
  DEFLATERAW: 5,
  INFLATERAW: 6,
  UNZIP: 7,
  BROTLI_DECODE: 8,
  BROTLI_ENCODE: 9,
  Z_MIN_WINDOWBITS: 8,
  Z_MAX_WINDOWBITS: 15,
  Z_DEFAULT_WINDOWBITS: 15,
  Z_MIN_CHUNK: 64,
  Z_MAX_CHUNK: Infinity,
  Z_DEFAULT_CHUNK: 16384,
  Z_MIN_MEMLEVEL: 1,
  Z_MAX_MEMLEVEL: 9,
  Z_DEFAULT_MEMLEVEL: 8,
  Z_MIN_LEVEL: -1,
  Z_MAX_LEVEL: 9,
  Z_DEFAULT_LEVEL: -1,
  BROTLI_OPERATION_PROCESS: 0,
  BROTLI_OPERATION_FLUSH: 1,
  BROTLI_OPERATION_FINISH: 2,
  BROTLI_OPERATION_EMIT_METADATA: 3,
  BROTLI_PARAM_MODE: 0,
  BROTLI_MODE_GENERIC: 0,
  BROTLI_MODE_TEXT: 1,
  BROTLI_MODE_FONT: 2,
  BROTLI_DEFAULT_MODE: 0,
  BROTLI_PARAM_QUALITY: 1,
  BROTLI_MIN_QUALITY: 0,
  BROTLI_MAX_QUALITY: 11,
  BROTLI_DEFAULT_QUALITY: 11,
  BROTLI_PARAM_LGWIN: 2,
  BROTLI_MIN_WINDOW_BITS: 10,
  BROTLI_MAX_WINDOW_BITS: 24,
  BROTLI_LARGE_MAX_WINDOW_BITS: 30,
  BROTLI_DEFAULT_WINDOW: 22,
  BROTLI_PARAM_LGBLOCK: 3,
  BROTLI_MIN_INPUT_BLOCK_BITS: 16,
  BROTLI_MAX_INPUT_BLOCK_BITS: 24,
  BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
  BROTLI_PARAM_SIZE_HINT: 5,
  BROTLI_PARAM_LARGE_WINDOW: 6,
  BROTLI_PARAM_NPOSTFIX: 7,
  BROTLI_PARAM_NDIRECT: 8,
  BROTLI_DECODER_RESULT_ERROR: 0,
  BROTLI_DECODER_RESULT_SUCCESS: 1,
  BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
  BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
  BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
  BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
  BROTLI_DECODER_NO_ERROR: 0,
  BROTLI_DECODER_SUCCESS: 1,
  BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
  BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
  BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
  BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
  BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
  BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
  BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
  BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
  BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
  BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
  BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
  BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
  BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
  BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
  BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
  BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
  BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
  BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
  BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
  BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
  BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
  BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
  BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
  BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
  BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
  BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
  BROTLI_DECODER_ERROR_UNREACHABLE: -31
};
var trace = {
  TRACE_EVENT_PHASE_BEGIN: 66,
  TRACE_EVENT_PHASE_END: 69,
  TRACE_EVENT_PHASE_COMPLETE: 88,
  TRACE_EVENT_PHASE_INSTANT: 73,
  TRACE_EVENT_PHASE_ASYNC_BEGIN: 83,
  TRACE_EVENT_PHASE_ASYNC_STEP_INTO: 84,
  TRACE_EVENT_PHASE_ASYNC_STEP_PAST: 112,
  TRACE_EVENT_PHASE_ASYNC_END: 70,
  TRACE_EVENT_PHASE_NESTABLE_ASYNC_BEGIN: 98,
  TRACE_EVENT_PHASE_NESTABLE_ASYNC_END: 101,
  TRACE_EVENT_PHASE_NESTABLE_ASYNC_INSTANT: 110,
  TRACE_EVENT_PHASE_FLOW_BEGIN: 115,
  TRACE_EVENT_PHASE_FLOW_STEP: 116,
  TRACE_EVENT_PHASE_FLOW_END: 102,
  TRACE_EVENT_PHASE_METADATA: 77,
  TRACE_EVENT_PHASE_COUNTER: 67,
  TRACE_EVENT_PHASE_SAMPLE: 80,
  TRACE_EVENT_PHASE_CREATE_OBJECT: 78,
  TRACE_EVENT_PHASE_SNAPSHOT_OBJECT: 79,
  TRACE_EVENT_PHASE_DELETE_OBJECT: 68,
  TRACE_EVENT_PHASE_MEMORY_DUMP: 118,
  TRACE_EVENT_PHASE_MARK: 82,
  TRACE_EVENT_PHASE_CLOCK_SYNC: 99,
  TRACE_EVENT_PHASE_ENTER_CONTEXT: 40,
  TRACE_EVENT_PHASE_LEAVE_CONTEXT: 41,
  TRACE_EVENT_PHASE_LINK_IDS: 61
};

// https://deno.land/std@0.177.1/node/internal/errors.ts
var {
  errno: { ENOTDIR, ENOENT }
} = os;
var kIsNodeError = Symbol("kIsNodeError");
var classRegExp2 = /^([A-Z][a-z0-9]*)+$/;
var kTypes = [
  "string",
  "function",
  "number",
  "object",
  // Accept 'Function' and 'Object' as alternative to the lower cased version.
  "Function",
  "Object",
  "boolean",
  "bigint",
  "symbol"
];
var AbortError = class extends Error {
  code;
  constructor(message = "The operation was aborted", options) {
    if (options !== void 0 && typeof options !== "object") {
      throw new codes.ERR_INVALID_ARG_TYPE("options", "Object", options);
    }
    super(message, options);
    this.code = "ABORT_ERR";
    this.name = "AbortError";
  }
};
function addNumericalSeparator(val) {
  let res = "";
  let i7 = val.length;
  const start = val[0] === "-" ? 1 : 0;
  for (; i7 >= start + 4; i7 -= 3) {
    res = `_${val.slice(i7 - 3, i7)}${res}`;
  }
  return `${val.slice(0, i7)}${res}`;
}
var captureLargerStackTrace = hideStackFrames(
  function captureLargerStackTrace2(err) {
    Error.captureStackTrace(err);
    return err;
  }
);
var uvExceptionWithHostPort = hideStackFrames(
  function uvExceptionWithHostPort2(err, syscall, address, port) {
    const { 0: code, 1: uvmsg } = uvErrmapGet(err) || uvUnmappedError;
    const message = `${syscall} ${code}: ${uvmsg}`;
    let details = "";
    if (port && port > 0) {
      details = ` ${address}:${port}`;
    } else if (address) {
      details = ` ${address}`;
    }
    const ex = new Error(`${message}${details}`);
    ex.code = code;
    ex.errno = err;
    ex.syscall = syscall;
    ex.address = address;
    if (port) {
      ex.port = port;
    }
    return captureLargerStackTrace(ex);
  }
);
var errnoException = hideStackFrames(function errnoException2(err, syscall, original) {
  const code = getSystemErrorName(err);
  const message = original ? `${syscall} ${code} ${original}` : `${syscall} ${code}`;
  const ex = new Error(message);
  ex.errno = err;
  ex.code = code;
  ex.syscall = syscall;
  return captureLargerStackTrace(ex);
});
function uvErrmapGet(name) {
  return errorMap.get(name);
}
var uvUnmappedError = ["UNKNOWN", "unknown error"];
var uvException = hideStackFrames(function uvException2(ctx) {
  const { 0: code, 1: uvmsg } = uvErrmapGet(ctx.errno) || uvUnmappedError;
  let message = `${code}: ${ctx.message || uvmsg}, ${ctx.syscall}`;
  let path7;
  let dest;
  if (ctx.path) {
    path7 = ctx.path.toString();
    message += ` '${path7}'`;
  }
  if (ctx.dest) {
    dest = ctx.dest.toString();
    message += ` -> '${dest}'`;
  }
  const err = new Error(message);
  for (const prop of Object.keys(ctx)) {
    if (prop === "message" || prop === "path" || prop === "dest") {
      continue;
    }
    err[prop] = ctx[prop];
  }
  err.code = code;
  if (path7) {
    err.path = path7;
  }
  if (dest) {
    err.dest = dest;
  }
  return captureLargerStackTrace(err);
});
var exceptionWithHostPort = hideStackFrames(
  function exceptionWithHostPort2(err, syscall, address, port, additional) {
    const code = getSystemErrorName(err);
    let details = "";
    if (port && port > 0) {
      details = ` ${address}:${port}`;
    } else if (address) {
      details = ` ${address}`;
    }
    if (additional) {
      details += ` - Local (${additional})`;
    }
    const ex = new Error(`${syscall} ${code}${details}`);
    ex.errno = err;
    ex.code = code;
    ex.syscall = syscall;
    ex.address = address;
    if (port) {
      ex.port = port;
    }
    return captureLargerStackTrace(ex);
  }
);
var dnsException = hideStackFrames(function(code, syscall, hostname2) {
  let errno;
  if (typeof code === "number") {
    errno = code;
    if (code === codeMap.get("EAI_NODATA") || code === codeMap.get("EAI_NONAME")) {
      code = "ENOTFOUND";
    } else {
      code = getSystemErrorName(code);
    }
  }
  const message = `${syscall} ${code}${hostname2 ? ` ${hostname2}` : ""}`;
  const ex = new Error(message);
  ex.errno = errno;
  ex.code = code;
  ex.syscall = syscall;
  if (hostname2) {
    ex.hostname = hostname2;
  }
  return captureLargerStackTrace(ex);
});
var NodeErrorAbstraction = class extends Error {
  code;
  constructor(name, code, message) {
    super(message);
    this.code = code;
    this.name = name;
    this.stack = this.stack && `${name} [${this.code}]${this.stack.slice(20)}`;
  }
  toString() {
    return `${this.name} [${this.code}]: ${this.message}`;
  }
};
var NodeError = class extends NodeErrorAbstraction {
  constructor(code, message) {
    super(Error.prototype.name, code, message);
  }
};
var NodeRangeError = class extends NodeErrorAbstraction {
  constructor(code, message) {
    super(RangeError.prototype.name, code, message);
    Object.setPrototypeOf(this, RangeError.prototype);
    this.toString = function() {
      return `${this.name} [${this.code}]: ${this.message}`;
    };
  }
};
var NodeTypeError = class extends NodeErrorAbstraction {
  constructor(code, message) {
    super(TypeError.prototype.name, code, message);
    Object.setPrototypeOf(this, TypeError.prototype);
    this.toString = function() {
      return `${this.name} [${this.code}]: ${this.message}`;
    };
  }
};
var NodeSystemError = class extends NodeErrorAbstraction {
  constructor(key, context2, msgPrefix) {
    let message = `${msgPrefix}: ${context2.syscall} returned ${context2.code} (${context2.message})`;
    if (context2.path !== void 0) {
      message += ` ${context2.path}`;
    }
    if (context2.dest !== void 0) {
      message += ` => ${context2.dest}`;
    }
    super("SystemError", key, message);
    captureLargerStackTrace(this);
    Object.defineProperties(this, {
      [kIsNodeError]: {
        value: true,
        enumerable: false,
        writable: false,
        configurable: true
      },
      info: {
        value: context2,
        enumerable: true,
        configurable: true,
        writable: false
      },
      errno: {
        get() {
          return context2.errno;
        },
        set: (value) => {
          context2.errno = value;
        },
        enumerable: true,
        configurable: true
      },
      syscall: {
        get() {
          return context2.syscall;
        },
        set: (value) => {
          context2.syscall = value;
        },
        enumerable: true,
        configurable: true
      }
    });
    if (context2.path !== void 0) {
      Object.defineProperty(this, "path", {
        get() {
          return context2.path;
        },
        set: (value) => {
          context2.path = value;
        },
        enumerable: true,
        configurable: true
      });
    }
    if (context2.dest !== void 0) {
      Object.defineProperty(this, "dest", {
        get() {
          return context2.dest;
        },
        set: (value) => {
          context2.dest = value;
        },
        enumerable: true,
        configurable: true
      });
    }
  }
  toString() {
    return `${this.name} [${this.code}]: ${this.message}`;
  }
};
function makeSystemErrorWithCode(key, msgPrfix) {
  return class NodeError extends NodeSystemError {
    constructor(ctx) {
      super(key, ctx, msgPrfix);
    }
  };
}
var ERR_FS_EISDIR = makeSystemErrorWithCode(
  "ERR_FS_EISDIR",
  "Path is a directory"
);
function createInvalidArgType(name, expected) {
  expected = Array.isArray(expected) ? expected : [expected];
  let msg = "The ";
  if (name.endsWith(" argument")) {
    msg += `${name} `;
  } else {
    const type = name.includes(".") ? "property" : "argument";
    msg += `"${name}" ${type} `;
  }
  msg += "must be ";
  const types = [];
  const instances = [];
  const other = [];
  for (const value of expected) {
    if (kTypes.includes(value)) {
      types.push(value.toLocaleLowerCase());
    } else if (classRegExp2.test(value)) {
      instances.push(value);
    } else {
      other.push(value);
    }
  }
  if (instances.length > 0) {
    const pos = types.indexOf("object");
    if (pos !== -1) {
      types.splice(pos, 1);
      instances.push("Object");
    }
  }
  if (types.length > 0) {
    if (types.length > 2) {
      const last = types.pop();
      msg += `one of type ${types.join(", ")}, or ${last}`;
    } else if (types.length === 2) {
      msg += `one of type ${types[0]} or ${types[1]}`;
    } else {
      msg += `of type ${types[0]}`;
    }
    if (instances.length > 0 || other.length > 0) {
      msg += " or ";
    }
  }
  if (instances.length > 0) {
    if (instances.length > 2) {
      const last = instances.pop();
      msg += `an instance of ${instances.join(", ")}, or ${last}`;
    } else {
      msg += `an instance of ${instances[0]}`;
      if (instances.length === 2) {
        msg += ` or ${instances[1]}`;
      }
    }
    if (other.length > 0) {
      msg += " or ";
    }
  }
  if (other.length > 0) {
    if (other.length > 2) {
      const last = other.pop();
      msg += `one of ${other.join(", ")}, or ${last}`;
    } else if (other.length === 2) {
      msg += `one of ${other[0]} or ${other[1]}`;
    } else {
      if (other[0].toLowerCase() !== other[0]) {
        msg += "an ";
      }
      msg += `${other[0]}`;
    }
  }
  return msg;
}
var ERR_INVALID_ARG_TYPE_RANGE = class extends NodeRangeError {
  constructor(name, expected, actual) {
    const msg = createInvalidArgType(name, expected);
    super("ERR_INVALID_ARG_TYPE", `${msg}.${invalidArgTypeHelper(actual)}`);
  }
};
var ERR_INVALID_ARG_TYPE = class extends NodeTypeError {
  constructor(name, expected, actual) {
    const msg = createInvalidArgType(name, expected);
    super("ERR_INVALID_ARG_TYPE", `${msg}.${invalidArgTypeHelper(actual)}`);
  }
  static RangeError = ERR_INVALID_ARG_TYPE_RANGE;
};
var ERR_INVALID_ARG_VALUE_RANGE = class extends NodeRangeError {
  constructor(name, value, reason = "is invalid") {
    const type = name.includes(".") ? "property" : "argument";
    const inspected = inspect(value);
    super(
      "ERR_INVALID_ARG_VALUE",
      `The ${type} '${name}' ${reason}. Received ${inspected}`
    );
  }
};
var ERR_INVALID_ARG_VALUE = class extends NodeTypeError {
  constructor(name, value, reason = "is invalid") {
    const type = name.includes(".") ? "property" : "argument";
    const inspected = inspect(value);
    super(
      "ERR_INVALID_ARG_VALUE",
      `The ${type} '${name}' ${reason}. Received ${inspected}`
    );
  }
  static RangeError = ERR_INVALID_ARG_VALUE_RANGE;
};
function invalidArgTypeHelper(input) {
  if (input == null) {
    return ` Received ${input}`;
  }
  if (typeof input === "function" && input.name) {
    return ` Received function ${input.name}`;
  }
  if (typeof input === "object") {
    if (input.constructor && input.constructor.name) {
      return ` Received an instance of ${input.constructor.name}`;
    }
    return ` Received ${inspect(input, { depth: -1 })}`;
  }
  let inspected = inspect(input, { colors: false });
  if (inspected.length > 25) {
    inspected = `${inspected.slice(0, 25)}...`;
  }
  return ` Received type ${typeof input} (${inspected})`;
}
var ERR_OUT_OF_RANGE = class extends RangeError {
  code = "ERR_OUT_OF_RANGE";
  constructor(str, range, input, replaceDefaultBoolean = false) {
    assert(range, 'Missing "range" argument');
    let msg = replaceDefaultBoolean ? str : `The value of "${str}" is out of range.`;
    let received;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input));
    } else if (typeof input === "bigint") {
      received = String(input);
      if (input > 2n ** 32n || input < -(2n ** 32n)) {
        received = addNumericalSeparator(received);
      }
      received += "n";
    } else {
      received = inspect(input);
    }
    msg += ` It must be ${range}. Received ${received}`;
    super(msg);
    const { name } = this;
    this.name = `${name} [${this.code}]`;
    this.stack;
    this.name = name;
  }
};
var ERR_BUFFER_OUT_OF_BOUNDS = class extends NodeRangeError {
  constructor(name) {
    super(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      name ? `"${name}" is outside of buffer bounds` : "Attempt to access memory outside buffer bounds"
    );
  }
};
var ERR_INVALID_CURSOR_POS = class extends NodeTypeError {
  constructor() {
    super(
      "ERR_INVALID_CURSOR_POS",
      `Cannot set cursor row without setting its column`
    );
  }
};
var ERR_IPC_CHANNEL_CLOSED = class extends NodeError {
  constructor() {
    super("ERR_IPC_CHANNEL_CLOSED", `Channel closed`);
  }
};
var ERR_SOCKET_BAD_PORT = class extends NodeRangeError {
  constructor(name, port, allowZero = true) {
    assert(
      typeof allowZero === "boolean",
      "The 'allowZero' argument must be of type boolean."
    );
    const operator = allowZero ? ">=" : ">";
    super(
      "ERR_SOCKET_BAD_PORT",
      `${name} should be ${operator} 0 and < 65536. Received ${port}.`
    );
  }
};
var ERR_STREAM_PREMATURE_CLOSE = class extends NodeError {
  constructor() {
    super("ERR_STREAM_PREMATURE_CLOSE", `Premature close`);
  }
};
var ERR_UNHANDLED_ERROR = class extends NodeError {
  constructor(x5) {
    super("ERR_UNHANDLED_ERROR", `Unhandled error. (${x5})`);
  }
};
var ERR_UNKNOWN_ENCODING = class extends NodeTypeError {
  constructor(x5) {
    super("ERR_UNKNOWN_ENCODING", `Unknown encoding: ${x5}`);
  }
};
var ERR_UNKNOWN_SIGNAL = class extends NodeTypeError {
  constructor(x5) {
    super("ERR_UNKNOWN_SIGNAL", `Unknown signal: ${x5}`);
  }
};
function aggregateTwoErrors(innerError, outerError) {
  if (innerError && outerError && innerError !== outerError) {
    if (Array.isArray(outerError.errors)) {
      outerError.errors.push(innerError);
      return outerError;
    }
    const err = new AggregateError(
      [
        outerError,
        innerError
      ],
      outerError.message
    );
    err.code = outerError.code;
    return err;
  }
  return innerError || outerError;
}
codes.ERR_IPC_CHANNEL_CLOSED = ERR_IPC_CHANNEL_CLOSED;
codes.ERR_INVALID_ARG_TYPE = ERR_INVALID_ARG_TYPE;
codes.ERR_INVALID_ARG_VALUE = ERR_INVALID_ARG_VALUE;
codes.ERR_OUT_OF_RANGE = ERR_OUT_OF_RANGE;
codes.ERR_SOCKET_BAD_PORT = ERR_SOCKET_BAD_PORT;
codes.ERR_BUFFER_OUT_OF_BOUNDS = ERR_BUFFER_OUT_OF_BOUNDS;
codes.ERR_UNKNOWN_ENCODING = ERR_UNKNOWN_ENCODING;
var genericNodeError = hideStackFrames(
  function genericNodeError2(message, errorProperties) {
    const err = new Error(message);
    Object.assign(err, errorProperties);
    return err;
  }
);

// https://deno.land/std@0.177.1/node/_events.mjs
var kRejection = Symbol.for("nodejs.rejection");
var kCapture = Symbol("kCapture");
var kErrorMonitor = Symbol("events.errorMonitor");
var kMaxEventTargetListeners = Symbol("events.maxEventTargetListeners");
var kMaxEventTargetListenersWarned = Symbol(
  "events.maxEventTargetListenersWarned"
);
function EventEmitter(opts) {
  EventEmitter.init.call(this, opts);
}
var events_default = EventEmitter;
EventEmitter.on = on;
EventEmitter.once = once2;
EventEmitter.getEventListeners = getEventListeners;
EventEmitter.setMaxListeners = setMaxListeners;
EventEmitter.listenerCount = listenerCount2;
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.usingDomains = false;
EventEmitter.captureRejectionSymbol = kRejection;
var captureRejectionSymbol = EventEmitter.captureRejectionSymbol;
var errorMonitor = EventEmitter.errorMonitor;
Object.defineProperty(EventEmitter, "captureRejections", {
  get() {
    return EventEmitter.prototype[kCapture];
  },
  set(value) {
    validateBoolean(value, "EventEmitter.captureRejections");
    EventEmitter.prototype[kCapture] = value;
  },
  enumerable: true
});
EventEmitter.errorMonitor = kErrorMonitor;
Object.defineProperty(EventEmitter.prototype, kCapture, {
  value: false,
  writable: true,
  enumerable: false
});
EventEmitter.prototype._events = void 0;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = void 0;
var defaultMaxListeners = 10;
function checkListener(listener) {
  validateFunction(listener, "listener");
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== "number" || arg < 0 || Number.isNaN(arg)) {
      throw new ERR_OUT_OF_RANGE(
        "defaultMaxListeners",
        "a non-negative number",
        arg
      );
    }
    defaultMaxListeners = arg;
  }
});
Object.defineProperties(EventEmitter, {
  kMaxEventTargetListeners: {
    value: kMaxEventTargetListeners,
    enumerable: false,
    configurable: false,
    writable: false
  },
  kMaxEventTargetListenersWarned: {
    value: kMaxEventTargetListenersWarned,
    enumerable: false,
    configurable: false,
    writable: false
  }
});
function setMaxListeners(n12 = defaultMaxListeners, ...eventTargets) {
  if (typeof n12 !== "number" || n12 < 0 || Number.isNaN(n12)) {
    throw new ERR_OUT_OF_RANGE("n", "a non-negative number", n12);
  }
  if (eventTargets.length === 0) {
    defaultMaxListeners = n12;
  } else {
    for (let i7 = 0; i7 < eventTargets.length; i7++) {
      const target = eventTargets[i7];
      if (target instanceof EventTarget) {
        target[kMaxEventTargetListeners] = n12;
        target[kMaxEventTargetListenersWarned] = false;
      } else if (typeof target.setMaxListeners === "function") {
        target.setMaxListeners(n12);
      } else {
        throw new ERR_INVALID_ARG_TYPE(
          "eventTargets",
          ["EventEmitter", "EventTarget"],
          target
        );
      }
    }
  }
}
EventEmitter.init = function(opts) {
  if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
    this._events = /* @__PURE__ */ Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || void 0;
  if (opts?.captureRejections) {
    validateBoolean(opts.captureRejections, "options.captureRejections");
    this[kCapture] = Boolean(opts.captureRejections);
  } else {
    this[kCapture] = EventEmitter.prototype[kCapture];
  }
};
function addCatch(that, promise, type, args2) {
  if (!that[kCapture]) {
    return;
  }
  try {
    const then = promise.then;
    if (typeof then === "function") {
      then.call(promise, void 0, function(err) {
        process.nextTick(emitUnhandledRejectionOrErr, that, err, type, args2);
      });
    }
  } catch (err) {
    that.emit("error", err);
  }
}
function emitUnhandledRejectionOrErr(ee, err, type, args2) {
  if (typeof ee[kRejection] === "function") {
    ee[kRejection](err, type, ...args2);
  } else {
    const prev = ee[kCapture];
    try {
      ee[kCapture] = false;
      ee.emit("error", err);
    } finally {
      ee[kCapture] = prev;
    }
  }
}
EventEmitter.prototype.setMaxListeners = function setMaxListeners2(n12) {
  if (typeof n12 !== "number" || n12 < 0 || Number.isNaN(n12)) {
    throw new ERR_OUT_OF_RANGE("n", "a non-negative number", n12);
  }
  this._maxListeners = n12;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === void 0) {
    return EventEmitter.defaultMaxListeners;
  }
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type, ...args2) {
  let doError = type === "error";
  const events = this._events;
  if (events !== void 0) {
    if (doError && events[kErrorMonitor] !== void 0) {
      this.emit(kErrorMonitor, ...args2);
    }
    doError = doError && events.error === void 0;
  } else if (!doError) {
    return false;
  }
  if (doError) {
    let er;
    if (args2.length > 0) {
      er = args2[0];
    }
    if (er instanceof Error) {
      try {
        const capture = {};
        Error.captureStackTrace(capture, EventEmitter.prototype.emit);
      } catch {
      }
      throw er;
    }
    let stringifiedEr;
    try {
      stringifiedEr = inspect(er);
    } catch {
      stringifiedEr = er;
    }
    const err = new ERR_UNHANDLED_ERROR(stringifiedEr);
    err.context = er;
    throw err;
  }
  const handler = events[type];
  if (handler === void 0) {
    return false;
  }
  if (typeof handler === "function") {
    const result = handler.apply(this, args2);
    if (result !== void 0 && result !== null) {
      addCatch(this, result, type, args2);
    }
  } else {
    const len = handler.length;
    const listeners2 = arrayClone(handler);
    for (let i7 = 0; i7 < len; ++i7) {
      const result = listeners2[i7].apply(this, args2);
      if (result !== void 0 && result !== null) {
        addCatch(this, result, type, args2);
      }
    }
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  let m18;
  let events;
  let existing;
  checkListener(listener);
  events = target._events;
  if (events === void 0) {
    events = target._events = /* @__PURE__ */ Object.create(null);
    target._eventsCount = 0;
  } else {
    if (events.newListener !== void 0) {
      target.emit("newListener", type, listener.listener ?? listener);
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === void 0) {
    events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === "function") {
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }
    m18 = _getMaxListeners(target);
    if (m18 > 0 && existing.length > m18 && !existing.warned) {
      existing.warned = true;
      const w3 = new Error(
        `Possible EventEmitter memory leak detected. ${existing.length} ${String(type)} listeners added to ${inspect(target, { depth: -1 })}. Use emitter.setMaxListeners() to increase limit`
      );
      w3.name = "MaxListenersExceededWarning";
      w3.emitter = target;
      w3.type = type;
      w3.count = existing.length;
      process.emitWarning(w3);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) {
      return this.listener.call(this.target);
    }
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  const state = { fired: false, wrapFn: void 0, target, type, listener };
  const wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  checkListener(listener);
  const events = this._events;
  if (events === void 0) {
    return this;
  }
  const list = events[type];
  if (list === void 0) {
    return this;
  }
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) {
      this._events = /* @__PURE__ */ Object.create(null);
    } else {
      delete events[type];
      if (events.removeListener) {
        this.emit("removeListener", type, list.listener || listener);
      }
    }
  } else if (typeof list !== "function") {
    let position = -1;
    for (let i7 = list.length - 1; i7 >= 0; i7--) {
      if (list[i7] === listener || list[i7].listener === listener) {
        position = i7;
        break;
      }
    }
    if (position < 0) {
      return this;
    }
    if (position === 0) {
      list.shift();
    } else {
      spliceOne(list, position);
    }
    if (list.length === 1) {
      events[type] = list[0];
    }
    if (events.removeListener !== void 0) {
      this.emit("removeListener", type, listener);
    }
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  const events = this._events;
  if (events === void 0) {
    return this;
  }
  if (events.removeListener === void 0) {
    if (arguments.length === 0) {
      this._events = /* @__PURE__ */ Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== void 0) {
      if (--this._eventsCount === 0) {
        this._events = /* @__PURE__ */ Object.create(null);
      } else {
        delete events[type];
      }
    }
    return this;
  }
  if (arguments.length === 0) {
    for (const key of Reflect.ownKeys(events)) {
      if (key === "removeListener") continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners("removeListener");
    this._events = /* @__PURE__ */ Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  const listeners2 = events[type];
  if (typeof listeners2 === "function") {
    this.removeListener(type, listeners2);
  } else if (listeners2 !== void 0) {
    for (let i7 = listeners2.length - 1; i7 >= 0; i7--) {
      this.removeListener(type, listeners2[i7]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  const events = target._events;
  if (events === void 0) {
    return [];
  }
  const evlistener = events[type];
  if (evlistener === void 0) {
    return [];
  }
  if (typeof evlistener === "function") {
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  }
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
var _listenerCount = function listenerCount(type) {
  const events = this._events;
  if (events !== void 0) {
    const evlistener = events[type];
    if (typeof evlistener === "function") {
      return 1;
    } else if (evlistener !== void 0) {
      return evlistener.length;
    }
  }
  return 0;
};
EventEmitter.prototype.listenerCount = _listenerCount;
function listenerCount2(emitter, type) {
  if (typeof emitter.listenerCount === "function") {
    return emitter.listenerCount(type);
  }
  return _listenerCount.call(emitter, type);
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};
function arrayClone(arr) {
  switch (arr.length) {
    case 2:
      return [arr[0], arr[1]];
    case 3:
      return [arr[0], arr[1], arr[2]];
    case 4:
      return [arr[0], arr[1], arr[2], arr[3]];
    case 5:
      return [arr[0], arr[1], arr[2], arr[3], arr[4]];
    case 6:
      return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]];
  }
  return arr.slice();
}
function unwrapListeners(arr) {
  const ret = arrayClone(arr);
  for (let i7 = 0; i7 < ret.length; ++i7) {
    const orig = ret[i7].listener;
    if (typeof orig === "function") {
      ret[i7] = orig;
    }
  }
  return ret;
}
function getEventListeners(emitterOrTarget, type) {
  if (typeof emitterOrTarget.listeners === "function") {
    return emitterOrTarget.listeners(type);
  }
  if (emitterOrTarget instanceof EventTarget) {
    const root = emitterOrTarget[kEvents].get(type);
    const listeners2 = [];
    let handler = root?.next;
    while (handler?.listener !== void 0) {
      const listener = handler.listener?.deref ? handler.listener.deref() : handler.listener;
      listeners2.push(listener);
      handler = handler.next;
    }
    return listeners2;
  }
  throw new ERR_INVALID_ARG_TYPE(
    "emitter",
    ["EventEmitter", "EventTarget"],
    emitterOrTarget
  );
}
async function once2(emitter, name, options = {}) {
  const signal = options?.signal;
  validateAbortSignal(signal, "options.signal");
  if (signal?.aborted) {
    throw new AbortError();
  }
  return new Promise((resolve10, reject) => {
    const errorListener = (err) => {
      emitter.removeListener(name, resolver);
      if (signal != null) {
        eventTargetAgnosticRemoveListener(signal, "abort", abortListener);
      }
      reject(err);
    };
    const resolver = (...args2) => {
      if (typeof emitter.removeListener === "function") {
        emitter.removeListener("error", errorListener);
      }
      if (signal != null) {
        eventTargetAgnosticRemoveListener(signal, "abort", abortListener);
      }
      resolve10(args2);
    };
    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== "error" && typeof emitter.once === "function") {
      emitter.once("error", errorListener);
    }
    function abortListener() {
      eventTargetAgnosticRemoveListener(emitter, name, resolver);
      eventTargetAgnosticRemoveListener(emitter, "error", errorListener);
      reject(new AbortError());
    }
    if (signal != null) {
      eventTargetAgnosticAddListener(
        signal,
        "abort",
        abortListener,
        { once: true }
      );
    }
  });
}
var AsyncIteratorPrototype = Object.getPrototypeOf(
  Object.getPrototypeOf(async function* () {
  }).prototype
);
function createIterResult(value, done) {
  return { value, done };
}
function eventTargetAgnosticRemoveListener(emitter, name, listener, flags2) {
  if (typeof emitter.removeListener === "function") {
    emitter.removeListener(name, listener);
  } else if (typeof emitter.removeEventListener === "function") {
    emitter.removeEventListener(name, listener, flags2);
  } else {
    throw new ERR_INVALID_ARG_TYPE("emitter", "EventEmitter", emitter);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags2) {
  if (typeof emitter.on === "function") {
    if (flags2?.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === "function") {
    emitter.addEventListener(name, (arg) => {
      listener(arg);
    }, flags2);
  } else {
    throw new ERR_INVALID_ARG_TYPE("emitter", "EventEmitter", emitter);
  }
}
function on(emitter, event, options) {
  const signal = options?.signal;
  validateAbortSignal(signal, "options.signal");
  if (signal?.aborted) {
    throw new AbortError();
  }
  const unconsumedEvents = [];
  const unconsumedPromises = [];
  let error = null;
  let finished = false;
  const iterator = Object.setPrototypeOf({
    next() {
      const value = unconsumedEvents.shift();
      if (value) {
        return Promise.resolve(createIterResult(value, false));
      }
      if (error) {
        const p3 = Promise.reject(error);
        error = null;
        return p3;
      }
      if (finished) {
        return Promise.resolve(createIterResult(void 0, true));
      }
      return new Promise(function(resolve10, reject) {
        unconsumedPromises.push({ resolve: resolve10, reject });
      });
    },
    return() {
      eventTargetAgnosticRemoveListener(emitter, event, eventHandler);
      eventTargetAgnosticRemoveListener(emitter, "error", errorHandler);
      if (signal) {
        eventTargetAgnosticRemoveListener(
          signal,
          "abort",
          abortListener,
          { once: true }
        );
      }
      finished = true;
      for (const promise of unconsumedPromises) {
        promise.resolve(createIterResult(void 0, true));
      }
      return Promise.resolve(createIterResult(void 0, true));
    },
    throw(err) {
      if (!err || !(err instanceof Error)) {
        throw new ERR_INVALID_ARG_TYPE(
          "EventEmitter.AsyncIterator",
          "Error",
          err
        );
      }
      error = err;
      eventTargetAgnosticRemoveListener(emitter, event, eventHandler);
      eventTargetAgnosticRemoveListener(emitter, "error", errorHandler);
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  }, AsyncIteratorPrototype);
  eventTargetAgnosticAddListener(emitter, event, eventHandler);
  if (event !== "error" && typeof emitter.on === "function") {
    emitter.on("error", errorHandler);
  }
  if (signal) {
    eventTargetAgnosticAddListener(
      signal,
      "abort",
      abortListener,
      { once: true }
    );
  }
  return iterator;
  function abortListener() {
    errorHandler(new AbortError());
  }
  function eventHandler(...args2) {
    const promise = unconsumedPromises.shift();
    if (promise) {
      promise.resolve(createIterResult(args2, false));
    } else {
      unconsumedEvents.push(args2);
    }
  }
  function errorHandler(err) {
    finished = true;
    const toError = unconsumedPromises.shift();
    if (toError) {
      toError.reject(err);
    } else {
      error = err;
    }
    iterator.return();
  }
}

// https://deno.land/std@0.177.1/flags/mod.ts
var { hasOwn } = Object;
function get(obj, key) {
  if (hasOwn(obj, key)) {
    return obj[key];
  }
}
function getForce(obj, key) {
  const v4 = get(obj, key);
  assert(v4 != null);
  return v4;
}
function isNumber(x5) {
  if (typeof x5 === "number") return true;
  if (/^0x[0-9a-f]+$/i.test(String(x5))) return true;
  return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(String(x5));
}
function hasKey(obj, keys) {
  let o9 = obj;
  keys.slice(0, -1).forEach((key2) => {
    o9 = get(o9, key2) ?? {};
  });
  const key = keys[keys.length - 1];
  return hasOwn(o9, key);
}
function parse(args2, {
  "--": doubleDash = false,
  alias = {},
  boolean = false,
  default: defaults = {},
  stopEarly = false,
  string = [],
  collect = [],
  negatable = [],
  unknown = (i7) => i7
} = {}) {
  const aliases = {};
  const flags2 = {
    bools: {},
    strings: {},
    unknownFn: unknown,
    allBools: false,
    collect: {},
    negatable: {}
  };
  if (alias !== void 0) {
    for (const key in alias) {
      const val = getForce(alias, key);
      if (typeof val === "string") {
        aliases[key] = [val];
      } else {
        aliases[key] = val;
      }
      for (const alias2 of getForce(aliases, key)) {
        aliases[alias2] = [key].concat(aliases[key].filter((y4) => alias2 !== y4));
      }
    }
  }
  if (boolean !== void 0) {
    if (typeof boolean === "boolean") {
      flags2.allBools = !!boolean;
    } else {
      const booleanArgs = typeof boolean === "string" ? [boolean] : boolean;
      for (const key of booleanArgs.filter(Boolean)) {
        flags2.bools[key] = true;
        const alias2 = get(aliases, key);
        if (alias2) {
          for (const al of alias2) {
            flags2.bools[al] = true;
          }
        }
      }
    }
  }
  if (string !== void 0) {
    const stringArgs = typeof string === "string" ? [string] : string;
    for (const key of stringArgs.filter(Boolean)) {
      flags2.strings[key] = true;
      const alias2 = get(aliases, key);
      if (alias2) {
        for (const al of alias2) {
          flags2.strings[al] = true;
        }
      }
    }
  }
  if (collect !== void 0) {
    const collectArgs = typeof collect === "string" ? [collect] : collect;
    for (const key of collectArgs.filter(Boolean)) {
      flags2.collect[key] = true;
      const alias2 = get(aliases, key);
      if (alias2) {
        for (const al of alias2) {
          flags2.collect[al] = true;
        }
      }
    }
  }
  if (negatable !== void 0) {
    const negatableArgs = typeof negatable === "string" ? [negatable] : negatable;
    for (const key of negatableArgs.filter(Boolean)) {
      flags2.negatable[key] = true;
      const alias2 = get(aliases, key);
      if (alias2) {
        for (const al of alias2) {
          flags2.negatable[al] = true;
        }
      }
    }
  }
  const argv2 = { _: [] };
  function argDefined(key, arg) {
    return flags2.allBools && /^--[^=]+$/.test(arg) || get(flags2.bools, key) || !!get(flags2.strings, key) || !!get(aliases, key);
  }
  function setKey(obj, name, value, collect2 = true) {
    let o9 = obj;
    const keys = name.split(".");
    keys.slice(0, -1).forEach(function(key2) {
      if (get(o9, key2) === void 0) {
        o9[key2] = {};
      }
      o9 = get(o9, key2);
    });
    const key = keys[keys.length - 1];
    const collectable = collect2 && !!get(flags2.collect, name);
    if (!collectable) {
      o9[key] = value;
    } else if (get(o9, key) === void 0) {
      o9[key] = [value];
    } else if (Array.isArray(get(o9, key))) {
      o9[key].push(value);
    } else {
      o9[key] = [get(o9, key), value];
    }
  }
  function setArg(key, val, arg = void 0, collect2) {
    if (arg && flags2.unknownFn && !argDefined(key, arg)) {
      if (flags2.unknownFn(arg, key, val) === false) return;
    }
    const value = !get(flags2.strings, key) && isNumber(val) ? Number(val) : val;
    setKey(argv2, key, value, collect2);
    const alias2 = get(aliases, key);
    if (alias2) {
      for (const x5 of alias2) {
        setKey(argv2, x5, value, collect2);
      }
    }
  }
  function aliasIsBoolean(key) {
    return getForce(aliases, key).some(
      (x5) => typeof get(flags2.bools, x5) === "boolean"
    );
  }
  let notFlags = [];
  if (args2.includes("--")) {
    notFlags = args2.slice(args2.indexOf("--") + 1);
    args2 = args2.slice(0, args2.indexOf("--"));
  }
  for (let i7 = 0; i7 < args2.length; i7++) {
    const arg = args2[i7];
    if (/^--.+=/.test(arg)) {
      const m18 = arg.match(/^--([^=]+)=(.*)$/s);
      assert(m18 != null);
      const [, key, value] = m18;
      if (flags2.bools[key]) {
        const booleanValue = value !== "false";
        setArg(key, booleanValue, arg);
      } else {
        setArg(key, value, arg);
      }
    } else if (/^--no-.+/.test(arg) && get(flags2.negatable, arg.replace(/^--no-/, ""))) {
      const m18 = arg.match(/^--no-(.+)/);
      assert(m18 != null);
      setArg(m18[1], false, arg, false);
    } else if (/^--.+/.test(arg)) {
      const m18 = arg.match(/^--(.+)/);
      assert(m18 != null);
      const [, key] = m18;
      const next = args2[i7 + 1];
      if (next !== void 0 && !/^-/.test(next) && !get(flags2.bools, key) && !flags2.allBools && (get(aliases, key) ? !aliasIsBoolean(key) : true)) {
        setArg(key, next, arg);
        i7++;
      } else if (/^(true|false)$/.test(next)) {
        setArg(key, next === "true", arg);
        i7++;
      } else {
        setArg(key, get(flags2.strings, key) ? "" : true, arg);
      }
    } else if (/^-[^-]+/.test(arg)) {
      const letters = arg.slice(1, -1).split("");
      let broken = false;
      for (let j3 = 0; j3 < letters.length; j3++) {
        const next = arg.slice(j3 + 2);
        if (next === "-") {
          setArg(letters[j3], next, arg);
          continue;
        }
        if (/[A-Za-z]/.test(letters[j3]) && /=/.test(next)) {
          setArg(letters[j3], next.split(/=(.+)/)[1], arg);
          broken = true;
          break;
        }
        if (/[A-Za-z]/.test(letters[j3]) && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
          setArg(letters[j3], next, arg);
          broken = true;
          break;
        }
        if (letters[j3 + 1] && letters[j3 + 1].match(/\W/)) {
          setArg(letters[j3], arg.slice(j3 + 2), arg);
          broken = true;
          break;
        } else {
          setArg(letters[j3], get(flags2.strings, letters[j3]) ? "" : true, arg);
        }
      }
      const [key] = arg.slice(-1);
      if (!broken && key !== "-") {
        if (args2[i7 + 1] && !/^(-|--)[^-]/.test(args2[i7 + 1]) && !get(flags2.bools, key) && (get(aliases, key) ? !aliasIsBoolean(key) : true)) {
          setArg(key, args2[i7 + 1], arg);
          i7++;
        } else if (args2[i7 + 1] && /^(true|false)$/.test(args2[i7 + 1])) {
          setArg(key, args2[i7 + 1] === "true", arg);
          i7++;
        } else {
          setArg(key, get(flags2.strings, key) ? "" : true, arg);
        }
      }
    } else {
      if (!flags2.unknownFn || flags2.unknownFn(arg) !== false) {
        argv2._.push(flags2.strings["_"] ?? !isNumber(arg) ? arg : Number(arg));
      }
      if (stopEarly) {
        argv2._.push(...args2.slice(i7 + 1));
        break;
      }
    }
  }
  for (const [key, value] of Object.entries(defaults)) {
    if (!hasKey(argv2, key.split("."))) {
      setKey(argv2, key, value);
      if (aliases[key]) {
        for (const x5 of aliases[key]) {
          setKey(argv2, x5, value);
        }
      }
    }
  }
  for (const key of Object.keys(flags2.bools)) {
    if (!hasKey(argv2, key.split("."))) {
      const value = get(flags2.collect, key) ? [] : false;
      setKey(
        argv2,
        key,
        value,
        false
      );
    }
  }
  for (const key of Object.keys(flags2.strings)) {
    if (!hasKey(argv2, key.split(".")) && get(flags2.collect, key)) {
      setKey(
        argv2,
        key,
        [],
        false
      );
    }
  }
  if (doubleDash) {
    argv2["--"] = [];
    for (const key of notFlags) {
      argv2["--"].push(key);
    }
  } else {
    for (const key of notFlags) {
      argv2._.push(key);
    }
  }
  return argv2;
}

// https://deno.land/std@0.177.1/node/internal_binding/node_options.ts
function getOptions() {
  const { Deno: Deno5 } = globalThis;
  const args2 = parse(Deno5?.args ?? []);
  const options = new Map(
    Object.entries(args2).map(([key, value]) => [key, { value }])
  );
  return { options };
}

// https://deno.land/std@0.177.1/node/internal/options.ts
var optionsMap;
function getOptionsFromBinding() {
  if (!optionsMap) {
    ({ options: optionsMap } = getOptions());
  }
  return optionsMap;
}
function getOptionValue(optionName) {
  const options = getOptionsFromBinding();
  if (optionName.startsWith("--no-")) {
    const option = options.get("--" + optionName.slice(5));
    return option && !option.value;
  }
  return options.get(optionName)?.value;
}

// https://deno.land/std@0.177.1/path/win32.ts
var win32_exports = {};
__export(win32_exports, {
  basename: () => basename,
  delimiter: () => delimiter,
  dirname: () => dirname,
  extname: () => extname,
  format: () => format,
  fromFileUrl: () => fromFileUrl,
  isAbsolute: () => isAbsolute,
  join: () => join2,
  normalize: () => normalize,
  parse: () => parse2,
  relative: () => relative,
  resolve: () => resolve,
  sep: () => sep,
  toFileUrl: () => toFileUrl,
  toNamespacedPath: () => toNamespacedPath
});

// https://deno.land/std@0.177.1/path/_constants.ts
var CHAR_UPPERCASE_A = 65;
var CHAR_LOWERCASE_A = 97;
var CHAR_UPPERCASE_Z = 90;
var CHAR_LOWERCASE_Z = 122;
var CHAR_DOT = 46;
var CHAR_FORWARD_SLASH = 47;
var CHAR_BACKWARD_SLASH = 92;
var CHAR_COLON = 58;
var CHAR_QUESTION_MARK = 63;

// https://deno.land/std@0.177.1/path/_util.ts
function assertPath(path7) {
  if (typeof path7 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path7)}`
    );
  }
}
function isPosixPathSeparator(code) {
  return code === CHAR_FORWARD_SLASH;
}
function isPathSeparator(code) {
  return isPosixPathSeparator(code) || code === CHAR_BACKWARD_SLASH;
}
function isWindowsDeviceRoot(code) {
  return code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z || code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z;
}
function normalizeString(path7, allowAboveRoot, separator, isPathSeparator5) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code;
  for (let i7 = 0, len = path7.length; i7 <= len; ++i7) {
    if (i7 < len) code = path7.charCodeAt(i7);
    else if (isPathSeparator5(code)) break;
    else code = CHAR_FORWARD_SLASH;
    if (isPathSeparator5(code)) {
      if (lastSlash === i7 - 1 || dots === 1) {
      } else if (lastSlash !== i7 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i7;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i7;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) res += `${separator}..`;
          else res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) res += separator + path7.slice(lastSlash + 1, i7);
        else res = path7.slice(lastSlash + 1, i7);
        lastSegmentLength = i7 - lastSlash - 1;
      }
      lastSlash = i7;
      dots = 0;
    } else if (code === CHAR_DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format(sep10, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir) return base;
  if (base === sep10) return dir;
  if (dir === pathObject.root) return dir + base;
  return dir + sep10 + base;
}
var WHITESPACE_ENCODINGS = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace(string) {
  return string.replaceAll(/[\s]/g, (c12) => {
    return WHITESPACE_ENCODINGS[c12] ?? c12;
  });
}
function lastPathSegment(path7, isSep, start = 0) {
  let matchedNonSeparator = false;
  let end = path7.length;
  for (let i7 = path7.length - 1; i7 >= start; --i7) {
    if (isSep(path7.charCodeAt(i7))) {
      if (matchedNonSeparator) {
        start = i7 + 1;
        break;
      }
    } else if (!matchedNonSeparator) {
      matchedNonSeparator = true;
      end = i7 + 1;
    }
  }
  return path7.slice(start, end);
}
function stripTrailingSeparators(segment, isSep) {
  if (segment.length <= 1) {
    return segment;
  }
  let end = segment.length;
  for (let i7 = segment.length - 1; i7 > 0; i7--) {
    if (isSep(segment.charCodeAt(i7))) {
      end = i7;
    } else {
      break;
    }
  }
  return segment.slice(0, end);
}
function stripSuffix(name, suffix) {
  if (suffix.length >= name.length) {
    return name;
  }
  const lenDiff = name.length - suffix.length;
  for (let i7 = suffix.length - 1; i7 >= 0; --i7) {
    if (name.charCodeAt(lenDiff + i7) !== suffix.charCodeAt(i7)) {
      return name;
    }
  }
  return name.slice(0, -suffix.length);
}

// https://deno.land/std@0.177.1/path/win32.ts
var sep = "\\";
var delimiter = ";";
function resolve(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i7 = pathSegments.length - 1; i7 >= -1; i7--) {
    let path7;
    const { Deno: Deno5 } = globalThis;
    if (i7 >= 0) {
      path7 = pathSegments[i7];
    } else if (!resolvedDevice) {
      if (typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path7 = Deno5.cwd();
    } else {
      if (typeof Deno5?.env?.get !== "function" || typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path7 = Deno5.cwd();
      if (path7 === void 0 || path7.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path7 = `${resolvedDevice}\\`;
      }
    }
    assertPath(path7);
    const len = path7.length;
    if (len === 0) continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute10 = false;
    const code = path7.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator(code)) {
        isAbsolute10 = true;
        if (isPathSeparator(path7.charCodeAt(1))) {
          let j3 = 2;
          let last = j3;
          for (; j3 < len; ++j3) {
            if (isPathSeparator(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            const firstPart = path7.slice(last, j3);
            last = j3;
            for (; j3 < len; ++j3) {
              if (!isPathSeparator(path7.charCodeAt(j3))) break;
            }
            if (j3 < len && j3 !== last) {
              last = j3;
              for (; j3 < len; ++j3) {
                if (isPathSeparator(path7.charCodeAt(j3))) break;
              }
              if (j3 === len) {
                device = `\\\\${firstPart}\\${path7.slice(last)}`;
                rootEnd = j3;
              } else if (j3 !== last) {
                device = `\\\\${firstPart}\\${path7.slice(last, j3)}`;
                rootEnd = j3;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot(code)) {
        if (path7.charCodeAt(1) === CHAR_COLON) {
          device = path7.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator(path7.charCodeAt(2))) {
              isAbsolute10 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator(code)) {
      rootEnd = 1;
      isAbsolute10 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path7.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute10;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0) break;
  }
  resolvedTail = normalizeString(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize(path7) {
  assertPath(path7);
  const len = path7.length;
  if (len === 0) return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute10 = false;
  const code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator(code)) {
      isAbsolute10 = true;
      if (isPathSeparator(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          const firstPart = path7.slice(last, j3);
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              return `\\\\${firstPart}\\${path7.slice(last)}\\`;
            } else if (j3 !== last) {
              device = `\\\\${firstPart}\\${path7.slice(last, j3)}`;
              rootEnd = j3;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON) {
        device = path7.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator(path7.charCodeAt(2))) {
            isAbsolute10 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator(code)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString(
      path7.slice(rootEnd),
      !isAbsolute10,
      "\\",
      isPathSeparator
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute10) tail = ".";
  if (tail.length > 0 && isPathSeparator(path7.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute10) {
      if (tail.length > 0) return `\\${tail}`;
      else return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute10) {
    if (tail.length > 0) return `${device}\\${tail}`;
    else return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute(path7) {
  assertPath(path7);
  const len = path7.length;
  if (len === 0) return false;
  const code = path7.charCodeAt(0);
  if (isPathSeparator(code)) {
    return true;
  } else if (isWindowsDeviceRoot(code)) {
    if (len > 2 && path7.charCodeAt(1) === CHAR_COLON) {
      if (isPathSeparator(path7.charCodeAt(2))) return true;
    }
  }
  return false;
}
function join2(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0) return ".";
  let joined;
  let firstPart = null;
  for (let i7 = 0; i7 < pathsCount; ++i7) {
    const path7 = paths[i7];
    assertPath(path7);
    if (path7.length > 0) {
      if (joined === void 0) joined = firstPart = path7;
      else joined += `\\${path7}`;
    }
  }
  if (joined === void 0) return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert(firstPart != null);
  if (isPathSeparator(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
    }
    if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize(joined);
}
function relative(from2, to) {
  assertPath(from2);
  assertPath(to);
  if (from2 === to) return "";
  const fromOrig = resolve(from2);
  const toOrig = resolve(to);
  if (fromOrig === toOrig) return "";
  from2 = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from2 === to) return "";
  let fromStart = 0;
  let fromEnd = from2.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from2.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH) break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from2.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH) break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH) break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH) break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i7 = 0;
  for (; i7 <= length; ++i7) {
    if (i7 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i7) === CHAR_BACKWARD_SLASH) {
          return toOrig.slice(toStart + i7 + 1);
        } else if (i7 === 2) {
          return toOrig.slice(toStart + i7);
        }
      }
      if (fromLen > length) {
        if (from2.charCodeAt(fromStart + i7) === CHAR_BACKWARD_SLASH) {
          lastCommonSep = i7;
        } else if (i7 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from2.charCodeAt(fromStart + i7);
    const toCode = to.charCodeAt(toStart + i7);
    if (fromCode !== toCode) break;
    else if (fromCode === CHAR_BACKWARD_SLASH) lastCommonSep = i7;
  }
  if (i7 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1) lastCommonSep = 0;
  for (i7 = fromStart + lastCommonSep + 1; i7 <= fromEnd; ++i7) {
    if (i7 === fromEnd || from2.charCodeAt(i7) === CHAR_BACKWARD_SLASH) {
      if (out.length === 0) out += "..";
      else out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath(path7) {
  if (typeof path7 !== "string") return path7;
  if (path7.length === 0) return "";
  const resolvedPath = resolve(path7);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {
        const code = resolvedPath.charCodeAt(2);
        if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path7;
}
function dirname(path7) {
  assertPath(path7);
  const len = path7.length;
  if (len === 0) return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator(code)) {
      rootEnd = offset = 1;
      if (isPathSeparator(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              return path7;
            }
            if (j3 !== last) {
              rootEnd = offset = j3 + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator(path7.charCodeAt(2))) rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator(code)) {
    return path7;
  }
  for (let i7 = len - 1; i7 >= offset; --i7) {
    if (isPathSeparator(path7.charCodeAt(i7))) {
      if (!matchedSlash) {
        end = i7;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1) return ".";
    else end = rootEnd;
  }
  return stripTrailingSeparators(path7.slice(0, end), isPosixPathSeparator);
}
function basename(path7, suffix = "") {
  assertPath(path7);
  if (path7.length === 0) return path7;
  if (typeof suffix !== "string") {
    throw new TypeError(
      `Suffix must be a string. Received ${JSON.stringify(suffix)}`
    );
  }
  let start = 0;
  if (path7.length >= 2) {
    const drive = path7.charCodeAt(0);
    if (isWindowsDeviceRoot(drive)) {
      if (path7.charCodeAt(1) === CHAR_COLON) start = 2;
    }
  }
  const lastSegment = lastPathSegment(path7, isPathSeparator, start);
  const strippedSegment = stripTrailingSeparators(lastSegment, isPathSeparator);
  return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname(path7) {
  assertPath(path7);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path7.length >= 2 && path7.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path7.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i7 = path7.length - 1; i7 >= start; --i7) {
    const code = path7.charCodeAt(i7);
    if (isPathSeparator(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path7.slice(startDot, end);
}
function format(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format("\\", pathObject);
}
function parse2(path7) {
  assertPath(path7);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path7.length;
  if (len === 0) return ret;
  let rootEnd = 0;
  let code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator(code)) {
      rootEnd = 1;
      if (isPathSeparator(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              rootEnd = j3;
            } else if (j3 !== last) {
              rootEnd = j3 + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator(path7.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path7;
              ret.base = "\\";
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path7;
          return ret;
        }
      }
    }
  } else if (isPathSeparator(code)) {
    ret.root = ret.dir = path7;
    ret.base = "\\";
    return ret;
  }
  if (rootEnd > 0) ret.root = path7.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i7 = path7.length - 1;
  let preDotState = 0;
  for (; i7 >= rootEnd; --i7) {
    code = path7.charCodeAt(i7);
    if (isPathSeparator(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path7.slice(startPart, end);
    }
  } else {
    ret.name = path7.slice(startPart, startDot);
    ret.base = path7.slice(startPart, end);
    ret.ext = path7.slice(startDot, end);
  }
  ret.base = ret.base || "\\";
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path7.slice(0, startPart - 1);
  } else ret.dir = ret.root;
  return ret;
}
function fromFileUrl(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path7 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path7 = `\\\\${url.hostname}${path7}`;
  }
  return path7;
}
function toFileUrl(path7) {
  if (!isAbsolute(path7)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname2, pathname] = path7.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace(pathname.replace(/%/g, "%25"));
  if (hostname2 != null && hostname2 != "localhost") {
    url.hostname = hostname2;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.177.1/path/posix.ts
var posix_exports = {};
__export(posix_exports, {
  basename: () => basename2,
  delimiter: () => delimiter2,
  dirname: () => dirname2,
  extname: () => extname2,
  format: () => format2,
  fromFileUrl: () => fromFileUrl2,
  isAbsolute: () => isAbsolute2,
  join: () => join3,
  normalize: () => normalize2,
  parse: () => parse3,
  relative: () => relative2,
  resolve: () => resolve2,
  sep: () => sep2,
  toFileUrl: () => toFileUrl2,
  toNamespacedPath: () => toNamespacedPath2
});
var sep2 = "/";
var delimiter2 = ":";
function resolve2(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i7 = pathSegments.length - 1; i7 >= -1 && !resolvedAbsolute; i7--) {
    let path7;
    if (i7 >= 0) path7 = pathSegments[i7];
    else {
      const { Deno: Deno5 } = globalThis;
      if (typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path7 = Deno5.cwd();
    }
    assertPath(path7);
    if (path7.length === 0) {
      continue;
    }
    resolvedPath = `${path7}/${resolvedPath}`;
    resolvedAbsolute = isPosixPathSeparator(path7.charCodeAt(0));
  }
  resolvedPath = normalizeString(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0) return `/${resolvedPath}`;
    else return "/";
  } else if (resolvedPath.length > 0) return resolvedPath;
  else return ".";
}
function normalize2(path7) {
  assertPath(path7);
  if (path7.length === 0) return ".";
  const isAbsolute10 = isPosixPathSeparator(path7.charCodeAt(0));
  const trailingSeparator = isPosixPathSeparator(
    path7.charCodeAt(path7.length - 1)
  );
  path7 = normalizeString(path7, !isAbsolute10, "/", isPosixPathSeparator);
  if (path7.length === 0 && !isAbsolute10) path7 = ".";
  if (path7.length > 0 && trailingSeparator) path7 += "/";
  if (isAbsolute10) return `/${path7}`;
  return path7;
}
function isAbsolute2(path7) {
  assertPath(path7);
  return path7.length > 0 && isPosixPathSeparator(path7.charCodeAt(0));
}
function join3(...paths) {
  if (paths.length === 0) return ".";
  let joined;
  for (let i7 = 0, len = paths.length; i7 < len; ++i7) {
    const path7 = paths[i7];
    assertPath(path7);
    if (path7.length > 0) {
      if (!joined) joined = path7;
      else joined += `/${path7}`;
    }
  }
  if (!joined) return ".";
  return normalize2(joined);
}
function relative2(from2, to) {
  assertPath(from2);
  assertPath(to);
  if (from2 === to) return "";
  from2 = resolve2(from2);
  to = resolve2(to);
  if (from2 === to) return "";
  let fromStart = 1;
  const fromEnd = from2.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (!isPosixPathSeparator(from2.charCodeAt(fromStart))) break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (!isPosixPathSeparator(to.charCodeAt(toStart))) break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i7 = 0;
  for (; i7 <= length; ++i7) {
    if (i7 === length) {
      if (toLen > length) {
        if (isPosixPathSeparator(to.charCodeAt(toStart + i7))) {
          return to.slice(toStart + i7 + 1);
        } else if (i7 === 0) {
          return to.slice(toStart + i7);
        }
      } else if (fromLen > length) {
        if (isPosixPathSeparator(from2.charCodeAt(fromStart + i7))) {
          lastCommonSep = i7;
        } else if (i7 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from2.charCodeAt(fromStart + i7);
    const toCode = to.charCodeAt(toStart + i7);
    if (fromCode !== toCode) break;
    else if (isPosixPathSeparator(fromCode)) lastCommonSep = i7;
  }
  let out = "";
  for (i7 = fromStart + lastCommonSep + 1; i7 <= fromEnd; ++i7) {
    if (i7 === fromEnd || isPosixPathSeparator(from2.charCodeAt(i7))) {
      if (out.length === 0) out += "..";
      else out += "/..";
    }
  }
  if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (isPosixPathSeparator(to.charCodeAt(toStart))) ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath2(path7) {
  return path7;
}
function dirname2(path7) {
  if (path7.length === 0) return ".";
  let end = -1;
  let matchedNonSeparator = false;
  for (let i7 = path7.length - 1; i7 >= 1; --i7) {
    if (isPosixPathSeparator(path7.charCodeAt(i7))) {
      if (matchedNonSeparator) {
        end = i7;
        break;
      }
    } else {
      matchedNonSeparator = true;
    }
  }
  if (end === -1) {
    return isPosixPathSeparator(path7.charCodeAt(0)) ? "/" : ".";
  }
  return stripTrailingSeparators(
    path7.slice(0, end),
    isPosixPathSeparator
  );
}
function basename2(path7, suffix = "") {
  assertPath(path7);
  if (path7.length === 0) return path7;
  if (typeof suffix !== "string") {
    throw new TypeError(
      `Suffix must be a string. Received ${JSON.stringify(suffix)}`
    );
  }
  const lastSegment = lastPathSegment(path7, isPosixPathSeparator);
  const strippedSegment = stripTrailingSeparators(
    lastSegment,
    isPosixPathSeparator
  );
  return suffix ? stripSuffix(strippedSegment, suffix) : strippedSegment;
}
function extname2(path7) {
  assertPath(path7);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i7 = path7.length - 1; i7 >= 0; --i7) {
    const code = path7.charCodeAt(i7);
    if (isPosixPathSeparator(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path7.slice(startDot, end);
}
function format2(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format("/", pathObject);
}
function parse3(path7) {
  assertPath(path7);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path7.length === 0) return ret;
  const isAbsolute10 = isPosixPathSeparator(path7.charCodeAt(0));
  let start;
  if (isAbsolute10) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i7 = path7.length - 1;
  let preDotState = 0;
  for (; i7 >= start; --i7) {
    const code = path7.charCodeAt(i7);
    if (isPosixPathSeparator(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute10) {
        ret.base = ret.name = path7.slice(1, end);
      } else {
        ret.base = ret.name = path7.slice(startPart, end);
      }
    }
    ret.base = ret.base || "/";
  } else {
    if (startPart === 0 && isAbsolute10) {
      ret.name = path7.slice(1, startDot);
      ret.base = path7.slice(1, end);
    } else {
      ret.name = path7.slice(startPart, startDot);
      ret.base = path7.slice(startPart, end);
    }
    ret.ext = path7.slice(startDot, end);
  }
  if (startPart > 0) {
    ret.dir = stripTrailingSeparators(
      path7.slice(0, startPart - 1),
      isPosixPathSeparator
    );
  } else if (isAbsolute10) ret.dir = "/";
  return ret;
}
function fromFileUrl2(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl2(path7) {
  if (!isAbsolute2(path7)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace(
    path7.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.177.1/path/glob.ts
var path = isWindows ? win32_exports : posix_exports;
var { join: join4, normalize: normalize3 } = path;

// https://deno.land/std@0.177.1/path/mod.ts
var path2 = isWindows ? win32_exports : posix_exports;
var {
  basename: basename3,
  delimiter: delimiter3,
  dirname: dirname3,
  extname: extname3,
  format: format3,
  fromFileUrl: fromFileUrl3,
  isAbsolute: isAbsolute3,
  join: join5,
  normalize: normalize4,
  parse: parse4,
  relative: relative3,
  resolve: resolve3,
  sep: sep3,
  toFileUrl: toFileUrl3,
  toNamespacedPath: toNamespacedPath3
} = path2;

// https://deno.land/std@0.177.1/node/_process/exiting.ts
var _exiting = false;

// https://deno.land/std@0.177.1/node/internal/fixed_queue.ts
var kSize = 2048;
var kMask = kSize - 1;
var FixedCircularBuffer = class {
  bottom;
  top;
  list;
  next;
  constructor() {
    this.bottom = 0;
    this.top = 0;
    this.list = new Array(kSize);
    this.next = null;
  }
  isEmpty() {
    return this.top === this.bottom;
  }
  isFull() {
    return (this.top + 1 & kMask) === this.bottom;
  }
  push(data) {
    this.list[this.top] = data;
    this.top = this.top + 1 & kMask;
  }
  shift() {
    const nextItem = this.list[this.bottom];
    if (nextItem === void 0) {
      return null;
    }
    this.list[this.bottom] = void 0;
    this.bottom = this.bottom + 1 & kMask;
    return nextItem;
  }
};
var FixedQueue = class {
  head;
  tail;
  constructor() {
    this.head = this.tail = new FixedCircularBuffer();
  }
  isEmpty() {
    return this.head.isEmpty();
  }
  push(data) {
    if (this.head.isFull()) {
      this.head = this.head.next = new FixedCircularBuffer();
    }
    this.head.push(data);
  }
  shift() {
    const tail = this.tail;
    const next = tail.shift();
    if (tail.isEmpty() && tail.next !== null) {
      this.tail = tail.next;
    }
    return next;
  }
};

// https://deno.land/std@0.177.1/node/_next_tick.ts
var queue = new FixedQueue();
var _nextTick;
function processTicksAndRejections() {
  let tock;
  do {
    while (tock = queue.shift()) {
      try {
        const callback = tock.callback;
        if (tock.args === void 0) {
          callback();
        } else {
          const args2 = tock.args;
          switch (args2.length) {
            case 1:
              callback(args2[0]);
              break;
            case 2:
              callback(args2[0], args2[1]);
              break;
            case 3:
              callback(args2[0], args2[1], args2[2]);
              break;
            case 4:
              callback(args2[0], args2[1], args2[2], args2[3]);
              break;
            default:
              callback(...args2);
          }
        }
      } finally {
      }
    }
    core.runMicrotasks();
  } while (!queue.isEmpty());
  core.setHasTickScheduled(false);
}
if (typeof core.setNextTickCallback !== "undefined") {
  let runNextTicks = function() {
    if (!core.hasTickScheduled()) {
      core.runMicrotasks();
    }
    if (!core.hasTickScheduled()) {
      return true;
    }
    processTicksAndRejections();
    return true;
  }, __nextTickNative = function(callback, ...args2) {
    validateFunction(callback, "callback");
    if (_exiting) {
      return;
    }
    let args_;
    switch (args2.length) {
      case 0:
        break;
      case 1:
        args_ = [args2[0]];
        break;
      case 2:
        args_ = [args2[0], args2[1]];
        break;
      case 3:
        args_ = [args2[0], args2[1], args2[2]];
        break;
      default:
        args_ = new Array(args2.length);
        for (let i7 = 0; i7 < args2.length; i7++) {
          args_[i7] = args2[i7];
        }
    }
    if (queue.isEmpty()) {
      core.setHasTickScheduled(true);
    }
    const tickObject = {
      // FIXME(bartlomieju): Deno currently doesn't support async hooks
      // [async_id_symbol]: asyncId,
      // [trigger_async_id_symbol]: triggerAsyncId,
      callback,
      args: args_
    };
    queue.push(tickObject);
  };
  core.setNextTickCallback(processTicksAndRejections);
  core.setMacrotaskCallback(runNextTicks);
  _nextTick = __nextTickNative;
} else {
  let __nextTickQueueMicrotask = function(callback, ...args2) {
    if (args2) {
      queueMicrotask(() => callback.call(this, ...args2));
    } else {
      queueMicrotask(callback);
    }
  };
  _nextTick = __nextTickQueueMicrotask;
}
function nextTick2(callback, ...args2) {
  _nextTick(callback, ...args2);
}

// https://deno.land/std@0.177.1/node/_process/process.ts
function _arch() {
  if (Deno.build.arch == "x86_64") {
    return "x64";
  } else if (Deno.build.arch == "aarch64") {
    return "arm64";
  } else {
    throw Error("unreachable");
  }
}
var arch = _arch();
var chdir = Deno.chdir;
var cwd = Deno.cwd;
var nextTick3 = nextTick2;
function denoEnvGet(name) {
  try {
    return Deno.env.get(name);
  } catch (e6) {
    if (e6 instanceof TypeError) {
      return void 0;
    }
    throw e6;
  }
}
var OBJECT_PROTO_PROP_NAMES = Object.getOwnPropertyNames(Object.prototype);
var env = new Proxy(Object(), {
  get: (target, prop) => {
    if (typeof prop === "symbol") {
      return target[prop];
    }
    const envValue = denoEnvGet(prop);
    if (envValue) {
      return envValue;
    }
    if (OBJECT_PROTO_PROP_NAMES.includes(prop)) {
      return target[prop];
    }
    return envValue;
  },
  ownKeys: () => Reflect.ownKeys(Deno.env.toObject()),
  getOwnPropertyDescriptor: (_target, name) => {
    const value = denoEnvGet(String(name));
    if (value) {
      return {
        enumerable: true,
        configurable: true,
        value
      };
    }
  },
  set(_target, prop, value) {
    Deno.env.set(String(prop), String(value));
    return true;
  },
  has: (_target, prop) => typeof denoEnvGet(String(prop)) === "string"
});
var pid = Deno.pid;
var platform = isWindows ? "win32" : Deno.build.os;
var version2 = "v18.12.1";
var versions = {
  node: "18.12.1",
  uv: "1.43.0",
  zlib: "1.2.11",
  brotli: "1.0.9",
  ares: "1.18.1",
  modules: "108",
  nghttp2: "1.47.0",
  napi: "8",
  llhttp: "6.0.10",
  openssl: "3.0.7+quic",
  cldr: "41.0",
  icu: "71.1",
  tz: "2022b",
  unicode: "14.0",
  ngtcp2: "0.8.1",
  nghttp3: "0.7.0",
  ...Deno.version
};

// https://deno.land/std@0.177.1/node/internal_binding/string_decoder.ts
var string_decoder_exports = {};
__export(string_decoder_exports, {
  default: () => string_decoder_default,
  encodings: () => encodings
});

// https://deno.land/std@0.177.1/node/internal_binding/_node.ts
var Encodings = /* @__PURE__ */ ((Encodings2) => {
  Encodings2[Encodings2["ASCII"] = 0] = "ASCII";
  Encodings2[Encodings2["UTF8"] = 1] = "UTF8";
  Encodings2[Encodings2["BASE64"] = 2] = "BASE64";
  Encodings2[Encodings2["UCS2"] = 3] = "UCS2";
  Encodings2[Encodings2["BINARY"] = 4] = "BINARY";
  Encodings2[Encodings2["HEX"] = 5] = "HEX";
  Encodings2[Encodings2["BUFFER"] = 6] = "BUFFER";
  Encodings2[Encodings2["BASE64URL"] = 7] = "BASE64URL";
  Encodings2[Encodings2["LATIN1"] = 4] = "LATIN1";
  return Encodings2;
})(Encodings || {});

// https://deno.land/std@0.177.1/node/internal_binding/string_decoder.ts
var encodings = [];
encodings[0 /* ASCII */] = "ascii";
encodings[2 /* BASE64 */] = "base64";
encodings[7 /* BASE64URL */] = "base64url";
encodings[6 /* BUFFER */] = "buffer";
encodings[5 /* HEX */] = "hex";
encodings[4 /* LATIN1 */] = "latin1";
encodings[3 /* UCS2 */] = "utf16le";
encodings[1 /* UTF8 */] = "utf8";
var string_decoder_default = { encodings };

// https://deno.land/std@0.177.1/node/internal_binding/buffer.ts
var buffer_exports = {};
__export(buffer_exports, {
  default: () => buffer_default,
  indexOfBuffer: () => indexOfBuffer,
  indexOfNumber: () => indexOfNumber,
  numberToBytes: () => numberToBytes
});

// https://deno.land/std@0.177.1/bytes/index_of_needle.ts
function indexOfNeedle(source, needle, start = 0) {
  if (start >= source.length) {
    return -1;
  }
  if (start < 0) {
    start = Math.max(0, source.length + start);
  }
  const s16 = needle[0];
  for (let i7 = start; i7 < source.length; i7++) {
    if (source[i7] !== s16) continue;
    const pin = i7;
    let matched = 1;
    let j3 = i7;
    while (matched < needle.length) {
      j3++;
      if (source[j3] !== needle[j3 - pin]) {
        break;
      }
      matched++;
    }
    if (matched === needle.length) {
      return pin;
    }
  }
  return -1;
}

// https://deno.land/std@0.177.1/node/internal_binding/buffer.ts
function numberToBytes(n12) {
  if (n12 === 0) return new Uint8Array([0]);
  const bytes = [];
  bytes.unshift(n12 & 255);
  while (n12 >= 256) {
    n12 = n12 >>> 8;
    bytes.unshift(n12 & 255);
  }
  return new Uint8Array(bytes);
}
function findLastIndex(targetBuffer, buffer, offset) {
  offset = offset > targetBuffer.length ? targetBuffer.length : offset;
  const searchableBuffer = targetBuffer.slice(0, offset + buffer.length);
  const searchableBufferLastIndex = searchableBuffer.length - 1;
  const bufferLastIndex = buffer.length - 1;
  let lastMatchIndex = -1;
  let matches = 0;
  let index = -1;
  for (let x5 = 0; x5 <= searchableBufferLastIndex; x5++) {
    if (searchableBuffer[searchableBufferLastIndex - x5] === buffer[bufferLastIndex - matches]) {
      if (lastMatchIndex === -1) {
        lastMatchIndex = x5;
      }
      matches++;
    } else {
      matches = 0;
      if (lastMatchIndex !== -1) {
        x5 = lastMatchIndex + 1;
        lastMatchIndex = -1;
      }
      continue;
    }
    if (matches === buffer.length) {
      index = x5;
      break;
    }
  }
  if (index === -1) return index;
  return searchableBufferLastIndex - index;
}
function indexOfBuffer(targetBuffer, buffer, byteOffset, encoding, forwardDirection) {
  if (!Encodings[encoding] === void 0) {
    throw new Error(`Unknown encoding code ${encoding}`);
  }
  if (!forwardDirection) {
    if (byteOffset < 0) {
      byteOffset = targetBuffer.length + byteOffset;
    }
    if (buffer.length === 0) {
      return byteOffset <= targetBuffer.length ? byteOffset : targetBuffer.length;
    }
    return findLastIndex(targetBuffer, buffer, byteOffset);
  }
  if (buffer.length === 0) {
    return byteOffset <= targetBuffer.length ? byteOffset : targetBuffer.length;
  }
  return indexOfNeedle(targetBuffer, buffer, byteOffset);
}
function indexOfNumber(targetBuffer, number, byteOffset, forwardDirection) {
  const bytes = numberToBytes(number);
  if (bytes.length > 1) {
    throw new Error("Multi byte number search is not supported");
  }
  return indexOfBuffer(
    targetBuffer,
    numberToBytes(number),
    byteOffset,
    1 /* UTF8 */,
    forwardDirection
  );
}
var buffer_default = { indexOfBuffer, indexOfNumber };

// https://deno.land/std@0.177.1/encoding/base64.ts
var base64abc = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "+",
  "/"
];
function encode(data) {
  const uint8 = typeof data === "string" ? new TextEncoder().encode(data) : data instanceof Uint8Array ? data : new Uint8Array(data);
  let result = "", i7;
  const l6 = uint8.length;
  for (i7 = 2; i7 < l6; i7 += 3) {
    result += base64abc[uint8[i7 - 2] >> 2];
    result += base64abc[(uint8[i7 - 2] & 3) << 4 | uint8[i7 - 1] >> 4];
    result += base64abc[(uint8[i7 - 1] & 15) << 2 | uint8[i7] >> 6];
    result += base64abc[uint8[i7] & 63];
  }
  if (i7 === l6 + 1) {
    result += base64abc[uint8[i7 - 2] >> 2];
    result += base64abc[(uint8[i7 - 2] & 3) << 4];
    result += "==";
  }
  if (i7 === l6) {
    result += base64abc[uint8[i7 - 2] >> 2];
    result += base64abc[(uint8[i7 - 2] & 3) << 4 | uint8[i7 - 1] >> 4];
    result += base64abc[(uint8[i7 - 1] & 15) << 2];
    result += "=";
  }
  return result;
}
function decode(b64) {
  const binString = atob(b64);
  const size = binString.length;
  const bytes = new Uint8Array(size);
  for (let i7 = 0; i7 < size; i7++) {
    bytes[i7] = binString.charCodeAt(i7);
  }
  return bytes;
}

// https://deno.land/std@0.177.1/encoding/base64url.ts
function addPaddingToBase64url(base64url) {
  if (base64url.length % 4 === 2) return base64url + "==";
  if (base64url.length % 4 === 3) return base64url + "=";
  if (base64url.length % 4 === 1) {
    throw new TypeError("Illegal base64url string!");
  }
  return base64url;
}
function convertBase64urlToBase64(b64url) {
  if (!/^[-_A-Z0-9]*?={0,2}$/i.test(b64url)) {
    throw new TypeError("Failed to decode base64url: invalid character");
  }
  return addPaddingToBase64url(b64url).replace(/\-/g, "+").replace(/_/g, "/");
}
function convertBase64ToBase64url(b64) {
  return b64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function encode2(data) {
  return convertBase64ToBase64url(encode(data));
}
function decode2(b64url) {
  return decode(convertBase64urlToBase64(b64url));
}

// https://deno.land/std@0.177.1/node/internal_binding/_utils.ts
function asciiToBytes(str) {
  const byteArray = [];
  for (let i7 = 0; i7 < str.length; ++i7) {
    byteArray.push(str.charCodeAt(i7) & 255);
  }
  return new Uint8Array(byteArray);
}
function base64ToBytes(str) {
  str = base64clean(str);
  str = str.replaceAll("-", "+").replaceAll("_", "/");
  return decode(str);
}
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
  str = str.split("=")[0];
  str = str.trim().replace(INVALID_BASE64_RE, "");
  if (str.length < 2) return "";
  while (str.length % 4 !== 0) {
    str = str + "=";
  }
  return str;
}
function base64UrlToBytes(str) {
  str = base64clean(str);
  str = str.replaceAll("+", "-").replaceAll("/", "_");
  return decode2(str);
}
function hexToBytes(str) {
  const byteArray = new Uint8Array(Math.floor((str || "").length / 2));
  let i7;
  for (i7 = 0; i7 < byteArray.length; i7++) {
    const a7 = Number.parseInt(str[i7 * 2], 16);
    const b2 = Number.parseInt(str[i7 * 2 + 1], 16);
    if (Number.isNaN(a7) && Number.isNaN(b2)) {
      break;
    }
    byteArray[i7] = a7 << 4 | b2;
  }
  return new Uint8Array(
    i7 === byteArray.length ? byteArray : byteArray.slice(0, i7)
  );
}
function utf16leToBytes(str, units) {
  let c12, hi2, lo;
  const byteArray = [];
  for (let i7 = 0; i7 < str.length; ++i7) {
    if ((units -= 2) < 0) {
      break;
    }
    c12 = str.charCodeAt(i7);
    hi2 = c12 >> 8;
    lo = c12 % 256;
    byteArray.push(lo);
    byteArray.push(hi2);
  }
  return new Uint8Array(byteArray);
}
function bytesToAscii(bytes) {
  let ret = "";
  for (let i7 = 0; i7 < bytes.length; ++i7) {
    ret += String.fromCharCode(bytes[i7] & 127);
  }
  return ret;
}
function bytesToUtf16le(bytes) {
  let res = "";
  for (let i7 = 0; i7 < bytes.length - 1; i7 += 2) {
    res += String.fromCharCode(bytes[i7] + bytes[i7 + 1] * 256);
  }
  return res;
}

// https://deno.land/std@0.177.1/node/internal/primordials.mjs
var ArrayIsArray = Array.isArray;
var ObjectPrototypeHasOwnProperty = Object.hasOwn;
var RegExpPrototypeExec = RegExp.prototype.exec;
var StringFromCharCode = String.fromCharCode;

// https://deno.land/std@0.177.1/node/internal/util.mjs
var { signals } = os;
var customInspectSymbol2 = Symbol.for("nodejs.util.inspect.custom");
var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
kEnumerableProperty.enumerable = true;
var kEmptyObject = Object.freeze(/* @__PURE__ */ Object.create(null));
function once3(callback) {
  let called = false;
  return function(...args2) {
    if (called) return;
    called = true;
    Reflect.apply(callback, this, args2);
  };
}
function createDeferredPromise() {
  let resolve10;
  let reject;
  const promise = new Promise((res, rej) => {
    resolve10 = res;
    reject = rej;
  });
  return { promise, resolve: resolve10, reject };
}
var kCustomPromisifiedSymbol = Symbol.for("nodejs.util.promisify.custom");
var kCustomPromisifyArgsSymbol = Symbol.for(
  "nodejs.util.promisify.customArgs"
);
function promisify(original) {
  validateFunction(original, "original");
  if (original[kCustomPromisifiedSymbol]) {
    const fn2 = original[kCustomPromisifiedSymbol];
    validateFunction(fn2, "util.promisify.custom");
    return Object.defineProperty(fn2, kCustomPromisifiedSymbol, {
      value: fn2,
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  const argumentNames = original[kCustomPromisifyArgsSymbol];
  function fn(...args2) {
    return new Promise((resolve10, reject) => {
      args2.push((err, ...values) => {
        if (err) {
          return reject(err);
        }
        if (argumentNames !== void 0 && values.length > 1) {
          const obj = {};
          for (let i7 = 0; i7 < argumentNames.length; i7++) {
            obj[argumentNames[i7]] = values[i7];
          }
          resolve10(obj);
        } else {
          resolve10(values[0]);
        }
      });
      Reflect.apply(original, this, args2);
    });
  }
  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
  Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn,
    enumerable: false,
    writable: false,
    configurable: true
  });
  return Object.defineProperties(
    fn,
    Object.getOwnPropertyDescriptors(original)
  );
}
promisify.custom = kCustomPromisifiedSymbol;

// https://deno.land/std@0.177.1/node/internal/buffer.mjs
var utf8Encoder = new TextEncoder();
var float32Array = new Float32Array(1);
var uInt8Float32Array = new Uint8Array(float32Array.buffer);
var float64Array = new Float64Array(1);
var uInt8Float64Array = new Uint8Array(float64Array.buffer);
float32Array[0] = -1;
var bigEndian = uInt8Float32Array[3] === 0;
var kMaxLength = 2147483647;
var kStringMaxLength = 536870888;
var MAX_UINT32 = 2 ** 32;
var customInspectSymbol3 = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
var INSPECT_MAX_BYTES = 50;
var constants = {
  MAX_LENGTH: kMaxLength,
  MAX_STRING_LENGTH: kStringMaxLength
};
Object.defineProperty(Buffer2.prototype, "parent", {
  enumerable: true,
  get: function() {
    if (!Buffer2.isBuffer(this)) {
      return void 0;
    }
    return this.buffer;
  }
});
Object.defineProperty(Buffer2.prototype, "offset", {
  enumerable: true,
  get: function() {
    if (!Buffer2.isBuffer(this)) {
      return void 0;
    }
    return this.byteOffset;
  }
});
function createBuffer(length) {
  if (length > kMaxLength) {
    throw new RangeError(
      'The value "' + length + '" is invalid for option "size"'
    );
  }
  const buf = new Uint8Array(length);
  Object.setPrototypeOf(buf, Buffer2.prototype);
  return buf;
}
function Buffer2(arg, encodingOrOffset, length) {
  if (typeof arg === "number") {
    if (typeof encodingOrOffset === "string") {
      throw new codes.ERR_INVALID_ARG_TYPE(
        "string",
        "string",
        arg
      );
    }
    return _allocUnsafe(arg);
  }
  return _from(arg, encodingOrOffset, length);
}
Buffer2.poolSize = 8192;
function _from(value, encodingOrOffset, length) {
  if (typeof value === "string") {
    return fromString(value, encodingOrOffset);
  }
  if (typeof value === "object" && value !== null) {
    if (isAnyArrayBuffer2(value)) {
      return fromArrayBuffer(value, encodingOrOffset, length);
    }
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value && (typeof valueOf === "string" || typeof valueOf === "object")) {
      return _from(valueOf, encodingOrOffset, length);
    }
    const b2 = fromObject(value);
    if (b2) {
      return b2;
    }
    if (typeof value[Symbol.toPrimitive] === "function") {
      const primitive = value[Symbol.toPrimitive]("string");
      if (typeof primitive === "string") {
        return fromString(primitive, encodingOrOffset);
      }
    }
  }
  throw new codes.ERR_INVALID_ARG_TYPE(
    "first argument",
    ["string", "Buffer", "ArrayBuffer", "Array", "Array-like Object"],
    value
  );
}
Buffer2.from = function from(value, encodingOrOffset, length) {
  return _from(value, encodingOrOffset, length);
};
Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer2, Uint8Array);
function assertSize(size) {
  validateNumber(size, "size");
  if (!(size >= 0 && size <= kMaxLength)) {
    throw new codes.ERR_INVALID_ARG_VALUE.RangeError("size", size);
  }
}
function _alloc(size, fill2, encoding) {
  assertSize(size);
  const buffer = createBuffer(size);
  if (fill2 !== void 0) {
    if (encoding !== void 0 && typeof encoding !== "string") {
      throw new codes.ERR_INVALID_ARG_TYPE(
        "encoding",
        "string",
        encoding
      );
    }
    return buffer.fill(fill2, encoding);
  }
  return buffer;
}
Buffer2.alloc = function alloc(size, fill2, encoding) {
  return _alloc(size, fill2, encoding);
};
function _allocUnsafe(size) {
  assertSize(size);
  return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
Buffer2.allocUnsafe = function allocUnsafe(size) {
  return _allocUnsafe(size);
};
Buffer2.allocUnsafeSlow = function allocUnsafeSlow(size) {
  return _allocUnsafe(size);
};
function fromString(string, encoding) {
  if (typeof encoding !== "string" || encoding === "") {
    encoding = "utf8";
  }
  if (!Buffer2.isEncoding(encoding)) {
    throw new codes.ERR_UNKNOWN_ENCODING(encoding);
  }
  const length = byteLength(string, encoding) | 0;
  let buf = createBuffer(length);
  const actual = buf.write(string, encoding);
  if (actual !== length) {
    buf = buf.slice(0, actual);
  }
  return buf;
}
function fromArrayLike(array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0;
  const buf = createBuffer(length);
  for (let i7 = 0; i7 < length; i7 += 1) {
    buf[i7] = array[i7] & 255;
  }
  return buf;
}
function fromObject(obj) {
  if (obj.length !== void 0 || isAnyArrayBuffer2(obj.buffer)) {
    if (typeof obj.length !== "number") {
      return createBuffer(0);
    }
    return fromArrayLike(obj);
  }
  if (obj.type === "Buffer" && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data);
  }
}
function checked(length) {
  if (length >= kMaxLength) {
    throw new RangeError(
      "Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength.toString(16) + " bytes"
    );
  }
  return length | 0;
}
function SlowBuffer(length) {
  assertSize(length);
  return Buffer2.alloc(+length);
}
Object.setPrototypeOf(SlowBuffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(SlowBuffer, Uint8Array);
Buffer2.isBuffer = function isBuffer(b2) {
  return b2 != null && b2._isBuffer === true && b2 !== Buffer2.prototype;
};
Buffer2.compare = function compare(a7, b2) {
  if (isInstance(a7, Uint8Array)) {
    a7 = Buffer2.from(a7, a7.offset, a7.byteLength);
  }
  if (isInstance(b2, Uint8Array)) {
    b2 = Buffer2.from(b2, b2.offset, b2.byteLength);
  }
  if (!Buffer2.isBuffer(a7) || !Buffer2.isBuffer(b2)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    );
  }
  if (a7 === b2) {
    return 0;
  }
  let x5 = a7.length;
  let y4 = b2.length;
  for (let i7 = 0, len = Math.min(x5, y4); i7 < len; ++i7) {
    if (a7[i7] !== b2[i7]) {
      x5 = a7[i7];
      y4 = b2[i7];
      break;
    }
  }
  if (x5 < y4) {
    return -1;
  }
  if (y4 < x5) {
    return 1;
  }
  return 0;
};
Buffer2.isEncoding = function isEncoding(encoding) {
  return typeof encoding === "string" && encoding.length !== 0 && normalizeEncoding2(encoding) !== void 0;
};
Buffer2.concat = function concat(list, length) {
  if (!Array.isArray(list)) {
    throw new codes.ERR_INVALID_ARG_TYPE("list", "Array", list);
  }
  if (list.length === 0) {
    return Buffer2.alloc(0);
  }
  if (length === void 0) {
    length = 0;
    for (let i7 = 0; i7 < list.length; i7++) {
      if (list[i7].length) {
        length += list[i7].length;
      }
    }
  } else {
    validateOffset(length, "length");
  }
  const buffer = Buffer2.allocUnsafe(length);
  let pos = 0;
  for (let i7 = 0; i7 < list.length; i7++) {
    const buf = list[i7];
    if (!isUint8Array(buf)) {
      throw new codes.ERR_INVALID_ARG_TYPE(
        `list[${i7}]`,
        ["Buffer", "Uint8Array"],
        list[i7]
      );
    }
    pos += _copyActual(buf, buffer, pos, 0, buf.length);
  }
  if (pos < length) {
    buffer.fill(0, pos, length);
  }
  return buffer;
};
function byteLength(string, encoding) {
  if (typeof string !== "string") {
    if (isArrayBufferView(string) || isAnyArrayBuffer2(string)) {
      return string.byteLength;
    }
    throw new codes.ERR_INVALID_ARG_TYPE(
      "string",
      ["string", "Buffer", "ArrayBuffer"],
      string
    );
  }
  const len = string.length;
  const mustMatch = arguments.length > 2 && arguments[2] === true;
  if (!mustMatch && len === 0) {
    return 0;
  }
  if (!encoding) {
    return mustMatch ? -1 : byteLengthUtf8(string);
  }
  const ops = getEncodingOps(encoding);
  if (ops === void 0) {
    return mustMatch ? -1 : byteLengthUtf8(string);
  }
  return ops.byteLength(string);
}
Buffer2.byteLength = byteLength;
Buffer2.prototype._isBuffer = true;
function swap(b2, n12, m18) {
  const i7 = b2[n12];
  b2[n12] = b2[m18];
  b2[m18] = i7;
}
Buffer2.prototype.swap16 = function swap16() {
  const len = this.length;
  if (len % 2 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  }
  for (let i7 = 0; i7 < len; i7 += 2) {
    swap(this, i7, i7 + 1);
  }
  return this;
};
Buffer2.prototype.swap32 = function swap32() {
  const len = this.length;
  if (len % 4 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  }
  for (let i7 = 0; i7 < len; i7 += 4) {
    swap(this, i7, i7 + 3);
    swap(this, i7 + 1, i7 + 2);
  }
  return this;
};
Buffer2.prototype.swap64 = function swap64() {
  const len = this.length;
  if (len % 8 !== 0) {
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  }
  for (let i7 = 0; i7 < len; i7 += 8) {
    swap(this, i7, i7 + 7);
    swap(this, i7 + 1, i7 + 6);
    swap(this, i7 + 2, i7 + 5);
    swap(this, i7 + 3, i7 + 4);
  }
  return this;
};
Buffer2.prototype.toString = function toString(encoding, start, end) {
  if (arguments.length === 0) {
    return this.utf8Slice(0, this.length);
  }
  const len = this.length;
  if (start <= 0) {
    start = 0;
  } else if (start >= len) {
    return "";
  } else {
    start |= 0;
  }
  if (end === void 0 || end > len) {
    end = len;
  } else {
    end |= 0;
  }
  if (end <= start) {
    return "";
  }
  if (encoding === void 0) {
    return this.utf8Slice(start, end);
  }
  const ops = getEncodingOps(encoding);
  if (ops === void 0) {
    throw new codes.ERR_UNKNOWN_ENCODING(encoding);
  }
  return ops.slice(this, start, end);
};
Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
Buffer2.prototype.equals = function equals(b2) {
  if (!isUint8Array(b2)) {
    throw new codes.ERR_INVALID_ARG_TYPE(
      "otherBuffer",
      ["Buffer", "Uint8Array"],
      b2
    );
  }
  if (this === b2) {
    return true;
  }
  return Buffer2.compare(this, b2) === 0;
};
Buffer2.prototype.inspect = function inspect2() {
  let str = "";
  const max = INSPECT_MAX_BYTES;
  str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
  if (this.length > max) {
    str += " ... ";
  }
  return "<Buffer " + str + ">";
};
if (customInspectSymbol3) {
  Buffer2.prototype[customInspectSymbol3] = Buffer2.prototype.inspect;
}
Buffer2.prototype.compare = function compare2(target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer2.from(target, target.offset, target.byteLength);
  }
  if (!Buffer2.isBuffer(target)) {
    throw new codes.ERR_INVALID_ARG_TYPE(
      "target",
      ["Buffer", "Uint8Array"],
      target
    );
  }
  if (start === void 0) {
    start = 0;
  } else {
    validateOffset(start, "targetStart", 0, kMaxLength);
  }
  if (end === void 0) {
    end = target.length;
  } else {
    validateOffset(end, "targetEnd", 0, target.length);
  }
  if (thisStart === void 0) {
    thisStart = 0;
  } else {
    validateOffset(start, "sourceStart", 0, kMaxLength);
  }
  if (thisEnd === void 0) {
    thisEnd = this.length;
  } else {
    validateOffset(end, "sourceEnd", 0, this.length);
  }
  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new codes.ERR_OUT_OF_RANGE("out of range index", "range");
  }
  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }
  if (thisStart >= thisEnd) {
    return -1;
  }
  if (start >= end) {
    return 1;
  }
  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) {
    return 0;
  }
  let x5 = thisEnd - thisStart;
  let y4 = end - start;
  const len = Math.min(x5, y4);
  const thisCopy = this.slice(thisStart, thisEnd);
  const targetCopy = target.slice(start, end);
  for (let i7 = 0; i7 < len; ++i7) {
    if (thisCopy[i7] !== targetCopy[i7]) {
      x5 = thisCopy[i7];
      y4 = targetCopy[i7];
      break;
    }
  }
  if (x5 < y4) {
    return -1;
  }
  if (y4 < x5) {
    return 1;
  }
  return 0;
};
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  validateBuffer(buffer);
  if (typeof byteOffset === "string") {
    encoding = byteOffset;
    byteOffset = void 0;
  } else if (byteOffset > 2147483647) {
    byteOffset = 2147483647;
  } else if (byteOffset < -2147483648) {
    byteOffset = -2147483648;
  }
  byteOffset = +byteOffset;
  if (Number.isNaN(byteOffset)) {
    byteOffset = dir ? 0 : buffer.length || buffer.byteLength;
  }
  dir = !!dir;
  if (typeof val === "number") {
    return indexOfNumber(buffer, val >>> 0, byteOffset, dir);
  }
  let ops;
  if (encoding === void 0) {
    ops = encodingOps.utf8;
  } else {
    ops = getEncodingOps(encoding);
  }
  if (typeof val === "string") {
    if (ops === void 0) {
      throw new codes.ERR_UNKNOWN_ENCODING(encoding);
    }
    return ops.indexOf(buffer, val, byteOffset, dir);
  }
  if (isUint8Array(val)) {
    const encodingVal = ops === void 0 ? encodingsMap.utf8 : ops.encodingVal;
    return indexOfBuffer(buffer, val, byteOffset, encodingVal, dir);
  }
  throw new codes.ERR_INVALID_ARG_TYPE(
    "value",
    ["number", "string", "Buffer", "Uint8Array"],
    val
  );
}
Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
Buffer2.prototype.asciiSlice = function asciiSlice(offset, length) {
  if (offset === 0 && length === this.length) {
    return bytesToAscii(this);
  } else {
    return bytesToAscii(this.slice(offset, length));
  }
};
Buffer2.prototype.asciiWrite = function asciiWrite(string, offset, length) {
  return blitBuffer(asciiToBytes(string), this, offset, length);
};
Buffer2.prototype.base64Slice = function base64Slice(offset, length) {
  if (offset === 0 && length === this.length) {
    return encode(this);
  } else {
    return encode(this.slice(offset, length));
  }
};
Buffer2.prototype.base64Write = function base64Write(string, offset, length) {
  return blitBuffer(base64ToBytes(string), this, offset, length);
};
Buffer2.prototype.base64urlSlice = function base64urlSlice(offset, length) {
  if (offset === 0 && length === this.length) {
    return encode2(this);
  } else {
    return encode2(this.slice(offset, length));
  }
};
Buffer2.prototype.base64urlWrite = function base64urlWrite(string, offset, length) {
  return blitBuffer(base64UrlToBytes(string), this, offset, length);
};
Buffer2.prototype.hexWrite = function hexWrite(string, offset, length) {
  return blitBuffer(
    hexToBytes(string, this.length - offset),
    this,
    offset,
    length
  );
};
Buffer2.prototype.hexSlice = function hexSlice2(string, offset, length) {
  return _hexSlice(this, string, offset, length);
};
Buffer2.prototype.latin1Slice = function latin1Slice(string, offset, length) {
  return _latin1Slice(this, string, offset, length);
};
Buffer2.prototype.latin1Write = function latin1Write(string, offset, length) {
  return blitBuffer(asciiToBytes(string), this, offset, length);
};
Buffer2.prototype.ucs2Slice = function ucs2Slice(offset, length) {
  if (offset === 0 && length === this.length) {
    return bytesToUtf16le(this);
  } else {
    return bytesToUtf16le(this.slice(offset, length));
  }
};
Buffer2.prototype.ucs2Write = function ucs2Write(string, offset, length) {
  return blitBuffer(
    utf16leToBytes(string, this.length - offset),
    this,
    offset,
    length
  );
};
Buffer2.prototype.utf8Slice = function utf8Slice(string, offset, length) {
  return _utf8Slice(this, string, offset, length);
};
Buffer2.prototype.utf8Write = function utf8Write(string, offset, length) {
  return blitBuffer(
    utf8ToBytes(string, this.length - offset),
    this,
    offset,
    length
  );
};
Buffer2.prototype.write = function write(string, offset, length, encoding) {
  if (offset === void 0) {
    return this.utf8Write(string, 0, this.length);
  }
  if (length === void 0 && typeof offset === "string") {
    encoding = offset;
    length = this.length;
    offset = 0;
  } else {
    validateOffset(offset, "offset", 0, this.length);
    const remaining = this.length - offset;
    if (length === void 0) {
      length = remaining;
    } else if (typeof length === "string") {
      encoding = length;
      length = remaining;
    } else {
      validateOffset(length, "length", 0, this.length);
      if (length > remaining) {
        length = remaining;
      }
    }
  }
  if (!encoding) {
    return this.utf8Write(string, offset, length);
  }
  const ops = getEncodingOps(encoding);
  if (ops === void 0) {
    throw new codes.ERR_UNKNOWN_ENCODING(encoding);
  }
  return ops.write(this, string, offset, length);
};
Buffer2.prototype.toJSON = function toJSON() {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function fromArrayBuffer(obj, byteOffset, length) {
  if (byteOffset === void 0) {
    byteOffset = 0;
  } else {
    byteOffset = +byteOffset;
    if (Number.isNaN(byteOffset)) {
      byteOffset = 0;
    }
  }
  const maxLength = obj.byteLength - byteOffset;
  if (maxLength < 0) {
    throw new codes.ERR_BUFFER_OUT_OF_BOUNDS("offset");
  }
  if (length === void 0) {
    length = maxLength;
  } else {
    length = +length;
    if (length > 0) {
      if (length > maxLength) {
        throw new codes.ERR_BUFFER_OUT_OF_BOUNDS("length");
      }
    } else {
      length = 0;
    }
  }
  const buffer = new Uint8Array(obj, byteOffset, length);
  Object.setPrototypeOf(buffer, Buffer2.prototype);
  return buffer;
}
var decoder = new TextDecoder();
function _utf8Slice(buf, start, end) {
  return decoder.decode(buf.slice(start, end));
}
function _latin1Slice(buf, start, end) {
  let ret = "";
  end = Math.min(buf.length, end);
  for (let i7 = start; i7 < end; ++i7) {
    ret += String.fromCharCode(buf[i7]);
  }
  return ret;
}
function _hexSlice(buf, start, end) {
  const len = buf.length;
  if (!start || start < 0) {
    start = 0;
  }
  if (!end || end < 0 || end > len) {
    end = len;
  }
  let out = "";
  for (let i7 = start; i7 < end; ++i7) {
    out += hexSliceLookupTable[buf[i7]];
  }
  return out;
}
Buffer2.prototype.slice = function slice(start, end) {
  const len = this.length;
  start = ~~start;
  end = end === void 0 ? len : ~~end;
  if (start < 0) {
    start += len;
    if (start < 0) {
      start = 0;
    }
  } else if (start > len) {
    start = len;
  }
  if (end < 0) {
    end += len;
    if (end < 0) {
      end = 0;
    }
  } else if (end > len) {
    end = len;
  }
  if (end < start) {
    end = start;
  }
  const newBuf = this.subarray(start, end);
  Object.setPrototypeOf(newBuf, Buffer2.prototype);
  return newBuf;
};
Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2) {
  if (offset === void 0) {
    throw new codes.ERR_INVALID_ARG_TYPE("offset", "number", offset);
  }
  if (byteLength2 === 6) {
    return readUInt48LE(this, offset);
  }
  if (byteLength2 === 5) {
    return readUInt40LE(this, offset);
  }
  if (byteLength2 === 3) {
    return readUInt24LE(this, offset);
  }
  if (byteLength2 === 4) {
    return this.readUInt32LE(offset);
  }
  if (byteLength2 === 2) {
    return this.readUInt16LE(offset);
  }
  if (byteLength2 === 1) {
    return this.readUInt8(offset);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2) {
  if (offset === void 0) {
    throw new codes.ERR_INVALID_ARG_TYPE("offset", "number", offset);
  }
  if (byteLength2 === 6) {
    return readUInt48BE(this, offset);
  }
  if (byteLength2 === 5) {
    return readUInt40BE(this, offset);
  }
  if (byteLength2 === 3) {
    return readUInt24BE(this, offset);
  }
  if (byteLength2 === 4) {
    return this.readUInt32BE(offset);
  }
  if (byteLength2 === 2) {
    return this.readUInt16BE(offset);
  }
  if (byteLength2 === 1) {
    return this.readUInt8(offset);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset = 0) {
  validateNumber(offset, "offset");
  const val = this[offset];
  if (val === void 0) {
    boundsError(offset, this.length - 1);
  }
  return val;
};
Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = readUInt16BE;
Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 1];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 2);
  }
  return first + last * 2 ** 8;
};
Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE2(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 3];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 4);
  }
  return first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
};
Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = readUInt32BE;
Buffer2.prototype.readBigUint64LE = Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(
  function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi2 = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi2) << BigInt(32));
  }
);
Buffer2.prototype.readBigUint64BE = Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(
  function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const hi2 = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
    return (BigInt(hi2) << BigInt(32)) + BigInt(lo);
  }
);
Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2) {
  if (offset === void 0) {
    throw new codes.ERR_INVALID_ARG_TYPE("offset", "number", offset);
  }
  if (byteLength2 === 6) {
    return readInt48LE(this, offset);
  }
  if (byteLength2 === 5) {
    return readInt40LE(this, offset);
  }
  if (byteLength2 === 3) {
    return readInt24LE(this, offset);
  }
  if (byteLength2 === 4) {
    return this.readInt32LE(offset);
  }
  if (byteLength2 === 2) {
    return this.readInt16LE(offset);
  }
  if (byteLength2 === 1) {
    return this.readInt8(offset);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2) {
  if (offset === void 0) {
    throw new codes.ERR_INVALID_ARG_TYPE("offset", "number", offset);
  }
  if (byteLength2 === 6) {
    return readInt48BE(this, offset);
  }
  if (byteLength2 === 5) {
    return readInt40BE(this, offset);
  }
  if (byteLength2 === 3) {
    return readInt24BE(this, offset);
  }
  if (byteLength2 === 4) {
    return this.readInt32BE(offset);
  }
  if (byteLength2 === 2) {
    return this.readInt16BE(offset);
  }
  if (byteLength2 === 1) {
    return this.readInt8(offset);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.readInt8 = function readInt8(offset = 0) {
  validateNumber(offset, "offset");
  const val = this[offset];
  if (val === void 0) {
    boundsError(offset, this.length - 1);
  }
  return val | (val & 2 ** 7) * 33554430;
};
Buffer2.prototype.readInt16LE = function readInt16LE(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 1];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 2);
  }
  const val = first + last * 2 ** 8;
  return val | (val & 2 ** 15) * 131070;
};
Buffer2.prototype.readInt16BE = function readInt16BE(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 1];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 2);
  }
  const val = first * 2 ** 8 + last;
  return val | (val & 2 ** 15) * 131070;
};
Buffer2.prototype.readInt32LE = function readInt32LE(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 3];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 4);
  }
  return first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + (last << 24);
};
Buffer2.prototype.readInt32BE = function readInt32BE(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 3];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 4);
  }
  return (first << 24) + // Overflow
  this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
};
Buffer2.prototype.readBigInt64LE = defineBigIntMethod(
  function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
    return (BigInt(val) << BigInt(32)) + BigInt(
      first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24
    );
  }
);
Buffer2.prototype.readBigInt64BE = defineBigIntMethod(
  function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === void 0 || last === void 0) {
      boundsError(offset, this.length - 8);
    }
    const val = (first << 24) + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(
      this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last
    );
  }
);
Buffer2.prototype.readFloatLE = function readFloatLE(offset) {
  return bigEndian ? readFloatBackwards(this, offset) : readFloatForwards(this, offset);
};
Buffer2.prototype.readFloatBE = function readFloatBE(offset) {
  return bigEndian ? readFloatForwards(this, offset) : readFloatBackwards(this, offset);
};
Buffer2.prototype.readDoubleLE = function readDoubleLE(offset) {
  return bigEndian ? readDoubleBackwards(this, offset) : readDoubleForwards(this, offset);
};
Buffer2.prototype.readDoubleBE = function readDoubleBE(offset) {
  return bigEndian ? readDoubleForwards(this, offset) : readDoubleBackwards(this, offset);
};
Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2) {
  if (byteLength2 === 6) {
    return writeU_Int48LE(this, value, offset, 0, 281474976710655);
  }
  if (byteLength2 === 5) {
    return writeU_Int40LE(this, value, offset, 0, 1099511627775);
  }
  if (byteLength2 === 3) {
    return writeU_Int24LE(this, value, offset, 0, 16777215);
  }
  if (byteLength2 === 4) {
    return writeU_Int32LE(this, value, offset, 0, 4294967295);
  }
  if (byteLength2 === 2) {
    return writeU_Int16LE(this, value, offset, 0, 65535);
  }
  if (byteLength2 === 1) {
    return writeU_Int8(this, value, offset, 0, 255);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2) {
  if (byteLength2 === 6) {
    return writeU_Int48BE(this, value, offset, 0, 281474976710655);
  }
  if (byteLength2 === 5) {
    return writeU_Int40BE(this, value, offset, 0, 1099511627775);
  }
  if (byteLength2 === 3) {
    return writeU_Int24BE(this, value, offset, 0, 16777215);
  }
  if (byteLength2 === 4) {
    return writeU_Int32BE(this, value, offset, 0, 4294967295);
  }
  if (byteLength2 === 2) {
    return writeU_Int16BE(this, value, offset, 0, 65535);
  }
  if (byteLength2 === 1) {
    return writeU_Int8(this, value, offset, 0, 255);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset = 0) {
  return writeU_Int8(this, value, offset, 0, 255);
};
Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset = 0) {
  return writeU_Int16LE(this, value, offset, 0, 65535);
};
Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset = 0) {
  return writeU_Int16BE(this, value, offset, 0, 65535);
};
Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE2(value, offset = 0) {
  return _writeUInt32LE(this, value, offset, 0, 4294967295);
};
Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset = 0) {
  return _writeUInt32BE(this, value, offset, 0, 4294967295);
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  let lo = Number(value & BigInt(4294967295));
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  lo = lo >> 8;
  buf[offset++] = lo;
  let hi2 = Number(value >> BigInt(32) & BigInt(4294967295));
  buf[offset++] = hi2;
  hi2 = hi2 >> 8;
  buf[offset++] = hi2;
  hi2 = hi2 >> 8;
  buf[offset++] = hi2;
  hi2 = hi2 >> 8;
  buf[offset++] = hi2;
  return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7);
  let lo = Number(value & BigInt(4294967295));
  buf[offset + 7] = lo;
  lo = lo >> 8;
  buf[offset + 6] = lo;
  lo = lo >> 8;
  buf[offset + 5] = lo;
  lo = lo >> 8;
  buf[offset + 4] = lo;
  let hi2 = Number(value >> BigInt(32) & BigInt(4294967295));
  buf[offset + 3] = hi2;
  hi2 = hi2 >> 8;
  buf[offset + 2] = hi2;
  hi2 = hi2 >> 8;
  buf[offset + 1] = hi2;
  hi2 = hi2 >> 8;
  buf[offset] = hi2;
  return offset + 8;
}
Buffer2.prototype.writeBigUint64LE = Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(
  function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(
      this,
      value,
      offset,
      BigInt(0),
      BigInt("0xffffffffffffffff")
    );
  }
);
Buffer2.prototype.writeBigUint64BE = Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(
  function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(
      this,
      value,
      offset,
      BigInt(0),
      BigInt("0xffffffffffffffff")
    );
  }
);
Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2) {
  if (byteLength2 === 6) {
    return writeU_Int48LE(
      this,
      value,
      offset,
      -140737488355328,
      140737488355327
    );
  }
  if (byteLength2 === 5) {
    return writeU_Int40LE(this, value, offset, -549755813888, 549755813887);
  }
  if (byteLength2 === 3) {
    return writeU_Int24LE(this, value, offset, -8388608, 8388607);
  }
  if (byteLength2 === 4) {
    return writeU_Int32LE(this, value, offset, -2147483648, 2147483647);
  }
  if (byteLength2 === 2) {
    return writeU_Int16LE(this, value, offset, -32768, 32767);
  }
  if (byteLength2 === 1) {
    return writeU_Int8(this, value, offset, -128, 127);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2) {
  if (byteLength2 === 6) {
    return writeU_Int48BE(
      this,
      value,
      offset,
      -140737488355328,
      140737488355327
    );
  }
  if (byteLength2 === 5) {
    return writeU_Int40BE(this, value, offset, -549755813888, 549755813887);
  }
  if (byteLength2 === 3) {
    return writeU_Int24BE(this, value, offset, -8388608, 8388607);
  }
  if (byteLength2 === 4) {
    return writeU_Int32BE(this, value, offset, -2147483648, 2147483647);
  }
  if (byteLength2 === 2) {
    return writeU_Int16BE(this, value, offset, -32768, 32767);
  }
  if (byteLength2 === 1) {
    return writeU_Int8(this, value, offset, -128, 127);
  }
  boundsError(byteLength2, 6, "byteLength");
};
Buffer2.prototype.writeInt8 = function writeInt8(value, offset = 0) {
  return writeU_Int8(this, value, offset, -128, 127);
};
Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset = 0) {
  return writeU_Int16LE(this, value, offset, -32768, 32767);
};
Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset = 0) {
  return writeU_Int16BE(this, value, offset, -32768, 32767);
};
Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset = 0) {
  return writeU_Int32LE(this, value, offset, -2147483648, 2147483647);
};
Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset = 0) {
  return writeU_Int32BE(this, value, offset, -2147483648, 2147483647);
};
Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(
  function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(
      this,
      value,
      offset,
      -BigInt("0x8000000000000000"),
      BigInt("0x7fffffffffffffff")
    );
  }
);
Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(
  function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(
      this,
      value,
      offset,
      -BigInt("0x8000000000000000"),
      BigInt("0x7fffffffffffffff")
    );
  }
);
Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset) {
  return bigEndian ? writeFloatBackwards(this, value, offset) : writeFloatForwards(this, value, offset);
};
Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset) {
  return bigEndian ? writeFloatForwards(this, value, offset) : writeFloatBackwards(this, value, offset);
};
Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset) {
  return bigEndian ? writeDoubleBackwards(this, value, offset) : writeDoubleForwards(this, value, offset);
};
Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset) {
  return bigEndian ? writeDoubleForwards(this, value, offset) : writeDoubleBackwards(this, value, offset);
};
Buffer2.prototype.copy = function copy(target, targetStart, sourceStart, sourceEnd) {
  if (!isUint8Array(this)) {
    throw new codes.ERR_INVALID_ARG_TYPE(
      "source",
      ["Buffer", "Uint8Array"],
      this
    );
  }
  if (!isUint8Array(target)) {
    throw new codes.ERR_INVALID_ARG_TYPE(
      "target",
      ["Buffer", "Uint8Array"],
      target
    );
  }
  if (targetStart === void 0) {
    targetStart = 0;
  } else {
    targetStart = toInteger(targetStart, 0);
    if (targetStart < 0) {
      throw new codes.ERR_OUT_OF_RANGE("targetStart", ">= 0", targetStart);
    }
  }
  if (sourceStart === void 0) {
    sourceStart = 0;
  } else {
    sourceStart = toInteger(sourceStart, 0);
    if (sourceStart < 0) {
      throw new codes.ERR_OUT_OF_RANGE("sourceStart", ">= 0", sourceStart);
    }
    if (sourceStart >= MAX_UINT32) {
      throw new codes.ERR_OUT_OF_RANGE(
        "sourceStart",
        `< ${MAX_UINT32}`,
        sourceStart
      );
    }
  }
  if (sourceEnd === void 0) {
    sourceEnd = this.length;
  } else {
    sourceEnd = toInteger(sourceEnd, 0);
    if (sourceEnd < 0) {
      throw new codes.ERR_OUT_OF_RANGE("sourceEnd", ">= 0", sourceEnd);
    }
    if (sourceEnd >= MAX_UINT32) {
      throw new codes.ERR_OUT_OF_RANGE(
        "sourceEnd",
        `< ${MAX_UINT32}`,
        sourceEnd
      );
    }
  }
  if (targetStart >= target.length) {
    return 0;
  }
  if (sourceEnd > 0 && sourceEnd < sourceStart) {
    sourceEnd = sourceStart;
  }
  if (sourceEnd === sourceStart) {
    return 0;
  }
  if (target.length === 0 || this.length === 0) {
    return 0;
  }
  if (sourceEnd > this.length) {
    sourceEnd = this.length;
  }
  if (target.length - targetStart < sourceEnd - sourceStart) {
    sourceEnd = target.length - targetStart + sourceStart;
  }
  const len = sourceEnd - sourceStart;
  if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
    this.copyWithin(targetStart, sourceStart, sourceEnd);
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(sourceStart, sourceEnd),
      targetStart
    );
  }
  return len;
};
Buffer2.prototype.fill = function fill(val, start, end, encoding) {
  if (typeof val === "string") {
    if (typeof start === "string") {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === "string") {
      encoding = end;
      end = this.length;
    }
    if (encoding !== void 0 && typeof encoding !== "string") {
      throw new TypeError("encoding must be a string");
    }
    if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
      throw new TypeError("Unknown encoding: " + encoding);
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0);
      if (encoding === "utf8" && code < 128 || encoding === "latin1") {
        val = code;
      }
    }
  } else if (typeof val === "number") {
    val = val & 255;
  } else if (typeof val === "boolean") {
    val = Number(val);
  }
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError("Out of range index");
  }
  if (end <= start) {
    return this;
  }
  start = start >>> 0;
  end = end === void 0 ? this.length : end >>> 0;
  if (!val) {
    val = 0;
  }
  let i7;
  if (typeof val === "number") {
    for (i7 = start; i7 < end; ++i7) {
      this[i7] = val;
    }
  } else {
    const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
    const len = bytes.length;
    if (len === 0) {
      throw new codes.ERR_INVALID_ARG_VALUE(
        "value",
        val
      );
    }
    for (i7 = 0; i7 < end - start; ++i7) {
      this[i7 + start] = bytes[i7 % len];
    }
  }
  return this;
};
function checkBounds(buf, offset, byteLength2) {
  validateNumber(offset, "offset");
  if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
    boundsError(offset, buf.length - (byteLength2 + 1));
  }
}
function checkIntBI(value, min, max, buf, offset, byteLength2) {
  if (value > max || value < min) {
    const n12 = typeof min === "bigint" ? "n" : "";
    let range;
    if (byteLength2 > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n12} and < 2${n12} ** ${(byteLength2 + 1) * 8}${n12}`;
      } else {
        range = `>= -(2${n12} ** ${(byteLength2 + 1) * 8 - 1}${n12}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n12}`;
      }
    } else {
      range = `>= ${min}${n12} and <= ${max}${n12}`;
    }
    throw new codes.ERR_OUT_OF_RANGE("value", range, value);
  }
  checkBounds(buf, offset, byteLength2);
}
function utf8ToBytes(string, units) {
  units = units || Infinity;
  let codePoint;
  const length = string.length;
  let leadSurrogate = null;
  const bytes = [];
  for (let i7 = 0; i7 < length; ++i7) {
    codePoint = string.charCodeAt(i7);
    if (codePoint > 55295 && codePoint < 57344) {
      if (!leadSurrogate) {
        if (codePoint > 56319) {
          if ((units -= 3) > -1) {
            bytes.push(239, 191, 189);
          }
          continue;
        } else if (i7 + 1 === length) {
          if ((units -= 3) > -1) {
            bytes.push(239, 191, 189);
          }
          continue;
        }
        leadSurrogate = codePoint;
        continue;
      }
      if (codePoint < 56320) {
        if ((units -= 3) > -1) {
          bytes.push(239, 191, 189);
        }
        leadSurrogate = codePoint;
        continue;
      }
      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
    } else if (leadSurrogate) {
      if ((units -= 3) > -1) {
        bytes.push(239, 191, 189);
      }
    }
    leadSurrogate = null;
    if (codePoint < 128) {
      if ((units -= 1) < 0) {
        break;
      }
      bytes.push(codePoint);
    } else if (codePoint < 2048) {
      if ((units -= 2) < 0) {
        break;
      }
      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
    } else if (codePoint < 65536) {
      if ((units -= 3) < 0) {
        break;
      }
      bytes.push(
        codePoint >> 12 | 224,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else if (codePoint < 1114112) {
      if ((units -= 4) < 0) {
        break;
      }
      bytes.push(
        codePoint >> 18 | 240,
        codePoint >> 12 & 63 | 128,
        codePoint >> 6 & 63 | 128,
        codePoint & 63 | 128
      );
    } else {
      throw new Error("Invalid code point");
    }
  }
  return bytes;
}
function blitBuffer(src, dst, offset, byteLength2) {
  let i7;
  const length = byteLength2 === void 0 ? src.length : byteLength2;
  for (i7 = 0; i7 < length; ++i7) {
    if (i7 + offset >= dst.length || i7 >= src.length) {
      break;
    }
    dst[i7 + offset] = src[i7];
  }
  return i7;
}
function isInstance(obj, type) {
  return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
var hexSliceLookupTable = function() {
  const alphabet = "0123456789abcdef";
  const table = new Array(256);
  for (let i7 = 0; i7 < 16; ++i7) {
    const i16 = i7 * 16;
    for (let j3 = 0; j3 < 16; ++j3) {
      table[i16 + j3] = alphabet[i7] + alphabet[j3];
    }
  }
  return table;
}();
function defineBigIntMethod(fn) {
  return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
  throw new Error("BigInt not supported");
}
var atob2 = globalThis.atob;
var Blob = globalThis.Blob;
var btoa = globalThis.btoa;
function readUInt48LE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 5];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 6);
  }
  return first + buf[++offset] * 2 ** 8 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 24 + (buf[++offset] + last * 2 ** 8) * 2 ** 32;
}
function readUInt40LE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 4];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 5);
  }
  return first + buf[++offset] * 2 ** 8 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 24 + last * 2 ** 32;
}
function readUInt24LE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 2];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 3);
  }
  return first + buf[++offset] * 2 ** 8 + last * 2 ** 16;
}
function readUInt48BE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 5];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 6);
  }
  return (first * 2 ** 8 + buf[++offset]) * 2 ** 32 + buf[++offset] * 2 ** 24 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 8 + last;
}
function readUInt40BE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 4];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 5);
  }
  return first * 2 ** 32 + buf[++offset] * 2 ** 24 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 8 + last;
}
function readUInt24BE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 2];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 3);
  }
  return first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;
}
function readUInt16BE(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 1];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 2);
  }
  return first * 2 ** 8 + last;
}
function readUInt32BE(offset = 0) {
  validateNumber(offset, "offset");
  const first = this[offset];
  const last = this[offset + 3];
  if (first === void 0 || last === void 0) {
    boundsError(offset, this.length - 4);
  }
  return first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
}
function readDoubleBackwards(buffer, offset = 0) {
  validateNumber(offset, "offset");
  const first = buffer[offset];
  const last = buffer[offset + 7];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buffer.length - 8);
  }
  uInt8Float64Array[7] = first;
  uInt8Float64Array[6] = buffer[++offset];
  uInt8Float64Array[5] = buffer[++offset];
  uInt8Float64Array[4] = buffer[++offset];
  uInt8Float64Array[3] = buffer[++offset];
  uInt8Float64Array[2] = buffer[++offset];
  uInt8Float64Array[1] = buffer[++offset];
  uInt8Float64Array[0] = last;
  return float64Array[0];
}
function readDoubleForwards(buffer, offset = 0) {
  validateNumber(offset, "offset");
  const first = buffer[offset];
  const last = buffer[offset + 7];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buffer.length - 8);
  }
  uInt8Float64Array[0] = first;
  uInt8Float64Array[1] = buffer[++offset];
  uInt8Float64Array[2] = buffer[++offset];
  uInt8Float64Array[3] = buffer[++offset];
  uInt8Float64Array[4] = buffer[++offset];
  uInt8Float64Array[5] = buffer[++offset];
  uInt8Float64Array[6] = buffer[++offset];
  uInt8Float64Array[7] = last;
  return float64Array[0];
}
function writeDoubleForwards(buffer, val, offset = 0) {
  val = +val;
  checkBounds(buffer, offset, 7);
  float64Array[0] = val;
  buffer[offset++] = uInt8Float64Array[0];
  buffer[offset++] = uInt8Float64Array[1];
  buffer[offset++] = uInt8Float64Array[2];
  buffer[offset++] = uInt8Float64Array[3];
  buffer[offset++] = uInt8Float64Array[4];
  buffer[offset++] = uInt8Float64Array[5];
  buffer[offset++] = uInt8Float64Array[6];
  buffer[offset++] = uInt8Float64Array[7];
  return offset;
}
function writeDoubleBackwards(buffer, val, offset = 0) {
  val = +val;
  checkBounds(buffer, offset, 7);
  float64Array[0] = val;
  buffer[offset++] = uInt8Float64Array[7];
  buffer[offset++] = uInt8Float64Array[6];
  buffer[offset++] = uInt8Float64Array[5];
  buffer[offset++] = uInt8Float64Array[4];
  buffer[offset++] = uInt8Float64Array[3];
  buffer[offset++] = uInt8Float64Array[2];
  buffer[offset++] = uInt8Float64Array[1];
  buffer[offset++] = uInt8Float64Array[0];
  return offset;
}
function readFloatBackwards(buffer, offset = 0) {
  validateNumber(offset, "offset");
  const first = buffer[offset];
  const last = buffer[offset + 3];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buffer.length - 4);
  }
  uInt8Float32Array[3] = first;
  uInt8Float32Array[2] = buffer[++offset];
  uInt8Float32Array[1] = buffer[++offset];
  uInt8Float32Array[0] = last;
  return float32Array[0];
}
function readFloatForwards(buffer, offset = 0) {
  validateNumber(offset, "offset");
  const first = buffer[offset];
  const last = buffer[offset + 3];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buffer.length - 4);
  }
  uInt8Float32Array[0] = first;
  uInt8Float32Array[1] = buffer[++offset];
  uInt8Float32Array[2] = buffer[++offset];
  uInt8Float32Array[3] = last;
  return float32Array[0];
}
function writeFloatForwards(buffer, val, offset = 0) {
  val = +val;
  checkBounds(buffer, offset, 3);
  float32Array[0] = val;
  buffer[offset++] = uInt8Float32Array[0];
  buffer[offset++] = uInt8Float32Array[1];
  buffer[offset++] = uInt8Float32Array[2];
  buffer[offset++] = uInt8Float32Array[3];
  return offset;
}
function writeFloatBackwards(buffer, val, offset = 0) {
  val = +val;
  checkBounds(buffer, offset, 3);
  float32Array[0] = val;
  buffer[offset++] = uInt8Float32Array[3];
  buffer[offset++] = uInt8Float32Array[2];
  buffer[offset++] = uInt8Float32Array[1];
  buffer[offset++] = uInt8Float32Array[0];
  return offset;
}
function readInt24LE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 2];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 3);
  }
  const val = first + buf[++offset] * 2 ** 8 + last * 2 ** 16;
  return val | (val & 2 ** 23) * 510;
}
function readInt40LE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 4];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 5);
  }
  return (last | (last & 2 ** 7) * 33554430) * 2 ** 32 + first + buf[++offset] * 2 ** 8 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 24;
}
function readInt48LE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 5];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 6);
  }
  const val = buf[offset + 4] + last * 2 ** 8;
  return (val | (val & 2 ** 15) * 131070) * 2 ** 32 + first + buf[++offset] * 2 ** 8 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 24;
}
function readInt24BE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 2];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 3);
  }
  const val = first * 2 ** 16 + buf[++offset] * 2 ** 8 + last;
  return val | (val & 2 ** 23) * 510;
}
function readInt48BE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 5];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 6);
  }
  const val = buf[++offset] + first * 2 ** 8;
  return (val | (val & 2 ** 15) * 131070) * 2 ** 32 + buf[++offset] * 2 ** 24 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 8 + last;
}
function readInt40BE(buf, offset = 0) {
  validateNumber(offset, "offset");
  const first = buf[offset];
  const last = buf[offset + 4];
  if (first === void 0 || last === void 0) {
    boundsError(offset, buf.length - 5);
  }
  return (first | (first & 2 ** 7) * 33554430) * 2 ** 32 + buf[++offset] * 2 ** 24 + buf[++offset] * 2 ** 16 + buf[++offset] * 2 ** 8 + last;
}
function byteLengthUtf8(str) {
  return utf8Encoder.encode(str).length;
}
function base64ByteLength(str, bytes) {
  if (str.charCodeAt(bytes - 1) === 61) {
    bytes--;
  }
  if (bytes > 1 && str.charCodeAt(bytes - 1) === 61) {
    bytes--;
  }
  return bytes * 3 >>> 2;
}
var encodingsMap = /* @__PURE__ */ Object.create(null);
for (let i7 = 0; i7 < encodings.length; ++i7) {
  encodingsMap[encodings[i7]] = i7;
}
var encodingOps = {
  ascii: {
    byteLength: (string) => string.length,
    encoding: "ascii",
    encodingVal: encodingsMap.ascii,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      asciiToBytes(val),
      byteOffset,
      encodingsMap.ascii,
      dir
    ),
    slice: (buf, start, end) => buf.asciiSlice(start, end),
    write: (buf, string, offset, len) => buf.asciiWrite(string, offset, len)
  },
  base64: {
    byteLength: (string) => base64ByteLength(string, string.length),
    encoding: "base64",
    encodingVal: encodingsMap.base64,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      base64ToBytes(val),
      byteOffset,
      encodingsMap.base64,
      dir
    ),
    slice: (buf, start, end) => buf.base64Slice(start, end),
    write: (buf, string, offset, len) => buf.base64Write(string, offset, len)
  },
  base64url: {
    byteLength: (string) => base64ByteLength(string, string.length),
    encoding: "base64url",
    encodingVal: encodingsMap.base64url,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      base64UrlToBytes(val),
      byteOffset,
      encodingsMap.base64url,
      dir
    ),
    slice: (buf, start, end) => buf.base64urlSlice(start, end),
    write: (buf, string, offset, len) => buf.base64urlWrite(string, offset, len)
  },
  hex: {
    byteLength: (string) => string.length >>> 1,
    encoding: "hex",
    encodingVal: encodingsMap.hex,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      hexToBytes(val),
      byteOffset,
      encodingsMap.hex,
      dir
    ),
    slice: (buf, start, end) => buf.hexSlice(start, end),
    write: (buf, string, offset, len) => buf.hexWrite(string, offset, len)
  },
  latin1: {
    byteLength: (string) => string.length,
    encoding: "latin1",
    encodingVal: encodingsMap.latin1,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      asciiToBytes(val),
      byteOffset,
      encodingsMap.latin1,
      dir
    ),
    slice: (buf, start, end) => buf.latin1Slice(start, end),
    write: (buf, string, offset, len) => buf.latin1Write(string, offset, len)
  },
  ucs2: {
    byteLength: (string) => string.length * 2,
    encoding: "ucs2",
    encodingVal: encodingsMap.utf16le,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      utf16leToBytes(val),
      byteOffset,
      encodingsMap.utf16le,
      dir
    ),
    slice: (buf, start, end) => buf.ucs2Slice(start, end),
    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len)
  },
  utf8: {
    byteLength: byteLengthUtf8,
    encoding: "utf8",
    encodingVal: encodingsMap.utf8,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      utf8Encoder.encode(val),
      byteOffset,
      encodingsMap.utf8,
      dir
    ),
    slice: (buf, start, end) => buf.utf8Slice(start, end),
    write: (buf, string, offset, len) => buf.utf8Write(string, offset, len)
  },
  utf16le: {
    byteLength: (string) => string.length * 2,
    encoding: "utf16le",
    encodingVal: encodingsMap.utf16le,
    indexOf: (buf, val, byteOffset, dir) => indexOfBuffer(
      buf,
      utf16leToBytes(val),
      byteOffset,
      encodingsMap.utf16le,
      dir
    ),
    slice: (buf, start, end) => buf.ucs2Slice(start, end),
    write: (buf, string, offset, len) => buf.ucs2Write(string, offset, len)
  }
};
function getEncodingOps(encoding) {
  encoding = String(encoding).toLowerCase();
  switch (encoding.length) {
    case 4:
      if (encoding === "utf8") return encodingOps.utf8;
      if (encoding === "ucs2") return encodingOps.ucs2;
      break;
    case 5:
      if (encoding === "utf-8") return encodingOps.utf8;
      if (encoding === "ascii") return encodingOps.ascii;
      if (encoding === "ucs-2") return encodingOps.ucs2;
      break;
    case 7:
      if (encoding === "utf16le") {
        return encodingOps.utf16le;
      }
      break;
    case 8:
      if (encoding === "utf-16le") {
        return encodingOps.utf16le;
      }
      break;
    // deno-lint-ignore no-fallthrough
    case 6:
      if (encoding === "latin1" || encoding === "binary") {
        return encodingOps.latin1;
      }
      if (encoding === "base64") return encodingOps.base64;
    case 3:
      if (encoding === "hex") {
        return encodingOps.hex;
      }
      break;
    case 9:
      if (encoding === "base64url") {
        return encodingOps.base64url;
      }
      break;
  }
}
function _copyActual(source, target, targetStart, sourceStart, sourceEnd) {
  if (sourceEnd - sourceStart > target.length - targetStart) {
    sourceEnd = sourceStart + target.length - targetStart;
  }
  let nb = sourceEnd - sourceStart;
  const sourceLen = source.length - sourceStart;
  if (nb > sourceLen) {
    nb = sourceLen;
  }
  if (sourceStart !== 0 || sourceEnd < source.length) {
    source = new Uint8Array(source.buffer, source.byteOffset + sourceStart, nb);
  }
  target.set(source, targetStart);
  return nb;
}
function boundsError(value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type);
    throw new codes.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
  }
  if (length < 0) {
    throw new codes.ERR_BUFFER_OUT_OF_BOUNDS();
  }
  throw new codes.ERR_OUT_OF_RANGE(
    type || "offset",
    `>= ${type ? 1 : 0} and <= ${length}`,
    value
  );
}
function validateNumber(value, name) {
  if (typeof value !== "number") {
    throw new codes.ERR_INVALID_ARG_TYPE(name, "number", value);
  }
}
function checkInt(value, min, max, buf, offset, byteLength2) {
  if (value > max || value < min) {
    const n12 = typeof min === "bigint" ? "n" : "";
    let range;
    if (byteLength2 > 3) {
      if (min === 0 || min === 0n) {
        range = `>= 0${n12} and < 2${n12} ** ${(byteLength2 + 1) * 8}${n12}`;
      } else {
        range = `>= -(2${n12} ** ${(byteLength2 + 1) * 8 - 1}${n12}) and < 2${n12} ** ${(byteLength2 + 1) * 8 - 1}${n12}`;
      }
    } else {
      range = `>= ${min}${n12} and <= ${max}${n12}`;
    }
    throw new codes.ERR_OUT_OF_RANGE("value", range, value);
  }
  checkBounds(buf, offset, byteLength2);
}
function toInteger(n12, defaultVal) {
  n12 = +n12;
  if (!Number.isNaN(n12) && n12 >= Number.MIN_SAFE_INTEGER && n12 <= Number.MAX_SAFE_INTEGER) {
    return n12 % 1 === 0 ? n12 : Math.floor(n12);
  }
  return defaultVal;
}
function writeU_Int8(buf, value, offset, min, max) {
  value = +value;
  validateNumber(offset, "offset");
  if (value > max || value < min) {
    throw new codes.ERR_OUT_OF_RANGE("value", `>= ${min} and <= ${max}`, value);
  }
  if (buf[offset] === void 0) {
    boundsError(offset, buf.length - 1);
  }
  buf[offset] = value;
  return offset + 1;
}
function writeU_Int16BE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 1);
  buf[offset++] = value >>> 8;
  buf[offset++] = value;
  return offset;
}
function _writeUInt32LE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 3);
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  return offset;
}
function writeU_Int16LE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 1);
  buf[offset++] = value;
  buf[offset++] = value >>> 8;
  return offset;
}
function _writeUInt32BE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 3);
  buf[offset + 3] = value;
  value = value >>> 8;
  buf[offset + 2] = value;
  value = value >>> 8;
  buf[offset + 1] = value;
  value = value >>> 8;
  buf[offset] = value;
  return offset + 4;
}
function writeU_Int48BE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 5);
  const newVal = Math.floor(value * 2 ** -32);
  buf[offset++] = newVal >>> 8;
  buf[offset++] = newVal;
  buf[offset + 3] = value;
  value = value >>> 8;
  buf[offset + 2] = value;
  value = value >>> 8;
  buf[offset + 1] = value;
  value = value >>> 8;
  buf[offset] = value;
  return offset + 4;
}
function writeU_Int40BE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 4);
  buf[offset++] = Math.floor(value * 2 ** -32);
  buf[offset + 3] = value;
  value = value >>> 8;
  buf[offset + 2] = value;
  value = value >>> 8;
  buf[offset + 1] = value;
  value = value >>> 8;
  buf[offset] = value;
  return offset + 4;
}
function writeU_Int32BE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 3);
  buf[offset + 3] = value;
  value = value >>> 8;
  buf[offset + 2] = value;
  value = value >>> 8;
  buf[offset + 1] = value;
  value = value >>> 8;
  buf[offset] = value;
  return offset + 4;
}
function writeU_Int24BE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 2);
  buf[offset + 2] = value;
  value = value >>> 8;
  buf[offset + 1] = value;
  value = value >>> 8;
  buf[offset] = value;
  return offset + 3;
}
function validateOffset(value, name, min = 0, max = Number.MAX_SAFE_INTEGER) {
  if (typeof value !== "number") {
    throw new codes.ERR_INVALID_ARG_TYPE(name, "number", value);
  }
  if (!Number.isInteger(value)) {
    throw new codes.ERR_OUT_OF_RANGE(name, "an integer", value);
  }
  if (value < min || value > max) {
    throw new codes.ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);
  }
}
function writeU_Int48LE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 5);
  const newVal = Math.floor(value * 2 ** -32);
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  buf[offset++] = newVal;
  buf[offset++] = newVal >>> 8;
  return offset;
}
function writeU_Int40LE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 4);
  const newVal = value;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  buf[offset++] = Math.floor(newVal * 2 ** -32);
  return offset;
}
function writeU_Int32LE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 3);
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  return offset;
}
function writeU_Int24LE(buf, value, offset, min, max) {
  value = +value;
  checkInt(value, min, max, buf, offset, 2);
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  value = value >>> 8;
  buf[offset++] = value;
  return offset;
}
var buffer_default2 = {
  atob: atob2,
  btoa,
  Blob,
  Buffer: Buffer2,
  constants,
  kMaxLength,
  kStringMaxLength,
  SlowBuffer
};

// https://deno.land/std@0.177.1/node/internal/readline/utils.mjs
var kEscape = "\x1B";
var kSubstringSearch = Symbol("kSubstringSearch");
function CSI(strings, ...args2) {
  let ret = `${kEscape}[`;
  for (let n12 = 0; n12 < strings.length; n12++) {
    ret += strings[n12];
    if (n12 < args2.length) {
      ret += args2[n12];
    }
  }
  return ret;
}
CSI.kEscape = kEscape;
CSI.kClearToLineBeginning = CSI`1K`;
CSI.kClearToLineEnd = CSI`0K`;
CSI.kClearLine = CSI`2K`;
CSI.kClearScreenDown = CSI`0J`;

// https://deno.land/std@0.177.1/node/internal/readline/callbacks.mjs
var {
  kClearLine,
  kClearScreenDown,
  kClearToLineBeginning,
  kClearToLineEnd
} = CSI;
function cursorTo(stream, x5, y4, callback) {
  if (callback !== void 0) {
    validateFunction(callback, "callback");
  }
  if (typeof y4 === "function") {
    callback = y4;
    y4 = void 0;
  }
  if (Number.isNaN(x5)) throw new ERR_INVALID_ARG_VALUE("x", x5);
  if (Number.isNaN(y4)) throw new ERR_INVALID_ARG_VALUE("y", y4);
  if (stream == null || typeof x5 !== "number" && typeof y4 !== "number") {
    if (typeof callback === "function") process.nextTick(callback, null);
    return true;
  }
  if (typeof x5 !== "number") throw new ERR_INVALID_CURSOR_POS();
  const data = typeof y4 !== "number" ? CSI`${x5 + 1}G` : CSI`${y4 + 1};${x5 + 1}H`;
  return stream.write(data, callback);
}
function moveCursor(stream, dx, dy, callback) {
  if (callback !== void 0) {
    validateFunction(callback, "callback");
  }
  if (stream == null || !(dx || dy)) {
    if (typeof callback === "function") process.nextTick(callback, null);
    return true;
  }
  let data = "";
  if (dx < 0) {
    data += CSI`${-dx}D`;
  } else if (dx > 0) {
    data += CSI`${dx}C`;
  }
  if (dy < 0) {
    data += CSI`${-dy}A`;
  } else if (dy > 0) {
    data += CSI`${dy}B`;
  }
  return stream.write(data, callback);
}
function clearLine(stream, dir, callback) {
  if (callback !== void 0) {
    validateFunction(callback, "callback");
  }
  if (stream === null || stream === void 0) {
    if (typeof callback === "function") process.nextTick(callback, null);
    return true;
  }
  const type = dir < 0 ? kClearToLineBeginning : dir > 0 ? kClearToLineEnd : kClearLine;
  return stream.write(type, callback);
}
function clearScreenDown(stream, callback) {
  if (callback !== void 0) {
    validateFunction(callback, "callback");
  }
  if (stream === null || stream === void 0) {
    if (typeof callback === "function") process.nextTick(callback, null);
    return true;
  }
  return stream.write(kClearScreenDown, callback);
}

// https://deno.land/std@0.177.1/node/_process/stdio.mjs
var stdio = {};

// https://deno.land/std@0.177.1/node/string_decoder.ts
var NotImplemented = /* @__PURE__ */ ((NotImplemented2) => {
  NotImplemented2[NotImplemented2["ascii"] = 0] = "ascii";
  NotImplemented2[NotImplemented2["latin1"] = 1] = "latin1";
  NotImplemented2[NotImplemented2["utf16le"] = 2] = "utf16le";
  return NotImplemented2;
})(NotImplemented || {});
function normalizeEncoding3(enc) {
  const encoding = normalizeEncoding(enc ?? null);
  if (encoding && encoding in NotImplemented) notImplemented(encoding);
  if (!encoding && typeof enc === "string" && enc.toLowerCase() !== "raw") {
    throw new Error(`Unknown encoding: ${enc}`);
  }
  return String(encoding);
}
function isBufferType(buf) {
  return buf instanceof ArrayBuffer && buf.BYTES_PER_ELEMENT;
}
function utf8CheckByte(byte) {
  if (byte <= 127) return 0;
  else if (byte >> 5 === 6) return 2;
  else if (byte >> 4 === 14) return 3;
  else if (byte >> 3 === 30) return 4;
  return byte >> 6 === 2 ? -1 : -2;
}
function utf8CheckIncomplete(self, buf, i7) {
  let j3 = buf.length - 1;
  if (j3 < i7) return 0;
  let nb = utf8CheckByte(buf[j3]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j3 < i7 || nb === -2) return 0;
  nb = utf8CheckByte(buf[j3]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j3 < i7 || nb === -2) return 0;
  nb = utf8CheckByte(buf[j3]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;
      else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}
function utf8CheckExtraBytes(self, buf) {
  if ((buf[0] & 192) !== 128) {
    self.lastNeed = 0;
    return "�";
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 192) !== 128) {
      self.lastNeed = 1;
      return "�";
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 192) !== 128) {
        self.lastNeed = 2;
        return "�";
      }
    }
  }
}
function utf8FillLastComplete(buf) {
  const p3 = this.lastTotal - this.lastNeed;
  const r14 = utf8CheckExtraBytes(this, buf);
  if (r14 !== void 0) return r14;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p3, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p3, 0, buf.length);
  this.lastNeed -= buf.length;
}
function utf8FillLastIncomplete(buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}
function utf8Text(buf, i7) {
  const total = utf8CheckIncomplete(this, buf, i7);
  if (!this.lastNeed) return buf.toString("utf8", i7);
  this.lastTotal = total;
  const end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString("utf8", i7, end);
}
function utf8End(buf) {
  const r14 = buf && buf.length ? this.write(buf) : "";
  if (this.lastNeed) return r14 + "�";
  return r14;
}
function utf8Write2(buf) {
  if (typeof buf === "string") {
    return buf;
  }
  if (buf.length === 0) return "";
  let r14;
  let i7;
  const normalizedBuffer = isBufferType(buf) ? buf : Buffer2.from(buf);
  if (this.lastNeed) {
    r14 = this.fillLast(normalizedBuffer);
    if (r14 === void 0) return "";
    i7 = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i7 = 0;
  }
  if (i7 < buf.length) {
    return r14 ? r14 + this.text(normalizedBuffer, i7) : this.text(normalizedBuffer, i7);
  }
  return r14 || "";
}
function base64Text(buf, i7) {
  const n12 = (buf.length - i7) % 3;
  if (n12 === 0) return buf.toString("base64", i7);
  this.lastNeed = 3 - n12;
  this.lastTotal = 3;
  if (n12 === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString("base64", i7, buf.length - n12);
}
function base64End(buf) {
  const r14 = buf && buf.length ? this.write(buf) : "";
  if (this.lastNeed) {
    return r14 + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
  }
  return r14;
}
function simpleWrite(buf) {
  if (typeof buf === "string") {
    return buf;
  }
  return buf.toString(this.encoding);
}
function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : "";
}
var StringDecoderBase = class {
  constructor(encoding, nb) {
    this.encoding = encoding;
    this.lastChar = Buffer2.allocUnsafe(nb);
  }
  lastChar;
  lastNeed = 0;
  lastTotal = 0;
};
var Base64Decoder = class extends StringDecoderBase {
  end = base64End;
  fillLast = utf8FillLastIncomplete;
  text = base64Text;
  write = utf8Write2;
  constructor(encoding) {
    super(normalizeEncoding3(encoding), 3);
  }
};
var GenericDecoder = class extends StringDecoderBase {
  end = simpleEnd;
  fillLast = void 0;
  text = utf8Text;
  write = simpleWrite;
  constructor(encoding) {
    super(normalizeEncoding3(encoding), 4);
  }
};
var Utf8Decoder = class extends StringDecoderBase {
  end = utf8End;
  fillLast = utf8FillLastComplete;
  text = utf8Text;
  write = utf8Write2;
  constructor(encoding) {
    super(normalizeEncoding3(encoding), 4);
  }
};
var StringDecoder = class {
  encoding;
  end;
  fillLast;
  lastChar;
  lastNeed;
  lastTotal;
  text;
  write;
  constructor(encoding) {
    const normalizedEncoding = normalizeEncoding3(encoding);
    let decoder2;
    switch (normalizedEncoding) {
      case "utf8":
        decoder2 = new Utf8Decoder(encoding);
        break;
      case "base64":
        decoder2 = new Base64Decoder(encoding);
        break;
      default:
        decoder2 = new GenericDecoder(encoding);
    }
    this.encoding = decoder2.encoding;
    this.end = decoder2.end;
    this.fillLast = decoder2.fillLast;
    this.lastChar = decoder2.lastChar;
    this.lastNeed = decoder2.lastNeed;
    this.lastTotal = decoder2.lastTotal;
    this.text = decoder2.text;
    this.write = decoder2.write;
  }
};
var PStringDecoder = new Proxy(StringDecoder, {
  apply(_target, thisArg, args2) {
    return Object.assign(thisArg, new StringDecoder(...args2));
  }
});
var string_decoder_default2 = { StringDecoder: PStringDecoder };

// https://deno.land/std@0.177.1/node/internal/streams/destroy.mjs
var kDestroy = Symbol("kDestroy");
var kConstruct = Symbol("kConstruct");
function checkError(err, w3, r14) {
  if (err) {
    err.stack;
    if (w3 && !w3.errored) {
      w3.errored = err;
    }
    if (r14 && !r14.errored) {
      r14.errored = err;
    }
  }
}
function destroy(err, cb) {
  const r14 = this._readableState;
  const w3 = this._writableState;
  const s16 = w3 || r14;
  if (w3 && w3.destroyed || r14 && r14.destroyed) {
    if (typeof cb === "function") {
      cb();
    }
    return this;
  }
  checkError(err, w3, r14);
  if (w3) {
    w3.destroyed = true;
  }
  if (r14) {
    r14.destroyed = true;
  }
  if (!s16.constructed) {
    this.once(kDestroy, function(er) {
      _destroy(this, aggregateTwoErrors(er, err), cb);
    });
  } else {
    _destroy(this, err, cb);
  }
  return this;
}
function _destroy(self, err, cb) {
  let called = false;
  function onDestroy(err2) {
    if (called) {
      return;
    }
    called = true;
    const r14 = self._readableState;
    const w3 = self._writableState;
    checkError(err2, w3, r14);
    if (w3) {
      w3.closed = true;
    }
    if (r14) {
      r14.closed = true;
    }
    if (typeof cb === "function") {
      cb(err2);
    }
    if (err2) {
      nextTick3(emitErrorCloseNT, self, err2);
    } else {
      nextTick3(emitCloseNT, self);
    }
  }
  try {
    const result = self._destroy(err || null, onDestroy);
    if (result != null) {
      const then = result.then;
      if (typeof then === "function") {
        then.call(
          result,
          function() {
            nextTick3(onDestroy, null);
          },
          function(err2) {
            nextTick3(onDestroy, err2);
          }
        );
      }
    }
  } catch (err2) {
    onDestroy(err2);
  }
}
function emitErrorCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  const r14 = self._readableState;
  const w3 = self._writableState;
  if (w3) {
    w3.closeEmitted = true;
  }
  if (r14) {
    r14.closeEmitted = true;
  }
  if (w3 && w3.emitClose || r14 && r14.emitClose) {
    self.emit("close");
  }
}
function emitErrorNT(self, err) {
  const r14 = self._readableState;
  const w3 = self._writableState;
  if (w3 && w3.errorEmitted || r14 && r14.errorEmitted) {
    return;
  }
  if (w3) {
    w3.errorEmitted = true;
  }
  if (r14) {
    r14.errorEmitted = true;
  }
  self.emit("error", err);
}

// https://deno.land/std@0.177.1/node/internal/streams/end-of-stream.mjs
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === "function";
}
function isServerResponse(stream) {
  return typeof stream._sent100 === "boolean" && typeof stream._removedConnection === "boolean" && typeof stream._removedContLen === "boolean" && typeof stream._removedTE === "boolean" && typeof stream._closed === "boolean";
}
function isReadable(stream) {
  return typeof stream.readable === "boolean" || typeof stream.readableEnded === "boolean" || !!stream._readableState;
}
function isWritable(stream) {
  return typeof stream.writable === "boolean" || typeof stream.writableEnded === "boolean" || !!stream._writableState;
}
function isWritableFinished(stream) {
  if (stream.writableFinished) return true;
  const wState = stream._writableState;
  if (!wState || wState.errored) return false;
  return wState.finished || wState.ended && wState.length === 0;
}
var nop = () => {
};
function isReadableEnded(stream) {
  if (stream.readableEnded) return true;
  const rState = stream._readableState;
  if (!rState || rState.errored) return false;
  return rState.endEmitted || rState.ended && rState.length === 0;
}
function eos(stream, options, callback) {
  if (arguments.length === 2) {
    callback = options;
    options = {};
  } else if (options == null) {
    options = {};
  } else {
    validateObject(options, "options");
  }
  validateFunction(callback, "callback");
  validateAbortSignal(options.signal, "options.signal");
  callback = once3(callback);
  const readable = options.readable || options.readable !== false && isReadable(stream);
  const writable = options.writable || options.writable !== false && isWritable(stream);
  const wState = stream._writableState;
  const rState = stream._readableState;
  const state = wState || rState;
  const onlegacyfinish = () => {
    if (!stream.writable) onfinish();
  };
  let willEmitClose = isServerResponse(stream) || state && state.autoDestroy && state.emitClose && state.closed === false && isReadable(stream) === readable && isWritable(stream) === writable;
  let writableFinished = stream.writableFinished || wState && wState.finished;
  const onfinish = () => {
    writableFinished = true;
    if (stream.destroyed) willEmitClose = false;
    if (willEmitClose && (!stream.readable || readable)) return;
    if (!readable || readableEnded) callback.call(stream);
  };
  let readableEnded = stream.readableEnded || rState && rState.endEmitted;
  const onend = () => {
    readableEnded = true;
    if (stream.destroyed) willEmitClose = false;
    if (willEmitClose && (!stream.writable || writable)) return;
    if (!writable || writableFinished) callback.call(stream);
  };
  const onerror = (err) => {
    callback.call(stream, err);
  };
  const onclose = () => {
    if (readable && !readableEnded) {
      if (!isReadableEnded(stream)) {
        return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
      }
    }
    if (writable && !writableFinished) {
      if (!isWritableFinished(stream)) {
        return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());
      }
    }
    callback.call(stream);
  };
  const onrequest = () => {
    stream.req.on("finish", onfinish);
  };
  if (isRequest(stream)) {
    stream.on("complete", onfinish);
    if (!willEmitClose) {
      stream.on("abort", onclose);
    }
    if (stream.req) onrequest();
    else stream.on("request", onrequest);
  } else if (writable && !wState) {
    stream.on("end", onlegacyfinish);
    stream.on("close", onlegacyfinish);
  }
  if (!willEmitClose && typeof stream.aborted === "boolean") {
    stream.on("aborted", onclose);
  }
  stream.on("end", onend);
  stream.on("finish", onfinish);
  if (options.error !== false) stream.on("error", onerror);
  stream.on("close", onclose);
  const closed = !wState && !rState && stream._closed === true || (wState && wState.closed || rState && rState.closed || wState && wState.errorEmitted || rState && rState.errorEmitted || rState && stream.req && stream.aborted || (!wState || !willEmitClose || typeof wState.closed !== "boolean") && (!rState || !willEmitClose || typeof rState.closed !== "boolean") && (!writable || wState && wState.finished) && (!readable || rState && rState.endEmitted));
  if (closed) {
    nextTick3(() => {
      callback();
    });
  }
  const cleanup = () => {
    callback = nop;
    stream.removeListener("aborted", onclose);
    stream.removeListener("complete", onfinish);
    stream.removeListener("abort", onclose);
    stream.removeListener("request", onrequest);
    if (stream.req) stream.req.removeListener("finish", onfinish);
    stream.removeListener("end", onlegacyfinish);
    stream.removeListener("close", onlegacyfinish);
    stream.removeListener("finish", onfinish);
    stream.removeListener("end", onend);
    stream.removeListener("error", onerror);
    stream.removeListener("close", onclose);
  };
  if (options.signal && !closed) {
    const abort = () => {
      const endCallback = callback;
      cleanup();
      endCallback.call(stream, new AbortError());
    };
    if (options.signal.aborted) {
      nextTick3(abort);
    } else {
      const originalCallback = callback;
      callback = once3((...args2) => {
        options.signal.removeEventListener("abort", abort);
        originalCallback.apply(stream, args2);
      });
      options.signal.addEventListener("abort", abort);
    }
  }
  return cleanup;
}
var end_of_stream_default = eos;

// https://deno.land/std@0.177.1/node/internal/streams/utils.mjs
var kIsDisturbed = Symbol("kIsDisturbed");
function isReadableNodeStream(obj) {
  return !!(obj && typeof obj.pipe === "function" && typeof obj.on === "function" && (!obj._writableState || obj._readableState?.readable !== false) && // Duplex
  (!obj._writableState || obj._readableState));
}
function isWritableNodeStream(obj) {
  return !!(obj && typeof obj.write === "function" && typeof obj.on === "function" && (!obj._readableState || obj._writableState?.writable !== false));
}
function isNodeStream(obj) {
  return obj && (obj._readableState || obj._writableState || typeof obj.write === "function" && typeof obj.on === "function" || typeof obj.pipe === "function" && typeof obj.on === "function");
}
function isDestroyed(stream) {
  if (!isNodeStream(stream)) return null;
  const wState = stream._writableState;
  const rState = stream._readableState;
  const state = wState || rState;
  return !!(stream.destroyed || state?.destroyed);
}
function isWritableEnded(stream) {
  if (!isWritableNodeStream(stream)) return null;
  if (stream.writableEnded === true) return true;
  const wState = stream._writableState;
  if (wState?.errored) return false;
  if (typeof wState?.ended !== "boolean") return null;
  return wState.ended;
}
function isReadableEnded2(stream) {
  if (!isReadableNodeStream(stream)) return null;
  if (stream.readableEnded === true) return true;
  const rState = stream._readableState;
  if (!rState || rState.errored) return false;
  if (typeof rState?.ended !== "boolean") return null;
  return rState.ended;
}
function isReadableFinished(stream, strict) {
  if (!isReadableNodeStream(stream)) return null;
  const rState = stream._readableState;
  if (rState?.errored) return false;
  if (typeof rState?.endEmitted !== "boolean") return null;
  return !!(rState.endEmitted || strict === false && rState.ended === true && rState.length === 0);
}
function isReadable2(stream) {
  const r14 = isReadableNodeStream(stream);
  if (r14 === null || typeof stream?.readable !== "boolean") return null;
  if (isDestroyed(stream)) return false;
  return r14 && stream.readable && !isReadableFinished(stream);
}
function isWritable2(stream) {
  const r14 = isWritableNodeStream(stream);
  if (r14 === null || typeof stream?.writable !== "boolean") return null;
  if (isDestroyed(stream)) return false;
  return r14 && stream.writable && !isWritableEnded(stream);
}

// https://deno.land/std@0.177.1/node/_stream.mjs
var __process$ = { nextTick: nextTick2, stdio };
var pi = Object.create;
var Bt = Object.defineProperty;
var wi = Object.getOwnPropertyDescriptor;
var yi = Object.getOwnPropertyNames;
var gi = Object.getPrototypeOf;
var Si = Object.prototype.hasOwnProperty;
var E = ((e6) => typeof __require < "u" ? __require : typeof Proxy < "u" ? new Proxy(e6, { get: (t18, n12) => (typeof __require < "u" ? __require : t18)[n12] }) : e6)(function(e6) {
  if (typeof __require < "u") return __require.apply(this, arguments);
  throw new Error('Dynamic require of "' + e6 + '" is not supported');
});
var g2 = (e6, t18) => () => (t18 || e6((t18 = { exports: {} }).exports, t18), t18.exports);
var Ei = (e6, t18, n12, r14) => {
  if (t18 && typeof t18 == "object" || typeof t18 == "function") for (let i7 of yi(t18)) !Si.call(e6, i7) && i7 !== n12 && Bt(e6, i7, { get: () => t18[i7], enumerable: !(r14 = wi(t18, i7)) || r14.enumerable });
  return e6;
};
var Ri = (e6, t18, n12) => (n12 = e6 != null ? pi(gi(e6)) : {}, Ei(t18 || !e6 || !e6.__esModule ? Bt(n12, "default", { value: e6, enumerable: true }) : n12, e6));
var m = g2((Yf, Gt) => {
  "use strict";
  Gt.exports = { ArrayIsArray(e6) {
    return Array.isArray(e6);
  }, ArrayPrototypeIncludes(e6, t18) {
    return e6.includes(t18);
  }, ArrayPrototypeIndexOf(e6, t18) {
    return e6.indexOf(t18);
  }, ArrayPrototypeJoin(e6, t18) {
    return e6.join(t18);
  }, ArrayPrototypeMap(e6, t18) {
    return e6.map(t18);
  }, ArrayPrototypePop(e6, t18) {
    return e6.pop(t18);
  }, ArrayPrototypePush(e6, t18) {
    return e6.push(t18);
  }, ArrayPrototypeSlice(e6, t18, n12) {
    return e6.slice(t18, n12);
  }, Error, FunctionPrototypeCall(e6, t18, ...n12) {
    return e6.call(t18, ...n12);
  }, FunctionPrototypeSymbolHasInstance(e6, t18) {
    return Function.prototype[Symbol.hasInstance].call(e6, t18);
  }, MathFloor: Math.floor, Number, NumberIsInteger: Number.isInteger, NumberIsNaN: Number.isNaN, NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER, NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER, NumberParseInt: Number.parseInt, ObjectDefineProperties(e6, t18) {
    return Object.defineProperties(e6, t18);
  }, ObjectDefineProperty(e6, t18, n12) {
    return Object.defineProperty(e6, t18, n12);
  }, ObjectGetOwnPropertyDescriptor(e6, t18) {
    return Object.getOwnPropertyDescriptor(e6, t18);
  }, ObjectKeys(e6) {
    return Object.keys(e6);
  }, ObjectSetPrototypeOf(e6, t18) {
    return Object.setPrototypeOf(e6, t18);
  }, Promise, PromisePrototypeCatch(e6, t18) {
    return e6.catch(t18);
  }, PromisePrototypeThen(e6, t18, n12) {
    return e6.then(t18, n12);
  }, PromiseReject(e6) {
    return Promise.reject(e6);
  }, ReflectApply: Reflect.apply, RegExpPrototypeTest(e6, t18) {
    return e6.test(t18);
  }, SafeSet: Set, String, StringPrototypeSlice(e6, t18, n12) {
    return e6.slice(t18, n12);
  }, StringPrototypeToLowerCase(e6) {
    return e6.toLowerCase();
  }, StringPrototypeToUpperCase(e6) {
    return e6.toUpperCase();
  }, StringPrototypeTrim(e6) {
    return e6.trim();
  }, Symbol, SymbolAsyncIterator: Symbol.asyncIterator, SymbolHasInstance: Symbol.hasInstance, SymbolIterator: Symbol.iterator, TypedArrayPrototypeSet(e6, t18, n12) {
    return e6.set(t18, n12);
  }, Uint8Array };
});
var j = g2((Kf, Je) => {
  "use strict";
  var Ai = buffer_default2, mi = Object.getPrototypeOf(async function() {
  }).constructor, Ht = globalThis.Blob || Ai.Blob, Ti = typeof Ht < "u" ? function(t18) {
    return t18 instanceof Ht;
  } : function(t18) {
    return false;
  }, Xe = class extends Error {
    constructor(t18) {
      if (!Array.isArray(t18)) throw new TypeError(`Expected input to be an Array, got ${typeof t18}`);
      let n12 = "";
      for (let r14 = 0; r14 < t18.length; r14++) n12 += `    ${t18[r14].stack}
`;
      super(n12), this.name = "AggregateError", this.errors = t18;
    }
  };
  Je.exports = { AggregateError: Xe, kEmptyObject: Object.freeze({}), once(e6) {
    let t18 = false;
    return function(...n12) {
      t18 || (t18 = true, e6.apply(this, n12));
    };
  }, createDeferredPromise: function() {
    let e6, t18;
    return { promise: new Promise((r14, i7) => {
      e6 = r14, t18 = i7;
    }), resolve: e6, reject: t18 };
  }, promisify(e6) {
    return new Promise((t18, n12) => {
      e6((r14, ...i7) => r14 ? n12(r14) : t18(...i7));
    });
  }, debuglog() {
    return function() {
    };
  }, format(e6, ...t18) {
    return e6.replace(/%([sdifj])/g, function(...[n12, r14]) {
      let i7 = t18.shift();
      return r14 === "f" ? i7.toFixed(6) : r14 === "j" ? JSON.stringify(i7) : r14 === "s" && typeof i7 == "object" ? `${i7.constructor !== Object ? i7.constructor.name : ""} {}`.trim() : i7.toString();
    });
  }, inspect(e6) {
    switch (typeof e6) {
      case "string":
        if (e6.includes("'")) if (e6.includes('"')) {
          if (!e6.includes("`") && !e6.includes("${")) return `\`${e6}\``;
        } else return `"${e6}"`;
        return `'${e6}'`;
      case "number":
        return isNaN(e6) ? "NaN" : Object.is(e6, -0) ? String(e6) : e6;
      case "bigint":
        return `${String(e6)}n`;
      case "boolean":
      case "undefined":
        return String(e6);
      case "object":
        return "{}";
    }
  }, types: { isAsyncFunction(e6) {
    return e6 instanceof mi;
  }, isArrayBufferView(e6) {
    return ArrayBuffer.isView(e6);
  } }, isBlob: Ti };
  Je.exports.promisify.custom = Symbol.for("nodejs.util.promisify.custom");
});
var O = g2((zf, Kt) => {
  "use strict";
  var { format: Ii, inspect: Re2, AggregateError: Mi } = j(), Ni = globalThis.AggregateError || Mi, Di = Symbol("kIsNodeError"), Oi = ["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"], qi = /^([A-Z][a-z0-9]*)+$/, xi = "__node_internal_", Ae = {};
  function X2(e6, t18) {
    if (!e6) throw new Ae.ERR_INTERNAL_ASSERTION(t18);
  }
  function Vt(e6) {
    let t18 = "", n12 = e6.length, r14 = e6[0] === "-" ? 1 : 0;
    for (; n12 >= r14 + 4; n12 -= 3) t18 = `_${e6.slice(n12 - 3, n12)}${t18}`;
    return `${e6.slice(0, n12)}${t18}`;
  }
  function Li(e6, t18, n12) {
    if (typeof t18 == "function") return X2(t18.length <= n12.length, `Code: ${e6}; The provided arguments length (${n12.length}) does not match the required ones (${t18.length}).`), t18(...n12);
    let r14 = (t18.match(/%[dfijoOs]/g) || []).length;
    return X2(r14 === n12.length, `Code: ${e6}; The provided arguments length (${n12.length}) does not match the required ones (${r14}).`), n12.length === 0 ? t18 : Ii(t18, ...n12);
  }
  function N2(e6, t18, n12) {
    n12 || (n12 = Error);
    class r14 extends n12 {
      constructor(...o9) {
        super(Li(e6, t18, o9));
      }
      toString() {
        return `${this.name} [${e6}]: ${this.message}`;
      }
    }
    Object.defineProperties(r14.prototype, { name: { value: n12.name, writable: true, enumerable: false, configurable: true }, toString: { value() {
      return `${this.name} [${e6}]: ${this.message}`;
    }, writable: true, enumerable: false, configurable: true } }), r14.prototype.code = e6, r14.prototype[Di] = true, Ae[e6] = r14;
  }
  function Yt(e6) {
    let t18 = xi + e6.name;
    return Object.defineProperty(e6, "name", { value: t18 }), e6;
  }
  function Pi(e6, t18) {
    if (e6 && t18 && e6 !== t18) {
      if (Array.isArray(t18.errors)) return t18.errors.push(e6), t18;
      let n12 = new Ni([t18, e6], t18.message);
      return n12.code = t18.code, n12;
    }
    return e6 || t18;
  }
  var Qe = class extends Error {
    constructor(t18 = "The operation was aborted", n12 = void 0) {
      if (n12 !== void 0 && typeof n12 != "object") throw new Ae.ERR_INVALID_ARG_TYPE("options", "Object", n12);
      super(t18, n12), this.code = "ABORT_ERR", this.name = "AbortError";
    }
  };
  N2("ERR_ASSERTION", "%s", Error);
  N2("ERR_INVALID_ARG_TYPE", (e6, t18, n12) => {
    X2(typeof e6 == "string", "'name' must be a string"), Array.isArray(t18) || (t18 = [t18]);
    let r14 = "The ";
    e6.endsWith(" argument") ? r14 += `${e6} ` : r14 += `"${e6}" ${e6.includes(".") ? "property" : "argument"} `, r14 += "must be ";
    let i7 = [], o9 = [], l6 = [];
    for (let f7 of t18) X2(typeof f7 == "string", "All expected entries have to be of type string"), Oi.includes(f7) ? i7.push(f7.toLowerCase()) : qi.test(f7) ? o9.push(f7) : (X2(f7 !== "object", 'The value "object" should be written as "Object"'), l6.push(f7));
    if (o9.length > 0) {
      let f7 = i7.indexOf("object");
      f7 !== -1 && (i7.splice(i7, f7, 1), o9.push("Object"));
    }
    if (i7.length > 0) {
      switch (i7.length) {
        case 1:
          r14 += `of type ${i7[0]}`;
          break;
        case 2:
          r14 += `one of type ${i7[0]} or ${i7[1]}`;
          break;
        default: {
          let f7 = i7.pop();
          r14 += `one of type ${i7.join(", ")}, or ${f7}`;
        }
      }
      (o9.length > 0 || l6.length > 0) && (r14 += " or ");
    }
    if (o9.length > 0) {
      switch (o9.length) {
        case 1:
          r14 += `an instance of ${o9[0]}`;
          break;
        case 2:
          r14 += `an instance of ${o9[0]} or ${o9[1]}`;
          break;
        default: {
          let f7 = o9.pop();
          r14 += `an instance of ${o9.join(", ")}, or ${f7}`;
        }
      }
      l6.length > 0 && (r14 += " or ");
    }
    switch (l6.length) {
      case 0:
        break;
      case 1:
        l6[0].toLowerCase() !== l6[0] && (r14 += "an "), r14 += `${l6[0]}`;
        break;
      case 2:
        r14 += `one of ${l6[0]} or ${l6[1]}`;
        break;
      default: {
        let f7 = l6.pop();
        r14 += `one of ${l6.join(", ")}, or ${f7}`;
      }
    }
    if (n12 == null) r14 += `. Received ${n12}`;
    else if (typeof n12 == "function" && n12.name) r14 += `. Received function ${n12.name}`;
    else if (typeof n12 == "object") {
      var u3;
      (u3 = n12.constructor) !== null && u3 !== void 0 && u3.name ? r14 += `. Received an instance of ${n12.constructor.name}` : r14 += `. Received ${Re2(n12, { depth: -1 })}`;
    } else {
      let f7 = Re2(n12, { colors: false });
      f7.length > 25 && (f7 = `${f7.slice(0, 25)}...`), r14 += `. Received type ${typeof n12} (${f7})`;
    }
    return r14;
  }, TypeError);
  N2("ERR_INVALID_ARG_VALUE", (e6, t18, n12 = "is invalid") => {
    let r14 = Re2(t18);
    return r14.length > 128 && (r14 = r14.slice(0, 128) + "..."), `The ${e6.includes(".") ? "property" : "argument"} '${e6}' ${n12}. Received ${r14}`;
  }, TypeError);
  N2("ERR_INVALID_RETURN_VALUE", (e6, t18, n12) => {
    var r14;
    let i7 = n12 != null && (r14 = n12.constructor) !== null && r14 !== void 0 && r14.name ? `instance of ${n12.constructor.name}` : `type ${typeof n12}`;
    return `Expected ${e6} to be returned from the "${t18}" function but got ${i7}.`;
  }, TypeError);
  N2("ERR_MISSING_ARGS", (...e6) => {
    X2(e6.length > 0, "At least one arg needs to be specified");
    let t18, n12 = e6.length;
    switch (e6 = (Array.isArray(e6) ? e6 : [e6]).map((r14) => `"${r14}"`).join(" or "), n12) {
      case 1:
        t18 += `The ${e6[0]} argument`;
        break;
      case 2:
        t18 += `The ${e6[0]} and ${e6[1]} arguments`;
        break;
      default:
        {
          let r14 = e6.pop();
          t18 += `The ${e6.join(", ")}, and ${r14} arguments`;
        }
        break;
    }
    return `${t18} must be specified`;
  }, TypeError);
  N2("ERR_OUT_OF_RANGE", (e6, t18, n12) => {
    X2(t18, 'Missing "range" argument');
    let r14;
    return Number.isInteger(n12) && Math.abs(n12) > 2 ** 32 ? r14 = Vt(String(n12)) : typeof n12 == "bigint" ? (r14 = String(n12), (n12 > 2n ** 32n || n12 < -(2n ** 32n)) && (r14 = Vt(r14)), r14 += "n") : r14 = Re2(n12), `The value of "${e6}" is out of range. It must be ${t18}. Received ${r14}`;
  }, RangeError);
  N2("ERR_MULTIPLE_CALLBACK", "Callback called multiple times", Error);
  N2("ERR_METHOD_NOT_IMPLEMENTED", "The %s method is not implemented", Error);
  N2("ERR_STREAM_ALREADY_FINISHED", "Cannot call %s after a stream was finished", Error);
  N2("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable", Error);
  N2("ERR_STREAM_DESTROYED", "Cannot call %s after a stream was destroyed", Error);
  N2("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
  N2("ERR_STREAM_PREMATURE_CLOSE", "Premature close", Error);
  N2("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF", Error);
  N2("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event", Error);
  N2("ERR_STREAM_WRITE_AFTER_END", "write after end", Error);
  N2("ERR_UNKNOWN_ENCODING", "Unknown encoding: %s", TypeError);
  Kt.exports = { AbortError: Qe, aggregateTwoErrors: Yt(Pi), hideStackFrames: Yt, codes: Ae };
});
var _e = g2((Xf, nn) => {
  "use strict";
  var { ArrayIsArray: Jt, ArrayPrototypeIncludes: Qt, ArrayPrototypeJoin: Zt, ArrayPrototypeMap: ki, NumberIsInteger: et, NumberIsNaN: Wi, NumberMAX_SAFE_INTEGER: Ci, NumberMIN_SAFE_INTEGER: ji, NumberParseInt: $i, ObjectPrototypeHasOwnProperty: vi, RegExpPrototypeExec: Fi, String: Ui, StringPrototypeToUpperCase: Bi, StringPrototypeTrim: Gi } = m(), { hideStackFrames: k5, codes: { ERR_SOCKET_BAD_PORT: Hi, ERR_INVALID_ARG_TYPE: q2, ERR_INVALID_ARG_VALUE: me2, ERR_OUT_OF_RANGE: J2, ERR_UNKNOWN_SIGNAL: zt } } = O(), { normalizeEncoding: Vi } = j(), { isAsyncFunction: Yi, isArrayBufferView: Ki } = j().types, Xt = {};
  function zi(e6) {
    return e6 === (e6 | 0);
  }
  function Xi(e6) {
    return e6 === e6 >>> 0;
  }
  var Ji = /^[0-7]+$/, Qi = "must be a 32-bit unsigned integer or an octal string";
  function Zi(e6, t18, n12) {
    if (typeof e6 > "u" && (e6 = n12), typeof e6 == "string") {
      if (Fi(Ji, e6) === null) throw new me2(t18, e6, Qi);
      e6 = $i(e6, 8);
    }
    return en(e6, t18), e6;
  }
  var eo = k5((e6, t18, n12 = ji, r14 = Ci) => {
    if (typeof e6 != "number") throw new q2(t18, "number", e6);
    if (!et(e6)) throw new J2(t18, "an integer", e6);
    if (e6 < n12 || e6 > r14) throw new J2(t18, `>= ${n12} && <= ${r14}`, e6);
  }), to = k5((e6, t18, n12 = -2147483648, r14 = 2147483647) => {
    if (typeof e6 != "number") throw new q2(t18, "number", e6);
    if (!et(e6)) throw new J2(t18, "an integer", e6);
    if (e6 < n12 || e6 > r14) throw new J2(t18, `>= ${n12} && <= ${r14}`, e6);
  }), en = k5((e6, t18, n12 = false) => {
    if (typeof e6 != "number") throw new q2(t18, "number", e6);
    if (!et(e6)) throw new J2(t18, "an integer", e6);
    let r14 = n12 ? 1 : 0, i7 = 4294967295;
    if (e6 < r14 || e6 > i7) throw new J2(t18, `>= ${r14} && <= ${i7}`, e6);
  });
  function tn(e6, t18) {
    if (typeof e6 != "string") throw new q2(t18, "string", e6);
  }
  function no(e6, t18, n12 = void 0, r14) {
    if (typeof e6 != "number") throw new q2(t18, "number", e6);
    if (n12 != null && e6 < n12 || r14 != null && e6 > r14 || (n12 != null || r14 != null) && Wi(e6)) throw new J2(t18, `${n12 != null ? `>= ${n12}` : ""}${n12 != null && r14 != null ? " && " : ""}${r14 != null ? `<= ${r14}` : ""}`, e6);
  }
  var ro = k5((e6, t18, n12) => {
    if (!Qt(n12, e6)) {
      let r14 = Zt(ki(n12, (o9) => typeof o9 == "string" ? `'${o9}'` : Ui(o9)), ", "), i7 = "must be one of: " + r14;
      throw new me2(t18, e6, i7);
    }
  });
  function io(e6, t18) {
    if (typeof e6 != "boolean") throw new q2(t18, "boolean", e6);
  }
  function Ze(e6, t18, n12) {
    return e6 == null || !vi(e6, t18) ? n12 : e6[t18];
  }
  var oo = k5((e6, t18, n12 = null) => {
    let r14 = Ze(n12, "allowArray", false), i7 = Ze(n12, "allowFunction", false);
    if (!Ze(n12, "nullable", false) && e6 === null || !r14 && Jt(e6) || typeof e6 != "object" && (!i7 || typeof e6 != "function")) throw new q2(t18, "Object", e6);
  }), lo = k5((e6, t18, n12 = 0) => {
    if (!Jt(e6)) throw new q2(t18, "Array", e6);
    if (e6.length < n12) {
      let r14 = `must be longer than ${n12}`;
      throw new me2(t18, e6, r14);
    }
  });
  function ao(e6, t18 = "signal") {
    if (tn(e6, t18), Xt[e6] === void 0) throw Xt[Bi(e6)] !== void 0 ? new zt(e6 + " (signals must use all capital letters)") : new zt(e6);
  }
  var fo = k5((e6, t18 = "buffer") => {
    if (!Ki(e6)) throw new q2(t18, ["Buffer", "TypedArray", "DataView"], e6);
  });
  function uo(e6, t18) {
    let n12 = Vi(t18), r14 = e6.length;
    if (n12 === "hex" && r14 % 2 !== 0) throw new me2("encoding", t18, `is invalid for data of length ${r14}`);
  }
  function so(e6, t18 = "Port", n12 = true) {
    if (typeof e6 != "number" && typeof e6 != "string" || typeof e6 == "string" && Gi(e6).length === 0 || +e6 !== +e6 >>> 0 || e6 > 65535 || e6 === 0 && !n12) throw new Hi(t18, e6, n12);
    return e6 | 0;
  }
  var co = k5((e6, t18) => {
    if (e6 !== void 0 && (e6 === null || typeof e6 != "object" || !("aborted" in e6))) throw new q2(t18, "AbortSignal", e6);
  }), ho = k5((e6, t18) => {
    if (typeof e6 != "function") throw new q2(t18, "Function", e6);
  }), bo = k5((e6, t18) => {
    if (typeof e6 != "function" || Yi(e6)) throw new q2(t18, "Function", e6);
  }), _o = k5((e6, t18) => {
    if (e6 !== void 0) throw new q2(t18, "undefined", e6);
  });
  function po(e6, t18, n12) {
    if (!Qt(n12, e6)) throw new q2(t18, `('${Zt(n12, "|")}')`, e6);
  }
  nn.exports = { isInt32: zi, isUint32: Xi, parseFileMode: Zi, validateArray: lo, validateBoolean: io, validateBuffer: fo, validateEncoding: uo, validateFunction: ho, validateInt32: to, validateInteger: eo, validateNumber: no, validateObject: oo, validateOneOf: ro, validatePlainFunction: bo, validatePort: so, validateSignalName: ao, validateString: tn, validateUint32: en, validateUndefined: _o, validateUnion: po, validateAbortSignal: co };
});
var V = g2((Jf, _n) => {
  "use strict";
  var { Symbol: Te, SymbolAsyncIterator: rn, SymbolIterator: on2 } = m(), ln = Te("kDestroyed"), an = Te("kIsErrored"), tt = Te("kIsReadable"), fn = Te("kIsDisturbed");
  function Ie2(e6, t18 = false) {
    var n12;
    return !!(e6 && typeof e6.pipe == "function" && typeof e6.on == "function" && (!t18 || typeof e6.pause == "function" && typeof e6.resume == "function") && (!e6._writableState || ((n12 = e6._readableState) === null || n12 === void 0 ? void 0 : n12.readable) !== false) && (!e6._writableState || e6._readableState));
  }
  function Me(e6) {
    var t18;
    return !!(e6 && typeof e6.write == "function" && typeof e6.on == "function" && (!e6._readableState || ((t18 = e6._writableState) === null || t18 === void 0 ? void 0 : t18.writable) !== false));
  }
  function wo(e6) {
    return !!(e6 && typeof e6.pipe == "function" && e6._readableState && typeof e6.on == "function" && typeof e6.write == "function");
  }
  function Q2(e6) {
    return e6 && (e6._readableState || e6._writableState || typeof e6.write == "function" && typeof e6.on == "function" || typeof e6.pipe == "function" && typeof e6.on == "function");
  }
  function yo(e6, t18) {
    return e6 == null ? false : t18 === true ? typeof e6[rn] == "function" : t18 === false ? typeof e6[on2] == "function" : typeof e6[rn] == "function" || typeof e6[on2] == "function";
  }
  function Ne2(e6) {
    if (!Q2(e6)) return null;
    let t18 = e6._writableState, n12 = e6._readableState, r14 = t18 || n12;
    return !!(e6.destroyed || e6[ln] || r14 != null && r14.destroyed);
  }
  function un(e6) {
    if (!Me(e6)) return null;
    if (e6.writableEnded === true) return true;
    let t18 = e6._writableState;
    return t18 != null && t18.errored ? false : typeof t18?.ended != "boolean" ? null : t18.ended;
  }
  function go(e6, t18) {
    if (!Me(e6)) return null;
    if (e6.writableFinished === true) return true;
    let n12 = e6._writableState;
    return n12 != null && n12.errored ? false : typeof n12?.finished != "boolean" ? null : !!(n12.finished || t18 === false && n12.ended === true && n12.length === 0);
  }
  function So(e6) {
    if (!Ie2(e6)) return null;
    if (e6.readableEnded === true) return true;
    let t18 = e6._readableState;
    return !t18 || t18.errored ? false : typeof t18?.ended != "boolean" ? null : t18.ended;
  }
  function sn(e6, t18) {
    if (!Ie2(e6)) return null;
    let n12 = e6._readableState;
    return n12 != null && n12.errored ? false : typeof n12?.endEmitted != "boolean" ? null : !!(n12.endEmitted || t18 === false && n12.ended === true && n12.length === 0);
  }
  function dn(e6) {
    return e6 && e6[tt] != null ? e6[tt] : typeof e6?.readable != "boolean" ? null : Ne2(e6) ? false : Ie2(e6) && e6.readable && !sn(e6);
  }
  function cn(e6) {
    return typeof e6?.writable != "boolean" ? null : Ne2(e6) ? false : Me(e6) && e6.writable && !un(e6);
  }
  function Eo(e6, t18) {
    return Q2(e6) ? Ne2(e6) ? true : !(t18?.readable !== false && dn(e6) || t18?.writable !== false && cn(e6)) : null;
  }
  function Ro(e6) {
    var t18, n12;
    return Q2(e6) ? e6.writableErrored ? e6.writableErrored : (t18 = (n12 = e6._writableState) === null || n12 === void 0 ? void 0 : n12.errored) !== null && t18 !== void 0 ? t18 : null : null;
  }
  function Ao(e6) {
    var t18, n12;
    return Q2(e6) ? e6.readableErrored ? e6.readableErrored : (t18 = (n12 = e6._readableState) === null || n12 === void 0 ? void 0 : n12.errored) !== null && t18 !== void 0 ? t18 : null : null;
  }
  function mo(e6) {
    if (!Q2(e6)) return null;
    if (typeof e6.closed == "boolean") return e6.closed;
    let t18 = e6._writableState, n12 = e6._readableState;
    return typeof t18?.closed == "boolean" || typeof n12?.closed == "boolean" ? t18?.closed || n12?.closed : typeof e6._closed == "boolean" && hn(e6) ? e6._closed : null;
  }
  function hn(e6) {
    return typeof e6._closed == "boolean" && typeof e6._defaultKeepAlive == "boolean" && typeof e6._removedConnection == "boolean" && typeof e6._removedContLen == "boolean";
  }
  function bn(e6) {
    return typeof e6._sent100 == "boolean" && hn(e6);
  }
  function To(e6) {
    var t18;
    return typeof e6._consuming == "boolean" && typeof e6._dumped == "boolean" && ((t18 = e6.req) === null || t18 === void 0 ? void 0 : t18.upgradeOrConnect) === void 0;
  }
  function Io(e6) {
    if (!Q2(e6)) return null;
    let t18 = e6._writableState, n12 = e6._readableState, r14 = t18 || n12;
    return !r14 && bn(e6) || !!(r14 && r14.autoDestroy && r14.emitClose && r14.closed === false);
  }
  function Mo(e6) {
    var t18;
    return !!(e6 && ((t18 = e6[fn]) !== null && t18 !== void 0 ? t18 : e6.readableDidRead || e6.readableAborted));
  }
  function No(e6) {
    var t18, n12, r14, i7, o9, l6, u3, f7, a7, c12;
    return !!(e6 && ((t18 = (n12 = (r14 = (i7 = (o9 = (l6 = e6[an]) !== null && l6 !== void 0 ? l6 : e6.readableErrored) !== null && o9 !== void 0 ? o9 : e6.writableErrored) !== null && i7 !== void 0 ? i7 : (u3 = e6._readableState) === null || u3 === void 0 ? void 0 : u3.errorEmitted) !== null && r14 !== void 0 ? r14 : (f7 = e6._writableState) === null || f7 === void 0 ? void 0 : f7.errorEmitted) !== null && n12 !== void 0 ? n12 : (a7 = e6._readableState) === null || a7 === void 0 ? void 0 : a7.errored) !== null && t18 !== void 0 ? t18 : (c12 = e6._writableState) === null || c12 === void 0 ? void 0 : c12.errored));
  }
  _n.exports = { kDestroyed: ln, isDisturbed: Mo, kIsDisturbed: fn, isErrored: No, kIsErrored: an, isReadable: dn, kIsReadable: tt, isClosed: mo, isDestroyed: Ne2, isDuplexNodeStream: wo, isFinished: Eo, isIterable: yo, isReadableNodeStream: Ie2, isReadableEnded: So, isReadableFinished: sn, isReadableErrored: Ao, isNodeStream: Q2, isWritable: cn, isWritableNodeStream: Me, isWritableEnded: un, isWritableFinished: go, isWritableErrored: Ro, isServerRequest: To, isServerResponse: bn, willEmitClose: Io };
});
var Y = g2((Qf, rt) => {
  var oe2 = __process$, { AbortError: Do, codes: Oo } = O(), { ERR_INVALID_ARG_TYPE: qo, ERR_STREAM_PREMATURE_CLOSE: pn } = Oo, { kEmptyObject: wn, once: yn } = j(), { validateAbortSignal: xo, validateFunction: Lo, validateObject: Po } = _e(), { Promise: ko } = m(), { isClosed: Wo, isReadable: gn, isReadableNodeStream: nt, isReadableFinished: Sn, isReadableErrored: Co, isWritable: En, isWritableNodeStream: Rn, isWritableFinished: An, isWritableErrored: jo, isNodeStream: $o, willEmitClose: vo } = V();
  function Fo(e6) {
    return e6.setHeader && typeof e6.abort == "function";
  }
  var Uo = () => {
  };
  function mn(e6, t18, n12) {
    var r14, i7;
    arguments.length === 2 ? (n12 = t18, t18 = wn) : t18 == null ? t18 = wn : Po(t18, "options"), Lo(n12, "callback"), xo(t18.signal, "options.signal"), n12 = yn(n12);
    let o9 = (r14 = t18.readable) !== null && r14 !== void 0 ? r14 : nt(e6), l6 = (i7 = t18.writable) !== null && i7 !== void 0 ? i7 : Rn(e6);
    if (!$o(e6)) throw new qo("stream", "Stream", e6);
    let u3 = e6._writableState, f7 = e6._readableState, a7 = () => {
      e6.writable || b2();
    }, c12 = vo(e6) && nt(e6) === o9 && Rn(e6) === l6, s16 = An(e6, false), b2 = () => {
      s16 = true, e6.destroyed && (c12 = false), !(c12 && (!e6.readable || o9)) && (!o9 || d2) && n12.call(e6);
    }, d2 = Sn(e6, false), h8 = () => {
      d2 = true, e6.destroyed && (c12 = false), !(c12 && (!e6.writable || l6)) && (!l6 || s16) && n12.call(e6);
    }, D3 = (M2) => {
      n12.call(e6, M2);
    }, L2 = Wo(e6), _4 = () => {
      L2 = true;
      let M2 = jo(e6) || Co(e6);
      if (M2 && typeof M2 != "boolean") return n12.call(e6, M2);
      if (o9 && !d2 && nt(e6, true) && !Sn(e6, false)) return n12.call(e6, new pn());
      if (l6 && !s16 && !An(e6, false)) return n12.call(e6, new pn());
      n12.call(e6);
    }, p3 = () => {
      e6.req.on("finish", b2);
    };
    Fo(e6) ? (e6.on("complete", b2), c12 || e6.on("abort", _4), e6.req ? p3() : e6.on("request", p3)) : l6 && !u3 && (e6.on("end", a7), e6.on("close", a7)), !c12 && typeof e6.aborted == "boolean" && e6.on("aborted", _4), e6.on("end", h8), e6.on("finish", b2), t18.error !== false && e6.on("error", D3), e6.on("close", _4), L2 ? oe2.nextTick(_4) : u3 != null && u3.errorEmitted || f7 != null && f7.errorEmitted ? c12 || oe2.nextTick(_4) : (!o9 && (!c12 || gn(e6)) && (s16 || En(e6) === false) || !l6 && (!c12 || En(e6)) && (d2 || gn(e6) === false) || f7 && e6.req && e6.aborted) && oe2.nextTick(_4);
    let I2 = () => {
      n12 = Uo, e6.removeListener("aborted", _4), e6.removeListener("complete", b2), e6.removeListener("abort", _4), e6.removeListener("request", p3), e6.req && e6.req.removeListener("finish", b2), e6.removeListener("end", a7), e6.removeListener("close", a7), e6.removeListener("finish", b2), e6.removeListener("end", h8), e6.removeListener("error", D3), e6.removeListener("close", _4);
    };
    if (t18.signal && !L2) {
      let M2 = () => {
        let F4 = n12;
        I2(), F4.call(e6, new Do(void 0, { cause: t18.signal.reason }));
      };
      if (t18.signal.aborted) oe2.nextTick(M2);
      else {
        let F4 = n12;
        n12 = yn((...re2) => {
          t18.signal.removeEventListener("abort", M2), F4.apply(e6, re2);
        }), t18.signal.addEventListener("abort", M2);
      }
    }
    return I2;
  }
  function Bo(e6, t18) {
    return new ko((n12, r14) => {
      mn(e6, t18, (i7) => {
        i7 ? r14(i7) : n12();
      });
    });
  }
  rt.exports = mn;
  rt.exports.finished = Bo;
});
var xn = g2((Zf, lt) => {
  "use strict";
  var Nn = globalThis.AbortController, { codes: { ERR_INVALID_ARG_TYPE: pe, ERR_MISSING_ARGS: Go, ERR_OUT_OF_RANGE: Ho }, AbortError: $ } = O(), { validateAbortSignal: le, validateInteger: Vo, validateObject: ae2 } = _e(), Yo = m().Symbol("kWeak"), { finished: Ko } = Y(), { ArrayPrototypePush: zo, MathFloor: Xo, Number: Jo, NumberIsNaN: Qo, Promise: Tn, PromiseReject: In, PromisePrototypeThen: Zo, Symbol: Dn } = m(), De = Dn("kEmpty"), Mn = Dn("kEof");
  function Oe2(e6, t18) {
    if (typeof e6 != "function") throw new pe("fn", ["Function", "AsyncFunction"], e6);
    t18 != null && ae2(t18, "options"), t18?.signal != null && le(t18.signal, "options.signal");
    let n12 = 1;
    return t18?.concurrency != null && (n12 = Xo(t18.concurrency)), Vo(n12, "concurrency", 1), async function* () {
      var i7, o9;
      let l6 = new Nn(), u3 = this, f7 = [], a7 = l6.signal, c12 = { signal: a7 }, s16 = () => l6.abort();
      t18 != null && (i7 = t18.signal) !== null && i7 !== void 0 && i7.aborted && s16(), t18 == null || (o9 = t18.signal) === null || o9 === void 0 || o9.addEventListener("abort", s16);
      let b2, d2, h8 = false;
      function D3() {
        h8 = true;
      }
      async function L2() {
        try {
          for await (let I2 of u3) {
            var _4;
            if (h8) return;
            if (a7.aborted) throw new $();
            try {
              I2 = e6(I2, c12);
            } catch (M2) {
              I2 = In(M2);
            }
            I2 !== De && (typeof ((_4 = I2) === null || _4 === void 0 ? void 0 : _4.catch) == "function" && I2.catch(D3), f7.push(I2), b2 && (b2(), b2 = null), !h8 && f7.length && f7.length >= n12 && await new Tn((M2) => {
              d2 = M2;
            }));
          }
          f7.push(Mn);
        } catch (I2) {
          let M2 = In(I2);
          Zo(M2, void 0, D3), f7.push(M2);
        } finally {
          var p3;
          h8 = true, b2 && (b2(), b2 = null), t18 == null || (p3 = t18.signal) === null || p3 === void 0 || p3.removeEventListener("abort", s16);
        }
      }
      L2();
      try {
        for (; ; ) {
          for (; f7.length > 0; ) {
            let _4 = await f7[0];
            if (_4 === Mn) return;
            if (a7.aborted) throw new $();
            _4 !== De && (yield _4), f7.shift(), d2 && (d2(), d2 = null);
          }
          await new Tn((_4) => {
            b2 = _4;
          });
        }
      } finally {
        l6.abort(), h8 = true, d2 && (d2(), d2 = null);
      }
    }.call(this);
  }
  function el(e6 = void 0) {
    return e6 != null && ae2(e6, "options"), e6?.signal != null && le(e6.signal, "options.signal"), async function* () {
      let n12 = 0;
      for await (let i7 of this) {
        var r14;
        if (e6 != null && (r14 = e6.signal) !== null && r14 !== void 0 && r14.aborted) throw new $({ cause: e6.signal.reason });
        yield [n12++, i7];
      }
    }.call(this);
  }
  async function On(e6, t18 = void 0) {
    for await (let n12 of ot.call(this, e6, t18)) return true;
    return false;
  }
  async function tl(e6, t18 = void 0) {
    if (typeof e6 != "function") throw new pe("fn", ["Function", "AsyncFunction"], e6);
    return !await On.call(this, async (...n12) => !await e6(...n12), t18);
  }
  async function nl(e6, t18) {
    for await (let n12 of ot.call(this, e6, t18)) return n12;
  }
  async function rl(e6, t18) {
    if (typeof e6 != "function") throw new pe("fn", ["Function", "AsyncFunction"], e6);
    async function n12(r14, i7) {
      return await e6(r14, i7), De;
    }
    for await (let r14 of Oe2.call(this, n12, t18)) ;
  }
  function ot(e6, t18) {
    if (typeof e6 != "function") throw new pe("fn", ["Function", "AsyncFunction"], e6);
    async function n12(r14, i7) {
      return await e6(r14, i7) ? r14 : De;
    }
    return Oe2.call(this, n12, t18);
  }
  var it = class extends Go {
    constructor() {
      super("reduce"), this.message = "Reduce of an empty stream requires an initial value";
    }
  };
  async function il(e6, t18, n12) {
    var r14;
    if (typeof e6 != "function") throw new pe("reducer", ["Function", "AsyncFunction"], e6);
    n12 != null && ae2(n12, "options"), n12?.signal != null && le(n12.signal, "options.signal");
    let i7 = arguments.length > 1;
    if (n12 != null && (r14 = n12.signal) !== null && r14 !== void 0 && r14.aborted) {
      let a7 = new $(void 0, { cause: n12.signal.reason });
      throw this.once("error", () => {
      }), await Ko(this.destroy(a7)), a7;
    }
    let o9 = new Nn(), l6 = o9.signal;
    if (n12 != null && n12.signal) {
      let a7 = { once: true, [Yo]: this };
      n12.signal.addEventListener("abort", () => o9.abort(), a7);
    }
    let u3 = false;
    try {
      for await (let a7 of this) {
        var f7;
        if (u3 = true, n12 != null && (f7 = n12.signal) !== null && f7 !== void 0 && f7.aborted) throw new $();
        i7 ? t18 = await e6(t18, a7, { signal: l6 }) : (t18 = a7, i7 = true);
      }
      if (!u3 && !i7) throw new it();
    } finally {
      o9.abort();
    }
    return t18;
  }
  async function ol(e6) {
    e6 != null && ae2(e6, "options"), e6?.signal != null && le(e6.signal, "options.signal");
    let t18 = [];
    for await (let r14 of this) {
      var n12;
      if (e6 != null && (n12 = e6.signal) !== null && n12 !== void 0 && n12.aborted) throw new $(void 0, { cause: e6.signal.reason });
      zo(t18, r14);
    }
    return t18;
  }
  function ll(e6, t18) {
    let n12 = Oe2.call(this, e6, t18);
    return async function* () {
      for await (let i7 of n12) yield* i7;
    }.call(this);
  }
  function qn(e6) {
    if (e6 = Jo(e6), Qo(e6)) return 0;
    if (e6 < 0) throw new Ho("number", ">= 0", e6);
    return e6;
  }
  function al(e6, t18 = void 0) {
    return t18 != null && ae2(t18, "options"), t18?.signal != null && le(t18.signal, "options.signal"), e6 = qn(e6), async function* () {
      var r14;
      if (t18 != null && (r14 = t18.signal) !== null && r14 !== void 0 && r14.aborted) throw new $();
      for await (let o9 of this) {
        var i7;
        if (t18 != null && (i7 = t18.signal) !== null && i7 !== void 0 && i7.aborted) throw new $();
        e6-- <= 0 && (yield o9);
      }
    }.call(this);
  }
  function fl(e6, t18 = void 0) {
    return t18 != null && ae2(t18, "options"), t18?.signal != null && le(t18.signal, "options.signal"), e6 = qn(e6), async function* () {
      var r14;
      if (t18 != null && (r14 = t18.signal) !== null && r14 !== void 0 && r14.aborted) throw new $();
      for await (let o9 of this) {
        var i7;
        if (t18 != null && (i7 = t18.signal) !== null && i7 !== void 0 && i7.aborted) throw new $();
        if (e6-- > 0) yield o9;
        else return;
      }
    }.call(this);
  }
  lt.exports.streamReturningOperators = { asIndexedPairs: el, drop: al, filter: ot, flatMap: ll, map: Oe2, take: fl };
  lt.exports.promiseReturningOperators = { every: tl, forEach: rl, reduce: il, toArray: ol, some: On, find: nl };
});
var Z = g2((eu, vn) => {
  "use strict";
  var K = __process$, { aggregateTwoErrors: ul, codes: { ERR_MULTIPLE_CALLBACK: sl }, AbortError: dl } = O(), { Symbol: kn } = m(), { kDestroyed: cl, isDestroyed: hl, isFinished: bl, isServerRequest: _l } = V(), Wn = kn("kDestroy"), at = kn("kConstruct");
  function Cn(e6, t18, n12) {
    e6 && (e6.stack, t18 && !t18.errored && (t18.errored = e6), n12 && !n12.errored && (n12.errored = e6));
  }
  function pl(e6, t18) {
    let n12 = this._readableState, r14 = this._writableState, i7 = r14 || n12;
    return r14 && r14.destroyed || n12 && n12.destroyed ? (typeof t18 == "function" && t18(), this) : (Cn(e6, r14, n12), r14 && (r14.destroyed = true), n12 && (n12.destroyed = true), i7.constructed ? Ln(this, e6, t18) : this.once(Wn, function(o9) {
      Ln(this, ul(o9, e6), t18);
    }), this);
  }
  function Ln(e6, t18, n12) {
    let r14 = false;
    function i7(o9) {
      if (r14) return;
      r14 = true;
      let l6 = e6._readableState, u3 = e6._writableState;
      Cn(o9, u3, l6), u3 && (u3.closed = true), l6 && (l6.closed = true), typeof n12 == "function" && n12(o9), o9 ? K.nextTick(wl, e6, o9) : K.nextTick(jn, e6);
    }
    try {
      e6._destroy(t18 || null, i7);
    } catch (o9) {
      i7(o9);
    }
  }
  function wl(e6, t18) {
    ft(e6, t18), jn(e6);
  }
  function jn(e6) {
    let t18 = e6._readableState, n12 = e6._writableState;
    n12 && (n12.closeEmitted = true), t18 && (t18.closeEmitted = true), (n12 && n12.emitClose || t18 && t18.emitClose) && e6.emit("close");
  }
  function ft(e6, t18) {
    let n12 = e6._readableState, r14 = e6._writableState;
    r14 && r14.errorEmitted || n12 && n12.errorEmitted || (r14 && (r14.errorEmitted = true), n12 && (n12.errorEmitted = true), e6.emit("error", t18));
  }
  function yl() {
    let e6 = this._readableState, t18 = this._writableState;
    e6 && (e6.constructed = true, e6.closed = false, e6.closeEmitted = false, e6.destroyed = false, e6.errored = null, e6.errorEmitted = false, e6.reading = false, e6.ended = e6.readable === false, e6.endEmitted = e6.readable === false), t18 && (t18.constructed = true, t18.destroyed = false, t18.closed = false, t18.closeEmitted = false, t18.errored = null, t18.errorEmitted = false, t18.finalCalled = false, t18.prefinished = false, t18.ended = t18.writable === false, t18.ending = t18.writable === false, t18.finished = t18.writable === false);
  }
  function ut(e6, t18, n12) {
    let r14 = e6._readableState, i7 = e6._writableState;
    if (i7 && i7.destroyed || r14 && r14.destroyed) return this;
    r14 && r14.autoDestroy || i7 && i7.autoDestroy ? e6.destroy(t18) : t18 && (t18.stack, i7 && !i7.errored && (i7.errored = t18), r14 && !r14.errored && (r14.errored = t18), n12 ? K.nextTick(ft, e6, t18) : ft(e6, t18));
  }
  function gl(e6, t18) {
    if (typeof e6._construct != "function") return;
    let n12 = e6._readableState, r14 = e6._writableState;
    n12 && (n12.constructed = false), r14 && (r14.constructed = false), e6.once(at, t18), !(e6.listenerCount(at) > 1) && K.nextTick(Sl, e6);
  }
  function Sl(e6) {
    let t18 = false;
    function n12(r14) {
      if (t18) {
        ut(e6, r14 ?? new sl());
        return;
      }
      t18 = true;
      let i7 = e6._readableState, o9 = e6._writableState, l6 = o9 || i7;
      i7 && (i7.constructed = true), o9 && (o9.constructed = true), l6.destroyed ? e6.emit(Wn, r14) : r14 ? ut(e6, r14, true) : K.nextTick(El, e6);
    }
    try {
      e6._construct(n12);
    } catch (r14) {
      n12(r14);
    }
  }
  function El(e6) {
    e6.emit(at);
  }
  function Pn(e6) {
    return e6 && e6.setHeader && typeof e6.abort == "function";
  }
  function $n(e6) {
    e6.emit("close");
  }
  function Rl(e6, t18) {
    e6.emit("error", t18), K.nextTick($n, e6);
  }
  function Al(e6, t18) {
    !e6 || hl(e6) || (!t18 && !bl(e6) && (t18 = new dl()), _l(e6) ? (e6.socket = null, e6.destroy(t18)) : Pn(e6) ? e6.abort() : Pn(e6.req) ? e6.req.abort() : typeof e6.destroy == "function" ? e6.destroy(t18) : typeof e6.close == "function" ? e6.close() : t18 ? K.nextTick(Rl, e6, t18) : K.nextTick($n, e6), e6.destroyed || (e6[cl] = true));
  }
  vn.exports = { construct: gl, destroyer: Al, destroy: pl, undestroy: yl, errorOrDestroy: ut };
});
var Le = g2((tu, Un) => {
  "use strict";
  var { ArrayIsArray: ml, ObjectSetPrototypeOf: Fn } = m(), { EventEmitter: qe } = events_default;
  function xe2(e6) {
    qe.call(this, e6);
  }
  Fn(xe2.prototype, qe.prototype);
  Fn(xe2, qe);
  xe2.prototype.pipe = function(e6, t18) {
    let n12 = this;
    function r14(c12) {
      e6.writable && e6.write(c12) === false && n12.pause && n12.pause();
    }
    n12.on("data", r14);
    function i7() {
      n12.readable && n12.resume && n12.resume();
    }
    e6.on("drain", i7), !e6._isStdio && (!t18 || t18.end !== false) && (n12.on("end", l6), n12.on("close", u3));
    let o9 = false;
    function l6() {
      o9 || (o9 = true, e6.end());
    }
    function u3() {
      o9 || (o9 = true, typeof e6.destroy == "function" && e6.destroy());
    }
    function f7(c12) {
      a7(), qe.listenerCount(this, "error") === 0 && this.emit("error", c12);
    }
    st(n12, "error", f7), st(e6, "error", f7);
    function a7() {
      n12.removeListener("data", r14), e6.removeListener("drain", i7), n12.removeListener("end", l6), n12.removeListener("close", u3), n12.removeListener("error", f7), e6.removeListener("error", f7), n12.removeListener("end", a7), n12.removeListener("close", a7), e6.removeListener("close", a7);
    }
    return n12.on("end", a7), n12.on("close", a7), e6.on("close", a7), e6.emit("pipe", n12), e6;
  };
  function st(e6, t18, n12) {
    if (typeof e6.prependListener == "function") return e6.prependListener(t18, n12);
    !e6._events || !e6._events[t18] ? e6.on(t18, n12) : ml(e6._events[t18]) ? e6._events[t18].unshift(n12) : e6._events[t18] = [n12, e6._events[t18]];
  }
  Un.exports = { Stream: xe2, prependListener: st };
});
var ke = g2((nu, Pe) => {
  "use strict";
  var { AbortError: Tl, codes: Il } = O(), Ml = Y(), { ERR_INVALID_ARG_TYPE: Bn } = Il, Nl = (e6, t18) => {
    if (typeof e6 != "object" || !("aborted" in e6)) throw new Bn(t18, "AbortSignal", e6);
  };
  function Dl(e6) {
    return !!(e6 && typeof e6.pipe == "function");
  }
  Pe.exports.addAbortSignal = function(t18, n12) {
    if (Nl(t18, "signal"), !Dl(n12)) throw new Bn("stream", "stream.Stream", n12);
    return Pe.exports.addAbortSignalNoValidate(t18, n12);
  };
  Pe.exports.addAbortSignalNoValidate = function(e6, t18) {
    if (typeof e6 != "object" || !("aborted" in e6)) return t18;
    let n12 = () => {
      t18.destroy(new Tl(void 0, { cause: e6.reason }));
    };
    return e6.aborted ? n12() : (e6.addEventListener("abort", n12), Ml(t18, () => e6.removeEventListener("abort", n12))), t18;
  };
});
var Vn = g2((iu, Hn) => {
  "use strict";
  var { StringPrototypeSlice: Gn, SymbolIterator: Ol, TypedArrayPrototypeSet: We, Uint8Array: ql } = m(), { Buffer: dt } = buffer_default2, { inspect: xl } = j();
  Hn.exports = class {
    constructor() {
      this.head = null, this.tail = null, this.length = 0;
    }
    push(t18) {
      let n12 = { data: t18, next: null };
      this.length > 0 ? this.tail.next = n12 : this.head = n12, this.tail = n12, ++this.length;
    }
    unshift(t18) {
      let n12 = { data: t18, next: this.head };
      this.length === 0 && (this.tail = n12), this.head = n12, ++this.length;
    }
    shift() {
      if (this.length === 0) return;
      let t18 = this.head.data;
      return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, t18;
    }
    clear() {
      this.head = this.tail = null, this.length = 0;
    }
    join(t18) {
      if (this.length === 0) return "";
      let n12 = this.head, r14 = "" + n12.data;
      for (; (n12 = n12.next) !== null; ) r14 += t18 + n12.data;
      return r14;
    }
    concat(t18) {
      if (this.length === 0) return dt.alloc(0);
      let n12 = dt.allocUnsafe(t18 >>> 0), r14 = this.head, i7 = 0;
      for (; r14; ) We(n12, r14.data, i7), i7 += r14.data.length, r14 = r14.next;
      return n12;
    }
    consume(t18, n12) {
      let r14 = this.head.data;
      if (t18 < r14.length) {
        let i7 = r14.slice(0, t18);
        return this.head.data = r14.slice(t18), i7;
      }
      return t18 === r14.length ? this.shift() : n12 ? this._getString(t18) : this._getBuffer(t18);
    }
    first() {
      return this.head.data;
    }
    *[Ol]() {
      for (let t18 = this.head; t18; t18 = t18.next) yield t18.data;
    }
    _getString(t18) {
      let n12 = "", r14 = this.head, i7 = 0;
      do {
        let o9 = r14.data;
        if (t18 > o9.length) n12 += o9, t18 -= o9.length;
        else {
          t18 === o9.length ? (n12 += o9, ++i7, r14.next ? this.head = r14.next : this.head = this.tail = null) : (n12 += Gn(o9, 0, t18), this.head = r14, r14.data = Gn(o9, t18));
          break;
        }
        ++i7;
      } while ((r14 = r14.next) !== null);
      return this.length -= i7, n12;
    }
    _getBuffer(t18) {
      let n12 = dt.allocUnsafe(t18), r14 = t18, i7 = this.head, o9 = 0;
      do {
        let l6 = i7.data;
        if (t18 > l6.length) We(n12, l6, r14 - t18), t18 -= l6.length;
        else {
          t18 === l6.length ? (We(n12, l6, r14 - t18), ++o9, i7.next ? this.head = i7.next : this.head = this.tail = null) : (We(n12, new ql(l6.buffer, l6.byteOffset, t18), r14 - t18), this.head = i7, i7.data = l6.slice(t18));
          break;
        }
        ++o9;
      } while ((i7 = i7.next) !== null);
      return this.length -= o9, n12;
    }
    [Symbol.for("nodejs.util.inspect.custom")](t18, n12) {
      return xl(this, { ...n12, depth: 0, customInspect: false });
    }
  };
});
var Ce = g2((ou, Kn) => {
  "use strict";
  var { MathFloor: Ll, NumberIsInteger: Pl } = m(), { ERR_INVALID_ARG_VALUE: kl } = O().codes;
  function Wl(e6, t18, n12) {
    return e6.highWaterMark != null ? e6.highWaterMark : t18 ? e6[n12] : null;
  }
  function Yn(e6) {
    return e6 ? 16 : 16 * 1024;
  }
  function Cl(e6, t18, n12, r14) {
    let i7 = Wl(t18, r14, n12);
    if (i7 != null) {
      if (!Pl(i7) || i7 < 0) {
        let o9 = r14 ? `options.${n12}` : "options.highWaterMark";
        throw new kl(o9, i7);
      }
      return Ll(i7);
    }
    return Yn(e6.objectMode);
  }
  Kn.exports = { getHighWaterMark: Cl, getDefaultHighWaterMark: Yn };
});
var ct = g2((lu, Qn) => {
  "use strict";
  var zn = __process$, { PromisePrototypeThen: jl, SymbolAsyncIterator: Xn, SymbolIterator: Jn } = m(), { Buffer: $l } = buffer_default2, { ERR_INVALID_ARG_TYPE: vl, ERR_STREAM_NULL_VALUES: Fl } = O().codes;
  function Ul(e6, t18, n12) {
    let r14;
    if (typeof t18 == "string" || t18 instanceof $l) return new e6({ objectMode: true, ...n12, read() {
      this.push(t18), this.push(null);
    } });
    let i7;
    if (t18 && t18[Xn]) i7 = true, r14 = t18[Xn]();
    else if (t18 && t18[Jn]) i7 = false, r14 = t18[Jn]();
    else throw new vl("iterable", ["Iterable"], t18);
    let o9 = new e6({ objectMode: true, highWaterMark: 1, ...n12 }), l6 = false;
    o9._read = function() {
      l6 || (l6 = true, f7());
    }, o9._destroy = function(a7, c12) {
      jl(u3(a7), () => zn.nextTick(c12, a7), (s16) => zn.nextTick(c12, s16 || a7));
    };
    async function u3(a7) {
      let c12 = a7 != null, s16 = typeof r14.throw == "function";
      if (c12 && s16) {
        let { value: b2, done: d2 } = await r14.throw(a7);
        if (await b2, d2) return;
      }
      if (typeof r14.return == "function") {
        let { value: b2 } = await r14.return();
        await b2;
      }
    }
    async function f7() {
      for (; ; ) {
        try {
          let { value: a7, done: c12 } = i7 ? await r14.next() : r14.next();
          if (c12) o9.push(null);
          else {
            let s16 = a7 && typeof a7.then == "function" ? await a7 : a7;
            if (s16 === null) throw l6 = false, new Fl();
            if (o9.push(s16)) continue;
            l6 = false;
          }
        } catch (a7) {
          o9.destroy(a7);
        }
        break;
      }
    }
    return o9;
  }
  Qn.exports = Ul;
});
var we = g2((au, dr) => {
  var W3 = __process$, { ArrayPrototypeIndexOf: Bl, NumberIsInteger: Gl, NumberIsNaN: Hl, NumberParseInt: Vl, ObjectDefineProperties: tr, ObjectKeys: Yl, ObjectSetPrototypeOf: nr, Promise: Kl, SafeSet: zl, SymbolAsyncIterator: Xl, Symbol: Jl } = m();
  dr.exports = w3;
  w3.ReadableState = yt;
  var { EventEmitter: Ql } = events_default, { Stream: z, prependListener: Zl } = Le(), { Buffer: ht } = buffer_default2, { addAbortSignal: ea } = ke(), ta = Y(), y4 = j().debuglog("stream", (e6) => {
    y4 = e6;
  }), na = Vn(), ue2 = Z(), { getHighWaterMark: ra, getDefaultHighWaterMark: ia } = Ce(), { aggregateTwoErrors: Zn, codes: { ERR_INVALID_ARG_TYPE: oa, ERR_METHOD_NOT_IMPLEMENTED: la, ERR_OUT_OF_RANGE: aa, ERR_STREAM_PUSH_AFTER_EOF: fa, ERR_STREAM_UNSHIFT_AFTER_END_EVENT: ua } } = O(), { validateObject: sa } = _e(), ee = Jl("kPaused"), { StringDecoder: rr } = string_decoder_default2, da = ct();
  nr(w3.prototype, z.prototype);
  nr(w3, z);
  var bt = () => {
  }, { errorOrDestroy: fe2 } = ue2;
  function yt(e6, t18, n12) {
    typeof n12 != "boolean" && (n12 = t18 instanceof v()), this.objectMode = !!(e6 && e6.objectMode), n12 && (this.objectMode = this.objectMode || !!(e6 && e6.readableObjectMode)), this.highWaterMark = e6 ? ra(this, e6, "readableHighWaterMark", n12) : ia(false), this.buffer = new na(), this.length = 0, this.pipes = [], this.flowing = null, this.ended = false, this.endEmitted = false, this.reading = false, this.constructed = true, this.sync = true, this.needReadable = false, this.emittedReadable = false, this.readableListening = false, this.resumeScheduled = false, this[ee] = null, this.errorEmitted = false, this.emitClose = !e6 || e6.emitClose !== false, this.autoDestroy = !e6 || e6.autoDestroy !== false, this.destroyed = false, this.errored = null, this.closed = false, this.closeEmitted = false, this.defaultEncoding = e6 && e6.defaultEncoding || "utf8", this.awaitDrainWriters = null, this.multiAwaitDrain = false, this.readingMore = false, this.dataEmitted = false, this.decoder = null, this.encoding = null, e6 && e6.encoding && (this.decoder = new rr(e6.encoding), this.encoding = e6.encoding);
  }
  function w3(e6) {
    if (!(this instanceof w3)) return new w3(e6);
    let t18 = this instanceof v();
    this._readableState = new yt(e6, this, t18), e6 && (typeof e6.read == "function" && (this._read = e6.read), typeof e6.destroy == "function" && (this._destroy = e6.destroy), typeof e6.construct == "function" && (this._construct = e6.construct), e6.signal && !t18 && ea(e6.signal, this)), z.call(this, e6), ue2.construct(this, () => {
      this._readableState.needReadable && je2(this, this._readableState);
    });
  }
  w3.prototype.destroy = ue2.destroy;
  w3.prototype._undestroy = ue2.undestroy;
  w3.prototype._destroy = function(e6, t18) {
    t18(e6);
  };
  w3.prototype[Ql.captureRejectionSymbol] = function(e6) {
    this.destroy(e6);
  };
  w3.prototype.push = function(e6, t18) {
    return ir(this, e6, t18, false);
  };
  w3.prototype.unshift = function(e6, t18) {
    return ir(this, e6, t18, true);
  };
  function ir(e6, t18, n12, r14) {
    y4("readableAddChunk", t18);
    let i7 = e6._readableState, o9;
    if (i7.objectMode || (typeof t18 == "string" ? (n12 = n12 || i7.defaultEncoding, i7.encoding !== n12 && (r14 && i7.encoding ? t18 = ht.from(t18, n12).toString(i7.encoding) : (t18 = ht.from(t18, n12), n12 = ""))) : t18 instanceof ht ? n12 = "" : z._isUint8Array(t18) ? (t18 = z._uint8ArrayToBuffer(t18), n12 = "") : t18 != null && (o9 = new oa("chunk", ["string", "Buffer", "Uint8Array"], t18))), o9) fe2(e6, o9);
    else if (t18 === null) i7.reading = false, ba(e6, i7);
    else if (i7.objectMode || t18 && t18.length > 0) if (r14) if (i7.endEmitted) fe2(e6, new ua());
    else {
      if (i7.destroyed || i7.errored) return false;
      _t(e6, i7, t18, true);
    }
    else if (i7.ended) fe2(e6, new fa());
    else {
      if (i7.destroyed || i7.errored) return false;
      i7.reading = false, i7.decoder && !n12 ? (t18 = i7.decoder.write(t18), i7.objectMode || t18.length !== 0 ? _t(e6, i7, t18, false) : je2(e6, i7)) : _t(e6, i7, t18, false);
    }
    else r14 || (i7.reading = false, je2(e6, i7));
    return !i7.ended && (i7.length < i7.highWaterMark || i7.length === 0);
  }
  function _t(e6, t18, n12, r14) {
    t18.flowing && t18.length === 0 && !t18.sync && e6.listenerCount("data") > 0 ? (t18.multiAwaitDrain ? t18.awaitDrainWriters.clear() : t18.awaitDrainWriters = null, t18.dataEmitted = true, e6.emit("data", n12)) : (t18.length += t18.objectMode ? 1 : n12.length, r14 ? t18.buffer.unshift(n12) : t18.buffer.push(n12), t18.needReadable && $e(e6)), je2(e6, t18);
  }
  w3.prototype.isPaused = function() {
    let e6 = this._readableState;
    return e6[ee] === true || e6.flowing === false;
  };
  w3.prototype.setEncoding = function(e6) {
    let t18 = new rr(e6);
    this._readableState.decoder = t18, this._readableState.encoding = this._readableState.decoder.encoding;
    let n12 = this._readableState.buffer, r14 = "";
    for (let i7 of n12) r14 += t18.write(i7);
    return n12.clear(), r14 !== "" && n12.push(r14), this._readableState.length = r14.length, this;
  };
  var ca = 1073741824;
  function ha(e6) {
    if (e6 > ca) throw new aa("size", "<= 1GiB", e6);
    return e6--, e6 |= e6 >>> 1, e6 |= e6 >>> 2, e6 |= e6 >>> 4, e6 |= e6 >>> 8, e6 |= e6 >>> 16, e6++, e6;
  }
  function er(e6, t18) {
    return e6 <= 0 || t18.length === 0 && t18.ended ? 0 : t18.objectMode ? 1 : Hl(e6) ? t18.flowing && t18.length ? t18.buffer.first().length : t18.length : e6 <= t18.length ? e6 : t18.ended ? t18.length : 0;
  }
  w3.prototype.read = function(e6) {
    y4("read", e6), e6 === void 0 ? e6 = NaN : Gl(e6) || (e6 = Vl(e6, 10));
    let t18 = this._readableState, n12 = e6;
    if (e6 > t18.highWaterMark && (t18.highWaterMark = ha(e6)), e6 !== 0 && (t18.emittedReadable = false), e6 === 0 && t18.needReadable && ((t18.highWaterMark !== 0 ? t18.length >= t18.highWaterMark : t18.length > 0) || t18.ended)) return y4("read: emitReadable", t18.length, t18.ended), t18.length === 0 && t18.ended ? pt(this) : $e(this), null;
    if (e6 = er(e6, t18), e6 === 0 && t18.ended) return t18.length === 0 && pt(this), null;
    let r14 = t18.needReadable;
    if (y4("need readable", r14), (t18.length === 0 || t18.length - e6 < t18.highWaterMark) && (r14 = true, y4("length less than watermark", r14)), t18.ended || t18.reading || t18.destroyed || t18.errored || !t18.constructed) r14 = false, y4("reading, ended or constructing", r14);
    else if (r14) {
      y4("do read"), t18.reading = true, t18.sync = true, t18.length === 0 && (t18.needReadable = true);
      try {
        this._read(t18.highWaterMark);
      } catch (o9) {
        fe2(this, o9);
      }
      t18.sync = false, t18.reading || (e6 = er(n12, t18));
    }
    let i7;
    return e6 > 0 ? i7 = ur(e6, t18) : i7 = null, i7 === null ? (t18.needReadable = t18.length <= t18.highWaterMark, e6 = 0) : (t18.length -= e6, t18.multiAwaitDrain ? t18.awaitDrainWriters.clear() : t18.awaitDrainWriters = null), t18.length === 0 && (t18.ended || (t18.needReadable = true), n12 !== e6 && t18.ended && pt(this)), i7 !== null && !t18.errorEmitted && !t18.closeEmitted && (t18.dataEmitted = true, this.emit("data", i7)), i7;
  };
  function ba(e6, t18) {
    if (y4("onEofChunk"), !t18.ended) {
      if (t18.decoder) {
        let n12 = t18.decoder.end();
        n12 && n12.length && (t18.buffer.push(n12), t18.length += t18.objectMode ? 1 : n12.length);
      }
      t18.ended = true, t18.sync ? $e(e6) : (t18.needReadable = false, t18.emittedReadable = true, or(e6));
    }
  }
  function $e(e6) {
    let t18 = e6._readableState;
    y4("emitReadable", t18.needReadable, t18.emittedReadable), t18.needReadable = false, t18.emittedReadable || (y4("emitReadable", t18.flowing), t18.emittedReadable = true, W3.nextTick(or, e6));
  }
  function or(e6) {
    let t18 = e6._readableState;
    y4("emitReadable_", t18.destroyed, t18.length, t18.ended), !t18.destroyed && !t18.errored && (t18.length || t18.ended) && (e6.emit("readable"), t18.emittedReadable = false), t18.needReadable = !t18.flowing && !t18.ended && t18.length <= t18.highWaterMark, ar(e6);
  }
  function je2(e6, t18) {
    !t18.readingMore && t18.constructed && (t18.readingMore = true, W3.nextTick(_a, e6, t18));
  }
  function _a(e6, t18) {
    for (; !t18.reading && !t18.ended && (t18.length < t18.highWaterMark || t18.flowing && t18.length === 0); ) {
      let n12 = t18.length;
      if (y4("maybeReadMore read 0"), e6.read(0), n12 === t18.length) break;
    }
    t18.readingMore = false;
  }
  w3.prototype._read = function(e6) {
    throw new la("_read()");
  };
  w3.prototype.pipe = function(e6, t18) {
    let n12 = this, r14 = this._readableState;
    r14.pipes.length === 1 && (r14.multiAwaitDrain || (r14.multiAwaitDrain = true, r14.awaitDrainWriters = new zl(r14.awaitDrainWriters ? [r14.awaitDrainWriters] : []))), r14.pipes.push(e6), y4("pipe count=%d opts=%j", r14.pipes.length, t18);
    let o9 = (!t18 || t18.end !== false) && e6 !== W3.stdout && e6 !== W3.stderr ? u3 : L2;
    r14.endEmitted ? W3.nextTick(o9) : n12.once("end", o9), e6.on("unpipe", l6);
    function l6(_4, p3) {
      y4("onunpipe"), _4 === n12 && p3 && p3.hasUnpiped === false && (p3.hasUnpiped = true, c12());
    }
    function u3() {
      y4("onend"), e6.end();
    }
    let f7, a7 = false;
    function c12() {
      y4("cleanup"), e6.removeListener("close", h8), e6.removeListener("finish", D3), f7 && e6.removeListener("drain", f7), e6.removeListener("error", d2), e6.removeListener("unpipe", l6), n12.removeListener("end", u3), n12.removeListener("end", L2), n12.removeListener("data", b2), a7 = true, f7 && r14.awaitDrainWriters && (!e6._writableState || e6._writableState.needDrain) && f7();
    }
    function s16() {
      a7 || (r14.pipes.length === 1 && r14.pipes[0] === e6 ? (y4("false write response, pause", 0), r14.awaitDrainWriters = e6, r14.multiAwaitDrain = false) : r14.pipes.length > 1 && r14.pipes.includes(e6) && (y4("false write response, pause", r14.awaitDrainWriters.size), r14.awaitDrainWriters.add(e6)), n12.pause()), f7 || (f7 = pa(n12, e6), e6.on("drain", f7));
    }
    n12.on("data", b2);
    function b2(_4) {
      y4("ondata");
      let p3 = e6.write(_4);
      y4("dest.write", p3), p3 === false && s16();
    }
    function d2(_4) {
      if (y4("onerror", _4), L2(), e6.removeListener("error", d2), e6.listenerCount("error") === 0) {
        let p3 = e6._writableState || e6._readableState;
        p3 && !p3.errorEmitted ? fe2(e6, _4) : e6.emit("error", _4);
      }
    }
    Zl(e6, "error", d2);
    function h8() {
      e6.removeListener("finish", D3), L2();
    }
    e6.once("close", h8);
    function D3() {
      y4("onfinish"), e6.removeListener("close", h8), L2();
    }
    e6.once("finish", D3);
    function L2() {
      y4("unpipe"), n12.unpipe(e6);
    }
    return e6.emit("pipe", n12), e6.writableNeedDrain === true ? r14.flowing && s16() : r14.flowing || (y4("pipe resume"), n12.resume()), e6;
  };
  function pa(e6, t18) {
    return function() {
      let r14 = e6._readableState;
      r14.awaitDrainWriters === t18 ? (y4("pipeOnDrain", 1), r14.awaitDrainWriters = null) : r14.multiAwaitDrain && (y4("pipeOnDrain", r14.awaitDrainWriters.size), r14.awaitDrainWriters.delete(t18)), (!r14.awaitDrainWriters || r14.awaitDrainWriters.size === 0) && e6.listenerCount("data") && e6.resume();
    };
  }
  w3.prototype.unpipe = function(e6) {
    let t18 = this._readableState, n12 = { hasUnpiped: false };
    if (t18.pipes.length === 0) return this;
    if (!e6) {
      let i7 = t18.pipes;
      t18.pipes = [], this.pause();
      for (let o9 = 0; o9 < i7.length; o9++) i7[o9].emit("unpipe", this, { hasUnpiped: false });
      return this;
    }
    let r14 = Bl(t18.pipes, e6);
    return r14 === -1 ? this : (t18.pipes.splice(r14, 1), t18.pipes.length === 0 && this.pause(), e6.emit("unpipe", this, n12), this);
  };
  w3.prototype.on = function(e6, t18) {
    let n12 = z.prototype.on.call(this, e6, t18), r14 = this._readableState;
    return e6 === "data" ? (r14.readableListening = this.listenerCount("readable") > 0, r14.flowing !== false && this.resume()) : e6 === "readable" && !r14.endEmitted && !r14.readableListening && (r14.readableListening = r14.needReadable = true, r14.flowing = false, r14.emittedReadable = false, y4("on readable", r14.length, r14.reading), r14.length ? $e(this) : r14.reading || W3.nextTick(wa, this)), n12;
  };
  w3.prototype.addListener = w3.prototype.on;
  w3.prototype.removeListener = function(e6, t18) {
    let n12 = z.prototype.removeListener.call(this, e6, t18);
    return e6 === "readable" && W3.nextTick(lr, this), n12;
  };
  w3.prototype.off = w3.prototype.removeListener;
  w3.prototype.removeAllListeners = function(e6) {
    let t18 = z.prototype.removeAllListeners.apply(this, arguments);
    return (e6 === "readable" || e6 === void 0) && W3.nextTick(lr, this), t18;
  };
  function lr(e6) {
    let t18 = e6._readableState;
    t18.readableListening = e6.listenerCount("readable") > 0, t18.resumeScheduled && t18[ee] === false ? t18.flowing = true : e6.listenerCount("data") > 0 ? e6.resume() : t18.readableListening || (t18.flowing = null);
  }
  function wa(e6) {
    y4("readable nexttick read 0"), e6.read(0);
  }
  w3.prototype.resume = function() {
    let e6 = this._readableState;
    return e6.flowing || (y4("resume"), e6.flowing = !e6.readableListening, ya(this, e6)), e6[ee] = false, this;
  };
  function ya(e6, t18) {
    t18.resumeScheduled || (t18.resumeScheduled = true, W3.nextTick(ga, e6, t18));
  }
  function ga(e6, t18) {
    y4("resume", t18.reading), t18.reading || e6.read(0), t18.resumeScheduled = false, e6.emit("resume"), ar(e6), t18.flowing && !t18.reading && e6.read(0);
  }
  w3.prototype.pause = function() {
    return y4("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== false && (y4("pause"), this._readableState.flowing = false, this.emit("pause")), this._readableState[ee] = true, this;
  };
  function ar(e6) {
    let t18 = e6._readableState;
    for (y4("flow", t18.flowing); t18.flowing && e6.read() !== null; ) ;
  }
  w3.prototype.wrap = function(e6) {
    let t18 = false;
    e6.on("data", (r14) => {
      !this.push(r14) && e6.pause && (t18 = true, e6.pause());
    }), e6.on("end", () => {
      this.push(null);
    }), e6.on("error", (r14) => {
      fe2(this, r14);
    }), e6.on("close", () => {
      this.destroy();
    }), e6.on("destroy", () => {
      this.destroy();
    }), this._read = () => {
      t18 && e6.resume && (t18 = false, e6.resume());
    };
    let n12 = Yl(e6);
    for (let r14 = 1; r14 < n12.length; r14++) {
      let i7 = n12[r14];
      this[i7] === void 0 && typeof e6[i7] == "function" && (this[i7] = e6[i7].bind(e6));
    }
    return this;
  };
  w3.prototype[Xl] = function() {
    return fr(this);
  };
  w3.prototype.iterator = function(e6) {
    return e6 !== void 0 && sa(e6, "options"), fr(this, e6);
  };
  function fr(e6, t18) {
    typeof e6.read != "function" && (e6 = w3.wrap(e6, { objectMode: true }));
    let n12 = Sa(e6, t18);
    return n12.stream = e6, n12;
  }
  async function* Sa(e6, t18) {
    let n12 = bt;
    function r14(l6) {
      this === e6 ? (n12(), n12 = bt) : n12 = l6;
    }
    e6.on("readable", r14);
    let i7, o9 = ta(e6, { writable: false }, (l6) => {
      i7 = l6 ? Zn(i7, l6) : null, n12(), n12 = bt;
    });
    try {
      for (; ; ) {
        let l6 = e6.destroyed ? null : e6.read();
        if (l6 !== null) yield l6;
        else {
          if (i7) throw i7;
          if (i7 === null) return;
          await new Kl(r14);
        }
      }
    } catch (l6) {
      throw i7 = Zn(i7, l6), i7;
    } finally {
      (i7 || t18?.destroyOnReturn !== false) && (i7 === void 0 || e6._readableState.autoDestroy) ? ue2.destroyer(e6, null) : (e6.off("readable", r14), o9());
    }
  }
  tr(w3.prototype, { readable: { __proto__: null, get() {
    let e6 = this._readableState;
    return !!e6 && e6.readable !== false && !e6.destroyed && !e6.errorEmitted && !e6.endEmitted;
  }, set(e6) {
    this._readableState && (this._readableState.readable = !!e6);
  } }, readableDidRead: { __proto__: null, enumerable: false, get: function() {
    return this._readableState.dataEmitted;
  } }, readableAborted: { __proto__: null, enumerable: false, get: function() {
    return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);
  } }, readableHighWaterMark: { __proto__: null, enumerable: false, get: function() {
    return this._readableState.highWaterMark;
  } }, readableBuffer: { __proto__: null, enumerable: false, get: function() {
    return this._readableState && this._readableState.buffer;
  } }, readableFlowing: { __proto__: null, enumerable: false, get: function() {
    return this._readableState.flowing;
  }, set: function(e6) {
    this._readableState && (this._readableState.flowing = e6);
  } }, readableLength: { __proto__: null, enumerable: false, get() {
    return this._readableState.length;
  } }, readableObjectMode: { __proto__: null, enumerable: false, get() {
    return this._readableState ? this._readableState.objectMode : false;
  } }, readableEncoding: { __proto__: null, enumerable: false, get() {
    return this._readableState ? this._readableState.encoding : null;
  } }, errored: { __proto__: null, enumerable: false, get() {
    return this._readableState ? this._readableState.errored : null;
  } }, closed: { __proto__: null, get() {
    return this._readableState ? this._readableState.closed : false;
  } }, destroyed: { __proto__: null, enumerable: false, get() {
    return this._readableState ? this._readableState.destroyed : false;
  }, set(e6) {
    !this._readableState || (this._readableState.destroyed = e6);
  } }, readableEnded: { __proto__: null, enumerable: false, get() {
    return this._readableState ? this._readableState.endEmitted : false;
  } } });
  tr(yt.prototype, { pipesCount: { __proto__: null, get() {
    return this.pipes.length;
  } }, paused: { __proto__: null, get() {
    return this[ee] !== false;
  }, set(e6) {
    this[ee] = !!e6;
  } } });
  w3._fromList = ur;
  function ur(e6, t18) {
    if (t18.length === 0) return null;
    let n12;
    return t18.objectMode ? n12 = t18.buffer.shift() : !e6 || e6 >= t18.length ? (t18.decoder ? n12 = t18.buffer.join("") : t18.buffer.length === 1 ? n12 = t18.buffer.first() : n12 = t18.buffer.concat(t18.length), t18.buffer.clear()) : n12 = t18.buffer.consume(e6, t18.decoder), n12;
  }
  function pt(e6) {
    let t18 = e6._readableState;
    y4("endReadable", t18.endEmitted), t18.endEmitted || (t18.ended = true, W3.nextTick(Ea, t18, e6));
  }
  function Ea(e6, t18) {
    if (y4("endReadableNT", e6.endEmitted, e6.length), !e6.errored && !e6.closeEmitted && !e6.endEmitted && e6.length === 0) {
      if (e6.endEmitted = true, t18.emit("end"), t18.writable && t18.allowHalfOpen === false) W3.nextTick(Ra, t18);
      else if (e6.autoDestroy) {
        let n12 = t18._writableState;
        (!n12 || n12.autoDestroy && (n12.finished || n12.writable === false)) && t18.destroy();
      }
    }
  }
  function Ra(e6) {
    e6.writable && !e6.writableEnded && !e6.destroyed && e6.end();
  }
  w3.from = function(e6, t18) {
    return da(w3, e6, t18);
  };
  var wt;
  function sr() {
    return wt === void 0 && (wt = {}), wt;
  }
  w3.fromWeb = function(e6, t18) {
    return sr().newStreamReadableFromReadableStream(e6, t18);
  };
  w3.toWeb = function(e6, t18) {
    return sr().newReadableStreamFromStreamReadable(e6, t18);
  };
  w3.wrap = function(e6, t18) {
    var n12, r14;
    return new w3({ objectMode: (n12 = (r14 = e6.readableObjectMode) !== null && r14 !== void 0 ? r14 : e6.objectMode) !== null && n12 !== void 0 ? n12 : true, ...t18, destroy(i7, o9) {
      ue2.destroyer(e6, i7), o9(i7);
    } }).wrap(e6);
  };
});
var Tt = g2((fu, Ar) => {
  var te2 = __process$, { ArrayPrototypeSlice: br, Error: Aa, FunctionPrototypeSymbolHasInstance: _r, ObjectDefineProperty: pr, ObjectDefineProperties: ma, ObjectSetPrototypeOf: wr, StringPrototypeToLowerCase: Ta, Symbol: Ia, SymbolHasInstance: Ma } = m();
  Ar.exports = S3;
  S3.WritableState = Se2;
  var { EventEmitter: Na } = events_default, ye = Le().Stream, { Buffer: ve2 } = buffer_default2, Be = Z(), { addAbortSignal: Da } = ke(), { getHighWaterMark: Oa, getDefaultHighWaterMark: qa } = Ce(), { ERR_INVALID_ARG_TYPE: xa, ERR_METHOD_NOT_IMPLEMENTED: La, ERR_MULTIPLE_CALLBACK: yr, ERR_STREAM_CANNOT_PIPE: Pa, ERR_STREAM_DESTROYED: ge2, ERR_STREAM_ALREADY_FINISHED: ka, ERR_STREAM_NULL_VALUES: Wa, ERR_STREAM_WRITE_AFTER_END: Ca, ERR_UNKNOWN_ENCODING: gr } = O().codes, { errorOrDestroy: se2 } = Be;
  wr(S3.prototype, ye.prototype);
  wr(S3, ye);
  function Et() {
  }
  var de2 = Ia("kOnFinished");
  function Se2(e6, t18, n12) {
    typeof n12 != "boolean" && (n12 = t18 instanceof v()), this.objectMode = !!(e6 && e6.objectMode), n12 && (this.objectMode = this.objectMode || !!(e6 && e6.writableObjectMode)), this.highWaterMark = e6 ? Oa(this, e6, "writableHighWaterMark", n12) : qa(false), this.finalCalled = false, this.needDrain = false, this.ending = false, this.ended = false, this.finished = false, this.destroyed = false;
    let r14 = !!(e6 && e6.decodeStrings === false);
    this.decodeStrings = !r14, this.defaultEncoding = e6 && e6.defaultEncoding || "utf8", this.length = 0, this.writing = false, this.corked = 0, this.sync = true, this.bufferProcessing = false, this.onwrite = $a.bind(void 0, t18), this.writecb = null, this.writelen = 0, this.afterWriteTickInfo = null, Ue(this), this.pendingcb = 0, this.constructed = true, this.prefinished = false, this.errorEmitted = false, this.emitClose = !e6 || e6.emitClose !== false, this.autoDestroy = !e6 || e6.autoDestroy !== false, this.errored = null, this.closed = false, this.closeEmitted = false, this[de2] = [];
  }
  function Ue(e6) {
    e6.buffered = [], e6.bufferedIndex = 0, e6.allBuffers = true, e6.allNoop = true;
  }
  Se2.prototype.getBuffer = function() {
    return br(this.buffered, this.bufferedIndex);
  };
  pr(Se2.prototype, "bufferedRequestCount", { __proto__: null, get() {
    return this.buffered.length - this.bufferedIndex;
  } });
  function S3(e6) {
    let t18 = this instanceof v();
    if (!t18 && !_r(S3, this)) return new S3(e6);
    this._writableState = new Se2(e6, this, t18), e6 && (typeof e6.write == "function" && (this._write = e6.write), typeof e6.writev == "function" && (this._writev = e6.writev), typeof e6.destroy == "function" && (this._destroy = e6.destroy), typeof e6.final == "function" && (this._final = e6.final), typeof e6.construct == "function" && (this._construct = e6.construct), e6.signal && Da(e6.signal, this)), ye.call(this, e6), Be.construct(this, () => {
      let n12 = this._writableState;
      n12.writing || At(this, n12), mt(this, n12);
    });
  }
  pr(S3, Ma, { __proto__: null, value: function(e6) {
    return _r(this, e6) ? true : this !== S3 ? false : e6 && e6._writableState instanceof Se2;
  } });
  S3.prototype.pipe = function() {
    se2(this, new Pa());
  };
  function Sr(e6, t18, n12, r14) {
    let i7 = e6._writableState;
    if (typeof n12 == "function") r14 = n12, n12 = i7.defaultEncoding;
    else {
      if (!n12) n12 = i7.defaultEncoding;
      else if (n12 !== "buffer" && !ve2.isEncoding(n12)) throw new gr(n12);
      typeof r14 != "function" && (r14 = Et);
    }
    if (t18 === null) throw new Wa();
    if (!i7.objectMode) if (typeof t18 == "string") i7.decodeStrings !== false && (t18 = ve2.from(t18, n12), n12 = "buffer");
    else if (t18 instanceof ve2) n12 = "buffer";
    else if (ye._isUint8Array(t18)) t18 = ye._uint8ArrayToBuffer(t18), n12 = "buffer";
    else throw new xa("chunk", ["string", "Buffer", "Uint8Array"], t18);
    let o9;
    return i7.ending ? o9 = new Ca() : i7.destroyed && (o9 = new ge2("write")), o9 ? (te2.nextTick(r14, o9), se2(e6, o9, true), o9) : (i7.pendingcb++, ja(e6, i7, t18, n12, r14));
  }
  S3.prototype.write = function(e6, t18, n12) {
    return Sr(this, e6, t18, n12) === true;
  };
  S3.prototype.cork = function() {
    this._writableState.corked++;
  };
  S3.prototype.uncork = function() {
    let e6 = this._writableState;
    e6.corked && (e6.corked--, e6.writing || At(this, e6));
  };
  S3.prototype.setDefaultEncoding = function(t18) {
    if (typeof t18 == "string" && (t18 = Ta(t18)), !ve2.isEncoding(t18)) throw new gr(t18);
    return this._writableState.defaultEncoding = t18, this;
  };
  function ja(e6, t18, n12, r14, i7) {
    let o9 = t18.objectMode ? 1 : n12.length;
    t18.length += o9;
    let l6 = t18.length < t18.highWaterMark;
    return l6 || (t18.needDrain = true), t18.writing || t18.corked || t18.errored || !t18.constructed ? (t18.buffered.push({ chunk: n12, encoding: r14, callback: i7 }), t18.allBuffers && r14 !== "buffer" && (t18.allBuffers = false), t18.allNoop && i7 !== Et && (t18.allNoop = false)) : (t18.writelen = o9, t18.writecb = i7, t18.writing = true, t18.sync = true, e6._write(n12, r14, t18.onwrite), t18.sync = false), l6 && !t18.errored && !t18.destroyed;
  }
  function cr(e6, t18, n12, r14, i7, o9, l6) {
    t18.writelen = r14, t18.writecb = l6, t18.writing = true, t18.sync = true, t18.destroyed ? t18.onwrite(new ge2("write")) : n12 ? e6._writev(i7, t18.onwrite) : e6._write(i7, o9, t18.onwrite), t18.sync = false;
  }
  function hr(e6, t18, n12, r14) {
    --t18.pendingcb, r14(n12), Rt(t18), se2(e6, n12);
  }
  function $a(e6, t18) {
    let n12 = e6._writableState, r14 = n12.sync, i7 = n12.writecb;
    if (typeof i7 != "function") {
      se2(e6, new yr());
      return;
    }
    n12.writing = false, n12.writecb = null, n12.length -= n12.writelen, n12.writelen = 0, t18 ? (t18.stack, n12.errored || (n12.errored = t18), e6._readableState && !e6._readableState.errored && (e6._readableState.errored = t18), r14 ? te2.nextTick(hr, e6, n12, t18, i7) : hr(e6, n12, t18, i7)) : (n12.buffered.length > n12.bufferedIndex && At(e6, n12), r14 ? n12.afterWriteTickInfo !== null && n12.afterWriteTickInfo.cb === i7 ? n12.afterWriteTickInfo.count++ : (n12.afterWriteTickInfo = { count: 1, cb: i7, stream: e6, state: n12 }, te2.nextTick(va, n12.afterWriteTickInfo)) : Er(e6, n12, 1, i7));
  }
  function va({ stream: e6, state: t18, count: n12, cb: r14 }) {
    return t18.afterWriteTickInfo = null, Er(e6, t18, n12, r14);
  }
  function Er(e6, t18, n12, r14) {
    for (!t18.ending && !e6.destroyed && t18.length === 0 && t18.needDrain && (t18.needDrain = false, e6.emit("drain")); n12-- > 0; ) t18.pendingcb--, r14();
    t18.destroyed && Rt(t18), mt(e6, t18);
  }
  function Rt(e6) {
    if (e6.writing) return;
    for (let i7 = e6.bufferedIndex; i7 < e6.buffered.length; ++i7) {
      var t18;
      let { chunk: o9, callback: l6 } = e6.buffered[i7], u3 = e6.objectMode ? 1 : o9.length;
      e6.length -= u3, l6((t18 = e6.errored) !== null && t18 !== void 0 ? t18 : new ge2("write"));
    }
    let n12 = e6[de2].splice(0);
    for (let i7 = 0; i7 < n12.length; i7++) {
      var r14;
      n12[i7]((r14 = e6.errored) !== null && r14 !== void 0 ? r14 : new ge2("end"));
    }
    Ue(e6);
  }
  function At(e6, t18) {
    if (t18.corked || t18.bufferProcessing || t18.destroyed || !t18.constructed) return;
    let { buffered: n12, bufferedIndex: r14, objectMode: i7 } = t18, o9 = n12.length - r14;
    if (!o9) return;
    let l6 = r14;
    if (t18.bufferProcessing = true, o9 > 1 && e6._writev) {
      t18.pendingcb -= o9 - 1;
      let u3 = t18.allNoop ? Et : (a7) => {
        for (let c12 = l6; c12 < n12.length; ++c12) n12[c12].callback(a7);
      }, f7 = t18.allNoop && l6 === 0 ? n12 : br(n12, l6);
      f7.allBuffers = t18.allBuffers, cr(e6, t18, true, t18.length, f7, "", u3), Ue(t18);
    } else {
      do {
        let { chunk: u3, encoding: f7, callback: a7 } = n12[l6];
        n12[l6++] = null;
        let c12 = i7 ? 1 : u3.length;
        cr(e6, t18, false, c12, u3, f7, a7);
      } while (l6 < n12.length && !t18.writing);
      l6 === n12.length ? Ue(t18) : l6 > 256 ? (n12.splice(0, l6), t18.bufferedIndex = 0) : t18.bufferedIndex = l6;
    }
    t18.bufferProcessing = false;
  }
  S3.prototype._write = function(e6, t18, n12) {
    if (this._writev) this._writev([{ chunk: e6, encoding: t18 }], n12);
    else throw new La("_write()");
  };
  S3.prototype._writev = null;
  S3.prototype.end = function(e6, t18, n12) {
    let r14 = this._writableState;
    typeof e6 == "function" ? (n12 = e6, e6 = null, t18 = null) : typeof t18 == "function" && (n12 = t18, t18 = null);
    let i7;
    if (e6 != null) {
      let o9 = Sr(this, e6, t18);
      o9 instanceof Aa && (i7 = o9);
    }
    return r14.corked && (r14.corked = 1, this.uncork()), i7 || (!r14.errored && !r14.ending ? (r14.ending = true, mt(this, r14, true), r14.ended = true) : r14.finished ? i7 = new ka("end") : r14.destroyed && (i7 = new ge2("end"))), typeof n12 == "function" && (i7 || r14.finished ? te2.nextTick(n12, i7) : r14[de2].push(n12)), this;
  };
  function Fe(e6) {
    return e6.ending && !e6.destroyed && e6.constructed && e6.length === 0 && !e6.errored && e6.buffered.length === 0 && !e6.finished && !e6.writing && !e6.errorEmitted && !e6.closeEmitted;
  }
  function Fa(e6, t18) {
    let n12 = false;
    function r14(i7) {
      if (n12) {
        se2(e6, i7 ?? yr());
        return;
      }
      if (n12 = true, t18.pendingcb--, i7) {
        let o9 = t18[de2].splice(0);
        for (let l6 = 0; l6 < o9.length; l6++) o9[l6](i7);
        se2(e6, i7, t18.sync);
      } else Fe(t18) && (t18.prefinished = true, e6.emit("prefinish"), t18.pendingcb++, te2.nextTick(St, e6, t18));
    }
    t18.sync = true, t18.pendingcb++;
    try {
      e6._final(r14);
    } catch (i7) {
      r14(i7);
    }
    t18.sync = false;
  }
  function Ua(e6, t18) {
    !t18.prefinished && !t18.finalCalled && (typeof e6._final == "function" && !t18.destroyed ? (t18.finalCalled = true, Fa(e6, t18)) : (t18.prefinished = true, e6.emit("prefinish")));
  }
  function mt(e6, t18, n12) {
    Fe(t18) && (Ua(e6, t18), t18.pendingcb === 0 && (n12 ? (t18.pendingcb++, te2.nextTick((r14, i7) => {
      Fe(i7) ? St(r14, i7) : i7.pendingcb--;
    }, e6, t18)) : Fe(t18) && (t18.pendingcb++, St(e6, t18))));
  }
  function St(e6, t18) {
    t18.pendingcb--, t18.finished = true;
    let n12 = t18[de2].splice(0);
    for (let r14 = 0; r14 < n12.length; r14++) n12[r14]();
    if (e6.emit("finish"), t18.autoDestroy) {
      let r14 = e6._readableState;
      (!r14 || r14.autoDestroy && (r14.endEmitted || r14.readable === false)) && e6.destroy();
    }
  }
  ma(S3.prototype, { closed: { __proto__: null, get() {
    return this._writableState ? this._writableState.closed : false;
  } }, destroyed: { __proto__: null, get() {
    return this._writableState ? this._writableState.destroyed : false;
  }, set(e6) {
    this._writableState && (this._writableState.destroyed = e6);
  } }, writable: { __proto__: null, get() {
    let e6 = this._writableState;
    return !!e6 && e6.writable !== false && !e6.destroyed && !e6.errored && !e6.ending && !e6.ended;
  }, set(e6) {
    this._writableState && (this._writableState.writable = !!e6);
  } }, writableFinished: { __proto__: null, get() {
    return this._writableState ? this._writableState.finished : false;
  } }, writableObjectMode: { __proto__: null, get() {
    return this._writableState ? this._writableState.objectMode : false;
  } }, writableBuffer: { __proto__: null, get() {
    return this._writableState && this._writableState.getBuffer();
  } }, writableEnded: { __proto__: null, get() {
    return this._writableState ? this._writableState.ending : false;
  } }, writableNeedDrain: { __proto__: null, get() {
    let e6 = this._writableState;
    return e6 ? !e6.destroyed && !e6.ending && e6.needDrain : false;
  } }, writableHighWaterMark: { __proto__: null, get() {
    return this._writableState && this._writableState.highWaterMark;
  } }, writableCorked: { __proto__: null, get() {
    return this._writableState ? this._writableState.corked : 0;
  } }, writableLength: { __proto__: null, get() {
    return this._writableState && this._writableState.length;
  } }, errored: { __proto__: null, enumerable: false, get() {
    return this._writableState ? this._writableState.errored : null;
  } }, writableAborted: { __proto__: null, enumerable: false, get: function() {
    return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);
  } } });
  var Ba = Be.destroy;
  S3.prototype.destroy = function(e6, t18) {
    let n12 = this._writableState;
    return !n12.destroyed && (n12.bufferedIndex < n12.buffered.length || n12[de2].length) && te2.nextTick(Rt, n12), Ba.call(this, e6, t18), this;
  };
  S3.prototype._undestroy = Be.undestroy;
  S3.prototype._destroy = function(e6, t18) {
    t18(e6);
  };
  S3.prototype[Na.captureRejectionSymbol] = function(e6) {
    this.destroy(e6);
  };
  var gt;
  function Rr() {
    return gt === void 0 && (gt = {}), gt;
  }
  S3.fromWeb = function(e6, t18) {
    return Rr().newStreamWritableFromWritableStream(e6, t18);
  };
  S3.toWeb = function(e6) {
    return Rr().newWritableStreamFromStreamWritable(e6);
  };
});
var kr = g2((uu, Pr) => {
  var It = __process$, Ga = buffer_default2, { isReadable: Ha, isWritable: Va, isIterable: mr, isNodeStream: Ya, isReadableNodeStream: Tr, isWritableNodeStream: Ir, isDuplexNodeStream: Ka } = V(), Mr = Y(), { AbortError: Lr, codes: { ERR_INVALID_ARG_TYPE: za, ERR_INVALID_RETURN_VALUE: Nr } } = O(), { destroyer: ce2 } = Z(), Xa = v(), Ja = we(), { createDeferredPromise: Dr } = j(), Or = ct(), qr = globalThis.Blob || Ga.Blob, Qa = typeof qr < "u" ? function(t18) {
    return t18 instanceof qr;
  } : function(t18) {
    return false;
  }, Za = globalThis.AbortController, { FunctionPrototypeCall: xr } = m(), ne2 = class extends Xa {
    constructor(t18) {
      super(t18), t18?.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), t18?.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true);
    }
  };
  Pr.exports = function e6(t18, n12) {
    if (Ka(t18)) return t18;
    if (Tr(t18)) return Ge({ readable: t18 });
    if (Ir(t18)) return Ge({ writable: t18 });
    if (Ya(t18)) return Ge({ writable: false, readable: false });
    if (typeof t18 == "function") {
      let { value: i7, write: o9, final: l6, destroy: u3 } = ef(t18);
      if (mr(i7)) return Or(ne2, i7, { objectMode: true, write: o9, final: l6, destroy: u3 });
      let f7 = i7?.then;
      if (typeof f7 == "function") {
        let a7, c12 = xr(f7, i7, (s16) => {
          if (s16 != null) throw new Nr("nully", "body", s16);
        }, (s16) => {
          ce2(a7, s16);
        });
        return a7 = new ne2({ objectMode: true, readable: false, write: o9, final(s16) {
          l6(async () => {
            try {
              await c12, It.nextTick(s16, null);
            } catch (b2) {
              It.nextTick(s16, b2);
            }
          });
        }, destroy: u3 });
      }
      throw new Nr("Iterable, AsyncIterable or AsyncFunction", n12, i7);
    }
    if (Qa(t18)) return e6(t18.arrayBuffer());
    if (mr(t18)) return Or(ne2, t18, { objectMode: true, writable: false });
    if (typeof t18?.writable == "object" || typeof t18?.readable == "object") {
      let i7 = t18 != null && t18.readable ? Tr(t18?.readable) ? t18?.readable : e6(t18.readable) : void 0, o9 = t18 != null && t18.writable ? Ir(t18?.writable) ? t18?.writable : e6(t18.writable) : void 0;
      return Ge({ readable: i7, writable: o9 });
    }
    let r14 = t18?.then;
    if (typeof r14 == "function") {
      let i7;
      return xr(r14, t18, (o9) => {
        o9 != null && i7.push(o9), i7.push(null);
      }, (o9) => {
        ce2(i7, o9);
      }), i7 = new ne2({ objectMode: true, writable: false, read() {
      } });
    }
    throw new za(n12, ["Blob", "ReadableStream", "WritableStream", "Stream", "Iterable", "AsyncIterable", "Function", "{ readable, writable } pair", "Promise"], t18);
  };
  function ef(e6) {
    let { promise: t18, resolve: n12 } = Dr(), r14 = new Za(), i7 = r14.signal;
    return { value: e6(async function* () {
      for (; ; ) {
        let l6 = t18;
        t18 = null;
        let { chunk: u3, done: f7, cb: a7 } = await l6;
        if (It.nextTick(a7), f7) return;
        if (i7.aborted) throw new Lr(void 0, { cause: i7.reason });
        ({ promise: t18, resolve: n12 } = Dr()), yield u3;
      }
    }(), { signal: i7 }), write(l6, u3, f7) {
      let a7 = n12;
      n12 = null, a7({ chunk: l6, done: false, cb: f7 });
    }, final(l6) {
      let u3 = n12;
      n12 = null, u3({ done: true, cb: l6 });
    }, destroy(l6, u3) {
      r14.abort(), u3(l6);
    } };
  }
  function Ge(e6) {
    let t18 = e6.readable && typeof e6.readable.read != "function" ? Ja.wrap(e6.readable) : e6.readable, n12 = e6.writable, r14 = !!Ha(t18), i7 = !!Va(n12), o9, l6, u3, f7, a7;
    function c12(s16) {
      let b2 = f7;
      f7 = null, b2 ? b2(s16) : s16 ? a7.destroy(s16) : !r14 && !i7 && a7.destroy();
    }
    return a7 = new ne2({ readableObjectMode: !!(t18 != null && t18.readableObjectMode), writableObjectMode: !!(n12 != null && n12.writableObjectMode), readable: r14, writable: i7 }), i7 && (Mr(n12, (s16) => {
      i7 = false, s16 && ce2(t18, s16), c12(s16);
    }), a7._write = function(s16, b2, d2) {
      n12.write(s16, b2) ? d2() : o9 = d2;
    }, a7._final = function(s16) {
      n12.end(), l6 = s16;
    }, n12.on("drain", function() {
      if (o9) {
        let s16 = o9;
        o9 = null, s16();
      }
    }), n12.on("finish", function() {
      if (l6) {
        let s16 = l6;
        l6 = null, s16();
      }
    })), r14 && (Mr(t18, (s16) => {
      r14 = false, s16 && ce2(t18, s16), c12(s16);
    }), t18.on("readable", function() {
      if (u3) {
        let s16 = u3;
        u3 = null, s16();
      }
    }), t18.on("end", function() {
      a7.push(null);
    }), a7._read = function() {
      for (; ; ) {
        let s16 = t18.read();
        if (s16 === null) {
          u3 = a7._read;
          return;
        }
        if (!a7.push(s16)) return;
      }
    }), a7._destroy = function(s16, b2) {
      !s16 && f7 !== null && (s16 = new Lr()), u3 = null, o9 = null, l6 = null, f7 === null ? b2(s16) : (f7 = b2, ce2(n12, s16), ce2(t18, s16));
    }, a7;
  }
});
var v = g2((su, jr) => {
  "use strict";
  var { ObjectDefineProperties: tf, ObjectGetOwnPropertyDescriptor: B2, ObjectKeys: nf, ObjectSetPrototypeOf: Wr } = m();
  jr.exports = C9;
  var Dt = we(), x5 = Tt();
  Wr(C9.prototype, Dt.prototype);
  Wr(C9, Dt);
  {
    let e6 = nf(x5.prototype);
    for (let t18 = 0; t18 < e6.length; t18++) {
      let n12 = e6[t18];
      C9.prototype[n12] || (C9.prototype[n12] = x5.prototype[n12]);
    }
  }
  function C9(e6) {
    if (!(this instanceof C9)) return new C9(e6);
    Dt.call(this, e6), x5.call(this, e6), e6 ? (this.allowHalfOpen = e6.allowHalfOpen !== false, e6.readable === false && (this._readableState.readable = false, this._readableState.ended = true, this._readableState.endEmitted = true), e6.writable === false && (this._writableState.writable = false, this._writableState.ending = true, this._writableState.ended = true, this._writableState.finished = true)) : this.allowHalfOpen = true;
  }
  tf(C9.prototype, { writable: { __proto__: null, ...B2(x5.prototype, "writable") }, writableHighWaterMark: { __proto__: null, ...B2(x5.prototype, "writableHighWaterMark") }, writableObjectMode: { __proto__: null, ...B2(x5.prototype, "writableObjectMode") }, writableBuffer: { __proto__: null, ...B2(x5.prototype, "writableBuffer") }, writableLength: { __proto__: null, ...B2(x5.prototype, "writableLength") }, writableFinished: { __proto__: null, ...B2(x5.prototype, "writableFinished") }, writableCorked: { __proto__: null, ...B2(x5.prototype, "writableCorked") }, writableEnded: { __proto__: null, ...B2(x5.prototype, "writableEnded") }, writableNeedDrain: { __proto__: null, ...B2(x5.prototype, "writableNeedDrain") }, destroyed: { __proto__: null, get() {
    return this._readableState === void 0 || this._writableState === void 0 ? false : this._readableState.destroyed && this._writableState.destroyed;
  }, set(e6) {
    this._readableState && this._writableState && (this._readableState.destroyed = e6, this._writableState.destroyed = e6);
  } } });
  var Mt;
  function Cr() {
    return Mt === void 0 && (Mt = {}), Mt;
  }
  C9.fromWeb = function(e6, t18) {
    return Cr().newStreamDuplexFromReadableWritablePair(e6, t18);
  };
  C9.toWeb = function(e6) {
    return Cr().newReadableWritablePairFromDuplex(e6);
  };
  var Nt;
  C9.from = function(e6) {
    return Nt || (Nt = kr()), Nt(e6, "body");
  };
});
var xt = g2((du, vr) => {
  "use strict";
  var { ObjectSetPrototypeOf: $r, Symbol: rf } = m();
  vr.exports = G2;
  var { ERR_METHOD_NOT_IMPLEMENTED: of } = O().codes, qt = v(), { getHighWaterMark: lf } = Ce();
  $r(G2.prototype, qt.prototype);
  $r(G2, qt);
  var Ee2 = rf("kCallback");
  function G2(e6) {
    if (!(this instanceof G2)) return new G2(e6);
    let t18 = e6 ? lf(this, e6, "readableHighWaterMark", true) : null;
    t18 === 0 && (e6 = { ...e6, highWaterMark: null, readableHighWaterMark: t18, writableHighWaterMark: e6.writableHighWaterMark || 0 }), qt.call(this, e6), this._readableState.sync = false, this[Ee2] = null, e6 && (typeof e6.transform == "function" && (this._transform = e6.transform), typeof e6.flush == "function" && (this._flush = e6.flush)), this.on("prefinish", af);
  }
  function Ot(e6) {
    typeof this._flush == "function" && !this.destroyed ? this._flush((t18, n12) => {
      if (t18) {
        e6 ? e6(t18) : this.destroy(t18);
        return;
      }
      n12 != null && this.push(n12), this.push(null), e6 && e6();
    }) : (this.push(null), e6 && e6());
  }
  function af() {
    this._final !== Ot && Ot.call(this);
  }
  G2.prototype._final = Ot;
  G2.prototype._transform = function(e6, t18, n12) {
    throw new of("_transform()");
  };
  G2.prototype._write = function(e6, t18, n12) {
    let r14 = this._readableState, i7 = this._writableState, o9 = r14.length;
    this._transform(e6, t18, (l6, u3) => {
      if (l6) {
        n12(l6);
        return;
      }
      u3 != null && this.push(u3), i7.ended || o9 === r14.length || r14.length < r14.highWaterMark ? n12() : this[Ee2] = n12;
    });
  };
  G2.prototype._read = function() {
    if (this[Ee2]) {
      let e6 = this[Ee2];
      this[Ee2] = null, e6();
    }
  };
});
var Pt = g2((cu, Ur) => {
  "use strict";
  var { ObjectSetPrototypeOf: Fr } = m();
  Ur.exports = he;
  var Lt = xt();
  Fr(he.prototype, Lt.prototype);
  Fr(he, Lt);
  function he(e6) {
    if (!(this instanceof he)) return new he(e6);
    Lt.call(this, e6);
  }
  he.prototype._transform = function(e6, t18, n12) {
    n12(null, e6);
  };
});
var Ye = g2((hu, zr) => {
  var He = __process$, { ArrayIsArray: ff, Promise: uf, SymbolAsyncIterator: sf } = m(), Ve = Y(), { once: df } = j(), cf = Z(), Br = v(), { aggregateTwoErrors: hf, codes: { ERR_INVALID_ARG_TYPE: Yr, ERR_INVALID_RETURN_VALUE: kt, ERR_MISSING_ARGS: bf, ERR_STREAM_DESTROYED: _f, ERR_STREAM_PREMATURE_CLOSE: pf }, AbortError: wf } = O(), { validateFunction: yf, validateAbortSignal: gf } = _e(), { isIterable: be2, isReadable: Wt, isReadableNodeStream: $t, isNodeStream: Gr } = V(), Sf = globalThis.AbortController, Ct, jt;
  function Hr(e6, t18, n12) {
    let r14 = false;
    e6.on("close", () => {
      r14 = true;
    });
    let i7 = Ve(e6, { readable: t18, writable: n12 }, (o9) => {
      r14 = !o9;
    });
    return { destroy: (o9) => {
      r14 || (r14 = true, cf.destroyer(e6, o9 || new _f("pipe")));
    }, cleanup: i7 };
  }
  function Ef(e6) {
    return yf(e6[e6.length - 1], "streams[stream.length - 1]"), e6.pop();
  }
  function Rf(e6) {
    if (be2(e6)) return e6;
    if ($t(e6)) return Af(e6);
    throw new Yr("val", ["Readable", "Iterable", "AsyncIterable"], e6);
  }
  async function* Af(e6) {
    jt || (jt = we()), yield* jt.prototype[sf].call(e6);
  }
  async function Vr(e6, t18, n12, { end: r14 }) {
    let i7, o9 = null, l6 = (a7) => {
      if (a7 && (i7 = a7), o9) {
        let c12 = o9;
        o9 = null, c12();
      }
    }, u3 = () => new uf((a7, c12) => {
      i7 ? c12(i7) : o9 = () => {
        i7 ? c12(i7) : a7();
      };
    });
    t18.on("drain", l6);
    let f7 = Ve(t18, { readable: false }, l6);
    try {
      t18.writableNeedDrain && await u3();
      for await (let a7 of e6) t18.write(a7) || await u3();
      r14 && t18.end(), await u3(), n12();
    } catch (a7) {
      n12(i7 !== a7 ? hf(i7, a7) : a7);
    } finally {
      f7(), t18.off("drain", l6);
    }
  }
  function mf(...e6) {
    return Kr(e6, df(Ef(e6)));
  }
  function Kr(e6, t18, n12) {
    if (e6.length === 1 && ff(e6[0]) && (e6 = e6[0]), e6.length < 2) throw new bf("streams");
    let r14 = new Sf(), i7 = r14.signal, o9 = n12?.signal, l6 = [];
    gf(o9, "options.signal");
    function u3() {
      d2(new wf());
    }
    o9?.addEventListener("abort", u3);
    let f7, a7, c12 = [], s16 = 0;
    function b2(_4) {
      d2(_4, --s16 === 0);
    }
    function d2(_4, p3) {
      if (_4 && (!f7 || f7.code === "ERR_STREAM_PREMATURE_CLOSE") && (f7 = _4), !(!f7 && !p3)) {
        for (; c12.length; ) c12.shift()(f7);
        o9?.removeEventListener("abort", u3), r14.abort(), p3 && (f7 || l6.forEach((I2) => I2()), He.nextTick(t18, f7, a7));
      }
    }
    let h8;
    for (let _4 = 0; _4 < e6.length; _4++) {
      let p3 = e6[_4], I2 = _4 < e6.length - 1, M2 = _4 > 0, F4 = I2 || n12?.end !== false, re2 = _4 === e6.length - 1;
      if (Gr(p3)) {
        let P4 = function(U2) {
          U2 && U2.name !== "AbortError" && U2.code !== "ERR_STREAM_PREMATURE_CLOSE" && b2(U2);
        };
        var L2 = P4;
        if (F4) {
          let { destroy: U2, cleanup: ze } = Hr(p3, I2, M2);
          c12.push(U2), Wt(p3) && re2 && l6.push(ze);
        }
        p3.on("error", P4), Wt(p3) && re2 && l6.push(() => {
          p3.removeListener("error", P4);
        });
      }
      if (_4 === 0) if (typeof p3 == "function") {
        if (h8 = p3({ signal: i7 }), !be2(h8)) throw new kt("Iterable, AsyncIterable or Stream", "source", h8);
      } else be2(p3) || $t(p3) ? h8 = p3 : h8 = Br.from(p3);
      else if (typeof p3 == "function") if (h8 = Rf(h8), h8 = p3(h8, { signal: i7 }), I2) {
        if (!be2(h8, true)) throw new kt("AsyncIterable", `transform[${_4 - 1}]`, h8);
      } else {
        var D3;
        Ct || (Ct = Pt());
        let P4 = new Ct({ objectMode: true }), U2 = (D3 = h8) === null || D3 === void 0 ? void 0 : D3.then;
        if (typeof U2 == "function") s16++, U2.call(h8, (ie) => {
          a7 = ie, ie != null && P4.write(ie), F4 && P4.end(), He.nextTick(b2);
        }, (ie) => {
          P4.destroy(ie), He.nextTick(b2, ie);
        });
        else if (be2(h8, true)) s16++, Vr(h8, P4, b2, { end: F4 });
        else throw new kt("AsyncIterable or Promise", "destination", h8);
        h8 = P4;
        let { destroy: ze, cleanup: _i } = Hr(h8, false, true);
        c12.push(ze), re2 && l6.push(_i);
      }
      else if (Gr(p3)) {
        if ($t(h8)) {
          s16 += 2;
          let P4 = Tf(h8, p3, b2, { end: F4 });
          Wt(p3) && re2 && l6.push(P4);
        } else if (be2(h8)) s16++, Vr(h8, p3, b2, { end: F4 });
        else throw new Yr("val", ["Readable", "Iterable", "AsyncIterable"], h8);
        h8 = p3;
      } else h8 = Br.from(p3);
    }
    return (i7 != null && i7.aborted || o9 != null && o9.aborted) && He.nextTick(u3), h8;
  }
  function Tf(e6, t18, n12, { end: r14 }) {
    let i7 = false;
    return t18.on("close", () => {
      i7 || n12(new pf());
    }), e6.pipe(t18, { end: r14 }), r14 ? e6.once("end", () => {
      i7 = true, t18.end();
    }) : n12(), Ve(e6, { readable: true, writable: false }, (o9) => {
      let l6 = e6._readableState;
      o9 && o9.code === "ERR_STREAM_PREMATURE_CLOSE" && l6 && l6.ended && !l6.errored && !l6.errorEmitted ? e6.once("end", n12).once("error", n12) : n12(o9);
    }), Ve(t18, { readable: false, writable: true }, n12);
  }
  zr.exports = { pipelineImpl: Kr, pipeline: mf };
});
var ei = g2((bu, Zr) => {
  "use strict";
  var { pipeline: If } = Ye(), Ke = v(), { destroyer: Mf } = Z(), { isNodeStream: Nf, isReadable: Xr, isWritable: Jr } = V(), { AbortError: Df, codes: { ERR_INVALID_ARG_VALUE: Qr, ERR_MISSING_ARGS: Of } } = O();
  Zr.exports = function(...t18) {
    if (t18.length === 0) throw new Of("streams");
    if (t18.length === 1) return Ke.from(t18[0]);
    let n12 = [...t18];
    if (typeof t18[0] == "function" && (t18[0] = Ke.from(t18[0])), typeof t18[t18.length - 1] == "function") {
      let d2 = t18.length - 1;
      t18[d2] = Ke.from(t18[d2]);
    }
    for (let d2 = 0; d2 < t18.length; ++d2) if (!!Nf(t18[d2])) {
      if (d2 < t18.length - 1 && !Xr(t18[d2])) throw new Qr(`streams[${d2}]`, n12[d2], "must be readable");
      if (d2 > 0 && !Jr(t18[d2])) throw new Qr(`streams[${d2}]`, n12[d2], "must be writable");
    }
    let r14, i7, o9, l6, u3;
    function f7(d2) {
      let h8 = l6;
      l6 = null, h8 ? h8(d2) : d2 ? u3.destroy(d2) : !b2 && !s16 && u3.destroy();
    }
    let a7 = t18[0], c12 = If(t18, f7), s16 = !!Jr(a7), b2 = !!Xr(c12);
    return u3 = new Ke({ writableObjectMode: !!(a7 != null && a7.writableObjectMode), readableObjectMode: !!(c12 != null && c12.writableObjectMode), writable: s16, readable: b2 }), s16 && (u3._write = function(d2, h8, D3) {
      a7.write(d2, h8) ? D3() : r14 = D3;
    }, u3._final = function(d2) {
      a7.end(), i7 = d2;
    }, a7.on("drain", function() {
      if (r14) {
        let d2 = r14;
        r14 = null, d2();
      }
    }), c12.on("finish", function() {
      if (i7) {
        let d2 = i7;
        i7 = null, d2();
      }
    })), b2 && (c12.on("readable", function() {
      if (o9) {
        let d2 = o9;
        o9 = null, d2();
      }
    }), c12.on("end", function() {
      u3.push(null);
    }), u3._read = function() {
      for (; ; ) {
        let d2 = c12.read();
        if (d2 === null) {
          o9 = u3._read;
          return;
        }
        if (!u3.push(d2)) return;
      }
    }), u3._destroy = function(d2, h8) {
      !d2 && l6 !== null && (d2 = new Df()), o9 = null, r14 = null, i7 = null, l6 === null ? h8(d2) : (l6 = h8, Mf(c12, d2));
    }, u3;
  };
});
var vt = g2((_u, ti) => {
  "use strict";
  var { ArrayPrototypePop: qf, Promise: xf } = m(), { isIterable: Lf, isNodeStream: Pf } = V(), { pipelineImpl: kf } = Ye(), { finished: Wf } = Y();
  function Cf(...e6) {
    return new xf((t18, n12) => {
      let r14, i7, o9 = e6[e6.length - 1];
      if (o9 && typeof o9 == "object" && !Pf(o9) && !Lf(o9)) {
        let l6 = qf(e6);
        r14 = l6.signal, i7 = l6.end;
      }
      kf(e6, (l6, u3) => {
        l6 ? n12(l6) : t18(u3);
      }, { signal: r14, end: i7 });
    });
  }
  ti.exports = { finished: Wf, pipeline: Cf };
});
var di = g2((pu, si) => {
  var { Buffer: jf } = buffer_default2, { ObjectDefineProperty: H, ObjectKeys: ii, ReflectApply: oi } = m(), { promisify: { custom: li } } = j(), { streamReturningOperators: ni, promiseReturningOperators: ri } = xn(), { codes: { ERR_ILLEGAL_CONSTRUCTOR: ai } } = O(), $f = ei(), { pipeline: fi } = Ye(), { destroyer: vf } = Z(), ui = Y(), Ft = vt(), Ut = V(), R7 = si.exports = Le().Stream;
  R7.isDisturbed = Ut.isDisturbed;
  R7.isErrored = Ut.isErrored;
  R7.isReadable = Ut.isReadable;
  R7.Readable = we();
  for (let e6 of ii(ni)) {
    let n12 = function(...r14) {
      if (new.target) throw ai();
      return R7.Readable.from(oi(t18, this, r14));
    };
    Uf = n12;
    let t18 = ni[e6];
    H(n12, "name", { __proto__: null, value: t18.name }), H(n12, "length", { __proto__: null, value: t18.length }), H(R7.Readable.prototype, e6, { __proto__: null, value: n12, enumerable: false, configurable: true, writable: true });
  }
  var Uf;
  for (let e6 of ii(ri)) {
    let n12 = function(...i7) {
      if (new.target) throw ai();
      return oi(t18, this, i7);
    };
    Uf = n12;
    let t18 = ri[e6];
    H(n12, "name", { __proto__: null, value: t18.name }), H(n12, "length", { __proto__: null, value: t18.length }), H(R7.Readable.prototype, e6, { __proto__: null, value: n12, enumerable: false, configurable: true, writable: true });
  }
  var Uf;
  R7.Writable = Tt();
  R7.Duplex = v();
  R7.Transform = xt();
  R7.PassThrough = Pt();
  R7.pipeline = fi;
  var { addAbortSignal: Ff } = ke();
  R7.addAbortSignal = Ff;
  R7.finished = ui;
  R7.destroy = vf;
  R7.compose = $f;
  H(R7, "promises", { __proto__: null, configurable: true, enumerable: true, get() {
    return Ft;
  } });
  H(fi, li, { __proto__: null, enumerable: true, get() {
    return Ft.pipeline;
  } });
  H(ui, li, { __proto__: null, enumerable: true, get() {
    return Ft.finished;
  } });
  R7.Stream = R7;
  R7._isUint8Array = function(t18) {
    return t18 instanceof Uint8Array;
  };
  R7._uint8ArrayToBuffer = function(t18) {
    return jf.from(t18.buffer, t18.byteOffset, t18.byteLength);
  };
});
var ci = g2((wu, A4) => {
  "use strict";
  var T2 = di(), Bf = vt(), Gf = T2.Readable.destroy;
  A4.exports = T2.Readable;
  A4.exports._uint8ArrayToBuffer = T2._uint8ArrayToBuffer;
  A4.exports._isUint8Array = T2._isUint8Array;
  A4.exports.isDisturbed = T2.isDisturbed;
  A4.exports.isErrored = T2.isErrored;
  A4.exports.isReadable = T2.isReadable;
  A4.exports.Readable = T2.Readable;
  A4.exports.Writable = T2.Writable;
  A4.exports.Duplex = T2.Duplex;
  A4.exports.Transform = T2.Transform;
  A4.exports.PassThrough = T2.PassThrough;
  A4.exports.addAbortSignal = T2.addAbortSignal;
  A4.exports.finished = T2.finished;
  A4.exports.destroy = T2.destroy;
  A4.exports.destroy = Gf;
  A4.exports.pipeline = T2.pipeline;
  A4.exports.compose = T2.compose;
  Object.defineProperty(T2, "promises", { configurable: true, enumerable: true, get() {
    return Bf;
  } });
  A4.exports.Stream = T2.Stream;
  A4.exports.default = A4.exports;
});
var bi = Ri(ci());
var { _uint8ArrayToBuffer: yu, _isUint8Array: gu, isDisturbed: Su, isErrored: Eu, isReadable: Ru, Readable: Au, Writable: mu, Duplex: Tu, Transform: Iu, PassThrough: Mu, addAbortSignal: Nu, finished: Du, destroy: Ou, pipeline: qu, compose: xu, Stream: Lu } = bi;
var { default: hi, ...Hf } = bi;
var process2 = __process$;
var { Buffer: Buffer3 } = buffer_default2;
var Readable = Au;
var Writable = mu;
var Duplex = Tu;
function isReadableStream(object) {
  return object instanceof ReadableStream;
}
function isWritableStream(object) {
  return object instanceof WritableStream;
}
Readable.fromWeb = function(readableStream, options = kEmptyObject) {
  if (!isReadableStream(readableStream)) {
    throw new ERR_INVALID_ARG_TYPE(
      "readableStream",
      "ReadableStream",
      readableStream
    );
  }
  validateObject(options, "options");
  const {
    highWaterMark,
    encoding,
    objectMode = false,
    signal
  } = options;
  if (encoding !== void 0 && !Buffer3.isEncoding(encoding)) {
    throw new ERR_INVALID_ARG_VALUE(encoding, "options.encoding");
  }
  validateBoolean(objectMode, "options.objectMode");
  const reader = readableStream.getReader();
  let closed = false;
  const readable = new Readable({
    objectMode,
    highWaterMark,
    encoding,
    signal,
    read() {
      reader.read().then(
        (chunk) => {
          if (chunk.done) {
            readable.push(null);
          } else {
            readable.push(chunk.value);
          }
        },
        (error) => destroy.call(readable, error)
      );
    },
    destroy(error, callback) {
      function done() {
        try {
          callback(error);
        } catch (error2) {
          process2.nextTick(() => {
            throw error2;
          });
        }
      }
      if (!closed) {
        reader.cancel(error).then(done, done);
        return;
      }
      done();
    }
  });
  reader.closed.then(
    () => {
      closed = true;
      if (!isReadableEnded2(readable)) {
        readable.push(null);
      }
    },
    (error) => {
      closed = true;
      destroy.call(readable, error);
    }
  );
  return readable;
};
Writable.fromWeb = function(writableStream, options = kEmptyObject) {
  if (!isWritableStream(writableStream)) {
    throw new ERR_INVALID_ARG_TYPE(
      "writableStream",
      "WritableStream",
      writableStream
    );
  }
  validateObject(options, "options");
  const {
    highWaterMark,
    decodeStrings = true,
    objectMode = false,
    signal
  } = options;
  validateBoolean(objectMode, "options.objectMode");
  validateBoolean(decodeStrings, "options.decodeStrings");
  const writer = writableStream.getWriter();
  let closed = false;
  const writable = new Writable({
    highWaterMark,
    objectMode,
    decodeStrings,
    signal,
    writev(chunks, callback) {
      function done(error) {
        error = error.filter((e6) => e6);
        try {
          callback(error.length === 0 ? void 0 : error);
        } catch (error2) {
          process2.nextTick(() => destroy.call(writable, error2));
        }
      }
      writer.ready.then(
        () => Promise.all(
          chunks.map((data) => writer.write(data.chunk))
        ).then(done, done),
        done
      );
    },
    write(chunk, encoding, callback) {
      if (typeof chunk === "string" && decodeStrings && !objectMode) {
        chunk = Buffer3.from(chunk, encoding);
        chunk = new Uint8Array(
          chunk.buffer,
          chunk.byteOffset,
          chunk.byteLength
        );
      }
      function done(error) {
        try {
          callback(error);
        } catch (error2) {
          destroy(this, duplex, error2);
        }
      }
      writer.ready.then(
        () => writer.write(chunk).then(done, done),
        done
      );
    },
    destroy(error, callback) {
      function done() {
        try {
          callback(error);
        } catch (error2) {
          process2.nextTick(() => {
            throw error2;
          });
        }
      }
      if (!closed) {
        if (error != null) {
          writer.abort(error).then(done, done);
        } else {
          writer.close().then(done, done);
        }
        return;
      }
      done();
    },
    final(callback) {
      function done(error) {
        try {
          callback(error);
        } catch (error2) {
          process2.nextTick(() => destroy.call(writable, error2));
        }
      }
      if (!closed) {
        writer.close().then(done, done);
      }
    }
  });
  writer.closed.then(
    () => {
      closed = true;
      if (!isWritableEnded(writable)) {
        destroy.call(writable, new ERR_STREAM_PREMATURE_CLOSE());
      }
    },
    (error) => {
      closed = true;
      destroy.call(writable, error);
    }
  );
  return writable;
};
Duplex.fromWeb = function(pair, options = kEmptyObject) {
  validateObject(pair, "pair");
  const {
    readable: readableStream,
    writable: writableStream
  } = pair;
  if (!isReadableStream(readableStream)) {
    throw new ERR_INVALID_ARG_TYPE(
      "pair.readable",
      "ReadableStream",
      readableStream
    );
  }
  if (!isWritableStream(writableStream)) {
    throw new ERR_INVALID_ARG_TYPE(
      "pair.writable",
      "WritableStream",
      writableStream
    );
  }
  validateObject(options, "options");
  const {
    allowHalfOpen = false,
    objectMode = false,
    encoding,
    decodeStrings = true,
    highWaterMark,
    signal
  } = options;
  validateBoolean(objectMode, "options.objectMode");
  if (encoding !== void 0 && !Buffer3.isEncoding(encoding)) {
    throw new ERR_INVALID_ARG_VALUE(encoding, "options.encoding");
  }
  const writer = writableStream.getWriter();
  const reader = readableStream.getReader();
  let writableClosed = false;
  let readableClosed = false;
  const duplex2 = new Duplex({
    allowHalfOpen,
    highWaterMark,
    objectMode,
    encoding,
    decodeStrings,
    signal,
    writev(chunks, callback) {
      function done(error) {
        error = error.filter((e6) => e6);
        try {
          callback(error.length === 0 ? void 0 : error);
        } catch (error2) {
          process2.nextTick(() => destroy(duplex2, error2));
        }
      }
      writer.ready.then(
        () => Promise.all(
          chunks.map((data) => writer.write(data.chunk))
        ).then(done, done),
        done
      );
    },
    write(chunk, encoding2, callback) {
      if (typeof chunk === "string" && decodeStrings && !objectMode) {
        chunk = Buffer3.from(chunk, encoding2);
        chunk = new Uint8Array(
          chunk.buffer,
          chunk.byteOffset,
          chunk.byteLength
        );
      }
      function done(error) {
        try {
          callback(error);
        } catch (error2) {
          destroy(duplex2, error2);
        }
      }
      writer.ready.then(
        () => writer.write(chunk).then(done, done),
        done
      );
    },
    final(callback) {
      function done(error) {
        try {
          callback(error);
        } catch (error2) {
          process2.nextTick(() => destroy(duplex2, error2));
        }
      }
      if (!writableClosed) {
        writer.close().then(done, done);
      }
    },
    read() {
      reader.read().then(
        (chunk) => {
          if (chunk.done) {
            duplex2.push(null);
          } else {
            duplex2.push(chunk.value);
          }
        },
        (error) => destroy(duplex2, error)
      );
    },
    destroy(error, callback) {
      function done() {
        try {
          callback(error);
        } catch (error2) {
          process2.nextTick(() => {
            throw error2;
          });
        }
      }
      async function closeWriter() {
        if (!writableClosed) {
          await writer.abort(error);
        }
      }
      async function closeReader() {
        if (!readableClosed) {
          await reader.cancel(error);
        }
      }
      if (!writableClosed || !readableClosed) {
        Promise.all([
          closeWriter(),
          closeReader()
        ]).then(done, done);
        return;
      }
      done();
    }
  });
  writer.closed.then(
    () => {
      writableClosed = true;
      if (!isWritableEnded(duplex2)) {
        destroy(duplex2, new ERR_STREAM_PREMATURE_CLOSE());
      }
    },
    (error) => {
      writableClosed = true;
      readableClosed = true;
      destroy(duplex2, error);
    }
  );
  reader.closed.then(
    () => {
      readableClosed = true;
      if (!isReadableEnded2(duplex2)) {
        duplex2.push(null);
      }
    },
    (error) => {
      writableClosed = true;
      readableClosed = true;
      destroy(duplex2, error);
    }
  );
  return duplex2;
};
delete Readable.Duplex;
delete Readable.PassThrough;
delete Readable.Readable;
delete Readable.Stream;
delete Readable.Transform;
delete Readable.Writable;
delete Readable._isUint8Array;
delete Readable._uint8ArrayToBuffer;
delete Readable.addAbortSignal;
delete Readable.compose;
delete Readable.destroy;
delete Readable.finished;
delete Readable.isDisturbed;
delete Readable.isErrored;
delete Readable.isReadable;
delete Readable.pipeline;
function newReadableStreamFromStreamReadable(streamReadable, options = kEmptyObject) {
  if (typeof streamReadable?._readableState !== "object") {
    throw new ERR_INVALID_ARG_TYPE(
      "streamReadable",
      "stream.Readable",
      streamReadable
    );
  }
  if (isDestroyed(streamReadable) || !isReadable2(streamReadable)) {
    const readable = new ReadableStream();
    readable.cancel();
    return readable;
  }
  const objectMode = streamReadable.readableObjectMode;
  const highWaterMark = streamReadable.readableHighWaterMark;
  const evaluateStrategyOrFallback = (strategy2) => {
    if (strategy2) {
      return strategy2;
    }
    if (objectMode) {
      return new CountQueuingStrategy({ highWaterMark });
    }
    return { highWaterMark };
  };
  const strategy = evaluateStrategyOrFallback(options?.strategy);
  let controller;
  function onData(chunk) {
    if (Buffer3.isBuffer(chunk) && !objectMode) {
      chunk = new Uint8Array(chunk);
    }
    controller.enqueue(chunk);
    if (controller.desiredSize <= 0) {
      streamReadable.pause();
    }
  }
  streamReadable.pause();
  const cleanup = end_of_stream_default(streamReadable, (error) => {
    if (error?.code === "ERR_STREAM_PREMATURE_CLOSE") {
      const err = new AbortError(void 0, { cause: error });
      error = err;
    }
    cleanup();
    streamReadable.on("error", () => {
    });
    if (error) {
      return controller.error(error);
    }
    controller.close();
  });
  streamReadable.on("data", onData);
  return new ReadableStream({
    start(c12) {
      controller = c12;
    },
    pull() {
      streamReadable.resume();
    },
    cancel(reason) {
      destroy(streamReadable, reason);
    }
  }, strategy);
}
function newWritableStreamFromStreamWritable(streamWritable) {
  if (typeof streamWritable?._writableState !== "object") {
    throw new ERR_INVALID_ARG_TYPE(
      "streamWritable",
      "stream.Writable",
      streamWritable
    );
  }
  if (isDestroyed(streamWritable) || !isWritable2(streamWritable)) {
    const writable = new WritableStream();
    writable.close();
    return writable;
  }
  const highWaterMark = streamWritable.writableHighWaterMark;
  const strategy = streamWritable.writableObjectMode ? new CountQueuingStrategy({ highWaterMark }) : { highWaterMark };
  let controller;
  let backpressurePromise;
  let closed;
  function onDrain() {
    if (backpressurePromise !== void 0) {
      backpressurePromise.resolve();
    }
  }
  const cleanup = end_of_stream_default(streamWritable, (error) => {
    if (error?.code === "ERR_STREAM_PREMATURE_CLOSE") {
      const err = new AbortError(void 0, { cause: error });
      error = err;
    }
    cleanup();
    streamWritable.on("error", () => {
    });
    if (error != null) {
      if (backpressurePromise !== void 0) {
        backpressurePromise.reject(error);
      }
      if (closed !== void 0) {
        closed.reject(error);
        closed = void 0;
      }
      controller.error(error);
      controller = void 0;
      return;
    }
    if (closed !== void 0) {
      closed.resolve();
      closed = void 0;
      return;
    }
    controller.error(new AbortError());
    controller = void 0;
  });
  streamWritable.on("drain", onDrain);
  return new WritableStream({
    start(c12) {
      controller = c12;
    },
    async write(chunk) {
      if (streamWritable.writableNeedDrain || !streamWritable.write(chunk)) {
        backpressurePromise = createDeferredPromise();
        return backpressurePromise.promise.finally(() => {
          backpressurePromise = void 0;
        });
      }
    },
    abort(reason) {
      destroy(streamWritable, reason);
    },
    close() {
      if (closed === void 0 && !isWritableEnded(streamWritable)) {
        closed = createDeferredPromise();
        streamWritable.end();
        return closed.promise;
      }
      controller = void 0;
      return Promise.resolve();
    }
  }, strategy);
}
function newReadableWritablePairFromDuplex(duplex2) {
  if (typeof duplex2?._writableState !== "object" || typeof duplex2?._readableState !== "object") {
    throw new ERR_INVALID_ARG_TYPE("duplex", "stream.Duplex", duplex2);
  }
  if (isDestroyed(duplex2)) {
    const writable2 = new WritableStream();
    const readable2 = new ReadableStream();
    writable2.close();
    readable2.cancel();
    return { readable: readable2, writable: writable2 };
  }
  const writable = isWritable2(duplex2) ? newWritableStreamFromStreamWritable(duplex2) : new WritableStream();
  if (!isWritable2(duplex2)) {
    writable.close();
  }
  const readable = isReadable2(duplex2) ? newReadableStreamFromStreamReadable(duplex2) : new ReadableStream();
  if (!isReadable2(duplex2)) {
    readable.cancel();
  }
  return { writable, readable };
}
Readable.toWeb = newReadableStreamFromStreamReadable;
Writable.toWeb = newWritableStreamFromStreamWritable;
Duplex.toWeb = newReadableWritablePairFromDuplex;

// https://deno.land/std@0.177.1/node/_process/streams.mjs
function createWritableStdioStream(writer, name) {
  const stream = new mu({
    write(buf, enc, cb) {
      if (!writer) {
        this.destroy(
          new Error(`Deno.${name} is not available in this environment`)
        );
        return;
      }
      writer.writeSync(buf instanceof Uint8Array ? buf : Buffer2.from(buf, enc));
      cb();
    },
    destroy(err, cb) {
      cb(err);
      this._undestroy();
      if (!this._writableState.emitClose) {
        nextTick(() => this.emit("close"));
      }
    }
  });
  stream.fd = writer?.rid ?? -1;
  stream.destroySoon = stream.destroy;
  stream._isStdio = true;
  stream.once("close", () => writer?.close());
  Object.defineProperties(stream, {
    columns: {
      enumerable: true,
      configurable: true,
      get: () => Deno.isatty?.(writer?.rid) ? Deno.consoleSize?.().columns : void 0
    },
    rows: {
      enumerable: true,
      configurable: true,
      get: () => Deno.isatty?.(writer?.rid) ? Deno.consoleSize?.().rows : void 0
    },
    isTTY: {
      enumerable: true,
      configurable: true,
      get: () => Deno.isatty?.(writer?.rid)
    },
    getWindowSize: {
      enumerable: true,
      configurable: true,
      value: () => Deno.isatty?.(writer?.rid) ? Object.values(Deno.consoleSize?.()) : void 0
    }
  });
  if (Deno.isatty?.(writer?.rid)) {
    stream.cursorTo = function(x5, y4, callback) {
      return cursorTo(this, x5, y4, callback);
    };
    stream.moveCursor = function(dx, dy, callback) {
      return moveCursor(this, dx, dy, callback);
    };
    stream.clearLine = function(dir, callback) {
      return clearLine(this, dir, callback);
    };
    stream.clearScreenDown = function(callback) {
      return clearScreenDown(this, callback);
    };
  }
  return stream;
}
var stderr = stdio.stderr = createWritableStdioStream(
  Deno.stderr,
  "stderr"
);
var stdout = stdio.stdout = createWritableStdioStream(
  Deno.stdout,
  "stdout"
);
function _guessStdinType(fd) {
  if (typeof fd !== "number" || fd < 0) return "UNKNOWN";
  if (Deno.isatty?.(fd)) return "TTY";
  try {
    const fileInfo = Deno.fstatSync?.(fd);
    if (Deno.build.os !== "windows") {
      switch (fileInfo.mode & fs.S_IFMT) {
        case fs.S_IFREG:
        case fs.S_IFCHR:
          return "FILE";
        case fs.S_IFIFO:
          return "PIPE";
        case fs.S_IFSOCK:
          return "TCP";
        default:
          return "UNKNOWN";
      }
    }
    if (fileInfo.isFile) {
      if (fileInfo.birthtime.valueOf() === 116444736e5) return "PIPE";
      return "FILE";
    }
  } catch (e6) {
    if (Deno.build.os === "windows" && e6.code === "EISDIR") return "FILE";
  }
  return "UNKNOWN";
}
var _read = function(size) {
  const p3 = Buffer2.alloc(size || 16 * 1024);
  Deno.stdin?.read(p3).then((length) => {
    this.push(length === null ? null : p3.slice(0, length));
  }, (error) => {
    this.destroy(error);
  });
};
var stdin = stdio.stdin = (() => {
  const fd = Deno.stdin?.rid;
  let _stdin;
  const stdinType = _guessStdinType(fd);
  switch (stdinType) {
    case "FILE": {
      _stdin = new Au({
        highWaterMark: 64 * 1024,
        autoDestroy: false,
        read: _read
      });
      break;
    }
    case "TTY":
    case "PIPE":
    case "TCP": {
      _stdin = new Tu({
        readable: stdinType === "TTY" ? void 0 : true,
        writable: stdinType === "TTY" ? void 0 : false,
        readableHighWaterMark: stdinType === "TTY" ? 0 : void 0,
        allowHalfOpen: false,
        emitClose: false,
        autoDestroy: true,
        decodeStrings: false,
        read: _read
      });
      if (stdinType !== "TTY") {
        _stdin._writableState.ended = true;
      }
      break;
    }
    default: {
      _stdin = new Au({ read() {
      } });
      _stdin.push(null);
    }
  }
  return _stdin;
})();
stdin.on("close", () => Deno.stdin?.close());
stdin.fd = Deno.stdin?.rid ?? -1;
Object.defineProperty(stdin, "isTTY", {
  enumerable: true,
  configurable: true,
  get() {
    return Deno.isatty?.(Deno.stdin.rid);
  }
});
stdin._isRawMode = false;
stdin.setRawMode = (enable) => {
  Deno.stdin?.setRaw?.(enable);
  stdin._isRawMode = enable;
  return stdin;
};
Object.defineProperty(stdin, "isRaw", {
  enumerable: true,
  configurable: true,
  get() {
    return stdin._isRawMode;
  }
});

// https://deno.land/std@0.177.1/node/internal_binding/async_wrap.ts
var async_wrap_exports = {};
__export(async_wrap_exports, {
  AsyncWrap: () => AsyncWrap,
  UidFields: () => UidFields,
  asyncIdFields: () => asyncIdFields,
  async_hook_fields: () => asyncHookFields,
  constants: () => constants2,
  newAsyncId: () => newAsyncId,
  providerType: () => providerType,
  registerDestroyHook: () => registerDestroyHook
});
function registerDestroyHook(_target, _asyncId, _prop) {
}
var constants2 = /* @__PURE__ */ ((constants7) => {
  constants7[constants7["kInit"] = 0] = "kInit";
  constants7[constants7["kBefore"] = 1] = "kBefore";
  constants7[constants7["kAfter"] = 2] = "kAfter";
  constants7[constants7["kDestroy"] = 3] = "kDestroy";
  constants7[constants7["kPromiseResolve"] = 4] = "kPromiseResolve";
  constants7[constants7["kTotals"] = 5] = "kTotals";
  constants7[constants7["kCheck"] = 6] = "kCheck";
  constants7[constants7["kExecutionAsyncId"] = 7] = "kExecutionAsyncId";
  constants7[constants7["kTriggerAsyncId"] = 8] = "kTriggerAsyncId";
  constants7[constants7["kAsyncIdCounter"] = 9] = "kAsyncIdCounter";
  constants7[constants7["kDefaultTriggerAsyncId"] = 10] = "kDefaultTriggerAsyncId";
  constants7[constants7["kUsesExecutionAsyncResource"] = 11] = "kUsesExecutionAsyncResource";
  constants7[constants7["kStackLength"] = 12] = "kStackLength";
  return constants7;
})(constants2 || {});
var asyncHookFields = new Uint32Array(Object.keys(constants2).length);
function newAsyncId() {
  return ++asyncIdFields[9 /* kAsyncIdCounter */];
}
var UidFields = /* @__PURE__ */ ((UidFields2) => {
  UidFields2[UidFields2["kExecutionAsyncId"] = 0] = "kExecutionAsyncId";
  UidFields2[UidFields2["kTriggerAsyncId"] = 1] = "kTriggerAsyncId";
  UidFields2[UidFields2["kAsyncIdCounter"] = 2] = "kAsyncIdCounter";
  UidFields2[UidFields2["kDefaultTriggerAsyncId"] = 3] = "kDefaultTriggerAsyncId";
  UidFields2[UidFields2["kUidFieldsCount"] = 4] = "kUidFieldsCount";
  return UidFields2;
})(UidFields || {});
var asyncIdFields = new Float64Array(Object.keys(UidFields).length);
asyncIdFields[2 /* kAsyncIdCounter */] = 1;
asyncIdFields[3 /* kDefaultTriggerAsyncId */] = -1;
var providerType = /* @__PURE__ */ ((providerType3) => {
  providerType3[providerType3["NONE"] = 0] = "NONE";
  providerType3[providerType3["DIRHANDLE"] = 1] = "DIRHANDLE";
  providerType3[providerType3["DNSCHANNEL"] = 2] = "DNSCHANNEL";
  providerType3[providerType3["ELDHISTOGRAM"] = 3] = "ELDHISTOGRAM";
  providerType3[providerType3["FILEHANDLE"] = 4] = "FILEHANDLE";
  providerType3[providerType3["FILEHANDLECLOSEREQ"] = 5] = "FILEHANDLECLOSEREQ";
  providerType3[providerType3["FIXEDSIZEBLOBCOPY"] = 6] = "FIXEDSIZEBLOBCOPY";
  providerType3[providerType3["FSEVENTWRAP"] = 7] = "FSEVENTWRAP";
  providerType3[providerType3["FSREQCALLBACK"] = 8] = "FSREQCALLBACK";
  providerType3[providerType3["FSREQPROMISE"] = 9] = "FSREQPROMISE";
  providerType3[providerType3["GETADDRINFOREQWRAP"] = 10] = "GETADDRINFOREQWRAP";
  providerType3[providerType3["GETNAMEINFOREQWRAP"] = 11] = "GETNAMEINFOREQWRAP";
  providerType3[providerType3["HEAPSNAPSHOT"] = 12] = "HEAPSNAPSHOT";
  providerType3[providerType3["HTTP2SESSION"] = 13] = "HTTP2SESSION";
  providerType3[providerType3["HTTP2STREAM"] = 14] = "HTTP2STREAM";
  providerType3[providerType3["HTTP2PING"] = 15] = "HTTP2PING";
  providerType3[providerType3["HTTP2SETTINGS"] = 16] = "HTTP2SETTINGS";
  providerType3[providerType3["HTTPINCOMINGMESSAGE"] = 17] = "HTTPINCOMINGMESSAGE";
  providerType3[providerType3["HTTPCLIENTREQUEST"] = 18] = "HTTPCLIENTREQUEST";
  providerType3[providerType3["JSSTREAM"] = 19] = "JSSTREAM";
  providerType3[providerType3["JSUDPWRAP"] = 20] = "JSUDPWRAP";
  providerType3[providerType3["MESSAGEPORT"] = 21] = "MESSAGEPORT";
  providerType3[providerType3["PIPECONNECTWRAP"] = 22] = "PIPECONNECTWRAP";
  providerType3[providerType3["PIPESERVERWRAP"] = 23] = "PIPESERVERWRAP";
  providerType3[providerType3["PIPEWRAP"] = 24] = "PIPEWRAP";
  providerType3[providerType3["PROCESSWRAP"] = 25] = "PROCESSWRAP";
  providerType3[providerType3["PROMISE"] = 26] = "PROMISE";
  providerType3[providerType3["QUERYWRAP"] = 27] = "QUERYWRAP";
  providerType3[providerType3["SHUTDOWNWRAP"] = 28] = "SHUTDOWNWRAP";
  providerType3[providerType3["SIGNALWRAP"] = 29] = "SIGNALWRAP";
  providerType3[providerType3["STATWATCHER"] = 30] = "STATWATCHER";
  providerType3[providerType3["STREAMPIPE"] = 31] = "STREAMPIPE";
  providerType3[providerType3["TCPCONNECTWRAP"] = 32] = "TCPCONNECTWRAP";
  providerType3[providerType3["TCPSERVERWRAP"] = 33] = "TCPSERVERWRAP";
  providerType3[providerType3["TCPWRAP"] = 34] = "TCPWRAP";
  providerType3[providerType3["TTYWRAP"] = 35] = "TTYWRAP";
  providerType3[providerType3["UDPSENDWRAP"] = 36] = "UDPSENDWRAP";
  providerType3[providerType3["UDPWRAP"] = 37] = "UDPWRAP";
  providerType3[providerType3["SIGINTWATCHDOG"] = 38] = "SIGINTWATCHDOG";
  providerType3[providerType3["WORKER"] = 39] = "WORKER";
  providerType3[providerType3["WORKERHEAPSNAPSHOT"] = 40] = "WORKERHEAPSNAPSHOT";
  providerType3[providerType3["WRITEWRAP"] = 41] = "WRITEWRAP";
  providerType3[providerType3["ZLIB"] = 42] = "ZLIB";
  return providerType3;
})(providerType || {});
var kInvalidAsyncId = -1;
var AsyncWrap = class {
  provider = 0 /* NONE */;
  asyncId = kInvalidAsyncId;
  constructor(provider) {
    this.provider = provider;
    this.getAsyncId();
  }
  getAsyncId() {
    this.asyncId = this.asyncId === kInvalidAsyncId ? newAsyncId() : this.asyncId;
    return this.asyncId;
  }
  getProviderType() {
    return this.provider;
  }
};

// https://deno.land/std@0.177.1/node/internal_binding/config.ts
var config_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/cares_wrap.ts
var cares_wrap_exports = {};
__export(cares_wrap_exports, {
  ChannelWrap: () => ChannelWrap,
  GetAddrInfoReqWrap: () => GetAddrInfoReqWrap,
  QueryReqWrap: () => QueryReqWrap,
  getaddrinfo: () => getaddrinfo,
  strerror: () => strerror
});

// https://deno.land/std@0.177.1/node/internal/net.ts
var v4Seg = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
var v4Str = `(${v4Seg}[.]){3}${v4Seg}`;
var IPv4Reg = new RegExp(`^${v4Str}$`);
var v6Seg = "(?:[0-9a-fA-F]{1,4})";
var IPv6Reg = new RegExp(
  `^((?:${v6Seg}:){7}(?:${v6Seg}|:)|(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:)))(%[0-9a-zA-Z-.:]{1,})?$`
);
function isIPv4(ip) {
  return RegExp.prototype.test.call(IPv4Reg, ip);
}
function isIPv6(ip) {
  return RegExp.prototype.test.call(IPv6Reg, ip);
}
function isIP(ip) {
  if (isIPv4(ip)) {
    return 4;
  }
  if (isIPv6(ip)) {
    return 6;
  }
  return 0;
}
var normalizedArgsSymbol = Symbol("normalizedArgs");

// https://deno.land/std@0.177.1/node/internal_binding/ares.ts
var ARES_AI_CANONNAME = 1 << 0;
var ARES_AI_NUMERICHOST = 1 << 1;
var ARES_AI_PASSIVE = 1 << 2;
var ARES_AI_NUMERICSERV = 1 << 3;
var AI_V4MAPPED = 1 << 4;
var AI_ALL = 1 << 5;
var AI_ADDRCONFIG = 1 << 6;
var ARES_AI_NOSORT = 1 << 7;
var ARES_AI_ENVHOSTS = 1 << 8;
function ares_strerror(code) {
  const errorText = [
    "Successful completion",
    "DNS server returned answer with no data",
    "DNS server claims query was misformatted",
    "DNS server returned general failure",
    "Domain name not found",
    "DNS server does not implement requested operation",
    "DNS server refused query",
    "Misformatted DNS query",
    "Misformatted domain name",
    "Unsupported address family",
    "Misformatted DNS reply",
    "Could not contact DNS servers",
    "Timeout while contacting DNS servers",
    "End of file",
    "Error reading file",
    "Out of memory",
    "Channel is being destroyed",
    "Misformatted string",
    "Illegal flags specified",
    "Given hostname is not numeric",
    "Illegal hints flags specified",
    "c-ares library initialization not yet performed",
    "Error loading iphlpapi.dll",
    "Could not find GetNetworkParams function",
    "DNS query cancelled"
  ];
  if (code >= 0 && code < errorText.length) {
    return errorText[code];
  } else {
    return "unknown";
  }
}

// https://deno.land/std@0.177.1/node/internal_binding/cares_wrap.ts
var GetAddrInfoReqWrap = class extends AsyncWrap {
  family;
  hostname;
  callback;
  resolve;
  reject;
  oncomplete;
  constructor() {
    super(10 /* GETADDRINFOREQWRAP */);
  }
};
function getaddrinfo(req, hostname2, family, _hints, verbatim) {
  let addresses = [];
  const recordTypes = [];
  if (family === 0 || family === 4) {
    recordTypes.push("A");
  }
  if (family === 0 || family === 6) {
    recordTypes.push("AAAA");
  }
  (async () => {
    await Promise.allSettled(
      recordTypes.map(
        (recordType) => Deno.resolveDns(hostname2, recordType).then((records) => {
          records.forEach((record) => addresses.push(record));
        })
      )
    );
    const error = addresses.length ? 0 : codeMap.get("EAI_NODATA");
    if (!verbatim) {
      addresses.sort((a7, b2) => {
        if (isIPv4(a7)) {
          return -1;
        } else if (isIPv4(b2)) {
          return 1;
        }
        return 0;
      });
    }
    if (isWindows && hostname2 === "localhost") {
      addresses = addresses.filter((address) => isIPv4(address));
    }
    req.oncomplete(error, addresses);
  })();
  return 0;
}
var QueryReqWrap = class extends AsyncWrap {
  bindingName;
  hostname;
  ttl;
  callback;
  // deno-lint-ignore no-explicit-any
  resolve;
  reject;
  oncomplete;
  constructor() {
    super(27 /* QUERYWRAP */);
  }
};
function fqdnToHostname(fqdn) {
  return fqdn.replace(/\.$/, "");
}
function compressIPv6(address) {
  const formatted = address.replace(/\b(?:0+:){2,}/, ":");
  const finalAddress = formatted.split(":").map((octet) => {
    if (octet.match(/^\d+\.\d+\.\d+\.\d+$/)) {
      return Number(octet.replaceAll(".", "")).toString(16);
    }
    return octet.replace(/\b0+/g, "");
  }).join(":");
  return finalAddress;
}
var ChannelWrap = class extends AsyncWrap {
  #servers = [];
  #timeout;
  #tries;
  constructor(timeout, tries) {
    super(2 /* DNSCHANNEL */);
    this.#timeout = timeout;
    this.#tries = tries;
  }
  async #query(query, recordType) {
    let code;
    let ret;
    if (this.#servers.length) {
      for (const [ipAddr, port] of this.#servers) {
        const resolveOptions = {
          nameServer: {
            ipAddr,
            port
          }
        };
        ({ code, ret } = await this.#resolve(
          query,
          recordType,
          resolveOptions
        ));
        if (code === 0 || code === codeMap.get("EAI_NODATA")) {
          break;
        }
      }
    } else {
      ({ code, ret } = await this.#resolve(query, recordType));
    }
    return { code, ret };
  }
  async #resolve(query, recordType, resolveOptions) {
    let ret = [];
    let code = 0;
    try {
      ret = await Deno.resolveDns(query, recordType, resolveOptions);
    } catch (e6) {
      if (e6 instanceof Deno.errors.NotFound) {
        code = codeMap.get("EAI_NODATA");
      } else {
        code = codeMap.get("UNKNOWN");
      }
    }
    return { code, ret };
  }
  queryAny(req, name) {
    (async () => {
      const records = [];
      await Promise.allSettled([
        this.#query(name, "A").then(({ ret }) => {
          ret.forEach((record) => records.push({ type: "A", address: record }));
        }),
        this.#query(name, "AAAA").then(({ ret }) => {
          ret.forEach(
            (record) => records.push({ type: "AAAA", address: compressIPv6(record) })
          );
        }),
        this.#query(name, "CAA").then(({ ret }) => {
          ret.forEach(
            ({ critical, tag, value }) => records.push({
              type: "CAA",
              [tag]: value,
              critical: +critical && 128
            })
          );
        }),
        this.#query(name, "CNAME").then(({ ret }) => {
          ret.forEach(
            (record) => records.push({ type: "CNAME", value: record })
          );
        }),
        this.#query(name, "MX").then(({ ret }) => {
          ret.forEach(
            ({ preference, exchange }) => records.push({
              type: "MX",
              priority: preference,
              exchange: fqdnToHostname(exchange)
            })
          );
        }),
        this.#query(name, "NAPTR").then(({ ret }) => {
          ret.forEach(
            ({ order, preference, flags: flags2, services, regexp, replacement }) => records.push({
              type: "NAPTR",
              order,
              preference,
              flags: flags2,
              service: services,
              regexp,
              replacement
            })
          );
        }),
        this.#query(name, "NS").then(({ ret }) => {
          ret.forEach(
            (record) => records.push({ type: "NS", value: fqdnToHostname(record) })
          );
        }),
        this.#query(name, "PTR").then(({ ret }) => {
          ret.forEach(
            (record) => records.push({ type: "PTR", value: fqdnToHostname(record) })
          );
        }),
        this.#query(name, "SOA").then(({ ret }) => {
          ret.forEach(
            ({ mname, rname, serial, refresh, retry, expire, minimum }) => records.push({
              type: "SOA",
              nsname: fqdnToHostname(mname),
              hostmaster: fqdnToHostname(rname),
              serial,
              refresh,
              retry,
              expire,
              minttl: minimum
            })
          );
        }),
        this.#query(name, "SRV").then(({ ret }) => {
          ret.forEach(
            ({ priority, weight, port, target }) => records.push({
              type: "SRV",
              priority,
              weight,
              port,
              name: target
            })
          );
        }),
        this.#query(name, "TXT").then(({ ret }) => {
          ret.forEach(
            (record) => records.push({ type: "TXT", entries: record })
          );
        })
      ]);
      const err = records.length ? 0 : codeMap.get("EAI_NODATA");
      req.oncomplete(err, records);
    })();
    return 0;
  }
  queryA(req, name) {
    this.#query(name, "A").then(({ code, ret }) => {
      req.oncomplete(code, ret);
    });
    return 0;
  }
  queryAaaa(req, name) {
    this.#query(name, "AAAA").then(({ code, ret }) => {
      const records = ret.map((record) => compressIPv6(record));
      req.oncomplete(code, records);
    });
    return 0;
  }
  queryCaa(req, name) {
    this.#query(name, "CAA").then(({ code, ret }) => {
      const records = ret.map(
        ({ critical, tag, value }) => ({
          [tag]: value,
          critical: +critical && 128
        })
      );
      req.oncomplete(code, records);
    });
    return 0;
  }
  queryCname(req, name) {
    this.#query(name, "CNAME").then(({ code, ret }) => {
      req.oncomplete(code, ret);
    });
    return 0;
  }
  queryMx(req, name) {
    this.#query(name, "MX").then(({ code, ret }) => {
      const records = ret.map(
        ({ preference, exchange }) => ({
          priority: preference,
          exchange: fqdnToHostname(exchange)
        })
      );
      req.oncomplete(code, records);
    });
    return 0;
  }
  queryNaptr(req, name) {
    this.#query(name, "NAPTR").then(({ code, ret }) => {
      const records = ret.map(
        ({ order, preference, flags: flags2, services, regexp, replacement }) => ({
          flags: flags2,
          service: services,
          regexp,
          replacement,
          order,
          preference
        })
      );
      req.oncomplete(code, records);
    });
    return 0;
  }
  queryNs(req, name) {
    this.#query(name, "NS").then(({ code, ret }) => {
      const records = ret.map((record) => fqdnToHostname(record));
      req.oncomplete(code, records);
    });
    return 0;
  }
  queryPtr(req, name) {
    this.#query(name, "PTR").then(({ code, ret }) => {
      const records = ret.map((record) => fqdnToHostname(record));
      req.oncomplete(code, records);
    });
    return 0;
  }
  querySoa(req, name) {
    this.#query(name, "SOA").then(({ code, ret }) => {
      let record = {};
      if (ret.length) {
        const { mname, rname, serial, refresh, retry, expire, minimum } = ret[0];
        record = {
          nsname: fqdnToHostname(mname),
          hostmaster: fqdnToHostname(rname),
          serial,
          refresh,
          retry,
          expire,
          minttl: minimum
        };
      }
      req.oncomplete(code, record);
    });
    return 0;
  }
  querySrv(req, name) {
    this.#query(name, "SRV").then(({ code, ret }) => {
      const records = ret.map(
        ({ priority, weight, port, target }) => ({
          priority,
          weight,
          port,
          name: target
        })
      );
      req.oncomplete(code, records);
    });
    return 0;
  }
  queryTxt(req, name) {
    this.#query(name, "TXT").then(({ code, ret }) => {
      req.oncomplete(code, ret);
    });
    return 0;
  }
  getHostByAddr(_req, _name) {
    notImplemented("cares.ChannelWrap.prototype.getHostByAddr");
  }
  getServers() {
    return this.#servers;
  }
  setServers(servers) {
    if (typeof servers === "string") {
      const tuples = [];
      for (let i7 = 0; i7 < servers.length; i7 += 2) {
        tuples.push([servers[i7], parseInt(servers[i7 + 1])]);
      }
      this.#servers = tuples;
    } else {
      this.#servers = servers.map(([_ipVersion, ip, port]) => [ip, port]);
    }
    return 0;
  }
  setLocalAddress(_addr0, _addr1) {
    notImplemented("cares.ChannelWrap.prototype.setLocalAddress");
  }
  cancel() {
    notImplemented("cares.ChannelWrap.prototype.cancel");
  }
};
var DNS_ESETSRVPENDING = -1e3;
var EMSG_ESETSRVPENDING = "There are pending queries.";
function strerror(code) {
  return code === DNS_ESETSRVPENDING ? EMSG_ESETSRVPENDING : ares_strerror(code);
}

// https://deno.land/std@0.177.1/node/internal_binding/contextify.ts
var contextify_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/crypto.ts
var crypto_exports = {};
__export(crypto_exports, {
  getFipsCrypto: () => getFipsCrypto,
  setFipsCrypto: () => setFipsCrypto,
  timingSafeEqual: () => timingSafeEqual2
});

// https://deno.land/std@0.177.1/crypto/timing_safe_equal.ts
function timingSafeEqual(a7, b2) {
  if (a7.byteLength !== b2.byteLength) {
    return false;
  }
  if (!(a7 instanceof DataView)) {
    a7 = new DataView(ArrayBuffer.isView(a7) ? a7.buffer : a7);
  }
  if (!(b2 instanceof DataView)) {
    b2 = new DataView(ArrayBuffer.isView(b2) ? b2.buffer : b2);
  }
  assert(a7 instanceof DataView);
  assert(b2 instanceof DataView);
  const length = a7.byteLength;
  let out = 0;
  let i7 = -1;
  while (++i7 < length) {
    out |= a7.getUint8(i7) ^ b2.getUint8(i7);
  }
  return out === 0;
}

// https://deno.land/std@0.177.1/node/internal_binding/_timingSafeEqual.ts
var timingSafeEqual2 = (a7, b2) => {
  if (a7 instanceof Buffer2) a7 = new DataView(a7.buffer);
  if (a7 instanceof Buffer2) b2 = new DataView(a7.buffer);
  return timingSafeEqual(a7, b2);
};

// https://deno.land/std@0.177.1/node/internal_binding/crypto.ts
function getFipsCrypto() {
  notImplemented("crypto.getFipsCrypto");
}
function setFipsCrypto(_fips) {
  notImplemented("crypto.setFipsCrypto");
}

// https://deno.land/std@0.177.1/node/internal_binding/credentials.ts
var credentials_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/errors.ts
var errors_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/fs.ts
var fs_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/fs_dir.ts
var fs_dir_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/fs_event_wrap.ts
var fs_event_wrap_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/heap_utils.ts
var heap_utils_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/http_parser.ts
var http_parser_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/icu.ts
var icu_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/inspector.ts
var inspector_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/js_stream.ts
var js_stream_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/messaging.ts
var messaging_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/module_wrap.ts
var module_wrap_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/native_module.ts
var native_module_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/natives.ts
var natives_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/options.ts
var options_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/os.ts
var os_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/pipe_wrap.ts
var pipe_wrap_exports = {};
__export(pipe_wrap_exports, {
  Pipe: () => Pipe,
  PipeConnectWrap: () => PipeConnectWrap,
  constants: () => constants3,
  socketType: () => socketType
});

// https://deno.land/std@0.177.1/node/internal_binding/stream_wrap.ts
var stream_wrap_exports = {};
__export(stream_wrap_exports, {
  LibuvStreamWrap: () => LibuvStreamWrap,
  ShutdownWrap: () => ShutdownWrap,
  WriteWrap: () => WriteWrap,
  kArrayBufferOffset: () => kArrayBufferOffset,
  kBytesWritten: () => kBytesWritten,
  kLastWriteWasAsync: () => kLastWriteWasAsync,
  kNumStreamBaseStateFields: () => kNumStreamBaseStateFields,
  kReadBytesOrError: () => kReadBytesOrError,
  kStreamBaseField: () => kStreamBaseField,
  streamBaseState: () => streamBaseState
});

// https://deno.land/std@0.177.1/node/internal_binding/handle_wrap.ts
var HandleWrap = class extends AsyncWrap {
  constructor(provider) {
    super(provider);
  }
  close(cb = () => {
  }) {
    this._onClose();
    queueMicrotask(cb);
  }
  ref() {
    unreachable();
  }
  unref() {
    unreachable();
  }
  // deno-lint-ignore no-explicit-any
  _onClose() {
  }
};

// https://deno.land/std@0.177.1/streams/write_all.ts
async function writeAll(w3, arr) {
  let nwritten = 0;
  while (nwritten < arr.length) {
    nwritten += await w3.write(arr.subarray(nwritten));
  }
}

// https://deno.land/std@0.177.1/node/internal_binding/stream_wrap.ts
var kReadBytesOrError = 0 /* kReadBytesOrError */;
var kArrayBufferOffset = 1 /* kArrayBufferOffset */;
var kBytesWritten = 2 /* kBytesWritten */;
var kLastWriteWasAsync = 3 /* kLastWriteWasAsync */;
var kNumStreamBaseStateFields = 4 /* kNumStreamBaseStateFields */;
var streamBaseState = new Uint8Array(5);
streamBaseState[kLastWriteWasAsync] = 1;
var WriteWrap = class extends AsyncWrap {
  handle;
  oncomplete;
  async;
  bytes;
  buffer;
  callback;
  _chunks;
  constructor() {
    super(41 /* WRITEWRAP */);
  }
};
var ShutdownWrap = class extends AsyncWrap {
  handle;
  oncomplete;
  callback;
  constructor() {
    super(28 /* SHUTDOWNWRAP */);
  }
};
var kStreamBaseField = Symbol("kStreamBaseField");
var SUGGESTED_SIZE = 64 * 1024;
var LibuvStreamWrap = class extends HandleWrap {
  [kStreamBaseField];
  reading;
  #reading = false;
  destroyed = false;
  writeQueueSize = 0;
  bytesRead = 0;
  bytesWritten = 0;
  onread;
  constructor(provider, stream) {
    super(provider);
    this.#attachToObject(stream);
  }
  /**
   * Start the reading of the stream.
   * @return An error status code.
   */
  readStart() {
    if (!this.#reading) {
      this.#reading = true;
      this.#read();
    }
    return 0;
  }
  /**
   * Stop the reading of the stream.
   * @return An error status code.
   */
  readStop() {
    this.#reading = false;
    return 0;
  }
  /**
   * Shutdown the stream.
   * @param req A shutdown request wrapper.
   * @return An error status code.
   */
  shutdown(req) {
    const status = this._onClose();
    try {
      req.oncomplete(status);
    } catch {
    }
    return 0;
  }
  /**
   * @param userBuf
   * @return An error status code.
   */
  useUserBuffer(_userBuf) {
    notImplemented("LibuvStreamWrap.prototype.useUserBuffer");
  }
  /**
   * Write a buffer to the stream.
   * @param req A write request wrapper.
   * @param data The Uint8Array buffer to write to the stream.
   * @return An error status code.
   */
  writeBuffer(req, data) {
    this.#write(req, data);
    return 0;
  }
  /**
   * Write multiple chunks at once.
   * @param req A write request wrapper.
   * @param chunks
   * @param allBuffers
   * @return An error status code.
   */
  writev(req, chunks, allBuffers) {
    const count = allBuffers ? chunks.length : chunks.length >> 1;
    const buffers = new Array(count);
    if (!allBuffers) {
      for (let i7 = 0; i7 < count; i7++) {
        const chunk = chunks[i7 * 2];
        if (Buffer2.isBuffer(chunk)) {
          buffers[i7] = chunk;
        }
        const encoding = chunks[i7 * 2 + 1];
        buffers[i7] = Buffer2.from(chunk, encoding);
      }
    } else {
      for (let i7 = 0; i7 < count; i7++) {
        buffers[i7] = chunks[i7];
      }
    }
    return this.writeBuffer(req, Buffer2.concat(buffers));
  }
  /**
   * Write an ASCII string to the stream.
   * @return An error status code.
   */
  writeAsciiString(req, data) {
    const buffer = new TextEncoder().encode(data);
    return this.writeBuffer(req, buffer);
  }
  /**
   * Write an UTF8 string to the stream.
   * @return An error status code.
   */
  writeUtf8String(req, data) {
    const buffer = new TextEncoder().encode(data);
    return this.writeBuffer(req, buffer);
  }
  /**
   * Write an UCS2 string to the stream.
   * @return An error status code.
   */
  writeUcs2String(_req, _data) {
    notImplemented("LibuvStreamWrap.prototype.writeUcs2String");
  }
  /**
   * Write an LATIN1 string to the stream.
   * @return An error status code.
   */
  writeLatin1String(req, data) {
    const buffer = Buffer2.from(data, "latin1");
    return this.writeBuffer(req, buffer);
  }
  _onClose() {
    let status = 0;
    this.#reading = false;
    try {
      this[kStreamBaseField]?.close();
    } catch {
      status = codeMap.get("ENOTCONN");
    }
    return status;
  }
  /**
   * Attaches the class to the underlying stream.
   * @param stream The stream to attach to.
   */
  #attachToObject(stream) {
    this[kStreamBaseField] = stream;
  }
  /** Internal method for reading from the attached stream. */
  async #read() {
    let buf = new Uint8Array(SUGGESTED_SIZE);
    let nread;
    try {
      nread = await this[kStreamBaseField].read(buf);
    } catch (e6) {
      if (e6 instanceof Deno.errors.Interrupted || e6 instanceof Deno.errors.BadResource) {
        nread = codeMap.get("EOF");
      } else if (e6 instanceof Deno.errors.ConnectionReset || e6 instanceof Deno.errors.ConnectionAborted) {
        nread = codeMap.get("ECONNRESET");
      } else {
        nread = codeMap.get("UNKNOWN");
      }
      buf = new Uint8Array(0);
    }
    nread ??= codeMap.get("EOF");
    streamBaseState[kReadBytesOrError] = nread;
    if (nread > 0) {
      this.bytesRead += nread;
    }
    buf = buf.slice(0, nread);
    streamBaseState[kArrayBufferOffset] = 0;
    try {
      this.onread(buf, nread);
    } catch {
    }
    if (nread >= 0 && this.#reading) {
      this.#read();
    }
  }
  /**
   * Internal method for writing to the attached stream.
   * @param req A write request wrapper.
   * @param data The Uint8Array buffer to write to the stream.
   */
  async #write(req, data) {
    const { byteLength: byteLength2 } = data;
    try {
      await writeAll(this[kStreamBaseField], data);
    } catch (e6) {
      let status;
      if (e6 instanceof Deno.errors.BadResource || e6 instanceof Deno.errors.BrokenPipe) {
        status = codeMap.get("EBADF");
      } else {
        status = codeMap.get("UNKNOWN");
      }
      try {
        req.oncomplete(status);
      } catch {
      }
      return;
    }
    streamBaseState[kBytesWritten] = byteLength2;
    this.bytesWritten += byteLength2;
    try {
      req.oncomplete(0);
    } catch {
    }
    return;
  }
};

// https://deno.land/std@0.177.1/node/internal_binding/connection_wrap.ts
var ConnectionWrap = class extends LibuvStreamWrap {
  /** Optional connection callback. */
  onconnection = null;
  /**
   * Creates a new ConnectionWrap class instance.
   * @param provider Provider type.
   * @param object Optional stream object.
   */
  constructor(provider, object) {
    super(provider, object);
  }
  /**
   * @param req A connect request.
   * @param status An error status code.
   */
  afterConnect(req, status) {
    const isSuccessStatus = !status;
    const readable = isSuccessStatus;
    const writable = isSuccessStatus;
    try {
      req.oncomplete(status, this, req, readable, writable);
    } catch {
    }
    return;
  }
};

// https://deno.land/std@0.177.1/async/delay.ts
function delay(ms, options = {}) {
  const { signal, persistent } = options;
  if (signal?.aborted) {
    return Promise.reject(new DOMException("Delay was aborted.", "AbortError"));
  }
  return new Promise((resolve10, reject) => {
    const abort = () => {
      clearTimeout(i7);
      reject(new DOMException("Delay was aborted.", "AbortError"));
    };
    const done = () => {
      signal?.removeEventListener("abort", abort);
      resolve10();
    };
    const i7 = setTimeout(done, ms);
    signal?.addEventListener("abort", abort, { once: true });
    if (persistent === false) {
      try {
        Deno.unrefTimer(i7);
      } catch (error) {
        if (!(error instanceof ReferenceError)) {
          throw error;
        }
        console.error("`persistent` option is only available in Deno");
      }
    }
  });
}

// https://deno.land/std@0.177.1/node/internal_binding/_listen.ts
function ceilPowOf2(n12) {
  const roundPowOf2 = 1 << 31 - Math.clz32(n12);
  return roundPowOf2 < n12 ? roundPowOf2 * 2 : roundPowOf2;
}
var INITIAL_ACCEPT_BACKOFF_DELAY = 5;
var MAX_ACCEPT_BACKOFF_DELAY = 1e3;

// https://deno.land/std@0.177.1/node/internal_binding/pipe_wrap.ts
var socketType = /* @__PURE__ */ ((socketType2) => {
  socketType2[socketType2["SOCKET"] = 0] = "SOCKET";
  socketType2[socketType2["SERVER"] = 1] = "SERVER";
  socketType2[socketType2["IPC"] = 2] = "IPC";
  return socketType2;
})(socketType || {});
var Pipe = class _Pipe extends ConnectionWrap {
  reading = false;
  ipc;
  // REF: https://github.com/nodejs/node/blob/master/deps/uv/src/win/pipe.c#L48
  #pendingInstances = 4;
  #address;
  #backlog;
  #listener;
  #connections = 0;
  #closed = false;
  #acceptBackoffDelay;
  constructor(type, conn) {
    let provider;
    let ipc;
    switch (type) {
      case 0 /* SOCKET */: {
        provider = 24 /* PIPEWRAP */;
        ipc = false;
        break;
      }
      case 1 /* SERVER */: {
        provider = 23 /* PIPESERVERWRAP */;
        ipc = false;
        break;
      }
      case 2 /* IPC */: {
        provider = 24 /* PIPEWRAP */;
        ipc = true;
        break;
      }
      default: {
        unreachable();
      }
    }
    super(provider, conn);
    this.ipc = ipc;
    if (conn && provider === 24 /* PIPEWRAP */) {
      const localAddr = conn.localAddr;
      this.#address = localAddr.path;
    }
  }
  open(_fd) {
    notImplemented("Pipe.prototype.open");
  }
  /**
   * Bind to a Unix domain or Windows named pipe.
   * @param name Unix domain or Windows named pipe the server should listen to.
   * @return An error status code.
   */
  bind(name) {
    this.#address = name;
    return 0;
  }
  /**
   * Connect to a Unix domain or Windows named pipe.
   * @param req A PipeConnectWrap instance.
   * @param address Unix domain or Windows named pipe the server should connect to.
   * @return An error status code.
   */
  connect(req, address) {
    if (isWindows) {
      notImplemented("Pipe.prototype.connect - Windows");
    }
    const connectOptions = {
      path: address,
      transport: "unix"
    };
    Deno.connect(connectOptions).then(
      (conn) => {
        const localAddr = conn.localAddr;
        this.#address = req.address = localAddr.path;
        this[kStreamBaseField] = conn;
        try {
          this.afterConnect(req, 0);
        } catch {
        }
      },
      (e6) => {
        let code;
        if (e6 instanceof Deno.errors.NotFound) {
          code = codeMap.get("ENOENT");
        } else if (e6 instanceof Deno.errors.PermissionDenied) {
          code = codeMap.get("EACCES");
        } else {
          code = codeMap.get("ECONNREFUSED");
        }
        try {
          this.afterConnect(req, code);
        } catch {
        }
      }
    );
    return 0;
  }
  /**
   * Listen for new connections.
   * @param backlog The maximum length of the queue of pending connections.
   * @return An error status code.
   */
  listen(backlog) {
    if (isWindows) {
      notImplemented("Pipe.prototype.listen - Windows");
    }
    this.#backlog = isWindows ? this.#pendingInstances : ceilPowOf2(backlog + 1);
    const listenOptions = {
      path: this.#address,
      transport: "unix"
    };
    let listener;
    try {
      listener = Deno.listen(listenOptions);
    } catch (e6) {
      if (e6 instanceof Deno.errors.AddrInUse) {
        return codeMap.get("EADDRINUSE");
      } else if (e6 instanceof Deno.errors.AddrNotAvailable) {
        return codeMap.get("EADDRNOTAVAIL");
      } else if (e6 instanceof Deno.errors.PermissionDenied) {
        throw e6;
      }
      return codeMap.get("UNKNOWN");
    }
    const address = listener.addr;
    this.#address = address.path;
    this.#listener = listener;
    this.#accept();
    return 0;
  }
  ref() {
    if (this.#listener) {
      this.#listener.ref();
    }
  }
  unref() {
    if (this.#listener) {
      this.#listener.unref();
    }
  }
  /**
   * Set the number of pending pipe instance handles when the pipe server is
   * waiting for connections. This setting applies to Windows only.
   * @param instances Number of pending pipe instances.
   */
  setPendingInstances(instances) {
    this.#pendingInstances = instances;
  }
  /**
   * Alters pipe permissions, allowing it to be accessed from processes run by
   * different users. Makes the pipe writable or readable by all users. Mode
   * can be `UV_WRITABLE`, `UV_READABLE` or `UV_WRITABLE | UV_READABLE`. This
   * function is blocking.
   * @param mode Pipe permissions mode.
   * @return An error status code.
   */
  fchmod(mode) {
    if (mode != 1 /* UV_READABLE */ && mode != 2 /* UV_WRITABLE */ && mode != (2 /* UV_WRITABLE */ | 1 /* UV_READABLE */)) {
      return codeMap.get("EINVAL");
    }
    let desired_mode = 0;
    if (mode & 1 /* UV_READABLE */) {
      desired_mode |= fs.S_IRUSR | fs.S_IRGRP | fs.S_IROTH;
    }
    if (mode & 2 /* UV_WRITABLE */) {
      desired_mode |= fs.S_IWUSR | fs.S_IWGRP | fs.S_IWOTH;
    }
    try {
      Deno.chmodSync(this.#address, desired_mode);
    } catch {
      return codeMap.get("UNKNOWN");
    }
    return 0;
  }
  /** Handle backoff delays following an unsuccessful accept. */
  async #acceptBackoff() {
    if (!this.#acceptBackoffDelay) {
      this.#acceptBackoffDelay = INITIAL_ACCEPT_BACKOFF_DELAY;
    } else {
      this.#acceptBackoffDelay *= 2;
    }
    if (this.#acceptBackoffDelay >= MAX_ACCEPT_BACKOFF_DELAY) {
      this.#acceptBackoffDelay = MAX_ACCEPT_BACKOFF_DELAY;
    }
    await delay(this.#acceptBackoffDelay);
    this.#accept();
  }
  /** Accept new connections. */
  async #accept() {
    if (this.#closed) {
      return;
    }
    if (this.#connections > this.#backlog) {
      this.#acceptBackoff();
      return;
    }
    let connection;
    try {
      connection = await this.#listener.accept();
    } catch (e6) {
      if (e6 instanceof Deno.errors.BadResource && this.#closed) {
        return;
      }
      try {
        this.onconnection(codeMap.get("UNKNOWN"), void 0);
      } catch {
      }
      this.#acceptBackoff();
      return;
    }
    this.#acceptBackoffDelay = void 0;
    const connectionHandle = new _Pipe(0 /* SOCKET */, connection);
    this.#connections++;
    try {
      this.onconnection(0, connectionHandle);
    } catch {
    }
    return this.#accept();
  }
  /** Handle server closure. */
  _onClose() {
    this.#closed = true;
    this.reading = false;
    this.#address = void 0;
    this.#backlog = void 0;
    this.#connections = 0;
    this.#acceptBackoffDelay = void 0;
    if (this.provider === 23 /* PIPESERVERWRAP */) {
      try {
        this.#listener.close();
      } catch {
      }
    }
    return LibuvStreamWrap.prototype._onClose.call(this);
  }
};
var PipeConnectWrap = class extends AsyncWrap {
  oncomplete;
  address;
  constructor() {
    super(22 /* PIPECONNECTWRAP */);
  }
};
var constants3 = /* @__PURE__ */ ((constants7) => {
  constants7[constants7["SOCKET"] = 0 /* SOCKET */] = "SOCKET";
  constants7[constants7["SERVER"] = 1 /* SERVER */] = "SERVER";
  constants7[constants7["IPC"] = 2 /* IPC */] = "IPC";
  constants7[constants7["UV_READABLE"] = 1] = "UV_READABLE";
  constants7[constants7["UV_WRITABLE"] = 2] = "UV_WRITABLE";
  return constants7;
})(constants3 || {});

// https://deno.land/std@0.177.1/node/internal_binding/performance.ts
var performance_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/process_methods.ts
var process_methods_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/report.ts
var report_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/serdes.ts
var serdes_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/signal_wrap.ts
var signal_wrap_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/spawn_sync.ts
var spawn_sync_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/symbols.ts
var symbols_exports = {};
__export(symbols_exports, {
  asyncIdSymbol: () => asyncIdSymbol,
  ownerSymbol: () => ownerSymbol
});
var asyncIdSymbol = Symbol("asyncIdSymbol");
var ownerSymbol = Symbol("ownerSymbol");

// https://deno.land/std@0.177.1/node/internal_binding/task_queue.ts
var task_queue_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/tcp_wrap.ts
var tcp_wrap_exports = {};
__export(tcp_wrap_exports, {
  TCP: () => TCP,
  TCPConnectWrap: () => TCPConnectWrap,
  constants: () => constants4
});
var TCPConnectWrap = class extends AsyncWrap {
  oncomplete;
  address;
  port;
  localAddress;
  localPort;
  constructor() {
    super(32 /* TCPCONNECTWRAP */);
  }
};
var constants4 = /* @__PURE__ */ ((constants7) => {
  constants7[constants7["SOCKET"] = 0 /* SOCKET */] = "SOCKET";
  constants7[constants7["SERVER"] = 1 /* SERVER */] = "SERVER";
  constants7[constants7["UV_TCP_IPV6ONLY"] = 2] = "UV_TCP_IPV6ONLY";
  return constants7;
})(constants4 || {});
var TCP = class _TCP extends ConnectionWrap {
  [ownerSymbol] = null;
  reading = false;
  #address;
  #port;
  #remoteAddress;
  #remoteFamily;
  #remotePort;
  #backlog;
  #listener;
  #connections = 0;
  #closed = false;
  #acceptBackoffDelay;
  /**
   * Creates a new TCP class instance.
   * @param type The socket type.
   * @param conn Optional connection object to wrap.
   */
  constructor(type, conn) {
    let provider;
    switch (type) {
      case 0 /* SOCKET */: {
        provider = 34 /* TCPWRAP */;
        break;
      }
      case 1 /* SERVER */: {
        provider = 33 /* TCPSERVERWRAP */;
        break;
      }
      default: {
        unreachable();
      }
    }
    super(provider, conn);
    if (conn && provider === 34 /* TCPWRAP */) {
      const localAddr = conn.localAddr;
      this.#address = localAddr.hostname;
      this.#port = localAddr.port;
      const remoteAddr = conn.remoteAddr;
      this.#remoteAddress = remoteAddr.hostname;
      this.#remotePort = remoteAddr.port;
      this.#remoteFamily = isIP(remoteAddr.hostname);
    }
  }
  /**
   * Opens a file descriptor.
   * @param fd The file descriptor to open.
   * @return An error status code.
   */
  open(_fd) {
    notImplemented("TCP.prototype.open");
  }
  /**
   * Bind to an IPv4 address.
   * @param address The hostname to bind to.
   * @param port The port to bind to
   * @return An error status code.
   */
  bind(address, port) {
    return this.#bind(address, port, 0);
  }
  /**
   * Bind to an IPv6 address.
   * @param address The hostname to bind to.
   * @param port The port to bind to
   * @return An error status code.
   */
  bind6(address, port, flags2) {
    return this.#bind(address, port, flags2);
  }
  /**
   * Connect to an IPv4 address.
   * @param req A TCPConnectWrap instance.
   * @param address The hostname to connect to.
   * @param port The port to connect to.
   * @return An error status code.
   */
  connect(req, address, port) {
    return this.#connect(req, address, port);
  }
  /**
   * Connect to an IPv6 address.
   * @param req A TCPConnectWrap instance.
   * @param address The hostname to connect to.
   * @param port The port to connect to.
   * @return An error status code.
   */
  connect6(req, address, port) {
    return this.#connect(req, address, port);
  }
  /**
   * Listen for new connections.
   * @param backlog The maximum length of the queue of pending connections.
   * @return An error status code.
   */
  listen(backlog) {
    this.#backlog = ceilPowOf2(backlog + 1);
    const listenOptions = {
      hostname: this.#address,
      port: this.#port,
      transport: "tcp"
    };
    let listener;
    try {
      listener = Deno.listen(listenOptions);
    } catch (e6) {
      if (e6 instanceof Deno.errors.AddrInUse) {
        return codeMap.get("EADDRINUSE");
      } else if (e6 instanceof Deno.errors.AddrNotAvailable) {
        return codeMap.get("EADDRNOTAVAIL");
      } else if (e6 instanceof Deno.errors.PermissionDenied) {
        throw e6;
      }
      return codeMap.get("UNKNOWN");
    }
    const address = listener.addr;
    this.#address = address.hostname;
    this.#port = address.port;
    this.#listener = listener;
    this.#accept();
    return 0;
  }
  ref() {
    if (this.#listener) {
      this.#listener.ref();
    }
    if (this[kStreamBaseField]) {
      this[kStreamBaseField].ref();
    }
  }
  unref() {
    if (this.#listener) {
      this.#listener.unref();
    }
    if (this[kStreamBaseField]) {
      this[kStreamBaseField].unref();
    }
  }
  /**
   * Populates the provided object with local address entries.
   * @param sockname An object to add the local address entries to.
   * @return An error status code.
   */
  getsockname(sockname) {
    if (typeof this.#address === "undefined" || typeof this.#port === "undefined") {
      return codeMap.get("EADDRNOTAVAIL");
    }
    sockname.address = this.#address;
    sockname.port = this.#port;
    sockname.family = isIP(this.#address);
    return 0;
  }
  /**
   * Populates the provided object with remote address entries.
   * @param peername An object to add the remote address entries to.
   * @return An error status code.
   */
  getpeername(peername) {
    if (typeof this.#remoteAddress === "undefined" || typeof this.#remotePort === "undefined") {
      return codeMap.get("EADDRNOTAVAIL");
    }
    peername.address = this.#remoteAddress;
    peername.port = this.#remotePort;
    peername.family = this.#remoteFamily;
    return 0;
  }
  /**
   * @param noDelay
   * @return An error status code.
   */
  setNoDelay(_noDelay) {
    return 0;
  }
  /**
   * @param enable
   * @param initialDelay
   * @return An error status code.
   */
  setKeepAlive(_enable, _initialDelay) {
    return 0;
  }
  /**
   * Windows only.
   *
   * Deprecated by Node.
   * REF: https://github.com/nodejs/node/blob/master/lib/net.js#L1731
   *
   * @param enable
   * @return An error status code.
   * @deprecated
   */
  setSimultaneousAccepts(_enable) {
    notImplemented("TCP.prototype.setSimultaneousAccepts");
  }
  /**
   * Bind to an IPv4 or IPv6 address.
   * @param address The hostname to bind to.
   * @param port The port to bind to
   * @param _flags
   * @return An error status code.
   */
  #bind(address, port, _flags) {
    this.#address = address;
    this.#port = port;
    return 0;
  }
  /**
   * Connect to an IPv4 or IPv6 address.
   * @param req A TCPConnectWrap instance.
   * @param address The hostname to connect to.
   * @param port The port to connect to.
   * @return An error status code.
   */
  #connect(req, address, port) {
    this.#remoteAddress = address;
    this.#remotePort = port;
    this.#remoteFamily = isIP(address);
    const connectOptions = {
      hostname: address,
      port,
      transport: "tcp"
    };
    Deno.connect(connectOptions).then(
      (conn) => {
        const localAddr = conn.localAddr;
        this.#address = req.localAddress = localAddr.hostname;
        this.#port = req.localPort = localAddr.port;
        this[kStreamBaseField] = conn;
        try {
          this.afterConnect(req, 0);
        } catch {
        }
      },
      () => {
        try {
          this.afterConnect(req, codeMap.get("ECONNREFUSED"));
        } catch {
        }
      }
    );
    return 0;
  }
  /** Handle backoff delays following an unsuccessful accept. */
  async #acceptBackoff() {
    if (!this.#acceptBackoffDelay) {
      this.#acceptBackoffDelay = INITIAL_ACCEPT_BACKOFF_DELAY;
    } else {
      this.#acceptBackoffDelay *= 2;
    }
    if (this.#acceptBackoffDelay >= MAX_ACCEPT_BACKOFF_DELAY) {
      this.#acceptBackoffDelay = MAX_ACCEPT_BACKOFF_DELAY;
    }
    await delay(this.#acceptBackoffDelay);
    this.#accept();
  }
  /** Accept new connections. */
  async #accept() {
    if (this.#closed) {
      return;
    }
    if (this.#connections > this.#backlog) {
      this.#acceptBackoff();
      return;
    }
    let connection;
    try {
      connection = await this.#listener.accept();
    } catch (e6) {
      if (e6 instanceof Deno.errors.BadResource && this.#closed) {
        return;
      }
      try {
        this.onconnection(codeMap.get("UNKNOWN"), void 0);
      } catch {
      }
      this.#acceptBackoff();
      return;
    }
    this.#acceptBackoffDelay = void 0;
    const connectionHandle = new _TCP(0 /* SOCKET */, connection);
    this.#connections++;
    try {
      this.onconnection(0, connectionHandle);
    } catch {
    }
    return this.#accept();
  }
  /** Handle server closure. */
  _onClose() {
    this.#closed = true;
    this.reading = false;
    this.#address = void 0;
    this.#port = void 0;
    this.#remoteAddress = void 0;
    this.#remoteFamily = void 0;
    this.#remotePort = void 0;
    this.#backlog = void 0;
    this.#connections = 0;
    this.#acceptBackoffDelay = void 0;
    if (this.provider === 33 /* TCPSERVERWRAP */) {
      try {
        this.#listener.close();
      } catch {
      }
    }
    return LibuvStreamWrap.prototype._onClose.call(this);
  }
};

// https://deno.land/std@0.177.1/node/internal_binding/timers.ts
var timers_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/tls_wrap.ts
var tls_wrap_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/trace_events.ts
var trace_events_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/tty_wrap.ts
var tty_wrap_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/udp_wrap.ts
var udp_wrap_exports = {};
__export(udp_wrap_exports, {
  SendWrap: () => SendWrap,
  UDP: () => UDP
});
var DenoListenDatagram = Deno[Deno.internal]?.nodeUnstable?.listenDatagram || Deno.listenDatagram;
var AF_INET = 2;
var AF_INET6 = 10;
var UDP_DGRAM_MAXSIZE = 64 * 1024;
var SendWrap = class extends AsyncWrap {
  list;
  address;
  port;
  callback;
  oncomplete;
  constructor() {
    super(36 /* UDPSENDWRAP */);
  }
};
var UDP = class extends HandleWrap {
  [ownerSymbol] = null;
  #address;
  #family;
  #port;
  #remoteAddress;
  #remoteFamily;
  #remotePort;
  #listener;
  #receiving = false;
  #recvBufferSize = UDP_DGRAM_MAXSIZE;
  #sendBufferSize = UDP_DGRAM_MAXSIZE;
  onmessage;
  lookup;
  constructor() {
    super(37 /* UDPWRAP */);
  }
  addMembership(_multicastAddress, _interfaceAddress) {
    notImplemented("udp.UDP.prototype.addMembership");
  }
  addSourceSpecificMembership(_sourceAddress, _groupAddress, _interfaceAddress) {
    notImplemented("udp.UDP.prototype.addSourceSpecificMembership");
  }
  /**
   * Bind to an IPv4 address.
   * @param ip The hostname to bind to.
   * @param port The port to bind to
   * @return An error status code.
   */
  bind(ip, port, flags2) {
    return this.#doBind(ip, port, flags2, AF_INET);
  }
  /**
   * Bind to an IPv6 address.
   * @param ip The hostname to bind to.
   * @param port The port to bind to
   * @return An error status code.
   */
  bind6(ip, port, flags2) {
    return this.#doBind(ip, port, flags2, AF_INET6);
  }
  bufferSize(size, buffer, ctx) {
    let err;
    if (size > UDP_DGRAM_MAXSIZE) {
      err = "EINVAL";
    } else if (!this.#address) {
      err = isWindows ? "ENOTSOCK" : "EBADF";
    }
    if (err) {
      ctx.errno = codeMap.get(err);
      ctx.code = err;
      ctx.message = errorMap.get(ctx.errno)[1];
      ctx.syscall = buffer ? "uv_recv_buffer_size" : "uv_send_buffer_size";
      return;
    }
    if (size !== 0) {
      size = isLinux ? size * 2 : size;
      if (buffer) {
        return this.#recvBufferSize = size;
      }
      return this.#sendBufferSize = size;
    }
    return buffer ? this.#recvBufferSize : this.#sendBufferSize;
  }
  connect(ip, port) {
    return this.#doConnect(ip, port, AF_INET);
  }
  connect6(ip, port) {
    return this.#doConnect(ip, port, AF_INET6);
  }
  disconnect() {
    this.#remoteAddress = void 0;
    this.#remotePort = void 0;
    this.#remoteFamily = void 0;
    return 0;
  }
  dropMembership(_multicastAddress, _interfaceAddress) {
    notImplemented("udp.UDP.prototype.dropMembership");
  }
  dropSourceSpecificMembership(_sourceAddress, _groupAddress, _interfaceAddress) {
    notImplemented("udp.UDP.prototype.dropSourceSpecificMembership");
  }
  /**
   * Populates the provided object with remote address entries.
   * @param peername An object to add the remote address entries to.
   * @return An error status code.
   */
  getpeername(peername) {
    if (this.#remoteAddress === void 0) {
      return codeMap.get("EBADF");
    }
    peername.address = this.#remoteAddress;
    peername.port = this.#remotePort;
    peername.family = this.#remoteFamily;
    return 0;
  }
  /**
   * Populates the provided object with local address entries.
   * @param sockname An object to add the local address entries to.
   * @return An error status code.
   */
  getsockname(sockname) {
    if (this.#address === void 0) {
      return codeMap.get("EBADF");
    }
    sockname.address = this.#address;
    sockname.port = this.#port;
    sockname.family = this.#family;
    return 0;
  }
  /**
   * Opens a file descriptor.
   * @param fd The file descriptor to open.
   * @return An error status code.
   */
  open(_fd) {
    notImplemented("udp.UDP.prototype.open");
  }
  /**
   * Start receiving on the connection.
   * @return An error status code.
   */
  recvStart() {
    if (!this.#receiving) {
      this.#receiving = true;
      this.#receive();
    }
    return 0;
  }
  /**
   * Stop receiving on the connection.
   * @return An error status code.
   */
  recvStop() {
    this.#receiving = false;
    return 0;
  }
  ref() {
    notImplemented("udp.UDP.prototype.ref");
  }
  send(req, bufs, count, ...args2) {
    return this.#doSend(req, bufs, count, args2, AF_INET);
  }
  send6(req, bufs, count, ...args2) {
    return this.#doSend(req, bufs, count, args2, AF_INET6);
  }
  setBroadcast(_bool) {
    notImplemented("udp.UDP.prototype.setBroadcast");
  }
  setMulticastInterface(_interfaceAddress) {
    notImplemented("udp.UDP.prototype.setMulticastInterface");
  }
  setMulticastLoopback(_bool) {
    notImplemented("udp.UDP.prototype.setMulticastLoopback");
  }
  setMulticastTTL(_ttl) {
    notImplemented("udp.UDP.prototype.setMulticastTTL");
  }
  setTTL(_ttl) {
    notImplemented("udp.UDP.prototype.setTTL");
  }
  unref() {
    notImplemented("udp.UDP.prototype.unref");
  }
  #doBind(ip, port, _flags, family) {
    const listenOptions = {
      port,
      hostname: ip,
      transport: "udp"
    };
    let listener;
    try {
      listener = DenoListenDatagram(listenOptions);
    } catch (e6) {
      if (e6 instanceof Deno.errors.AddrInUse) {
        return codeMap.get("EADDRINUSE");
      } else if (e6 instanceof Deno.errors.AddrNotAvailable) {
        return codeMap.get("EADDRNOTAVAIL");
      } else if (e6 instanceof Deno.errors.PermissionDenied) {
        throw e6;
      }
      return codeMap.get("UNKNOWN");
    }
    const address = listener.addr;
    this.#address = address.hostname;
    this.#port = address.port;
    this.#family = family === AF_INET6 ? "IPv6" : "IPv4";
    this.#listener = listener;
    return 0;
  }
  #doConnect(ip, port, family) {
    this.#remoteAddress = ip;
    this.#remotePort = port;
    this.#remoteFamily = family === AF_INET6 ? "IPv6" : "IPv4";
    return 0;
  }
  #doSend(req, bufs, _count, args2, _family) {
    let hasCallback;
    if (args2.length === 3) {
      this.#remotePort = args2[0];
      this.#remoteAddress = args2[1];
      hasCallback = args2[2];
    } else {
      hasCallback = args2[0];
    }
    const addr = {
      hostname: this.#remoteAddress,
      port: this.#remotePort,
      transport: "udp"
    };
    const payload = new Uint8Array(
      Buffer2.concat(
        bufs.map((buf) => {
          if (typeof buf === "string") {
            return Buffer2.from(buf);
          }
          return Buffer2.from(buf.buffer, buf.byteOffset, buf.byteLength);
        })
      )
    );
    (async () => {
      let sent;
      let err = null;
      try {
        sent = await this.#listener.send(payload, addr);
      } catch (e6) {
        if (e6 instanceof Deno.errors.BadResource) {
          err = codeMap.get("EBADF");
        } else if (e6 instanceof Error && e6.message.match(/os error (40|90|10040)/)) {
          err = codeMap.get("EMSGSIZE");
        } else {
          err = codeMap.get("UNKNOWN");
        }
        sent = 0;
      }
      if (hasCallback) {
        try {
          req.oncomplete(err, sent);
        } catch {
        }
      }
    })();
    return 0;
  }
  async #receive() {
    if (!this.#receiving) {
      return;
    }
    const p3 = new Uint8Array(this.#recvBufferSize);
    let buf;
    let remoteAddr;
    let nread;
    try {
      [buf, remoteAddr] = await this.#listener.receive(p3);
      nread = buf.length;
    } catch (e6) {
      if (e6 instanceof Deno.errors.Interrupted || e6 instanceof Deno.errors.BadResource) {
        nread = 0;
      } else {
        nread = codeMap.get("UNKNOWN");
      }
      buf = new Uint8Array(0);
      remoteAddr = null;
    }
    nread ??= 0;
    const rinfo = remoteAddr ? {
      address: remoteAddr.hostname,
      port: remoteAddr.port,
      family: isIP(remoteAddr.hostname) === 6 ? "IPv6" : "IPv4"
    } : void 0;
    try {
      this.onmessage(nread, this, Buffer2.from(buf), rinfo);
    } catch {
    }
    this.#receive();
  }
  /** Handle socket closure. */
  _onClose() {
    this.#receiving = false;
    this.#address = void 0;
    this.#port = void 0;
    this.#family = void 0;
    try {
      this.#listener.close();
    } catch {
    }
    this.#listener = void 0;
    return 0;
  }
};

// https://deno.land/std@0.177.1/node/internal_binding/url.ts
var url_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/v8.ts
var v8_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/worker.ts
var worker_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/zlib.ts
var zlib_exports = {};

// https://deno.land/std@0.177.1/node/internal_binding/mod.ts
var modules = {
  "async_wrap": async_wrap_exports,
  buffer: buffer_exports,
  "cares_wrap": cares_wrap_exports,
  config: config_exports,
  constants: constants_exports,
  contextify: contextify_exports,
  credentials: credentials_exports,
  crypto: crypto_exports,
  errors: errors_exports,
  fs: fs_exports,
  "fs_dir": fs_dir_exports,
  "fs_event_wrap": fs_event_wrap_exports,
  "heap_utils": heap_utils_exports,
  "http_parser": http_parser_exports,
  icu: icu_exports,
  inspector: inspector_exports,
  "js_stream": js_stream_exports,
  messaging: messaging_exports,
  "module_wrap": module_wrap_exports,
  "native_module": native_module_exports,
  natives: natives_exports,
  options: options_exports,
  os: os_exports,
  performance: performance_exports,
  "pipe_wrap": pipe_wrap_exports,
  "process_methods": process_methods_exports,
  report: report_exports,
  serdes: serdes_exports,
  "signal_wrap": signal_wrap_exports,
  "spawn_sync": spawn_sync_exports,
  "stream_wrap": stream_wrap_exports,
  "string_decoder": string_decoder_exports,
  symbols: symbols_exports,
  "task_queue": task_queue_exports,
  "tcp_wrap": tcp_wrap_exports,
  timers: timers_exports,
  "tls_wrap": tls_wrap_exports,
  "trace_events": trace_events_exports,
  "tty_wrap": tty_wrap_exports,
  types: types_exports,
  "udp_wrap": udp_wrap_exports,
  url: url_exports,
  util: util_exports,
  uv: uv_exports,
  v8: v8_exports,
  worker: worker_exports,
  zlib: zlib_exports
};
function getBinding(name) {
  const mod = modules[name];
  if (!mod) {
    throw new Error(`No such module: ${name}`);
  }
  return mod;
}

// https://deno.land/std@0.177.1/node/internal/process/per_thread.mjs
var kInternal = Symbol("internal properties");
var replaceUnderscoresRegex = /_/g;
var leadingDashesRegex = /^--?/;
var trailingValuesRegex = /=.*$/;
function buildAllowedFlags() {
  const allowedNodeEnvironmentFlags = [
    "--track-heap-objects",
    "--no-track-heap-objects",
    "--node-snapshot",
    "--no-node-snapshot",
    "--require",
    "--max-old-space-size",
    "--trace-exit",
    "--no-trace-exit",
    "--disallow-code-generation-from-strings",
    "--experimental-json-modules",
    "--no-experimental-json-modules",
    "--interpreted-frames-native-stack",
    "--inspect-brk",
    "--no-inspect-brk",
    "--trace-tls",
    "--no-trace-tls",
    "--stack-trace-limit",
    "--experimental-repl-await",
    "--no-experimental-repl-await",
    "--preserve-symlinks",
    "--no-preserve-symlinks",
    "--report-uncaught-exception",
    "--no-report-uncaught-exception",
    "--experimental-modules",
    "--no-experimental-modules",
    "--report-signal",
    "--jitless",
    "--inspect-port",
    "--heapsnapshot-near-heap-limit",
    "--tls-keylog",
    "--force-context-aware",
    "--no-force-context-aware",
    "--napi-modules",
    "--abort-on-uncaught-exception",
    "--diagnostic-dir",
    "--verify-base-objects",
    "--no-verify-base-objects",
    "--unhandled-rejections",
    "--perf-basic-prof",
    "--trace-atomics-wait",
    "--no-trace-atomics-wait",
    "--deprecation",
    "--no-deprecation",
    "--perf-basic-prof-only-functions",
    "--perf-prof",
    "--max-http-header-size",
    "--report-on-signal",
    "--no-report-on-signal",
    "--throw-deprecation",
    "--no-throw-deprecation",
    "--warnings",
    "--no-warnings",
    "--force-fips",
    "--no-force-fips",
    "--pending-deprecation",
    "--no-pending-deprecation",
    "--input-type",
    "--tls-max-v1.3",
    "--no-tls-max-v1.3",
    "--tls-min-v1.2",
    "--no-tls-min-v1.2",
    "--inspect",
    "--no-inspect",
    "--heapsnapshot-signal",
    "--trace-warnings",
    "--no-trace-warnings",
    "--trace-event-categories",
    "--experimental-worker",
    "--tls-max-v1.2",
    "--no-tls-max-v1.2",
    "--perf-prof-unwinding-info",
    "--preserve-symlinks-main",
    "--no-preserve-symlinks-main",
    "--policy-integrity",
    "--experimental-wasm-modules",
    "--no-experimental-wasm-modules",
    "--node-memory-debug",
    "--inspect-publish-uid",
    "--tls-min-v1.3",
    "--no-tls-min-v1.3",
    "--experimental-specifier-resolution",
    "--secure-heap",
    "--tls-min-v1.0",
    "--no-tls-min-v1.0",
    "--redirect-warnings",
    "--experimental-report",
    "--trace-event-file-pattern",
    "--trace-uncaught",
    "--no-trace-uncaught",
    "--experimental-loader",
    "--http-parser",
    "--dns-result-order",
    "--trace-sigint",
    "--no-trace-sigint",
    "--secure-heap-min",
    "--enable-fips",
    "--no-enable-fips",
    "--enable-source-maps",
    "--no-enable-source-maps",
    "--insecure-http-parser",
    "--no-insecure-http-parser",
    "--use-openssl-ca",
    "--no-use-openssl-ca",
    "--tls-cipher-list",
    "--experimental-top-level-await",
    "--no-experimental-top-level-await",
    "--openssl-config",
    "--icu-data-dir",
    "--v8-pool-size",
    "--report-on-fatalerror",
    "--no-report-on-fatalerror",
    "--title",
    "--tls-min-v1.1",
    "--no-tls-min-v1.1",
    "--report-filename",
    "--trace-deprecation",
    "--no-trace-deprecation",
    "--report-compact",
    "--no-report-compact",
    "--experimental-policy",
    "--experimental-import-meta-resolve",
    "--no-experimental-import-meta-resolve",
    "--zero-fill-buffers",
    "--no-zero-fill-buffers",
    "--report-dir",
    "--use-bundled-ca",
    "--no-use-bundled-ca",
    "--experimental-vm-modules",
    "--no-experimental-vm-modules",
    "--force-async-hooks-checks",
    "--no-force-async-hooks-checks",
    "--frozen-intrinsics",
    "--no-frozen-intrinsics",
    "--huge-max-old-generation-size",
    "--disable-proto",
    "--debug-arraybuffer-allocations",
    "--no-debug-arraybuffer-allocations",
    "--conditions",
    "--experimental-wasi-unstable-preview1",
    "--no-experimental-wasi-unstable-preview1",
    "--trace-sync-io",
    "--no-trace-sync-io",
    "--use-largepages",
    "--experimental-abortcontroller",
    "--debug-port",
    "--es-module-specifier-resolution",
    "--prof-process",
    "-C",
    "--loader",
    "--report-directory",
    "-r",
    "--trace-events-enabled"
  ];
  const trimLeadingDashes = (flag) => flag.replace(leadingDashesRegex, "");
  const nodeFlags = allowedNodeEnvironmentFlags.map(trimLeadingDashes);
  class NodeEnvironmentFlagsSet extends Set {
    constructor(array) {
      super();
      this[kInternal] = { array };
    }
    add() {
      return this;
    }
    delete() {
      return false;
    }
    clear() {
    }
    has(key) {
      if (typeof key === "string") {
        key = key.replace(replaceUnderscoresRegex, "-");
        if (leadingDashesRegex.test(key)) {
          key = key.replace(trailingValuesRegex, "");
          return this[kInternal].array.includes(key);
        }
        return nodeFlags.includes(key);
      }
      return false;
    }
    entries() {
      this[kInternal].set ??= new Set(this[kInternal].array);
      return this[kInternal].set.entries();
    }
    forEach(callback, thisArg = void 0) {
      this[kInternal].array.forEach(
        (v4) => Reflect.apply(callback, thisArg, [v4, v4, this])
      );
    }
    get size() {
      return this[kInternal].array.length;
    }
    values() {
      this[kInternal].set ??= new Set(this[kInternal].array);
      return this[kInternal].set.values();
    }
  }
  NodeEnvironmentFlagsSet.prototype.keys = NodeEnvironmentFlagsSet.prototype[Symbol.iterator] = NodeEnvironmentFlagsSet.prototype.values;
  Object.freeze(NodeEnvironmentFlagsSet.prototype.constructor);
  Object.freeze(NodeEnvironmentFlagsSet.prototype);
  return Object.freeze(
    new NodeEnvironmentFlagsSet(
      allowedNodeEnvironmentFlags
    )
  );
}

// https://deno.land/std@0.177.1/node/process.ts
var stderr2 = stderr;
var stdin2 = stdin;
var stdout2 = stdout;
var DenoCommand = Deno[Deno.internal]?.nodeUnstable?.Command || Deno.Command;
var notImplementedEvents = [
  "disconnect",
  "message",
  "multipleResolves",
  "rejectionHandled",
  "worker"
];
var argv = ["", "", ...Deno.args];
Object.defineProperty(argv, "0", { get: Deno.execPath });
Object.defineProperty(argv, "1", {
  get: () => {
    if (Deno.mainModule.startsWith("file:")) {
      return fromFileUrl3(Deno.mainModule);
    } else {
      return join5(Deno.cwd(), "$deno$node.js");
    }
  }
});
var exit = (code) => {
  if (code || code === 0) {
    if (typeof code === "string") {
      const parsedCode = parseInt(code);
      process3.exitCode = isNaN(parsedCode) ? void 0 : parsedCode;
    } else {
      process3.exitCode = code;
    }
  }
  if (!process3._exiting) {
    process3._exiting = true;
    process3.emit("exit", process3.exitCode || 0);
  }
  Deno.exit(process3.exitCode || 0);
};
function addReadOnlyProcessAlias(name, option, enumerable = true) {
  const value = getOptionValue(option);
  if (value) {
    Object.defineProperty(process3, name, {
      writable: false,
      configurable: true,
      enumerable,
      value
    });
  }
}
function createWarningObject(warning, type, code, ctor, detail) {
  assert(typeof warning === "string");
  const warningErr = new Error(warning);
  warningErr.name = String(type || "Warning");
  if (code !== void 0) {
    warningErr.code = code;
  }
  if (detail !== void 0) {
    warningErr.detail = detail;
  }
  Error.captureStackTrace(warningErr, ctor || process3.emitWarning);
  return warningErr;
}
function doEmitWarning(warning) {
  process3.emit("warning", warning);
}
function emitWarning(warning, type, code, ctor) {
  let detail;
  if (type !== null && typeof type === "object" && !Array.isArray(type)) {
    ctor = type.ctor;
    code = type.code;
    if (typeof type.detail === "string") {
      detail = type.detail;
    }
    type = type.type || "Warning";
  } else if (typeof type === "function") {
    ctor = type;
    code = void 0;
    type = "Warning";
  }
  if (type !== void 0) {
    validateString(type, "type");
  }
  if (typeof code === "function") {
    ctor = code;
    code = void 0;
  } else if (code !== void 0) {
    validateString(code, "code");
  }
  if (typeof warning === "string") {
    warning = createWarningObject(warning, type, code, ctor, detail);
  } else if (!(warning instanceof Error)) {
    throw new ERR_INVALID_ARG_TYPE("warning", ["Error", "string"], warning);
  }
  if (warning.name === "DeprecationWarning") {
    if (process3.noDeprecation) {
      return;
    }
    if (process3.throwDeprecation) {
      return process3.nextTick(() => {
        throw warning;
      });
    }
  }
  process3.nextTick(doEmitWarning, warning);
}
function hrtime(time) {
  const milli = performance.now();
  const sec = Math.floor(milli / 1e3);
  const nano = Math.floor(milli * 1e6 - sec * 1e9);
  if (!time) {
    return [sec, nano];
  }
  const [prevSec, prevNano] = time;
  return [sec - prevSec, nano - prevNano];
}
hrtime.bigint = function() {
  const [sec, nano] = hrtime();
  return BigInt(sec) * 1000000000n + BigInt(nano);
};
function memoryUsage() {
  return {
    ...Deno.memoryUsage(),
    arrayBuffers: 0
  };
}
memoryUsage.rss = function() {
  return memoryUsage().rss;
};
function _kill(pid3, sig) {
  let errCode;
  if (sig === 0) {
    let status;
    if (Deno.build.os === "windows") {
      status = new DenoCommand("powershell.exe", {
        args: ["Get-Process", "-pid", pid3]
      }).outputSync();
    } else {
      status = new DenoCommand("kill", {
        args: ["-0", pid3]
      }).outputSync();
    }
    if (!status.success) {
      errCode = codeMap.get("ESRCH");
    }
  } else {
    const maybeSignal = Object.entries(os.signals).find(([_4, numericCode]) => numericCode === sig);
    if (!maybeSignal) {
      errCode = codeMap.get("EINVAL");
    } else {
      try {
        Deno.kill(pid3, maybeSignal[0]);
      } catch (e6) {
        if (e6 instanceof TypeError) {
          throw notImplemented(maybeSignal[0]);
        }
        throw e6;
      }
    }
  }
  if (!errCode) {
    return 0;
  } else {
    return errCode;
  }
}
function kill(pid3, sig = "SIGTERM") {
  if (pid3 != (pid3 | 0)) {
    throw new ERR_INVALID_ARG_TYPE("pid", "number", pid3);
  }
  let err;
  if (typeof sig === "number") {
    err = process3._kill(pid3, sig);
  } else {
    if (sig in os.signals) {
      err = process3._kill(pid3, os.signals[sig]);
    } else {
      throw new ERR_UNKNOWN_SIGNAL(sig);
    }
  }
  if (err) {
    throw errnoException(err, "kill");
  }
  return true;
}
function uncaughtExceptionHandler(err, origin) {
  process3.emit("uncaughtExceptionMonitor", err, origin);
  process3.emit("uncaughtException", err, origin);
}
var execPath = null;
var Process = class extends EventEmitter {
  constructor() {
    super();
    globalThis.addEventListener("unhandledrejection", (event) => {
      if (process3.listenerCount("unhandledRejection") === 0) {
        if (process3.listenerCount("uncaughtException") === 0) {
          throw event.reason;
        }
        event.preventDefault();
        uncaughtExceptionHandler(event.reason, "unhandledRejection");
        return;
      }
      event.preventDefault();
      process3.emit("unhandledRejection", event.reason, event.promise);
    });
    globalThis.addEventListener("error", (event) => {
      if (process3.listenerCount("uncaughtException") > 0) {
        event.preventDefault();
      }
      uncaughtExceptionHandler(event.error, "uncaughtException");
    });
    globalThis.addEventListener("beforeunload", (e6) => {
      super.emit("beforeExit", process3.exitCode || 0);
      processTicksAndRejections();
      if (core.eventLoopHasMoreWork()) {
        e6.preventDefault();
      }
    });
    globalThis.addEventListener("unload", () => {
      if (!process3._exiting) {
        process3._exiting = true;
        super.emit("exit", process3.exitCode || 0);
      }
    });
  }
  /** https://nodejs.org/api/process.html#process_process_arch */
  arch = arch;
  /**
   * https://nodejs.org/api/process.html#process_process_argv
   * Read permissions are required in order to get the executable route
   */
  argv = argv;
  /** https://nodejs.org/api/process.html#process_process_chdir_directory */
  chdir = chdir;
  /** https://nodejs.org/api/process.html#processconfig */
  config = {
    target_defaults: {},
    variables: {}
  };
  /** https://nodejs.org/api/process.html#process_process_cwd */
  cwd = cwd;
  /**
   * https://nodejs.org/api/process.html#process_process_env
   * Requires env permissions
   */
  env = env;
  /** https://nodejs.org/api/process.html#process_process_execargv */
  execArgv = [];
  /** https://nodejs.org/api/process.html#process_process_exit_code */
  exit = exit;
  _exiting = _exiting;
  /** https://nodejs.org/api/process.html#processexitcode_1 */
  exitCode = void 0;
  // Typed as any to avoid importing "module" module for types
  // deno-lint-ignore no-explicit-any
  mainModule = void 0;
  /** https://nodejs.org/api/process.html#process_process_nexttick_callback_args */
  nextTick = nextTick3;
  // deno-lint-ignore no-explicit-any
  on(event, listener) {
    if (notImplementedEvents.includes(event)) {
      warnNotImplemented(`process.on("${event}")`);
      super.on(event, listener);
    } else if (event.startsWith("SIG")) {
      if (event === "SIGBREAK" && Deno.build.os !== "windows") {
      } else if (event === "SIGTERM" && Deno.build.os === "windows") {
      } else {
        Deno.addSignalListener(event, listener);
      }
    } else {
      super.on(event, listener);
    }
    return this;
  }
  // deno-lint-ignore no-explicit-any
  off(event, listener) {
    if (notImplementedEvents.includes(event)) {
      warnNotImplemented(`process.off("${event}")`);
      super.off(event, listener);
    } else if (event.startsWith("SIG")) {
      if (event === "SIGBREAK" && Deno.build.os !== "windows") {
      } else if (event === "SIGTERM" && Deno.build.os === "windows") {
      } else {
        Deno.removeSignalListener(event, listener);
      }
    } else {
      super.off(event, listener);
    }
    return this;
  }
  // deno-lint-ignore no-explicit-any
  emit(event, ...args2) {
    if (event.startsWith("SIG")) {
      if (event === "SIGBREAK" && Deno.build.os !== "windows") {
      } else {
        Deno.kill(Deno.pid, event);
      }
    } else {
      return super.emit(event, ...args2);
    }
    return true;
  }
  prependListener(event, listener) {
    if (notImplementedEvents.includes(event)) {
      warnNotImplemented(`process.prependListener("${event}")`);
      super.prependListener(event, listener);
    } else if (event.startsWith("SIG")) {
      if (event === "SIGBREAK" && Deno.build.os !== "windows") {
      } else {
        Deno.addSignalListener(event, listener);
      }
    } else {
      super.prependListener(event, listener);
    }
    return this;
  }
  /** https://nodejs.org/api/process.html#process_process_pid */
  pid = pid;
  /** https://nodejs.org/api/process.html#process_process_platform */
  platform = platform;
  addListener(event, listener) {
    if (notImplementedEvents.includes(event)) {
      warnNotImplemented(`process.addListener("${event}")`);
    }
    return this.on(event, listener);
  }
  removeListener(event, listener) {
    if (notImplementedEvents.includes(event)) {
      warnNotImplemented(`process.removeListener("${event}")`);
    }
    return this.off(event, listener);
  }
  /**
   * Returns the current high-resolution real time in a [seconds, nanoseconds]
   * tuple.
   *
   * Note: You need to give --allow-hrtime permission to Deno to actually get
   * nanoseconds precision values. If you don't give 'hrtime' permission, the returned
   * values only have milliseconds precision.
   *
   * `time` is an optional parameter that must be the result of a previous process.hrtime() call to diff with the current time.
   *
   * These times are relative to an arbitrary time in the past, and not related to the time of day and therefore not subject to clock drift. The primary use is for measuring performance between intervals.
   * https://nodejs.org/api/process.html#process_process_hrtime_time
   */
  hrtime = hrtime;
  /**
   * @private
   *
   * NodeJS internal, use process.kill instead
   */
  _kill = _kill;
  /** https://nodejs.org/api/process.html#processkillpid-signal */
  kill = kill;
  memoryUsage = memoryUsage;
  /** https://nodejs.org/api/process.html#process_process_stderr */
  stderr = stderr2;
  /** https://nodejs.org/api/process.html#process_process_stdin */
  stdin = stdin2;
  /** https://nodejs.org/api/process.html#process_process_stdout */
  stdout = stdout2;
  /** https://nodejs.org/api/process.html#process_process_version */
  version = version2;
  /** https://nodejs.org/api/process.html#process_process_versions */
  versions = versions;
  /** https://nodejs.org/api/process.html#process_process_emitwarning_warning_options */
  emitWarning = emitWarning;
  binding(name) {
    return getBinding(name);
  }
  /** https://nodejs.org/api/process.html#processumaskmask */
  umask() {
    return 18;
  }
  /** This method is removed on Windows */
  getgid() {
    return Deno.gid();
  }
  /** This method is removed on Windows */
  getuid() {
    return Deno.uid();
  }
  // TODO(kt3k): Implement this when we added -e option to node compat mode
  _eval = void 0;
  /** https://nodejs.org/api/process.html#processexecpath */
  get execPath() {
    if (execPath) {
      return execPath;
    }
    execPath = Deno.execPath();
    return execPath;
  }
  set execPath(path7) {
    execPath = path7;
  }
  #startTime = Date.now();
  /** https://nodejs.org/api/process.html#processuptime */
  uptime() {
    return (Date.now() - this.#startTime) / 1e3;
  }
  #allowedFlags = buildAllowedFlags();
  /** https://nodejs.org/api/process.html#processallowednodeenvironmentflags */
  get allowedNodeEnvironmentFlags() {
    return this.#allowedFlags;
  }
  features = { inspector: false };
  // TODO(kt3k): Get the value from --no-deprecation flag.
  noDeprecation = false;
};
if (Deno.build.os === "windows") {
  delete Process.prototype.getgid;
  delete Process.prototype.getuid;
}
var process3 = new Process();
Object.defineProperty(process3, Symbol.toStringTag, {
  enumerable: false,
  writable: true,
  configurable: false,
  value: "process"
});
addReadOnlyProcessAlias("noDeprecation", "--no-deprecation");
addReadOnlyProcessAlias("throwDeprecation", "--throw-deprecation");
var removeListener2 = process3.removeListener;
var removeAllListeners2 = process3.removeAllListeners;
var process_default = process3;

// https://esm.sh/@jsr/std__path@1.0.8/deno/_os.mjs
var s2 = globalThis.Deno?.build.os === "windows" || globalThis.navigator?.platform?.startsWith("Win") || process_default?.platform?.startsWith("win") || false;

// https://esm.sh/@jsr/std__fs@1.0.1/deno/ensure-symlink.mjs
var x = Deno.build.os === "windows";

// https://esm.sh/@jsr/std__fs@1.0.1/deno/exists.mjs
function n5(i7, e6) {
  try {
    let r14 = Deno.statSync(i7);
    if (e6 && (e6.isReadable || e6.isDirectory || e6.isFile)) {
      if (e6.isDirectory && e6.isFile) throw new TypeError("ExistsOptions.options.isDirectory and ExistsOptions.options.isFile must not be true together.");
      if (e6.isDirectory && !r14.isDirectory || e6.isFile && !r14.isFile) return false;
      if (e6.isReadable) return s5(r14);
    }
    return true;
  } catch (r14) {
    if (r14 instanceof Deno.errors.NotFound) return false;
    if (r14 instanceof Deno.errors.PermissionDenied && Deno.permissions.querySync({ name: "read", path: i7 }).state === "granted") return !e6?.isReadable;
    throw r14;
  }
}
function s5(i7) {
  return i7.mode === null ? true : Deno.uid() === i7.uid ? (i7.mode & 256) === 256 : Deno.gid() === i7.gid ? (i7.mode & 32) === 32 : (i7.mode & 4) === 4;
}

// https://esm.sh/@jsr/std__fs@1.0.1/deno/expand-glob.mjs
var q = Deno.build.os === "windows";

// https://esm.sh/@jsr/std__fs@1.0.1/deno/move.mjs
var a3 = new Deno.errors.AlreadyExists("dest already exists.");

// https://esm.sh/@jsr/std__fs@1.0.1/deno/copy.mjs
var h2 = Deno.build.os === "windows";

// https://esm.sh/@jsr/std__fs@1.0.1/deno/eol.mjs
var o4 = `
`;
var e2 = `\r
`;
var u = Deno?.build.os === "windows" ? e2 : o4;

// https://esm.sh/@jsr/std__jsonc@1.0.0/deno/parse.mjs
function c7(s16) {
  if (new.target) throw new TypeError("parse is not a constructor");
  return new o5(s16).parse();
}
var o5 = class {
  #i = new Set(` 	\r
`);
  #o = /* @__PURE__ */ new Set([..."[]{}:,/", ...this.#i]);
  #e;
  #r;
  #n;
  constructor(e6) {
    this.#e = `${e6}`, this.#r = this.#e.length, this.#n = this.#h();
  }
  parse() {
    let e6 = this.#t(), t18 = this.#s(e6), { done: r14, value: i7 } = this.#n.next();
    if (!r14) throw new SyntaxError(n6(i7));
    return t18;
  }
  #t() {
    let { done: e6, value: t18 } = this.#n.next();
    if (e6) throw new SyntaxError("Unexpected end of JSONC input");
    return t18;
  }
  *#h() {
    for (let e6 = 0; e6 < this.#r; e6++) if (!this.#i.has(this.#e[e6])) {
      if (this.#e[e6] === "/" && this.#e[e6 + 1] === "*") {
        e6 += 2;
        let t18 = false;
        for (; e6 < this.#r; e6++) if (this.#e[e6] === "*" && this.#e[e6 + 1] === "/") {
          t18 = true;
          break;
        }
        if (!t18) throw new SyntaxError("Unexpected end of JSONC input");
        e6++;
        continue;
      }
      if (this.#e[e6] === "/" && this.#e[e6 + 1] === "/") {
        for (e6 += 2; e6 < this.#r && !(this.#e[e6] === `
` || this.#e[e6] === "\r"); e6++) ;
        continue;
      }
      switch (this.#e[e6]) {
        case "{":
          yield { type: "BeginObject", position: e6 };
          break;
        case "}":
          yield { type: "EndObject", position: e6 };
          break;
        case "[":
          yield { type: "BeginArray", position: e6 };
          break;
        case "]":
          yield { type: "EndArray", position: e6 };
          break;
        case ":":
          yield { type: "NameSeparator", position: e6 };
          break;
        case ",":
          yield { type: "ValueSeparator", position: e6 };
          break;
        case '"': {
          let t18 = e6, r14 = false;
          for (e6++; e6 < this.#r && !(this.#e[e6] === '"' && !r14); e6++) r14 = this.#e[e6] === "\\" && !r14;
          yield { type: "String", sourceText: this.#e.substring(t18, e6 + 1), position: t18 };
          break;
        }
        default: {
          let t18 = e6;
          for (; e6 < this.#r && !this.#o.has(this.#e[e6]); e6++) ;
          e6--, yield { type: "NullOrTrueOrFalseOrNumber", sourceText: this.#e.substring(t18, e6 + 1), position: t18 };
        }
      }
    }
  }
  #s(e6) {
    switch (e6.type) {
      case "BeginObject":
        return this.#c();
      case "BeginArray":
        return this.#u();
      case "NullOrTrueOrFalseOrNumber":
        return this.#p(e6);
      case "String":
        return this.#a(e6);
      default:
        throw new SyntaxError(n6(e6));
    }
  }
  #c() {
    let e6 = {};
    for (; ; ) {
      let t18 = this.#t();
      if (t18.type === "EndObject") return e6;
      if (t18.type !== "String") throw new SyntaxError(n6(t18));
      let r14 = this.#a(t18), i7 = this.#t();
      if (i7.type !== "NameSeparator") throw new SyntaxError(n6(i7));
      let h8 = this.#t();
      Object.defineProperty(e6, r14, { value: this.#s(h8), writable: true, enumerable: true, configurable: true });
      let a7 = this.#t();
      if (a7.type === "EndObject") return e6;
      if (a7.type !== "ValueSeparator") throw new SyntaxError(n6(a7));
    }
  }
  #u() {
    let e6 = [];
    for (; ; ) {
      let t18 = this.#t();
      if (t18.type === "EndArray") return e6;
      e6.push(this.#s(t18));
      let r14 = this.#t();
      if (r14.type === "EndArray") return e6;
      if (r14.type !== "ValueSeparator") throw new SyntaxError(n6(r14));
    }
  }
  #a(e6) {
    let t18;
    try {
      t18 = JSON.parse(e6.sourceText);
    } catch {
      throw new SyntaxError(n6(e6));
    }
    if (typeof t18 != "string") throw new TypeError(`Parsed value is not a string: ${t18}`);
    return t18;
  }
  #p(e6) {
    if (e6.sourceText === "null") return null;
    if (e6.sourceText === "true") return true;
    if (e6.sourceText === "false") return false;
    let t18;
    try {
      t18 = JSON.parse(e6.sourceText);
    } catch {
      throw new SyntaxError(n6(e6));
    }
    if (typeof t18 != "number") throw new TypeError(`Parsed value is not a number: ${t18}`);
    return t18;
  }
};
function n6({ type: s16, sourceText: e6, position: t18 }) {
  let r14 = "";
  switch (s16) {
    case "BeginObject":
      r14 = "{";
      break;
    case "EndObject":
      r14 = "}";
      break;
    case "BeginArray":
      r14 = "[";
      break;
    case "EndArray":
      r14 = "]";
      break;
    case "NameSeparator":
      r14 = ":";
      break;
    case "ValueSeparator":
      r14 = ",";
      break;
    case "NullOrTrueOrFalseOrNumber":
    case "String":
      r14 = 30 < e6.length ? `${e6.slice(0, 30)}...` : e6;
      break;
  }
  return `Unexpected token ${r14} in JSONC at position ${t18}`;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/_os.mjs
function n7() {
  return globalThis.Deno?.build.os || (globalThis.navigator?.userAgent.includes("Win") ? "windows" : "linux");
}
var i4 = n7() === "windows";

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/assert_path.mjs
function e3(t18) {
  if (typeof t18 != "string") throw new TypeError(`Path must be a string. Received ${JSON.stringify(t18)}`);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/strip_trailing_separators.mjs
function a4(r14, t18) {
  if (r14.length <= 1) return r14;
  let l6 = r14.length;
  for (let i7 = r14.length - 1; i7 > 0 && t18(r14.charCodeAt(i7)); i7--) l6 = i7;
  return r14.slice(0, l6);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/constants.mjs
var A2 = 65;
var o6 = 97;
var t11 = 90;
var R4 = 122;
var _2 = 46;
var C5 = 47;
var E4 = 92;
var c8 = 58;

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/_util.mjs
function i5(r14) {
  return r14 === C5;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/_util.mjs
function o7(A4) {
  return A4 === C5;
}
function S2(A4) {
  return A4 === C5 || A4 === E4;
}
function E5(A4) {
  return A4 >= o6 && A4 <= R4 || A4 >= A2 && A4 <= t11;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/constants.mjs
var r3 = i4 ? "\\" : "/";

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/dirname.mjs
function n8(r14) {
  if (e3(r14), r14.length === 0) return ".";
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/dirname.mjs
function m8(r14) {
  n8(r14);
  let t18 = -1, i7 = false;
  for (let e6 = r14.length - 1; e6 >= 1; --e6) if (i5(r14.charCodeAt(e6))) {
    if (i7) {
      t18 = e6;
      break;
    }
  } else i7 = true;
  return t18 === -1 ? i5(r14.charCodeAt(0)) ? "/" : "." : a4(r14.slice(0, t18), i5);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/dirname.mjs
function g4(r14) {
  n8(r14);
  let i7 = r14.length, f7 = -1, l6 = -1, c12 = true, t18 = 0, a7 = r14.charCodeAt(0);
  if (i7 > 1) if (S2(a7)) {
    if (f7 = t18 = 1, S2(r14.charCodeAt(1))) {
      let e6 = 2, s16 = e6;
      for (; e6 < i7 && !S2(r14.charCodeAt(e6)); ++e6) ;
      if (e6 < i7 && e6 !== s16) {
        for (s16 = e6; e6 < i7 && S2(r14.charCodeAt(e6)); ++e6) ;
        if (e6 < i7 && e6 !== s16) {
          for (s16 = e6; e6 < i7 && !S2(r14.charCodeAt(e6)); ++e6) ;
          if (e6 === i7) return r14;
          e6 !== s16 && (f7 = t18 = e6 + 1);
        }
      }
    }
  } else E5(a7) && r14.charCodeAt(1) === c8 && (f7 = t18 = 2, i7 > 2 && S2(r14.charCodeAt(2)) && (f7 = t18 = 3));
  else if (S2(a7)) return r14;
  for (let e6 = i7 - 1; e6 >= t18; --e6) if (S2(r14.charCodeAt(e6))) {
    if (!c12) {
      l6 = e6;
      break;
    }
  } else c12 = false;
  if (l6 === -1) {
    if (f7 === -1) return ".";
    l6 = f7;
  }
  return a4(r14.slice(0, l6), o7);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/dirname.mjs
function s11(r14) {
  return i4 ? g4(r14) : m8(r14);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/extname.mjs
function P(o9) {
  e3(o9);
  let t18 = -1, f7 = 0, r14 = -1, a7 = true, i7 = 0;
  for (let e6 = o9.length - 1; e6 >= 0; --e6) {
    let l6 = o9.charCodeAt(e6);
    if (i5(l6)) {
      if (!a7) {
        f7 = e6 + 1;
        break;
      }
      continue;
    }
    r14 === -1 && (a7 = false, r14 = e6 + 1), l6 === _2 ? t18 === -1 ? t18 = e6 : i7 !== 1 && (i7 = 1) : t18 !== -1 && (i7 = -1);
  }
  return t18 === -1 || r14 === -1 || i7 === 0 || i7 === 1 && t18 === r14 - 1 && t18 === f7 + 1 ? "" : o9.slice(t18, r14);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/extname.mjs
function h4(e6) {
  e3(e6);
  let l6 = 0, t18 = -1, f7 = 0, o9 = -1, s16 = true, i7 = 0;
  e6.length >= 2 && e6.charCodeAt(1) === c8 && E5(e6.charCodeAt(0)) && (l6 = f7 = 2);
  for (let r14 = e6.length - 1; r14 >= l6; --r14) {
    let a7 = e6.charCodeAt(r14);
    if (S2(a7)) {
      if (!s16) {
        f7 = r14 + 1;
        break;
      }
      continue;
    }
    o9 === -1 && (s16 = false, o9 = r14 + 1), a7 === _2 ? t18 === -1 ? t18 = r14 : i7 !== 1 && (i7 = 1) : t18 !== -1 && (i7 = -1);
  }
  return t18 === -1 || o9 === -1 || i7 === 0 || i7 === 1 && t18 === o9 - 1 && t18 === f7 + 1 ? "" : e6.slice(t18, o9);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/extname.mjs
function x3(m18) {
  return i4 ? h4(m18) : P(m18);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/from_file_url.mjs
function o8(e6) {
  if (e6 = e6 instanceof URL ? e6 : new URL(e6), e6.protocol !== "file:") throw new TypeError("Must be a file URL.");
  return e6;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/from-file-url.mjs
function t13(e6) {
  return e6 = o8(e6), decodeURIComponent(e6.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/from-file-url.mjs
function n9(e6) {
  e6 = o8(e6);
  let a7 = decodeURIComponent(e6.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  return e6.hostname !== "" && (a7 = `\\\\${e6.hostname}${a7}`), a7;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/from-file-url.mjs
function F2(r14) {
  return i4 ? n9(r14) : t13(r14);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/is-absolute.mjs
function s12(r14) {
  return e3(r14), r14.length > 0 && i5(r14.charCodeAt(0));
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/is-absolute.mjs
function a5(r14) {
  e3(r14);
  let e6 = r14.length;
  if (e6 === 0) return false;
  let o9 = r14.charCodeAt(0);
  return S2(o9) ? true : !!(E5(o9) && e6 > 2 && r14.charCodeAt(1) === c8 && S2(r14.charCodeAt(2)));
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/normalize.mjs
function n10(r14) {
  if (e3(r14), r14.length === 0) return ".";
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/normalize_string.mjs
function C7(s16, d2, g6, c12) {
  let e6 = "", i7 = 0, t18 = -1, n12 = 0, f7;
  for (let l6 = 0; l6 <= s16.length; ++l6) {
    if (l6 < s16.length) f7 = s16.charCodeAt(l6);
    else {
      if (c12(f7)) break;
      f7 = C5;
    }
    if (c12(f7)) {
      if (!(t18 === l6 - 1 || n12 === 1)) if (t18 !== l6 - 1 && n12 === 2) {
        if (e6.length < 2 || i7 !== 2 || e6.charCodeAt(e6.length - 1) !== _2 || e6.charCodeAt(e6.length - 2) !== _2) {
          if (e6.length > 2) {
            let o9 = e6.lastIndexOf(g6);
            o9 === -1 ? (e6 = "", i7 = 0) : (e6 = e6.slice(0, o9), i7 = e6.length - 1 - e6.lastIndexOf(g6)), t18 = l6, n12 = 0;
            continue;
          } else if (e6.length === 2 || e6.length === 1) {
            e6 = "", i7 = 0, t18 = l6, n12 = 0;
            continue;
          }
        }
        d2 && (e6.length > 0 ? e6 += `${g6}..` : e6 = "..", i7 = 2);
      } else e6.length > 0 ? e6 += g6 + s16.slice(t18 + 1, l6) : e6 = s16.slice(t18 + 1, l6), i7 = l6 - t18 - 1;
      t18 = l6, n12 = 0;
    } else f7 === _2 && n12 !== -1 ? ++n12 : n12 = -1;
  }
  return e6;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/normalize.mjs
function l3(r14) {
  n10(r14);
  let o9 = i5(r14.charCodeAt(0)), e6 = i5(r14.charCodeAt(r14.length - 1));
  return r14 = C7(r14, !o9, "/", i5), r14.length === 0 && !o9 && (r14 = "."), r14.length > 0 && e6 && (r14 += "/"), o9 ? `/${r14}` : r14;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/join.mjs
function m11(...r14) {
  if (r14.length === 0) return ".";
  r14.forEach((o9) => e3(o9));
  let n12 = r14.filter((o9) => o9.length > 0).join("/");
  return n12 === "" ? "." : l3(n12);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/normalize.mjs
function k3(r14) {
  n10(r14);
  let t18 = r14.length, l6 = 0, n12, s16 = false, c12 = r14.charCodeAt(0);
  if (t18 > 1) if (S2(c12)) if (s16 = true, S2(r14.charCodeAt(1))) {
    let e6 = 2, o9 = e6;
    for (; e6 < t18 && !S2(r14.charCodeAt(e6)); ++e6) ;
    if (e6 < t18 && e6 !== o9) {
      let d2 = r14.slice(o9, e6);
      for (o9 = e6; e6 < t18 && S2(r14.charCodeAt(e6)); ++e6) ;
      if (e6 < t18 && e6 !== o9) {
        for (o9 = e6; e6 < t18 && !S2(r14.charCodeAt(e6)); ++e6) ;
        if (e6 === t18) return `\\\\${d2}\\${r14.slice(o9)}\\`;
        e6 !== o9 && (n12 = `\\\\${d2}\\${r14.slice(o9, e6)}`, l6 = e6);
      }
    }
  } else l6 = 1;
  else E5(c12) && r14.charCodeAt(1) === c8 && (n12 = r14.slice(0, 2), l6 = 2, t18 > 2 && S2(r14.charCodeAt(2)) && (s16 = true, l6 = 3));
  else if (S2(c12)) return "\\";
  let i7;
  return l6 < t18 ? i7 = C7(r14.slice(l6), !s16, "\\", S2) : i7 = "", i7.length === 0 && !s16 && (i7 = "."), i7.length > 0 && S2(r14.charCodeAt(t18 - 1)) && (i7 += "\\"), n12 === void 0 ? s16 ? i7.length > 0 ? `\\${i7}` : "\\" : i7 : s16 ? i7.length > 0 ? `${n12}\\${i7}` : `${n12}\\` : n12 + i7;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/join.mjs
function m12(...r14) {
  if (r14.forEach((t18) => e3(t18)), r14 = r14.filter((t18) => t18.length > 0), r14.length === 0) return ".";
  let n12 = true, e6 = 0, o9 = r14[0];
  if (S2(o9.charCodeAt(0))) {
    ++e6;
    let t18 = o9.length;
    t18 > 1 && S2(o9.charCodeAt(1)) && (++e6, t18 > 2 && (S2(o9.charCodeAt(2)) ? ++e6 : n12 = false));
  }
  let i7 = r14.join("\\");
  if (n12) {
    for (; e6 < i7.length && S2(i7.charCodeAt(e6)); ++e6) ;
    e6 >= 2 && (i7 = `\\${i7.slice(e6)}`);
  }
  return k3(i7);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/join.mjs
function f5(...o9) {
  return i4 ? m12(...o9) : m11(...o9);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/resolve.mjs
function p(...l6) {
  let e6 = "", r14 = false;
  for (let o9 = l6.length - 1; o9 >= -1 && !r14; o9--) {
    let t18;
    if (o9 >= 0) t18 = l6[o9];
    else {
      let { Deno: i7 } = globalThis;
      if (typeof i7?.cwd != "function") throw new TypeError("Resolved a relative path without a CWD.");
      t18 = i7.cwd();
    }
    e3(t18), t18.length !== 0 && (e6 = `${t18}/${e6}`, r14 = i5(t18.charCodeAt(0)));
  }
  return e6 = C7(e6, !r14, "/", i5), r14 ? e6.length > 0 ? `/${e6}` : "/" : e6.length > 0 ? e6 : ".";
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/resolve.mjs
function D(...w3) {
  let o9 = "", a7 = "", n12 = false;
  for (let d2 = w3.length - 1; d2 >= -1; d2--) {
    let t18, { Deno: c12 } = globalThis;
    if (d2 >= 0) t18 = w3[d2];
    else if (o9) {
      if (typeof c12?.env?.get != "function" || typeof c12?.cwd != "function") throw new TypeError("Resolved a relative path without a CWD.");
      t18 = c12.cwd(), (t18 === void 0 || t18.slice(0, 3).toLowerCase() !== `${o9.toLowerCase()}\\`) && (t18 = `${o9}\\`);
    } else {
      if (typeof c12?.cwd != "function") throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      t18 = c12.cwd();
    }
    e3(t18);
    let i7 = t18.length;
    if (i7 === 0) continue;
    let f7 = 0, s16 = "", h8 = false, u3 = t18.charCodeAt(0);
    if (i7 > 1) if (S2(u3)) if (h8 = true, S2(t18.charCodeAt(1))) {
      let e6 = 2, r14 = e6;
      for (; e6 < i7 && !S2(t18.charCodeAt(e6)); ++e6) ;
      if (e6 < i7 && e6 !== r14) {
        let C9 = t18.slice(r14, e6);
        for (r14 = e6; e6 < i7 && S2(t18.charCodeAt(e6)); ++e6) ;
        if (e6 < i7 && e6 !== r14) {
          for (r14 = e6; e6 < i7 && !S2(t18.charCodeAt(e6)); ++e6) ;
          e6 === i7 ? (s16 = `\\\\${C9}\\${t18.slice(r14)}`, f7 = e6) : e6 !== r14 && (s16 = `\\\\${C9}\\${t18.slice(r14, e6)}`, f7 = e6);
        }
      }
    } else f7 = 1;
    else E5(u3) && t18.charCodeAt(1) === c8 && (s16 = t18.slice(0, 2), f7 = 2, i7 > 2 && S2(t18.charCodeAt(2)) && (h8 = true, f7 = 3));
    else S2(u3) && (f7 = 1, h8 = true);
    if (!(s16.length > 0 && o9.length > 0 && s16.toLowerCase() !== o9.toLowerCase()) && (o9.length === 0 && s16.length > 0 && (o9 = s16), n12 || (a7 = `${t18.slice(f7)}\\${a7}`, n12 = h8), n12 && o9.length > 0)) break;
  }
  return a7 = C7(a7, !n12, "\\", S2), o9 + (n12 ? "\\" : "") + a7 || ".";
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/resolve.mjs
function v3(...o9) {
  return i4 ? D(...o9) : p(...o9);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/_common/to_file_url.mjs
var n11 = { "	": "%09", "\n": "%0A", "\v": "%0B", "\f": "%0C", "\r": "%0D", " ": "%20" };
function r4(u3) {
  return u3.replaceAll(/[\s]/g, (e6) => n11[e6] ?? e6);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/posix/to-file-url.mjs
function l4(e6) {
  if (!s12(e6)) throw new TypeError("Must be an absolute path.");
  let r14 = new URL("file:///");
  return r14.pathname = r4(e6.replace(/%/g, "%25").replace(/\\/g, "%5C")), r14;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/windows/to-file-url.mjs
function h5(t18) {
  if (!a5(t18)) throw new TypeError("Must be an absolute path.");
  let [, o9, n12] = t18.match(/^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/), e6 = new URL("file:///");
  if (e6.pathname = r4(n12.replace(/%/g, "%25")), o9 !== void 0 && o9 !== "localhost" && (e6.hostname = o9, !e6.hostname)) throw new TypeError("Invalid hostname.");
  return e6;
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/to-file-url.mjs
function s13(o9) {
  return i4 ? h5(o9) : l4(o9);
}

// https://esm.sh/@jsr/std__path@1.0.2/deno/types.mjs
var c11 = Object.create;
var r5 = Object.defineProperty;
var d = Object.getOwnPropertyDescriptor;
var j2 = Object.getOwnPropertyNames;
var l5 = Object.getPrototypeOf;
var p2 = Object.prototype.hasOwnProperty;
var u2 = (t18, m18) => () => (m18 || t18((m18 = { exports: {} }).exports, m18), m18.exports);
var i6 = (t18, m18, a7, o9) => {
  if (m18 && typeof m18 == "object" || typeof m18 == "function") for (let e6 of j2(m18)) !p2.call(t18, e6) && e6 !== a7 && r5(t18, e6, { get: () => m18[e6], enumerable: !(o9 = d(m18, e6)) || o9.enumerable });
  return t18;
};
var x4 = (t18, m18, a7) => (a7 = t18 != null ? c11(l5(t18)) : {}, i6(m18 || !t18 || !t18.__esModule ? r5(a7, "default", { value: t18, enumerable: true }) : a7, t18));
var s15 = u2(() => {
});
var f6 = x4(s15());
var k4 = f6.default ?? f6;

// https://esm.sh/@jsr/duesabati__esbuild-deno-plugin@0.2.4/deno/mod.ts.mjs
var xe = `${r3}node_modules${r3}`;
var Ee = `${r3}node_modules`;
var T = class r6 {
  regexps;
  static fromOptions(e6) {
    let t18 = e6.map((o9) => new RegExp("^" + o9.replace(/[-/\\^$+?.()|[\]{}]/g, "\\$&").replace(/\*/g, ".*") + "$"));
    return new r6(t18);
  }
  constructor(e6) {
    this.regexps = e6;
  }
  has(e6) {
    return this.regexps.some((t18) => t18.test(e6));
  }
};
function _3(r14) {
  return r14.includes(xe) || r14.endsWith(Ee);
}
function W2(r14) {
  return (r14.namespace === "" || r14.namespace === "file") && (_3(r14.resolveDir) || _3(r14.path) || _3(r14.importer));
}
function M(r14) {
  if (r14.protocol === "file:") return { path: F2(r14), namespace: "file" };
  let e6 = r14.protocol.slice(0, -1);
  return { path: r14.href.slice(e6.length + 1), namespace: e6 };
}
function Q(r14) {
  return r14.namespace === "file" ? s13(r14.path) : new URL(`${r14.namespace}:${r14.path}`);
}
async function de() {
  return await Deno.permissions.query({ name: "run" }).then((r14) => r14.state === "granted");
}
function O2(r14, e6) {
  if (e6 !== null) switch (e6.split(";")[0].toLowerCase()) {
    case "application/typescript":
    case "text/typescript":
    case "video/vnd.dlna.mpeg-tts":
    case "video/mp2t":
    case "application/x-typescript":
      return ae(r14, "TypeScript");
    case "application/javascript":
    case "text/javascript":
    case "application/ecmascript":
    case "text/ecmascript":
    case "application/x-javascript":
    case "application/node":
      return ae(r14, "JavaScript");
    case "text/jsx":
      return "JSX";
    case "text/tsx":
      return "TSX";
    case "application/json":
    case "text/json":
      return "Json";
    case "application/wasm":
      return "Wasm";
    case "text/plain":
    case "application/octet-stream":
      return ce(r14);
    default:
      return "Unknown";
  }
  else return ce(r14);
}
function ae(r14, e6) {
  let t18 = r14.pathname;
  switch (x3(t18)) {
    case ".jsx":
      return "JSX";
    case ".mjs":
      return "Mjs";
    case ".cjs":
      return "Cjs";
    case ".tsx":
      return "TSX";
    case ".ts":
      return t18.endsWith(".d.ts") ? "Dts" : e6;
    case ".mts":
      return t18.endsWith(".d.mts") ? "Dmts" : e6 == "JavaScript" ? "Mjs" : "Mts";
    case ".cts":
      return t18.endsWith(".d.cts") ? "Dcts" : e6 == "JavaScript" ? "Cjs" : "Cts";
    default:
      return e6;
  }
}
function ce(r14) {
  let e6 = r14.pathname;
  switch (x3(e6)) {
    case "":
      return e6.endsWith("/.tsbuildinfo") ? "TsBuildInfo" : "Unknown";
    case ".ts":
      return e6.endsWith(".d.ts") ? "Dts" : "TypeScript";
    case ".mts":
      return e6.endsWith(".d.mts") ? "Dmts" : "Mts";
    case ".cts":
      return e6.endsWith(".d.cts") ? "Dcts" : "Cts";
    case ".tsx":
      return "TSX";
    case ".js":
      return "JavaScript";
    case ".jsx":
      return "JSX";
    case ".mjs":
      return "Mjs";
    case ".cjs":
      return "Cjs";
    case ".json":
      return "Json";
    case ".wasm":
      return "Wasm";
    case ".tsbuildinfo":
      return "TsBuildInfo";
    case ".map":
      return "SourceMap";
    default:
      return "Unknown";
  }
}
function C8(r14) {
  switch (r14) {
    case "JavaScript":
    case "Mjs":
      return "js";
    case "JSX":
      return "jsx";
    case "TypeScript":
    case "Mts":
      return "ts";
    case "TSX":
      return "tsx";
    case "Json":
      return "json";
    default:
      throw new Error(`Unhandled media type ${r14}.`);
  }
}
var fe = ["native", "portable"];
var y3 = (r14) => typeof r14 == "object" && r14 !== null && !Array.isArray(r14);
var D2 = class r7 {
  static fromAbsolute(e6) {
    let t18 = Deno.readTextFileSync(e6), o9 = c7(t18);
    if (!y3(o9)) throw new Error("Invalid Deno config");
    return o9;
  }
  static ofWorkspaceMember(e6) {
    let t18 = r7.find(e6), o9 = Deno.readTextFileSync(t18), s16 = c7(o9);
    if (!y3(s16)) throw new Error(`Invalid Deno config. At: ${e6}`);
    let n12 = {};
    if (typeof s16.name == "string" && (n12.name = s16.name), typeof s16.version == "string" && (n12.version = s16.version), typeof s16.exports == "string" && (n12.exports = s16.exports), y3(s16.exports)) {
      let i7 = s16.exports["."];
      n12.exports = i7;
    }
    return y3(s16.imports) && (n12.imports = s16.imports), typeof s16.importMap == "string" && (n12.importMap = s16.importMap), n12;
  }
  static find(e6) {
    let t18 = e6 + "/deno.json", o9 = e6 + "/deno.jsonc";
    if (n5(t18)) return t18;
    if (n5(o9)) return o9;
    throw new Error(`Could not find a Deno config file at: ${e6}`);
  }
};
var J = class r8 {
  loader;
  config;
  shouldUseNodeModules() {
    this.config.useNodeModulesFolder = true;
  }
  static async fromOptions(e6) {
    let t18 = await r8.defaultLoader(), o9 = new r8(t18);
    if (e6.configPath) {
      let s16 = D2.fromAbsolute(e6.configPath);
      typeof s16.lock == "string" && s16.lock !== "" && o9.setLockPath(f5(s11(e6.configPath), s16.lock)), o9.setConfigPath(e6.configPath);
    }
    return e6.importMapURL && o9.setImportMapURL(e6.importMapURL), e6.lockPath && o9.setLockPath(e6.lockPath), e6.nodeModulesDir && o9.shouldUseNodeModules(), o9;
  }
  static async defaultLoader() {
    return await de() ? "native" : "portable";
  }
  constructor(e6, t18 = { useNodeModulesFolder: false, configPath: "", importMapURL: "", lockPath: "" }) {
    this.loader = e6, this.config = t18;
  }
  setLoaderType(e6) {
    this.loader = e6;
  }
  get isUsingNodeModules() {
    return this.config.useNodeModulesFolder;
  }
  get isUsingNativeLoader() {
    return this.loader === "native";
  }
  static isSupported(e6) {
    return fe.includes(e6);
  }
  setConfigPath(e6) {
    this.config.configPath = e6;
  }
  setImportMapURL(e6) {
    this.config.importMapURL = e6;
  }
  setLockPath(e6) {
    this.config.lockPath = e6;
  }
  get providedConfigPath() {
    return this.config.configPath !== "";
  }
  get configPath() {
    return this.config.configPath;
  }
  get providedImportMapURL() {
    return this.config.importMapURL !== "";
  }
  get importMapURL() {
    return this.config.importMapURL;
  }
  get providedLockPath() {
    return this.config.lockPath !== "";
  }
  get lockPath() {
    return this.config.lockPath;
  }
};
var F3 = class {
  static async fromAbsolute(e6) {
    return await Deno.readTextFile(e6).then(JSON.parse).catch((o9) => {
      throw o9 instanceof Deno.errors.NotFound ? new Error(`A Lockfile path has been provided but could not found it at: ${e6}`) : o9;
    });
  }
};
var me = new TextDecoder();
var P3 = class r9 {
  static tempDir = Deno.makeTempDirSync();
  args = /* @__PURE__ */ new Set(["info", "--json", "--no-config", "--no-lock"]);
  cwd = r9.tempDir;
  info_cache = /* @__PURE__ */ new Map();
  static async root() {
    let t18 = await new Deno.Command(Deno.execPath(), { args: ["info", "--json", "--no-config", "--no-lock"], cwd: r9.tempDir, env: { DENO_NO_PACKAGE_JSON: "true" }, stdout: "piped", stderr: "inherit" }).output();
    if (!t18.success) throw new Error("Failed to call 'deno info'");
    let o9 = me.decode(t18.stdout);
    return JSON.parse(o9);
  }
  setCwd(e6) {
    this.args.delete("--no-lock"), this.cwd = e6;
  }
  setConfigPath(e6) {
    this.args.delete("--no-config"), this.args.add(`--config=${e6}`);
  }
  useImportMap(e6) {
    this.args.add(`--import-map=${e6}`);
  }
  useLockFile(e6) {
    e6 && (this.args.delete("--no-lock"), this.args.add(`--lock=${e6}`));
  }
  useNodeModulesDir() {
    this.args.add("--node-modules-dir");
  }
  async read(e6) {
    if (this.info_cache.has(e6)) return this.info_cache.get(e6);
    let t18 = Array.from(this.args);
    t18.push(e6);
    let o9 = { args: t18, env: { DENO_NO_PACKAGE_JSON: "true" }, cwd: this.cwd, stdout: "piped", stderr: "inherit" }, s16 = await new Deno.Command(Deno.execPath(), o9).output();
    if (!s16.success) throw new Error(`Failed to call 'deno info' on '${e6}'`);
    let n12 = JSON.parse(me.decode(s16.stdout));
    return this.info_cache.set(e6, n12), n12;
  }
};
var L = class r10 {
  name = "";
  path = "";
  version = null;
  constructor(e6) {
    Object.assign(this, e6);
  }
  static fromURL(e6) {
    if (e6.protocol !== "jsr:") throw new Error("Invalid jsr specifier");
    let t18 = e6.pathname, o9 = t18[0] === "/" ? 1 : 0;
    if (t18[o9] !== "@") throw new Error(`Invalid jsr specifier: ${e6}`);
    let s16 = t18.indexOf("/", o9);
    if (s16 === -1) throw new Error(`Invalid jsr specifier: ${e6}`);
    let n12 = t18.indexOf("/", s16 + 1), i7 = t18.indexOf("@", s16 + 1);
    if (n12 === -1 && (n12 = t18.length), i7 === -1 && (i7 = t18.length), i7 > n12 && (i7 = n12), o9 === i7) throw new Error(`Invalid jsr specifier: ${e6}`);
    let a7 = t18.slice(o9, i7), d2 = i7 === n12 ? null : t18.slice(i7 + 1, n12), f7 = n12 === t18.length ? "" : t18.slice(n12);
    return new r10({ name: a7, version: d2, path: f7 });
  }
  static toId(e6) {
    return `jsr:${e6.name}${e6.version ? `@${e6.version}` : ""}`;
  }
};
var U = class r11 {
  name = "";
  path = "";
  version = null;
  static fromURL(e6) {
    if (e6.protocol !== "npm:") throw new Error("Invalid npm specifier");
    let t18 = e6.pathname, o9 = t18[0] === "/" ? 1 : 0, s16, n12;
    if (t18[o9] === "@") {
      let i7 = t18.indexOf("/", o9);
      if (i7 === -1) throw new Error(`Invalid npm specifier: ${e6}`);
      s16 = t18.indexOf("/", i7 + 1), n12 = t18.indexOf("@", i7 + 1);
    } else s16 = t18.indexOf("/", o9), n12 = t18.indexOf("@", o9);
    if (s16 === -1 && (s16 = t18.length), n12 === -1 && (n12 = t18.length), n12 > s16 && (n12 = s16), o9 === n12) throw new Error(`Invalid npm specifier: ${e6}`);
    return new r11({ name: t18.slice(o9, n12), version: n12 === s16 ? null : t18.slice(n12 + 1, s16), path: s16 === t18.length ? "" : t18.slice(s16) });
  }
  constructor(e6) {
    Object.assign(this, e6);
  }
};
var X = class {
  static resolveEntry(e6) {
    if ("error" in e6) throw new Error(e6.error);
    if (e6.kind === "npm") {
      let t18 = U.fromURL(new URL(e6.specifier));
      return { kind: "npm", packageId: e6.npmPackage, packageName: t18.name, path: t18.path ?? "" };
    }
    return e6.kind === "node" ? { kind: "node", path: e6.specifier } : { kind: "esm", specifier: new URL(e6.specifier) };
  }
};
var V2 = class r12 {
  path;
  static rootInfo = P3.root();
  nodeModulesDir;
  npmPackagesDir;
  linkDir;
  constructor(e6) {
    this.path = e6, this.nodeModulesDir = /* @__PURE__ */ new Map(), this.npmPackagesDir = /* @__PURE__ */ new Map(), this.linkDir = /* @__PURE__ */ new Map();
  }
  get ownPath() {
    return this.path;
  }
  findParentPackageId(e6) {
    let t18 = this.nodeModulesDir.get(e6);
    if (t18) return t18;
    if (e6 === "/" || e6 === ".") throw new Error(`Could not find package ID for importer: ${e6}`);
    return this.findParentPackageId(s11(e6));
  }
  registerNodeModule(e6, t18) {
    this.nodeModulesDir.set(e6, t18);
  }
  findPackageId(e6, t18) {
    let o9 = this.findParentPackageId(e6), s16 = this.readPackageNameFrom(t18), n12 = this.getPackage(o9);
    if (n12.name === s16) return o9;
    for (let i7 of n12.dependencies) if (this.getPackage(i7).name === s16) return i7;
    return o9;
  }
  async resolvePackage(e6) {
    let t18 = this.getPackage(e6);
    if (this.linkDir.has(e6)) return this.linkDir.get(e6);
    let o9 = t18.name;
    t18.name.toLowerCase() !== t18.name && (o9 = `_${g(new TextEncoder().encode(o9))}`);
    let { denoDir: s16, npmCache: n12 } = await r12.rootInfo, i7 = f5(n12, "registry.npmjs.org", o9, t18.version), a7 = f5(s16, "deno_esbuild", e6, "node_modules", o9), d2 = s11(a7), f7 = f5(s16, "deno_esbuild_tmp");
    try {
      return await Deno.stat(a7), this.linkDir.set(e6, a7), a7;
    } catch {
    }
    await Deno.mkdir(f7, { recursive: true });
    let m18 = await Deno.makeTempDir({ dir: f7 });
    await ue(i7, m18);
    try {
      await Deno.mkdir(d2, { recursive: true }), await Deno.rename(m18, a7);
    } catch (p3) {
      try {
        await Deno.stat(a7);
      } catch {
        throw p3;
      }
    }
    return this.linkDir.set(e6, a7), a7;
  }
  readPackageNameFrom(e6) {
    if (e6.startsWith("@")) {
      let [o9, s16] = e6.split("/");
      return `${o9}/${s16}`;
    }
    let [t18] = e6.split("/");
    return t18;
  }
  getPackage(e6) {
    let t18 = this.npmPackagesDir.get(e6);
    if (!t18) throw new Error(`NPM package "${e6}" not found.`);
    return t18;
  }
  register(e6) {
    for (let [t18, o9] of Object.entries(e6)) this.npmPackagesDir.set(t18, o9);
  }
};
async function ue(r14, e6) {
  if ((await Deno.stat(r14)).isDirectory) {
    await Deno.mkdir(e6, { recursive: true });
    for await (let o9 of Deno.readDir(r14)) await ue(f5(r14, o9.name), f5(e6, o9.name));
  } else await Deno.link(r14, e6);
}
var N = () => ({ JSR_REGISTRY_URL: Deno.env.get("DENO_REGISTRY_URL") ?? "https://jsr.io", MAX_REDIRECTS: Number(Deno.env.get("DENO_MAX_REDIRECTS")) || 10 });
var B = class {
  modules = /* @__PURE__ */ new Map();
  redirects = /* @__PURE__ */ new Map();
  registerModules(e6) {
    for (let t18 of e6) this.modules.set(t18.specifier, t18);
  }
  registerRedirects(e6) {
    for (let [t18, o9] of Object.entries(e6)) this.redirects.set(t18, o9);
  }
  findRedirect(e6) {
    return this.redirects.get(e6);
  }
  findModule(e6) {
    return this.modules.get(e6);
  }
};
var G = class {
  modules = /* @__PURE__ */ new Map();
  redirects = /* @__PURE__ */ new Map();
  fetches = /* @__PURE__ */ new Map();
  registerRedirect(e6, t18) {
    this.redirects.set(e6, t18);
  }
  registerModule(e6) {
    this.modules.set(e6.specifier, e6);
  }
  async findModule(e6) {
    if (this.redirects.has(e6)) {
      let o9 = this.modules.get(this.redirects.get(e6));
      if (o9) return o9;
    }
    let t18 = this.modules.get(e6);
    if (!t18) {
      let o9 = await this.fetchModule(e6);
      return this.registerModule(o9), o9;
    }
    return t18;
  }
  async fetchModule(e6) {
    let t18 = await this.fetch(e6);
    if (t18.status >= 300) {
      for (let i7 = 0; i7 < N().MAX_REDIRECTS; i7++) {
        await t18.body?.cancel();
        let a7 = t18.headers.get("location");
        if (!a7) throw new Error(`Redirected without location header while fetching ${e6}.`);
        let d2 = new URL(a7, e6);
        if (d2.protocol !== "https:" && d2.protocol !== "http:") throw new Error(`Redirected to unsupported protocol '${d2.protocol}' while fetching ${e6}.`);
        return this.registerRedirect(e6, d2.href), this.fetchModule(d2.href);
      }
      throw new Error("Too many redirects. Last one: " + e6);
    }
    let o9 = t18.headers.get("content-type"), s16 = O2(new URL(e6), o9), n12 = new Uint8Array(await t18.arrayBuffer());
    return { specifier: e6, mediaType: s16, data: n12 };
  }
  async fetch(e6) {
    let t18 = await fetch(e6, { redirect: "manual" });
    if (t18.status < 200 || t18.status >= 400) throw new Error(`Encountered status code ${t18.status} while fetching ${e6}.`);
    return t18;
  }
};
var we2 = /* @__PURE__ */ new Set(["assert", "assert/strict", "async_hooks", "buffer", "child_process", "cluster", "console", "constants", "crypto", "dgram", "diagnostics_channel", "dns", "dns/promises", "domain", "events", "fs", "fs/promises", "http", "http2", "https", "module", "net", "os", "path", "path/posix", "path/win32", "perf_hooks", "process", "punycode", "querystring", "repl", "readline", "stream", "stream/consumers", "stream/promises", "stream/web", "string_decoder", "sys", "test", "timers", "timers/promises", "tls", "tty", "url", "util", "util/types", "v8", "vm", "worker_threads", "zlib"]);
function ge(r14) {
  return we2.has(r14) || we2.has("node:" + r14);
}
var Ie = "deno-loader";
var ve = (r14 = {}) => ({ name: Ie, setup: async (e6) => {
  let t18 = await J.fromOptions(r14), o9 = e6.initialOptions.absWorkingDir ?? Deno.cwd(), s16 = new V2(f5(o9, "node_modules")), n12 = new B(), i7 = new G(), a7 = new P3();
  t18.providedConfigPath && a7.setConfigPath(t18.configPath), t18.providedImportMapURL && a7.useImportMap(t18.importMapURL), t18.providedLockPath && a7.useLockFile(t18.lockPath), t18.isUsingNodeModules && a7.useNodeModulesDir();
  let d2 = async (p3) => await a7.read(p3), f7 = async (p3) => {
    if (W2(p3)) {
      if (ge(p3.path)) return { path: p3.path, external: true };
      if (t18.isUsingNodeModules) return;
      if (t18.isUsingNativeLoader) {
        if (p3.path.startsWith(".")) return;
        let l6 = s16.findPackageId(p3.importer, p3.path), h8 = await s16.resolvePackage(l6);
        return s16.registerNodeModule(h8, l6), await e6.resolve(p3.path, { kind: p3.kind, resolveDir: h8, importer: p3.importer });
      }
      throw new Error(`Could not load npm module "${p3.path}".
            Remember that to load npm modules you must either use the "native" loader
            or specify the "nodeModulesDir" option.`);
    }
    let c12 = Q(p3);
    if (t18.isUsingNativeLoader) {
      let { modules: l6, redirects: h8, npmPackages: w3 } = await d2(c12.href);
      if (s16.register(w3), n12.registerModules(l6), n12.registerRedirects(h8), c12.href.startsWith("npm:")) {
        let g6 = n12.findRedirect(c12.href) ?? c12.href;
        if (!n12.findModule(g6)) {
          let { modules: S3, redirects: $, npmPackages: x5 } = await d2(g6);
          s16.register(x5), n12.registerModules(S3), n12.registerRedirects($);
        }
      }
      let k5 = n12.findRedirect(c12.href) ?? c12.href, R7 = n12.findModule(k5);
      if (R7 === void 0) throw new Error(`Unreachable: '${k5}' loaded but not reachable. (onResolve)`);
      let u3 = X.resolveEntry(R7);
      switch (u3.kind) {
        case "esm": {
          let { specifier: g6 } = u3;
          return M(g6);
        }
        case "node":
          return { path: u3.path, external: true };
        case "npm": {
          let g6 = await s16.resolvePackage(u3.packageId);
          s16.registerNodeModule(g6, u3.packageId);
          let v4 = `${u3.packageName}${u3.path ?? ""}`;
          return await e6.resolve(v4, { kind: p3.kind, resolveDir: g6, importer: p3.importer });
        }
      }
    }
    switch (c12.protocol) {
      case "file:":
        return M(c12);
      case "http:":
      case "https:":
      case "data:": {
        let l6 = await i7.findModule(c12.href);
        return M(new URL(l6.specifier));
      }
      case "jsr:": {
        if (!t18.providedLockPath) throw new Error("JSR specifiers are not supported in the portable loader without a lockfile");
        let l6 = await F3.fromAbsolute(t18.lockPath), h8 = L.fromURL(c12), w3 = L.toId(h8), k5 = l6.packages?.specifiers?.[w3];
        if (!k5) throw new Error(`Specifier not found in lockfile: ${w3}`);
        let R7 = L.fromURL(new URL(k5)), u3 = new URL(`./${R7.name}/${R7.version}_meta.json`, N().JSR_REGISTRY_URL), g6 = await i7.findModule(u3.href);
        if (g6.mediaType !== "Json") throw new Error(`Expected JSON media type for JSR manifest, got: ${g6.mediaType}`);
        let v4 = new TextDecoder().decode(g6.data), S3 = JSON.parse(v4), $ = `.${h8.path ?? ""}`, x5 = S3.exports[$];
        if (!x5) throw new Error(`Package '${k5}' has no export named '${$}'`);
        let E6 = new URL(`./${R7.name}/${R7.version}/${x5}`, N().JSR_REGISTRY_URL);
        return M(E6);
      }
      case "npm:": {
        if (!t18.isUsingNodeModules) throw new Error('To use "npm:" specifiers while using "loader: portable", you must specify "nodeModulesDir: true".');
        let l6 = U.fromURL(c12), h8 = s16.ownPath, w3 = `${l6.name}${l6.path ?? ""}`;
        return await e6.resolve(w3, { kind: p3.kind, resolveDir: h8, importer: p3.importer });
      }
      case "node:":
        return { external: true, path: c12.pathname };
      default:
        throw new Error(`Unsupported scheme: '${c12.protocol}'`);
    }
  };
  e6.onResolve({ filter: /.*/, namespace: "file" }, f7), e6.onResolve({ filter: /.*/, namespace: "http" }, f7), e6.onResolve({ filter: /.*/, namespace: "https" }, f7), e6.onResolve({ filter: /.*/, namespace: "data" }, f7), e6.onResolve({ filter: /.*/, namespace: "npm" }, f7), e6.onResolve({ filter: /.*/, namespace: "jsr" }, f7), e6.onResolve({ filter: /.*/, namespace: "node" }, f7);
  async function m18(p3) {
    if (p3.namespace === "file" && _3(p3.path)) return;
    let c12 = Q(p3);
    if (t18.isUsingNativeLoader) {
      if (c12.protocol === "data:") {
        let E6 = await fetch(c12), ie = new Uint8Array(await E6.arrayBuffer()), z = E6.headers.get("content-type"), H = O2(c12, z), K = C8(H);
        return { contents: ie, loader: K };
      }
      let { modules: k5, redirects: R7, npmPackages: u3 } = await d2(c12.href);
      if (s16.register(u3), n12.registerModules(k5), n12.registerRedirects(R7), c12.href.startsWith("npm:")) {
        let E6 = n12.findRedirect(c12.href) ?? c12.href;
        if (!n12.findModule(E6)) {
          let { modules: z, redirects: H, npmPackages: K } = await d2(E6);
          s16.register(K), n12.registerModules(z), n12.registerRedirects(H);
        }
      }
      let g6 = n12.findRedirect(c12.href) ?? c12.href, v4 = n12.findModule(g6);
      if (v4 === void 0) throw new Error(`Unreachable: '${v4}' loaded but not reachable`);
      if ("error" in v4) throw new Error(v4.error);
      if (!("local" in v4)) throw new Error("[unreachable] Not an ESM module.");
      if (!v4.local) throw new Error("Module not downloaded yet.");
      let S3 = C8(v4.mediaType), x5 = { contents: await Deno.readFile(v4.local), loader: S3 };
      return c12.protocol === "file:" && (x5.watchFiles = [F2(c12)]), x5;
    }
    let l6;
    switch (c12.protocol) {
      case "file:": {
        l6 = await je(c12);
        break;
      }
      case "http:":
      case "https:":
      case "data:": {
        l6 = await i7.findModule(c12.href);
        break;
      }
      default:
        throw new Error("[unreachable] unsupported esm scheme " + c12.protocol);
    }
    let h8 = C8(l6.mediaType), w3 = { contents: l6.data, loader: h8 };
    return c12.protocol === "file:" && (w3.watchFiles = [F2(l6.specifier)]), w3;
  }
  e6.onLoad({ filter: /.*/, namespace: "file" }, m18), e6.onLoad({ filter: /.*/, namespace: "http" }, m18), e6.onLoad({ filter: /.*/, namespace: "https" }, m18), e6.onLoad({ filter: /.*/, namespace: "data" }, m18);
} });
var je = async (r14) => {
  let e6 = F2(r14), t18 = O2(r14, null), o9 = await Deno.readFile(e6);
  return { specifier: r14.href, mediaType: t18, data: o9 };
};
var te = (r14) => typeof r14 == "object" && r14 !== null && Object.values(r14).every((e6) => typeof e6 == "string");
function Se(r14) {
  return r14.startsWith("/") || r14.startsWith("./") || r14.startsWith("../");
}
function I(r14, e6) {
  return Se(r14) ? URL.canParse(r14, e6) ? new URL(r14, e6).href : r14 : URL.canParse(r14) ? new URL(r14).href : r14;
}
var A3 = class r13 {
  pln;
  _imports;
  _scopes;
  static empty() {
    return new r13();
  }
  constructor(e6 = {}) {
    return this.pln = e6, this._imports = /* @__PURE__ */ new Map(), this._scopes = /* @__PURE__ */ new Map(), Object.assign(this, this.pln);
  }
  load(e6) {
    if (!r13.isValidMapRecord(e6)) throw new Error("Invalid import map shape.");
    Object.entries(e6.imports).forEach(([t18, o9]) => {
      if (!re(t18)) throw new Error(`Invalid import specifier. At import: ${t18}`);
      if (!oe(o9)) throw new Error(`Invalid import value. At import: ${t18}`);
      if (!ne(t18, o9)) throw new Error(`Invalid import. If a specifier ends with a "/", the value must also end with a "/". At import: ${t18}`);
    });
    for (let [t18, o9] of Object.entries(e6.imports)) this._imports.set(t18, o9);
    for (let [t18, o9] of Object.entries(e6.scopes ?? {})) this._scopes.set(t18, new Map(Object.entries(o9)));
    return this;
  }
  addImport(e6, t18) {
    if (!re(e6)) throw new Error(`Invalid import specifier. At import: ${e6}`);
    if (!oe(t18)) throw new Error(`Invalid import value. At import: ${e6}`);
    if (!ne(e6, t18)) throw new Error('Invalid import. If a specifier ends with a "/", the value must also end with a "/"');
    this._imports.set(e6, t18);
  }
  addScope(e6, t18) {
    if (!URL.canParse(e6)) throw new Error(`Invalid scope specifier. At scope: ${e6}`);
    if (!te(t18)) throw new Error(`Invalid scoped imports. At scope: ${e6}`);
    for (let [s16, n12] of Object.entries(t18)) {
      if (!re(s16)) throw new Error(`Invalid import specifier in scope ${e6}. At import key: ${s16}`);
      if (!oe(n12)) throw new Error(`Invalid import value in scope ${e6}. At import key: ${s16}`);
      if (!ne(s16, n12)) throw new Error(`Invalid import in scopes. If a specifier ends with a "/", the value must also end with a "/". At scope: ${e6}`);
    }
    let o9 = this._scopes.get(e6);
    if (o9) {
      for (let [s16, n12] of Object.entries(t18)) o9.set(s16, n12);
      this._scopes.set(e6, o9);
      return;
    }
    this._scopes.set(e6, new Map(Object.entries(t18)));
  }
  resolveWith(e6) {
    let t18 = Object.fromEntries(Array.from(this._imports).map(([i7, a7]) => [I(i7, e6), I(a7, e6)])), o9 = Object.fromEntries(Array.from(this._scopes).map(([i7, a7]) => {
      if (!URL.canParse(i7, e6)) throw new Error("Invalid scope. At scope: " + i7);
      let d2 = Object.fromEntries(Array.from(a7).map(([f7, m18]) => [I(f7, e6), I(m18, e6)]));
      return [i7, se(d2)];
    })), s16 = se(t18), n12 = se(o9);
    this._imports.clear(), this._scopes.clear();
    for (let [i7, a7] of Object.entries(s16)) this._imports.set(i7, a7);
    for (let [i7, a7] of Object.entries(n12)) this._scopes.set(i7, new Map(Object.entries(a7)));
  }
  expand() {
    let e6 = [];
    for (let [o9, s16] of Array.from(this._imports)) if (e6.push([o9, s16]), !o9.endsWith("/") && !this._imports.has(o9 + "/") && (s16.startsWith("jsr:") || s16.startsWith("npm:"))) {
      let n12 = o9 + "/", i7 = s16.slice(0, 4) + "/" + s16.slice(s16[4] === "/" ? 5 : 4) + "/";
      e6.push([n12, i7]);
    }
    let t18 = Object.fromEntries(e6);
    this._imports.clear();
    for (let [o9, s16] of Object.entries(t18)) this._imports.set(o9, s16);
    return this;
  }
  resolveModule(e6, t18) {
    if (this.isEmpty) return new URL(e6, t18).href;
    let o9 = I(e6, t18), s16 = this.findImportValue(o9, this._imports);
    if (s16) return s16;
    for (let [n12, i7] of Array.from(this._scopes)) if (n12 === t18 || n12.endsWith("/") && t18.startsWith(n12)) {
      let a7 = this.findImportValue(o9, i7);
      if (a7) return a7;
    }
    return o9;
  }
  findImportValue(e6, t18) {
    let o9;
    for (let [s16, n12] of Array.from(t18)) if (e6 === s16 && (o9 = n12), s16.endsWith("/") && e6.startsWith(s16)) {
      let i7 = e6.slice(s16.length);
      if (!URL.canParse(i7, n12)) throw new Error("Invalid remap URL. At key: " + s16);
      let a7 = new URL(i7, n12);
      if (!a7.href.startsWith(n12)) throw new Error("Invalid remap URL, resolution probably backtracking above its specifier. At key: " + s16);
      o9 = a7.href;
    }
    return o9;
  }
  hasScope(e6) {
    return this._scopes.has(e6);
  }
  get isEmpty() {
    return this._imports.size === 0 && this._scopes.size === 0;
  }
  get hasEmptyImports() {
    return this._imports.size === 0;
  }
  get imports() {
    return Object.fromEntries(this._imports);
  }
  get scopes() {
    return Object.fromEntries(Array.from(this._scopes).map(([e6, t18]) => [e6, Object.fromEntries(t18)]));
  }
  static isValidMapRecord(e6) {
    return !(!y3(e6) || !("imports" in e6) || !te(e6.imports) || "scopes" in e6 && e6.scopes != null && !y3(e6.scopes));
  }
};
function re(r14) {
  return r14.length > 0;
}
function oe(r14) {
  return r14.length > 0;
}
function ne(r14, e6) {
  return !(r14.endsWith("/") && !e6.endsWith("/"));
}
function se(r14) {
  return Object.fromEntries(Object.entries(r14).sort(([e6], [t18]) => e6.localeCompare(t18)));
}
var _e2 = "deno-resolver";
var Re = (r14 = { expandImports: true }) => ({ name: _e2, setup: async (e6) => {
  let { expandImports: t18 = true } = r14, o9 = T.fromOptions(e6.initialOptions.external ?? []), s16 = A3.empty();
  if (r14.configPath) {
    let n12 = D2.fromAbsolute(r14.configPath);
    if (n12.imports && (s16.load({ imports: n12.imports, scopes: n12.scopes }).resolveWith(s13(r14.configPath ?? Deno.cwd()).href), t18 && s16.expand()), n12.importMap) {
      let i7 = new URL(n12.importMap, s13(r14.configPath)), a7 = await fetch(i7).then((d2) => d2.json()).catch((d2) => {
        throw Error(`Failed to fetch import map at ${i7} due to: ${d2}`);
      });
      s16.load(a7).resolveWith(i7.href);
    }
    if (Array.isArray(n12.workspace) && n12.workspace.length > 0) {
      let i7 = s11(r14.configPath), a7 = n12.workspace.map((d2) => {
        if (Oe(d2)) {
          let f7 = v3(i7, be(d2));
          return Array.from(Deno.readDirSync(f7)).filter((p3) => p3.isDirectory).map((p3) => v3(f7, p3.name)).filter(Ne);
        }
        return v3(i7, d2);
      }).flat();
      for (let d2 of a7) {
        let { name: f7, exports: m18, imports: p3, importMap: c12 } = D2.ofWorkspaceMember(d2);
        if (!f7 || !m18) continue;
        let l6 = s13(v3(d2, m18)).href;
        s16.addImport(f7, l6);
        let h8 = s13(d2 + "/").href;
        if (s16.hasScope(h8)) continue;
        let w3 = A3.empty();
        if (p3 && w3.load({ imports: p3 }).resolveWith(h8), c12) {
          let k5 = new URL(c12, s13(d2)), R7 = await fetch(k5).then((u3) => u3.json()).catch((u3) => {
            throw Error(`Failed to fetch import map at ${k5} of workspace member ${f7} due to: ${u3}`);
          });
          w3.load(R7).resolveWith(k5.href);
        }
        s16.addScope(h8, w3.imports);
      }
    }
  }
  if (r14.importMapURL) {
    let n12 = await fetch(r14.importMapURL).then((i7) => i7.json()).catch((i7) => {
      throw Error(`Failed to fetch import map at ${r14.importMapURL} due to: ${i7}`);
    });
    s16.load(n12).resolveWith(r14.importMapURL);
  }
  e6.onResolve({ filter: /.*/ }, async (n12) => {
    if (W2(n12) || n12.importer === "" && n12.resolveDir === "") return;
    if (n12.importer !== "") {
      if (n12.namespace === "") throw new Error("[assert] namespace is empty");
      let m18 = new URL(`${n12.namespace}:${n12.importer}`), p3 = s16.resolveModule(n12.path, m18.href);
      if (o9.has(p3)) return { path: p3, external: true };
      let { path: c12, namespace: l6 } = M(new URL(p3));
      return await e6.resolve(c12, { namespace: l6, kind: n12.kind });
    }
    let i7 = new URL(`${s13(n12.resolveDir).href}/`), a7 = s16.resolveModule(n12.path, i7.href);
    if (o9.has(a7)) return { path: a7, external: true };
    let { path: d2, namespace: f7 } = M(new URL(a7));
    return await e6.resolve(d2, { namespace: f7, kind: n12.kind });
  });
} });
var Oe = (r14) => r14.endsWith("*");
var be = (r14) => r14.split("/").slice(0, -1).join("/");
var Ne = (r14) => n5(r14 + "/deno.json") || n5(r14 + "/deno.jsonc");
function Tt2(r14 = {}) {
  return [Re(r14), ve(r14)];
}

// https://deno.land/std@0.168.0/_util/asserts.ts
var DenoStdInternalError2 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert2(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError2(msg);
  }
}

// https://deno.land/std@0.168.0/flags/mod.ts
var { hasOwn: hasOwn2 } = Object;
function get2(obj, key) {
  if (hasOwn2(obj, key)) {
    return obj[key];
  }
}
function getForce2(obj, key) {
  const v4 = get2(obj, key);
  assert2(v4 != null);
  return v4;
}
function isNumber2(x5) {
  if (typeof x5 === "number") return true;
  if (/^0x[0-9a-f]+$/i.test(String(x5))) return true;
  return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(String(x5));
}
function hasKey2(obj, keys) {
  let o9 = obj;
  keys.slice(0, -1).forEach((key2) => {
    o9 = get2(o9, key2) ?? {};
  });
  const key = keys[keys.length - 1];
  return hasOwn2(o9, key);
}
function parse5(args2, {
  "--": doubleDash = false,
  alias = {},
  boolean = false,
  default: defaults = {},
  stopEarly = false,
  string = [],
  collect = [],
  negatable = [],
  unknown = (i7) => i7
} = {}) {
  const aliases = {};
  const flags2 = {
    bools: {},
    strings: {},
    unknownFn: unknown,
    allBools: false,
    collect: {},
    negatable: {}
  };
  if (alias !== void 0) {
    for (const key in alias) {
      const val = getForce2(alias, key);
      if (typeof val === "string") {
        aliases[key] = [val];
      } else {
        aliases[key] = val;
      }
      for (const alias2 of getForce2(aliases, key)) {
        aliases[alias2] = [key].concat(aliases[key].filter((y4) => alias2 !== y4));
      }
    }
  }
  if (boolean !== void 0) {
    if (typeof boolean === "boolean") {
      flags2.allBools = !!boolean;
    } else {
      const booleanArgs = typeof boolean === "string" ? [boolean] : boolean;
      for (const key of booleanArgs.filter(Boolean)) {
        flags2.bools[key] = true;
        const alias2 = get2(aliases, key);
        if (alias2) {
          for (const al of alias2) {
            flags2.bools[al] = true;
          }
        }
      }
    }
  }
  if (string !== void 0) {
    const stringArgs = typeof string === "string" ? [string] : string;
    for (const key of stringArgs.filter(Boolean)) {
      flags2.strings[key] = true;
      const alias2 = get2(aliases, key);
      if (alias2) {
        for (const al of alias2) {
          flags2.strings[al] = true;
        }
      }
    }
  }
  if (collect !== void 0) {
    const collectArgs = typeof collect === "string" ? [collect] : collect;
    for (const key of collectArgs.filter(Boolean)) {
      flags2.collect[key] = true;
      const alias2 = get2(aliases, key);
      if (alias2) {
        for (const al of alias2) {
          flags2.collect[al] = true;
        }
      }
    }
  }
  if (negatable !== void 0) {
    const negatableArgs = typeof negatable === "string" ? [negatable] : negatable;
    for (const key of negatableArgs.filter(Boolean)) {
      flags2.negatable[key] = true;
      const alias2 = get2(aliases, key);
      if (alias2) {
        for (const al of alias2) {
          flags2.negatable[al] = true;
        }
      }
    }
  }
  const argv2 = { _: [] };
  function argDefined(key, arg) {
    return flags2.allBools && /^--[^=]+$/.test(arg) || get2(flags2.bools, key) || !!get2(flags2.strings, key) || !!get2(aliases, key);
  }
  function setKey(obj, name, value, collect2 = true) {
    let o9 = obj;
    const keys = name.split(".");
    keys.slice(0, -1).forEach(function(key2) {
      if (get2(o9, key2) === void 0) {
        o9[key2] = {};
      }
      o9 = get2(o9, key2);
    });
    const key = keys[keys.length - 1];
    const collectable = collect2 && !!get2(flags2.collect, name);
    if (!collectable) {
      o9[key] = value;
    } else if (get2(o9, key) === void 0) {
      o9[key] = [value];
    } else if (Array.isArray(get2(o9, key))) {
      o9[key].push(value);
    } else {
      o9[key] = [get2(o9, key), value];
    }
  }
  function setArg(key, val, arg = void 0, collect2) {
    if (arg && flags2.unknownFn && !argDefined(key, arg)) {
      if (flags2.unknownFn(arg, key, val) === false) return;
    }
    const value = !get2(flags2.strings, key) && isNumber2(val) ? Number(val) : val;
    setKey(argv2, key, value, collect2);
    const alias2 = get2(aliases, key);
    if (alias2) {
      for (const x5 of alias2) {
        setKey(argv2, x5, value, collect2);
      }
    }
  }
  function aliasIsBoolean(key) {
    return getForce2(aliases, key).some(
      (x5) => typeof get2(flags2.bools, x5) === "boolean"
    );
  }
  let notFlags = [];
  if (args2.includes("--")) {
    notFlags = args2.slice(args2.indexOf("--") + 1);
    args2 = args2.slice(0, args2.indexOf("--"));
  }
  for (let i7 = 0; i7 < args2.length; i7++) {
    const arg = args2[i7];
    if (/^--.+=/.test(arg)) {
      const m18 = arg.match(/^--([^=]+)=(.*)$/s);
      assert2(m18 != null);
      const [, key, value] = m18;
      if (flags2.bools[key]) {
        const booleanValue = value !== "false";
        setArg(key, booleanValue, arg);
      } else {
        setArg(key, value, arg);
      }
    } else if (/^--no-.+/.test(arg) && get2(flags2.negatable, arg.replace(/^--no-/, ""))) {
      const m18 = arg.match(/^--no-(.+)/);
      assert2(m18 != null);
      setArg(m18[1], false, arg, false);
    } else if (/^--.+/.test(arg)) {
      const m18 = arg.match(/^--(.+)/);
      assert2(m18 != null);
      const [, key] = m18;
      const next = args2[i7 + 1];
      if (next !== void 0 && !/^-/.test(next) && !get2(flags2.bools, key) && !flags2.allBools && (get2(aliases, key) ? !aliasIsBoolean(key) : true)) {
        setArg(key, next, arg);
        i7++;
      } else if (/^(true|false)$/.test(next)) {
        setArg(key, next === "true", arg);
        i7++;
      } else {
        setArg(key, get2(flags2.strings, key) ? "" : true, arg);
      }
    } else if (/^-[^-]+/.test(arg)) {
      const letters = arg.slice(1, -1).split("");
      let broken = false;
      for (let j3 = 0; j3 < letters.length; j3++) {
        const next = arg.slice(j3 + 2);
        if (next === "-") {
          setArg(letters[j3], next, arg);
          continue;
        }
        if (/[A-Za-z]/.test(letters[j3]) && /=/.test(next)) {
          setArg(letters[j3], next.split(/=(.+)/)[1], arg);
          broken = true;
          break;
        }
        if (/[A-Za-z]/.test(letters[j3]) && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
          setArg(letters[j3], next, arg);
          broken = true;
          break;
        }
        if (letters[j3 + 1] && letters[j3 + 1].match(/\W/)) {
          setArg(letters[j3], arg.slice(j3 + 2), arg);
          broken = true;
          break;
        } else {
          setArg(letters[j3], get2(flags2.strings, letters[j3]) ? "" : true, arg);
        }
      }
      const [key] = arg.slice(-1);
      if (!broken && key !== "-") {
        if (args2[i7 + 1] && !/^(-|--)[^-]/.test(args2[i7 + 1]) && !get2(flags2.bools, key) && (get2(aliases, key) ? !aliasIsBoolean(key) : true)) {
          setArg(key, args2[i7 + 1], arg);
          i7++;
        } else if (args2[i7 + 1] && /^(true|false)$/.test(args2[i7 + 1])) {
          setArg(key, args2[i7 + 1] === "true", arg);
          i7++;
        } else {
          setArg(key, get2(flags2.strings, key) ? "" : true, arg);
        }
      }
    } else {
      if (!flags2.unknownFn || flags2.unknownFn(arg) !== false) {
        argv2._.push(flags2.strings["_"] ?? !isNumber2(arg) ? arg : Number(arg));
      }
      if (stopEarly) {
        argv2._.push(...args2.slice(i7 + 1));
        break;
      }
    }
  }
  for (const [key, value] of Object.entries(defaults)) {
    if (!hasKey2(argv2, key.split("."))) {
      setKey(argv2, key, value);
      if (aliases[key]) {
        for (const x5 of aliases[key]) {
          setKey(argv2, x5, value);
        }
      }
    }
  }
  for (const key of Object.keys(flags2.bools)) {
    if (!hasKey2(argv2, key.split("."))) {
      const value = get2(flags2.collect, key) ? [] : false;
      setKey(
        argv2,
        key,
        value,
        false
      );
    }
  }
  for (const key of Object.keys(flags2.strings)) {
    if (!hasKey2(argv2, key.split(".")) && get2(flags2.collect, key)) {
      setKey(
        argv2,
        key,
        [],
        false
      );
    }
  }
  if (doubleDash) {
    argv2["--"] = [];
    for (const key of notFlags) {
      argv2["--"].push(key);
    }
  } else {
    for (const key of notFlags) {
      argv2._.push(key);
    }
  }
  return argv2;
}

// https://deno.land/x/quickr@0.6.38/main/operating_system.js
var cache = {};
var stdoutRun = async (args2) => {
  const process4 = Deno.run({ cmd: args2, stdout: "piped", stderr: "piped" });
  const output2 = await process4.output();
  return new TextDecoder().decode(output2).replace(/\n$/, "");
};
var OperatingSystem = {
  commonChecks: {
    isMac: Deno.build.os == "darwin",
    isWindows: Deno.build.os == "windows",
    isLinux: Deno.build.os == "linux",
    get isWsl() {
      if (cache.isWsl != null) {
        return cache.isWsl;
      }
      if (!(OperatingSystem.commonChecks.isMac || OperatingSystem.commonChecks.isWindows)) {
        if (Deno.env.get("WSLENV")) {
          return cache.isWsl = true;
        }
        try {
          const { isFile } = Deno.lstatSync("/mnt/c");
          return cache.isWsl = true;
        } catch (error) {
        }
      }
      return cache.isWsl = false;
    }
  },
  commonName: {
    "darwin": "MacOS",
    "windows": "Windows",
    "linux": "Linux"
  }[Deno.build.os],
  kernel: {
    commonName: Deno.build.os
  },
  architecture: Deno.build.architecture,
  get versionArray() {
    return new Promise(async (resolve10, reject) => {
      let versionArray = [];
      if (OperatingSystem.commonChecks.isWindows) {
        try {
          const windowsVersionString = await stdoutRun(["pwsh", "-Command", `[System.Environment]::OSVersion.Version`]);
          versionArray = windowsVersionString.replace(/^[\w\W]*?(\d+\.\d+\.\d+)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for Windows: ${error.message}`);
        }
      } else if (OperatingSystem.commonChecks.isMac) {
        try {
          const macVersionString = await stdoutRun(["/usr/bin/sw_vers", "-productVersion"]);
          versionArray = macVersionString.replace(/^[\w\W]*?(\d+\.\d+(\.\d+)?)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for MacOS: ${error.message}`);
        }
      } else {
        try {
          const outputString = await stdoutRun(["uname", "-r"]);
          versionArray = outputString.replace(/^[\w\W]*?((\d+\.)+\d+)[\w\W]*/, "$1").split(".").map((each2) => each2 - 0);
        } catch (error) {
          console.warn(`unable to get version string for Linux: ${error.message}`);
        }
      }
    });
  },
  get username() {
    if (!cache.username) {
      if (Deno.build.os != "windows") {
        cache.username = Deno.env.get("USER");
      } else {
        cache.username = Deno.env.get("USERNAME");
      }
    }
    return cache.username;
  },
  get home() {
    if (!cache.home) {
      if (Deno.build.os != "windows") {
        cache.home = Deno.env.get("HOME");
      } else {
        cache.home = Deno.env.get("HOMEPATH");
      }
    }
    return cache.home;
  },
  async idForUsername(username) {
    if (OperatingSystem.commonChecks.isMac) {
      if (!cache.macOsUserToUid) {
        const userListString = await stdoutRun(["dscl", ".", "-list", "/Users", "UniqueID"]);
        const userList = userListString.split(/\n/);
        const userNamesAndIds = userList.map((each2) => {
          const match = each2.match(/(.+?)(-?\d+)$/, "$1");
          if (match) {
            const username2 = match[1].trim();
            const uid2 = match[2];
            return [username2, uid2];
          }
        }).filter((each2) => each2);
        const idsAndUsernames = userNamesAndIds.map(([username2, id]) => [id, username2]);
        cache.macOsUserToUid = Object.fromEntries(userNamesAndIds);
        cache.macOsUidToUser = Object.fromEntries(idsAndUsernames);
      }
      return cache.macOsUserToUid[username];
    } else if (OperatingSystem.commonChecks.isWindows) {
      return await stdoutRun(["pwsh", "-Command", `Get-ADUser -Identity '${username.replace(/'/, "''")}' | select SID`]);
    } else if (OperatingSystem.commonChecks.isLinux) {
      return await stdoutRun(["id", "-u", OperatingSystem.username]);
    }
  }
};

// https://deno.land/x/good@1.3.0.4/value.js
var typedArrayClasses = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each2) => each2);
var copyableClasses = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction = class {
};
var GeneratorFunction = class {
};
var AsyncGeneratorFunction = class {
};
var SyncGenerator = class {
};
var AsyncGenerator = class {
};
try {
  AsyncFunction = eval("(async function(){}).constructor");
  GeneratorFunction = eval("(function*(){}).constructor");
  AsyncGeneratorFunction = eval("(async function*(){}).constructor");
  SyncGenerator = eval("((function*(){})()).constructor");
  AsyncGenerator = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive = (value) => !(value instanceof Object);
var isPureObject = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive = (value) => isPrimitive(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator = (value) => IteratorPrototype.isPrototypeOf(value);
var isGeneratorType = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator || constructor == AsyncGenerator;
  }
  return false;
};
var isAsyncIterable = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isTechnicallyIterable = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol = Symbol.for("deepCopy");
var clonedFromSymbol = Symbol();
var getThis = Symbol();
Object.getPrototypeOf(function() {
})[getThis] = function() {
  return this;
};
function deepCopyInner(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol] instanceof Function) {
    const clonedValue = value[deepCopySymbol](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis]();
    object = value.bind(theThis);
  } else if (copyableClasses.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get: get3, set, ...options } = description;
    const getIsFunc = get3 instanceof Function;
    const setIsFunc = set instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get3 ? function(...args2) {
          return get3.apply(output2, args2);
        } : void 0,
        set: set ? function(...args2) {
          return set.apply(output2, args2);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy = (value) => deepCopyInner(value);
var shallowSortObject = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify = (value, ...args2) => {
  return JSON.stringify(deepSortObject(value), ...args2);
};
var allKeys = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions = Object.getOwnPropertyDescriptors;
var allKeyDescriptions = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/good@1.3.0.4/iterable.js
var emptyIterator = function* () {
}();
var makeIterable = (object) => {
  if (object == null) {
    return emptyIterator;
  }
  if (object[Symbol.iterator] instanceof Function || object[Symbol.asyncIterator] instanceof Function) {
    return object;
  }
  if (Object.getPrototypeOf(object).constructor == Object) {
    return Object.entries(object);
  }
  return emptyIterator;
};
var iter = (object) => {
  const iterable = makeIterable(object);
  if (iterable[Symbol.asyncIterator]) {
    return iterable[Symbol.asyncIterator]();
  } else {
    return iterable[Symbol.iterator]();
  }
};
var Stop = Symbol("iterationStop");
var zip = function* (...iterables) {
  iterables = iterables.map((each2) => iter(each2));
  while (true) {
    const nexts = iterables.map((each2) => each2.next());
    if (nexts.every((each2) => each2.done)) {
      break;
    }
    yield nexts.map((each2) => each2.value);
  }
};
async function asyncIteratorToList(asyncIterator) {
  const results = [];
  for await (const each2 of asyncIterator) {
    results.push(each2);
  }
  return results;
}
var ERROR_WHILE_MAPPING_MESSAGE = "Threw while mapping.";
function concurrentlyTransform({ iterator, transformFunction, poolLimit = null, awaitAll = false }) {
  poolLimit = poolLimit || concurrentlyTransform.defaultPoolLimit;
  const res = new TransformStream({
    async transform(p3, controller) {
      try {
        const s16 = await p3;
        controller.enqueue(s16);
      } catch (e6) {
        if (e6 instanceof AggregateError && e6.message == ERROR_WHILE_MAPPING_MESSAGE) {
          controller.error(e6);
        }
      }
    }
  });
  const mainPromise = (async () => {
    const writer = res.writable.getWriter();
    const executing = [];
    try {
      let index = 0;
      for await (const item of iterator) {
        const p3 = Promise.resolve().then(() => transformFunction(item, index));
        index++;
        writer.write(p3);
        const e6 = p3.then(() => executing.splice(executing.indexOf(e6), 1));
        executing.push(e6);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors2 = [];
      for (const result of await Promise.allSettled(executing)) {
        if (result.status == "rejected") {
          errors2.push(result.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors2, ERROR_WHILE_MAPPING_MESSAGE)
      )).catch(() => {
      });
    }
  })();
  const asyncIterator = res.readable[Symbol.asyncIterator]();
  if (!awaitAll) {
    return asyncIterator;
  } else {
    return mainPromise.then(() => asyncIteratorToList(asyncIterator));
  }
}
concurrentlyTransform.defaultPoolLimit = 40;

// https://deno.land/x/good@1.3.0.4/string.js
var indent = ({ string, by = "    ", noLead = false }) => (noLead ? "" : by) + string.replace(/\n/g, "\n" + by);
var toString2 = (value) => {
  if (typeof value == "symbol") {
    return toRepresentation(value);
  } else if (!(value instanceof Object)) {
    return value != null ? value.toString() : `${value}`;
  } else {
    return toRepresentation(value);
  }
};
var reprSymbol = Symbol.for("representation");
var denoInspectSymbol = Symbol.for("Deno.customInspect");
var toRepresentation = (item) => {
  const alreadySeen = /* @__PURE__ */ new Set();
  const recursionWrapper = (item2) => {
    if (item2 instanceof Object) {
      if (alreadySeen.has(item2)) {
        return `[Self Reference]`;
      } else {
        alreadySeen.add(item2);
      }
    }
    let output2;
    if (item2 === void 0) {
      output2 = "undefined";
    } else if (item2 === null) {
      output2 = "null";
    } else if (typeof item2 == "string") {
      output2 = JSON.stringify(item2);
    } else if (typeof item2 == "symbol") {
      if (!item2.description) {
        output2 = "Symbol()";
      } else {
        const globalVersion = Symbol.for(item2.description);
        if (globalVersion == item2) {
          output2 = `Symbol.for(${JSON.stringify(item2.description)})`;
        } else {
          output2 = `Symbol(${JSON.stringify(item2.description)})`;
        }
      }
    } else if (item2 instanceof Date) {
      output2 = `new Date(${item2.getTime()})`;
    } else if (item2 instanceof Array) {
      output2 = `[${item2.map((each2) => recursionWrapper(each2)).join(",")}]`;
    } else if (item2 instanceof Set) {
      output2 = `new Set(${[...item2].map((each2) => recursionWrapper(each2)).join(",")})`;
    } else if (item2 instanceof Object && item2.constructor == Object) {
      output2 = pureObjectRepr(item2);
    } else if (item2 instanceof Map) {
      let string = "new Map(";
      for (const [key, value] of item2.entries()) {
        const stringKey = recursionWrapper(key);
        const stringValue = recursionWrapper(value);
        if (!stringKey.match(/\n/g)) {
          string += `
  [${stringKey}, ${indent({ string: stringValue, by: "  ", noLead: true })}],`;
        } else {
          string += `
  [${indent({ string: stringKey, by: "  ", noLead: true })},
  ${indent({ string: stringValue, by: "    ", noLead: true })}],`;
        }
      }
      string += "\n)";
      output2 = string;
    } else {
      if (item2[reprSymbol] instanceof Function) {
        try {
          output2 = item2[reprSymbol]();
          return output2;
        } catch (error) {
        }
      }
      if (item2[denoInspectSymbol] instanceof Function) {
        try {
          output2 = item2[denoInspectSymbol]();
          return output2;
        } catch (error) {
        }
      }
      try {
        output2 = item2.toString();
        if (output2 !== "[object Object]") {
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && item2.prototype && typeof item2.name == "string") {
          output2 = `class ${item2.name} { /*...*/ }`;
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && typeof item2.constructor.name == "string") {
          output2 = `new ${item2.constructor.name}(${pureObjectRepr(item2)})`;
          return output2;
        }
      } catch (error) {
      }
      return pureObjectRepr(item2);
    }
    return output2;
  };
  const pureObjectRepr = (item2) => {
    let string = "{";
    for (const [key, value] of Object.entries(item2)) {
      const stringKey = recursionWrapper(key);
      const stringValue = recursionWrapper(value);
      string += `
  ${stringKey}: ${indent({ string: stringValue, by: "  ", noLead: true })},`;
    }
    string += "\n}";
    return string;
  };
  return recursionWrapper(item);
};
function escapeRegexMatch(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
var regexpProxy = Symbol("regexpProxy");
var realExec = RegExp.prototype.exec;
RegExp.prototype.exec = function(...args2) {
  if (this[regexpProxy]) {
    return realExec.apply(this[regexpProxy], args2);
  }
  return realExec.apply(this, args2);
};
var proxyRegExp;
var regexProxyOptions = Object.freeze({
  get(original, key) {
    if (typeof key == "string" && key.match(/^[igymu]+$/)) {
      return proxyRegExp(original, key);
    }
    if (key == regexpProxy) {
      return original;
    }
    return original[key];
  },
  set(original, key, value) {
    original[key] = value;
    return true;
  }
});
proxyRegExp = (parent, flags2) => {
  const regex3 = new RegExp(parent, flags2);
  const output2 = new Proxy(regex3, regexProxyOptions);
  Object.setPrototypeOf(output2, Object.getPrototypeOf(regex3));
  return output2;
};
function regexWithStripWarning(shouldStrip) {
  return (strings, ...values) => {
    let newRegexString = "";
    for (const [string, value] of zip(strings, values)) {
      newRegexString += string;
      if (value instanceof RegExp) {
        if (!shouldStrip && (value.ignoreCase || value.sticky || value.multiline || value.unicode)) {
          console.warn(`Warning: flags inside of regex:
    The RegExp trigging this warning is: ${value}
    When calling the regex interpolater (e.g. regex\`something\${stuff}\`)
    one of the \${} values (the one above) was a RegExp with a flag enabled
    e.g. /stuff/i  <- i = ignoreCase flag enabled
    When the /stuff/i gets interpolated, its going to loose its flags
    (thats what I'm warning you about)
    
    To disable/ignore this warning do:
        regex.stripFlags\`something\${/stuff/i}\`
    If you want to add flags to the output of regex\`something\${stuff}\` do:
        regex\`something\${stuff}\`.i   // ignoreCase
        regex\`something\${stuff}\`.ig  // ignoreCase and global
        regex\`something\${stuff}\`.gi  // functionally equivlent
`);
        }
        const regexContent = `${value}`.slice(1).replace(/\/.*$/, "");
        newRegexString += `(?:${regexContent})`;
      } else if (value != null) {
        newRegexString += escapeRegexMatch(toString2(value));
      }
    }
    return proxyRegExp(newRegexString, "");
  };
}
var regex = regexWithStripWarning(false);
regex.stripFlags = regexWithStripWarning(true);
var textDecoder = new TextDecoder("utf-8");
var textEncoder = new TextEncoder("utf-8");
var utf8BytesToString = textDecoder.decode.bind(textDecoder);
var stringToUtf8Bytes = textEncoder.encode.bind(textEncoder);

// https://deno.land/x/quickr@0.6.38/main/console.js
var realConsole = globalThis.console;
var isBrowserContext = typeof document != "undefined" && typeof window != "undefined";
var env2 = null;
var originalThing = realConsole;
var symbolForConsoleLog = Symbol.for("console.log");
var proxySymbol = Symbol.for("Proxy");
var thisProxySymbol = Symbol("thisProxy");
globalThis.console = new Proxy(originalThing, {
  defineProperty: Reflect.defineProperty,
  getPrototypeOf: Reflect.getPrototypeOf,
  // Object.keys
  ownKeys(...args2) {
    return Reflect.ownKeys(...args2);
  },
  // function call (original value needs to be a function)
  apply(original, context2, ...args2) {
    console.log(args2);
  },
  // new operator (original value needs to be a class)
  construct(...args2) {
  },
  get(original, key, ...args2) {
    if (key == proxySymbol || key == thisProxySymbol) {
      return true;
    }
    if (key == "log") {
      return (...args3) => {
        realConsole.log(
          ...args3.map((each2) => {
            if (each2 instanceof Object && each2[symbolForConsoleLog] instanceof Function) {
              return each2[symbolForConsoleLog]();
            }
            return each2;
          })
        );
      };
    }
    return Reflect.get(original, key, ...args2);
  },
  set(original, key, ...args2) {
    if (key == proxySymbol || key == thisProxySymbol) {
      return;
    }
    return Reflect.set(original, key, ...args2);
  }
});
var codeToEscapeString = (code) => `\x1B[${code}m`;
var ansiRegexPattern = /[\u001B\u009B][[\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\d\/#&.:=?%@~_]+)*|[a-zA-Z\d]+(?:;[-a-zA-Z\d\/#&.:=?%@~_]*)*)?\u0007)|(?:(?:\d{1,4}(?:;\d{0,4})*)?[\dA-PR-TZcf-nq-uy=><~]))/g;
function clearAnsiStylesFrom(string) {
  return `${string}`.replace(ansiRegexPattern, "");
}
var styleStrings = {
  reset: codeToEscapeString(0),
  bold: codeToEscapeString(1),
  dim: codeToEscapeString(2),
  italic: codeToEscapeString(3),
  underline: codeToEscapeString(4),
  slowBlink: codeToEscapeString(5),
  // not widely supported
  fastBlink: codeToEscapeString(6),
  // not widely supported
  inverse: codeToEscapeString(7),
  strikethrough: codeToEscapeString(9),
  primary: codeToEscapeString(11),
  // forground colors
  black: codeToEscapeString(30),
  red: codeToEscapeString(31),
  green: codeToEscapeString(32),
  yellow: codeToEscapeString(33),
  blue: codeToEscapeString(34),
  magenta: codeToEscapeString(35),
  cyan: codeToEscapeString(36),
  white: codeToEscapeString(37),
  lightBlack: codeToEscapeString(90),
  lightRed: codeToEscapeString(91),
  lightGreen: codeToEscapeString(92),
  lightYellow: codeToEscapeString(93),
  lightBlue: codeToEscapeString(94),
  lightMagenta: codeToEscapeString(95),
  lightCyan: codeToEscapeString(96),
  lightWhite: codeToEscapeString(97),
  // background
  blackBackground: codeToEscapeString(40),
  redBackground: codeToEscapeString(41),
  greenBackground: codeToEscapeString(42),
  yellowBackground: codeToEscapeString(43),
  blueBackground: codeToEscapeString(44),
  magentaBackground: codeToEscapeString(45),
  cyanBackground: codeToEscapeString(46),
  whiteBackground: codeToEscapeString(47),
  lightBlackBackground: codeToEscapeString(100),
  lightRedBackground: codeToEscapeString(101),
  lightGreenBackground: codeToEscapeString(102),
  lightYellowBackground: codeToEscapeString(103),
  lightBlueBackground: codeToEscapeString(104),
  lightMagentaBackground: codeToEscapeString(105),
  lightCyanBackground: codeToEscapeString(106),
  lightWhiteBackground: codeToEscapeString(107)
};
Object.assign(styleStrings, {
  gray: styleStrings.lightBlack,
  grey: styleStrings.lightBlack,
  lightGray: styleStrings.white,
  // lightWhite is "true" white
  lightGrey: styleStrings.white,
  // lightWhite is "true" white
  grayBackground: styleStrings.lightBlackBackground,
  greyBackground: styleStrings.lightBlackBackground,
  lightGrayBackground: styleStrings.whiteBackground,
  lightGreyBackground: styleStrings.whiteBackground
});
var styleObjectSymbol = Symbol("consoleStyle");
var styleObject = (rootStyleString) => {
  const createStyleAccumulator = (styleString) => {
    const styleAccumulator = (strings, ...values) => {
      const objectToStyledString = (interpolatedValue, styles) => {
        let singleCombinedString2 = "";
        if (interpolatedValue instanceof Object && interpolatedValue[styleObjectSymbol] instanceof Function) {
          singleCombinedString2 += interpolatedValue[styleObjectSymbol]();
        } else {
          singleCombinedString2 += toString2(interpolatedValue);
        }
        singleCombinedString2 += styleStrings.reset + styleAccumulator.styles.join("");
        return singleCombinedString2;
      };
      let singleCombinedString = "";
      if (!(strings instanceof Array) || strings.length < 1 || !strings.every((each2) => typeof each2 == "string")) {
        for (const each2 of [strings, ...values]) {
          singleCombinedString += objectToStyledString(each2);
        }
      } else {
        for (const index in values) {
          singleCombinedString += strings[index];
          singleCombinedString += objectToStyledString(values[index]);
        }
        const lastString = strings.slice(-1)[0];
        singleCombinedString += lastString;
      }
      styleAccumulator.sequence.push(singleCombinedString);
      return styleAccumulator;
    };
    styleAccumulator[styleObjectSymbol] = true;
    styleAccumulator.styles = [styleString];
    styleAccumulator.sequence = [styleString];
    styleAccumulator.toString = () => styleAccumulator.sequence.join("") + styleStrings.reset;
    styleAccumulator[Deno.customInspect] = () => styleAccumulator.sequence.join("") + styleStrings.reset;
    styleAccumulator[symbolForConsoleLog] = () => {
      const asString = styleAccumulator.toString();
      if (Console.reliableColorSupport.includesAnsi) {
        return asString;
      } else {
        return clearAnsiStylesFrom(asString);
      }
    };
    return Object.defineProperties(styleAccumulator, Object.fromEntries(Object.entries(styleStrings).map(
      ([key, value]) => [
        key,
        {
          get() {
            styleAccumulator.styles.push(value);
            styleAccumulator.sequence.push(value);
            return styleAccumulator;
          }
        }
      ]
    )));
  };
  const topLevelStyleAccumulator = (strings, ...values) => createStyleAccumulator(rootStyleString)(strings, ...values);
  topLevelStyleAccumulator[styleObjectSymbol] = true;
  topLevelStyleAccumulator.toString = () => rootStyleString;
  topLevelStyleAccumulator[symbolForConsoleLog] = () => {
    const asString = topLevelStyleAccumulator.toString();
    if (Console.reliableColorSupport.includesAnsi) {
      return asString;
    } else {
      return clearAnsiStylesFrom(asString);
    }
  };
  return Object.defineProperties(topLevelStyleAccumulator, Object.fromEntries(Object.entries(styleStrings).map(
    ([eachStyleName, eachStyleString]) => [
      eachStyleName,
      {
        get() {
          const styleAccumulator = createStyleAccumulator(rootStyleString);
          styleAccumulator.styles.push(eachStyleString);
          styleAccumulator.sequence.push(eachStyleString);
          return styleAccumulator;
        }
      }
    ]
  )));
};
var bold = styleObject(styleStrings.bold);
var reset = styleObject(styleStrings.reset);
var dim = styleObject(styleStrings.dim);
var italic = styleObject(styleStrings.italic);
var underline = styleObject(styleStrings.underline);
var inverse = styleObject(styleStrings.inverse);
var strikethrough = styleObject(styleStrings.strikethrough);
var black = styleObject(styleStrings.black);
var white = styleObject(styleStrings.white);
var red = styleObject(styleStrings.red);
var green = styleObject(styleStrings.green);
var blue = styleObject(styleStrings.blue);
var yellow = styleObject(styleStrings.yellow);
var cyan = styleObject(styleStrings.cyan);
var magenta = styleObject(styleStrings.magenta);
var lightBlack = styleObject(styleStrings.lightBlack);
var lightWhite = styleObject(styleStrings.lightWhite);
var lightRed = styleObject(styleStrings.lightRed);
var lightGreen = styleObject(styleStrings.lightGreen);
var lightBlue = styleObject(styleStrings.lightBlue);
var lightYellow = styleObject(styleStrings.lightYellow);
var lightMagenta = styleObject(styleStrings.lightMagenta);
var lightCyan = styleObject(styleStrings.lightCyan);
var blackBackground = styleObject(styleStrings.blackBackground);
var whiteBackground = styleObject(styleStrings.whiteBackground);
var redBackground = styleObject(styleStrings.redBackground);
var greenBackground = styleObject(styleStrings.greenBackground);
var blueBackground = styleObject(styleStrings.blueBackground);
var yellowBackground = styleObject(styleStrings.yellowBackground);
var magentaBackground = styleObject(styleStrings.magentaBackground);
var cyanBackground = styleObject(styleStrings.cyanBackground);
var lightBlackBackground = styleObject(styleStrings.lightBlackBackground);
var lightRedBackground = styleObject(styleStrings.lightRedBackground);
var lightGreenBackground = styleObject(styleStrings.lightGreenBackground);
var lightYellowBackground = styleObject(styleStrings.lightYellowBackground);
var lightBlueBackground = styleObject(styleStrings.lightBlueBackground);
var lightMagentaBackground = styleObject(styleStrings.lightMagentaBackground);
var lightCyanBackground = styleObject(styleStrings.lightCyanBackground);
var lightWhiteBackground = styleObject(styleStrings.lightWhiteBackground);
var gray = styleObject(styleStrings.gray);
var grey = styleObject(styleStrings.grey);
var lightGray = styleObject(styleStrings.lightGray);
var lightGrey = styleObject(styleStrings.lightGrey);
var grayBackground = styleObject(styleStrings.grayBackground);
var greyBackground = styleObject(styleStrings.greyBackground);
var lightGrayBackground = styleObject(styleStrings.lightGrayBackground);
var lightGreyBackground = styleObject(styleStrings.lightGreyBackground);
var colorSupportCache = {
  includesAnsi: null,
  includes256: null,
  includes16m: null
};
var Console = {
  // TODO: add signal handler
  // Deno.addSignalListener("SIGINT", (...args)=>{
  //     console.debug(`args is:`,args)
  // })
  log(...args2) {
    if (args2.length == 0) {
      console.log();
    }
    let [arg1, ...others] = args2.map((each2) => {
      if (each2 instanceof Object && each2[symbolForConsoleLog] instanceof Function) {
        return each2[symbolForConsoleLog]();
      }
      return each2;
    });
    if (typeof arg1 == "string") {
      arg1 = arg1.replace("%", "%%");
    }
    if (!isBrowserContext) {
      if (!Console.reliableColorSupport.includesAnsi) {
        arg1 = clearAnsiStylesFrom(arg1);
        others = others.map((each2) => {
          if (typeof each2 == "string") {
            return clearAnsiStylesFrom(each2);
          } else {
            return each2;
          }
        });
      }
      realConsole.log(arg1, ...others);
    } else {
      if (args2[0][symbolForConsoleLog] && typeof args2[0].styleString == "string") {
        realConsole.log(`%c${arg1}${others.map((each2) => `${each2}`).join("")}`, args2[0].styleString);
      } else {
        realConsole.log(arg1, ...others);
      }
    }
    return Console;
  },
  get env() {
    return env2 = env2 || new Proxy(
      Deno.env.toObject(),
      {
        // Object.keys
        ownKeys(target) {
          return Object.keys(Deno.env.toObject());
        },
        has(original, key) {
          if (typeof key === "symbol") {
            return false;
          } else {
            return Deno.env.get(key) !== void 0;
          }
        },
        get(original, key) {
          if (typeof key === "symbol") {
            return original[key];
          } else {
            return Deno.env.get(key);
          }
        },
        set(original, key, value) {
          original[key] = value;
          if (typeof key !== "symbol") {
            Deno.env.set(key, value);
          }
          return true;
        },
        deleteProperty(original, key) {
          if (typeof key === "symbol") {
            return void 0;
          } else {
            return Deno.env.delete(key);
          }
        }
      }
    );
  },
  disableColorIfNonIteractive: true,
  askFor: {
    // in the future once Deno.setRaw is stable, add a askFor.password using: https://github.com/caspervonb/deno-prompts
    line(question) {
      return prompt(question);
    },
    confirmation(question) {
      console.log(question);
      prompt("[use CTRL+C to quit, or press enter to continue]");
    },
    positiveIntegerOrZero(question) {
      while (1) {
        console.log(question);
        const answer = prompt(question);
        const asNumber = answer - 0;
        const isRealNumber = asNumber !== asNumber && asNumber * 2 !== asNumber;
        const isInteger = Math.round(asNumber) === asNumber;
        const isNonNegative = asNumber >= 0;
        if (isRealNumber && isInteger && isNonNegative) {
          return asNumber;
        } else {
          if (!isRealNumber) {
            console.log(`I don't think ${answer} is a real number, please try again`);
          }
          if (!isInteger) {
            console.log(`I don't think ${answer} is an integer, please try again`);
          }
          if (!isNonNegative) {
            console.log(`I don't think ${answer} is ≥ 0, please try again`);
          }
        }
      }
    },
    yesNo(question) {
      while (true) {
        let answer = prompt(question);
        const match = `${answer}`.match(/^ *(y|yes|n|no) *\n?$/i);
        if (match) {
          if (match[1][0] == "y" || match[1][0] == "Y") {
            return true;
          } else {
            return false;
          }
        } else {
          console.log("[ please respond with y/n, yes/no, or use CTRL+C to cancel ]");
        }
      }
    },
    oneOf(keyValues, question = "Please type one of the names from the list above") {
      if (keyValues instanceof Array) {
        keyValues = Object.fromEntries(keyValues.map((each2, index) => [index, each2]));
      }
      const keys = Object.keys(keyValues);
      if (keys.length == 0) {
        console.warn(`Tried to perform Console.askFor.oneOf(object) but the object was empty`);
        return void 0;
      }
      const longest = Math.max(keys.map((each2) => each2.length));
      while (true) {
        for (const [key, value] of Object.entries(keyValues)) {
          const valueAsString = indent({ string: `${value}
`, by: " ".repeat(longest + 2), noLead: true });
          console.log(``, `${key}: ${valueAsString}`);
        }
        let answer = prompt(question);
        if (keys.includes(answer)) {
          return keyValues[answer];
        } else {
          console.log("\n\n[ please pick one of the listed names, or use CTRL+C to cancel ]");
        }
      }
    }
  },
  get paths() {
    const spliter = OperatingSystem.commonChecks.isWindows ? ";" : ":";
    return Deno.env.get("PATH").split(spliter);
  },
  get reliableColorSupport() {
    if (colorSupportCache.includesAnsi != null) {
      return colorSupportCache;
    }
    let terminalSupport;
    if (!Deno.isatty()) {
      terminalSupport = {
        includesAnsi: false,
        includes256: false,
        includes16m: false
      };
    } else if ("NO_COLOR" in Console.env) {
      terminalSupport = {
        includesAnsi: false,
        includes256: false,
        includes16m: false
      };
    } else {
      if (OperatingSystem.commonChecks.isWindows || OperatingSystem.commonChecks.isWsl) {
        if (Deno.env.get("WT_SESSION")) {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: true
          };
        } else {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        }
      } else {
        if ("TERM_PROGRAM" in Console.env) {
          const version4 = Number.parseInt((Console.env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
          if (Console.env.TERM_PROGRAM == "iTerm.app") {
            if (version4 >= 3) {
              terminalSupport = {
                includesAnsi: true,
                includes256: true,
                includes16m: true
              };
            } else {
              terminalSupport = {
                includesAnsi: true,
                includes256: true,
                includes16m: false
              };
            }
          } else if (Console.env.TERM_PROGRAM == "Apple_Terminal") {
            terminalSupport = {
              includesAnsi: true,
              includes256: true,
              includes16m: false
            };
          }
        }
        if (Console.env.TERM === "dumb") {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        } else if ("CI" in Console.env) {
          terminalSupport = {
            includesAnsi: ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE", "DRONE"].some((sign) => sign in Console.env) || Console.env.CI_NAME === "codeship",
            includes256: false,
            includes16m: false
          };
        } else if (Console.env.COLORTERM === "truecolor") {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: true
          };
        } else if (/-256(color)?$/i.test(Console.env.TERM)) {
          terminalSupport = {
            includesAnsi: true,
            includes256: true,
            includes16m: false
          };
        } else if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Console.env.TERM)) {
          terminalSupport = {
            includesAnsi: true,
            includes256: false,
            includes16m: false
          };
        } else if ("COLORTERM" in Console.env) {
          terminalSupport = {
            includesAnsi: true,
            includes256: false,
            includes16m: false
          };
        } else {
          terminalSupport = {
            includesAnsi: false,
            includes256: false,
            includes16m: false
          };
        }
      }
    }
    colorSupportCache.includesAnsi = terminalSupport.includesAnsi;
    colorSupportCache.includes256 = terminalSupport.includes256;
    colorSupportCache.includes16m = terminalSupport.includes16m;
    return colorSupportCache;
  }
};

// https://deno.land/std@0.128.0/_util/os.ts
var osType2 = (() => {
  const { Deno: Deno5 } = globalThis;
  if (typeof Deno5?.build?.os === "string") {
    return Deno5.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win") ?? false) {
    return "windows";
  }
  return "linux";
})();
var isWindows2 = osType2 === "windows";

// https://deno.land/std@0.128.0/path/win32.ts
var win32_exports2 = {};
__export(win32_exports2, {
  basename: () => basename4,
  delimiter: () => delimiter4,
  dirname: () => dirname4,
  extname: () => extname4,
  format: () => format4,
  fromFileUrl: () => fromFileUrl4,
  isAbsolute: () => isAbsolute4,
  join: () => join6,
  normalize: () => normalize5,
  parse: () => parse6,
  relative: () => relative4,
  resolve: () => resolve4,
  sep: () => sep4,
  toFileUrl: () => toFileUrl4,
  toNamespacedPath: () => toNamespacedPath4
});

// https://deno.land/std@0.128.0/path/_constants.ts
var CHAR_UPPERCASE_A2 = 65;
var CHAR_LOWERCASE_A2 = 97;
var CHAR_UPPERCASE_Z2 = 90;
var CHAR_LOWERCASE_Z2 = 122;
var CHAR_DOT2 = 46;
var CHAR_FORWARD_SLASH2 = 47;
var CHAR_BACKWARD_SLASH2 = 92;
var CHAR_COLON2 = 58;
var CHAR_QUESTION_MARK2 = 63;

// https://deno.land/std@0.128.0/path/_util.ts
function assertPath2(path7) {
  if (typeof path7 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path7)}`
    );
  }
}
function isPosixPathSeparator2(code) {
  return code === CHAR_FORWARD_SLASH2;
}
function isPathSeparator2(code) {
  return isPosixPathSeparator2(code) || code === CHAR_BACKWARD_SLASH2;
}
function isWindowsDeviceRoot2(code) {
  return code >= CHAR_LOWERCASE_A2 && code <= CHAR_LOWERCASE_Z2 || code >= CHAR_UPPERCASE_A2 && code <= CHAR_UPPERCASE_Z2;
}
function normalizeString2(path7, allowAboveRoot, separator, isPathSeparator5) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code;
  for (let i7 = 0, len = path7.length; i7 <= len; ++i7) {
    if (i7 < len) code = path7.charCodeAt(i7);
    else if (isPathSeparator5(code)) break;
    else code = CHAR_FORWARD_SLASH2;
    if (isPathSeparator5(code)) {
      if (lastSlash === i7 - 1 || dots === 1) {
      } else if (lastSlash !== i7 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT2 || res.charCodeAt(res.length - 2) !== CHAR_DOT2) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i7;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i7;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) res += `${separator}..`;
          else res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) res += separator + path7.slice(lastSlash + 1, i7);
        else res = path7.slice(lastSlash + 1, i7);
        lastSegmentLength = i7 - lastSlash - 1;
      }
      lastSlash = i7;
      dots = 0;
    } else if (code === CHAR_DOT2 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format2(sep10, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir) return base;
  if (dir === pathObject.root) return dir + base;
  return dir + sep10 + base;
}
var WHITESPACE_ENCODINGS2 = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace2(string) {
  return string.replaceAll(/[\s]/g, (c12) => {
    return WHITESPACE_ENCODINGS2[c12] ?? c12;
  });
}

// https://deno.land/std@0.128.0/_util/assert.ts
var DenoStdInternalError3 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert3(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError3(msg);
  }
}

// https://deno.land/std@0.128.0/path/win32.ts
var sep4 = "\\";
var delimiter4 = ";";
function resolve4(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i7 = pathSegments.length - 1; i7 >= -1; i7--) {
    let path7;
    const { Deno: Deno5 } = globalThis;
    if (i7 >= 0) {
      path7 = pathSegments[i7];
    } else if (!resolvedDevice) {
      if (typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path7 = Deno5.cwd();
    } else {
      if (typeof Deno5?.env?.get !== "function" || typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path7 = Deno5.cwd();
      if (path7 === void 0 || path7.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path7 = `${resolvedDevice}\\`;
      }
    }
    assertPath2(path7);
    const len = path7.length;
    if (len === 0) continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute10 = false;
    const code = path7.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator2(code)) {
        isAbsolute10 = true;
        if (isPathSeparator2(path7.charCodeAt(1))) {
          let j3 = 2;
          let last = j3;
          for (; j3 < len; ++j3) {
            if (isPathSeparator2(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            const firstPart = path7.slice(last, j3);
            last = j3;
            for (; j3 < len; ++j3) {
              if (!isPathSeparator2(path7.charCodeAt(j3))) break;
            }
            if (j3 < len && j3 !== last) {
              last = j3;
              for (; j3 < len; ++j3) {
                if (isPathSeparator2(path7.charCodeAt(j3))) break;
              }
              if (j3 === len) {
                device = `\\\\${firstPart}\\${path7.slice(last)}`;
                rootEnd = j3;
              } else if (j3 !== last) {
                device = `\\\\${firstPart}\\${path7.slice(last, j3)}`;
                rootEnd = j3;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot2(code)) {
        if (path7.charCodeAt(1) === CHAR_COLON2) {
          device = path7.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator2(path7.charCodeAt(2))) {
              isAbsolute10 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator2(code)) {
      rootEnd = 1;
      isAbsolute10 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path7.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute10;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0) break;
  }
  resolvedTail = normalizeString2(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator2
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize5(path7) {
  assertPath2(path7);
  const len = path7.length;
  if (len === 0) return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute10 = false;
  const code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator2(code)) {
      isAbsolute10 = true;
      if (isPathSeparator2(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator2(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          const firstPart = path7.slice(last, j3);
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator2(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator2(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              return `\\\\${firstPart}\\${path7.slice(last)}\\`;
            } else if (j3 !== last) {
              device = `\\\\${firstPart}\\${path7.slice(last, j3)}`;
              rootEnd = j3;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot2(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON2) {
        device = path7.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator2(path7.charCodeAt(2))) {
            isAbsolute10 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator2(code)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString2(
      path7.slice(rootEnd),
      !isAbsolute10,
      "\\",
      isPathSeparator2
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute10) tail = ".";
  if (tail.length > 0 && isPathSeparator2(path7.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute10) {
      if (tail.length > 0) return `\\${tail}`;
      else return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute10) {
    if (tail.length > 0) return `${device}\\${tail}`;
    else return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute4(path7) {
  assertPath2(path7);
  const len = path7.length;
  if (len === 0) return false;
  const code = path7.charCodeAt(0);
  if (isPathSeparator2(code)) {
    return true;
  } else if (isWindowsDeviceRoot2(code)) {
    if (len > 2 && path7.charCodeAt(1) === CHAR_COLON2) {
      if (isPathSeparator2(path7.charCodeAt(2))) return true;
    }
  }
  return false;
}
function join6(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0) return ".";
  let joined;
  let firstPart = null;
  for (let i7 = 0; i7 < pathsCount; ++i7) {
    const path7 = paths[i7];
    assertPath2(path7);
    if (path7.length > 0) {
      if (joined === void 0) joined = firstPart = path7;
      else joined += `\\${path7}`;
    }
  }
  if (joined === void 0) return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert3(firstPart != null);
  if (isPathSeparator2(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator2(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator2(firstPart.charCodeAt(2))) ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator2(joined.charCodeAt(slashCount))) break;
    }
    if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize5(joined);
}
function relative4(from2, to) {
  assertPath2(from2);
  assertPath2(to);
  if (from2 === to) return "";
  const fromOrig = resolve4(from2);
  const toOrig = resolve4(to);
  if (fromOrig === toOrig) return "";
  from2 = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from2 === to) return "";
  let fromStart = 0;
  let fromEnd = from2.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from2.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH2) break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from2.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH2) break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH2) break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH2) break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i7 = 0;
  for (; i7 <= length; ++i7) {
    if (i7 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i7) === CHAR_BACKWARD_SLASH2) {
          return toOrig.slice(toStart + i7 + 1);
        } else if (i7 === 2) {
          return toOrig.slice(toStart + i7);
        }
      }
      if (fromLen > length) {
        if (from2.charCodeAt(fromStart + i7) === CHAR_BACKWARD_SLASH2) {
          lastCommonSep = i7;
        } else if (i7 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from2.charCodeAt(fromStart + i7);
    const toCode = to.charCodeAt(toStart + i7);
    if (fromCode !== toCode) break;
    else if (fromCode === CHAR_BACKWARD_SLASH2) lastCommonSep = i7;
  }
  if (i7 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1) lastCommonSep = 0;
  for (i7 = fromStart + lastCommonSep + 1; i7 <= fromEnd; ++i7) {
    if (i7 === fromEnd || from2.charCodeAt(i7) === CHAR_BACKWARD_SLASH2) {
      if (out.length === 0) out += "..";
      else out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH2) ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath4(path7) {
  if (typeof path7 !== "string") return path7;
  if (path7.length === 0) return "";
  const resolvedPath = resolve4(path7);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH2) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH2) {
        const code = resolvedPath.charCodeAt(2);
        if (code !== CHAR_QUESTION_MARK2 && code !== CHAR_DOT2) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot2(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON2 && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH2) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path7;
}
function dirname4(path7) {
  assertPath2(path7);
  const len = path7.length;
  if (len === 0) return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator2(code)) {
      rootEnd = offset = 1;
      if (isPathSeparator2(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator2(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator2(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator2(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              return path7;
            }
            if (j3 !== last) {
              rootEnd = offset = j3 + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot2(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON2) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator2(path7.charCodeAt(2))) rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator2(code)) {
    return path7;
  }
  for (let i7 = len - 1; i7 >= offset; --i7) {
    if (isPathSeparator2(path7.charCodeAt(i7))) {
      if (!matchedSlash) {
        end = i7;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1) return ".";
    else end = rootEnd;
  }
  return path7.slice(0, end);
}
function basename4(path7, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath2(path7);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i7;
  if (path7.length >= 2) {
    const drive = path7.charCodeAt(0);
    if (isWindowsDeviceRoot2(drive)) {
      if (path7.charCodeAt(1) === CHAR_COLON2) start = 2;
    }
  }
  if (ext !== void 0 && ext.length > 0 && ext.length <= path7.length) {
    if (ext.length === path7.length && ext === path7) return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i7 = path7.length - 1; i7 >= start; --i7) {
      const code = path7.charCodeAt(i7);
      if (isPathSeparator2(code)) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i7 + 1;
        }
        if (extIdx >= 0) {
          if (code === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i7;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end) end = firstNonSlashEnd;
    else if (end === -1) end = path7.length;
    return path7.slice(start, end);
  } else {
    for (i7 = path7.length - 1; i7 >= start; --i7) {
      if (isPathSeparator2(path7.charCodeAt(i7))) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i7 + 1;
      }
    }
    if (end === -1) return "";
    return path7.slice(start, end);
  }
}
function extname4(path7) {
  assertPath2(path7);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path7.length >= 2 && path7.charCodeAt(1) === CHAR_COLON2 && isWindowsDeviceRoot2(path7.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i7 = path7.length - 1; i7 >= start; --i7) {
    const code = path7.charCodeAt(i7);
    if (isPathSeparator2(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT2) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path7.slice(startDot, end);
}
function format4(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format2("\\", pathObject);
}
function parse6(path7) {
  assertPath2(path7);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path7.length;
  if (len === 0) return ret;
  let rootEnd = 0;
  let code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator2(code)) {
      rootEnd = 1;
      if (isPathSeparator2(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator2(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator2(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator2(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              rootEnd = j3;
            } else if (j3 !== last) {
              rootEnd = j3 + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot2(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON2) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator2(path7.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path7;
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path7;
          return ret;
        }
      }
    }
  } else if (isPathSeparator2(code)) {
    ret.root = ret.dir = path7;
    return ret;
  }
  if (rootEnd > 0) ret.root = path7.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i7 = path7.length - 1;
  let preDotState = 0;
  for (; i7 >= rootEnd; --i7) {
    code = path7.charCodeAt(i7);
    if (isPathSeparator2(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT2) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path7.slice(startPart, end);
    }
  } else {
    ret.name = path7.slice(startPart, startDot);
    ret.base = path7.slice(startPart, end);
    ret.ext = path7.slice(startDot, end);
  }
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path7.slice(0, startPart - 1);
  } else ret.dir = ret.root;
  return ret;
}
function fromFileUrl4(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path7 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path7 = `\\\\${url.hostname}${path7}`;
  }
  return path7;
}
function toFileUrl4(path7) {
  if (!isAbsolute4(path7)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname2, pathname] = path7.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace2(pathname.replace(/%/g, "%25"));
  if (hostname2 != null && hostname2 != "localhost") {
    url.hostname = hostname2;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.128.0/path/posix.ts
var posix_exports2 = {};
__export(posix_exports2, {
  basename: () => basename5,
  delimiter: () => delimiter5,
  dirname: () => dirname5,
  extname: () => extname5,
  format: () => format5,
  fromFileUrl: () => fromFileUrl5,
  isAbsolute: () => isAbsolute5,
  join: () => join7,
  normalize: () => normalize6,
  parse: () => parse7,
  relative: () => relative5,
  resolve: () => resolve5,
  sep: () => sep5,
  toFileUrl: () => toFileUrl5,
  toNamespacedPath: () => toNamespacedPath5
});
var sep5 = "/";
var delimiter5 = ":";
function resolve5(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i7 = pathSegments.length - 1; i7 >= -1 && !resolvedAbsolute; i7--) {
    let path7;
    if (i7 >= 0) path7 = pathSegments[i7];
    else {
      const { Deno: Deno5 } = globalThis;
      if (typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path7 = Deno5.cwd();
    }
    assertPath2(path7);
    if (path7.length === 0) {
      continue;
    }
    resolvedPath = `${path7}/${resolvedPath}`;
    resolvedAbsolute = path7.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  }
  resolvedPath = normalizeString2(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator2
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0) return `/${resolvedPath}`;
    else return "/";
  } else if (resolvedPath.length > 0) return resolvedPath;
  else return ".";
}
function normalize6(path7) {
  assertPath2(path7);
  if (path7.length === 0) return ".";
  const isAbsolute10 = path7.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  const trailingSeparator = path7.charCodeAt(path7.length - 1) === CHAR_FORWARD_SLASH2;
  path7 = normalizeString2(path7, !isAbsolute10, "/", isPosixPathSeparator2);
  if (path7.length === 0 && !isAbsolute10) path7 = ".";
  if (path7.length > 0 && trailingSeparator) path7 += "/";
  if (isAbsolute10) return `/${path7}`;
  return path7;
}
function isAbsolute5(path7) {
  assertPath2(path7);
  return path7.length > 0 && path7.charCodeAt(0) === CHAR_FORWARD_SLASH2;
}
function join7(...paths) {
  if (paths.length === 0) return ".";
  let joined;
  for (let i7 = 0, len = paths.length; i7 < len; ++i7) {
    const path7 = paths[i7];
    assertPath2(path7);
    if (path7.length > 0) {
      if (!joined) joined = path7;
      else joined += `/${path7}`;
    }
  }
  if (!joined) return ".";
  return normalize6(joined);
}
function relative5(from2, to) {
  assertPath2(from2);
  assertPath2(to);
  if (from2 === to) return "";
  from2 = resolve5(from2);
  to = resolve5(to);
  if (from2 === to) return "";
  let fromStart = 1;
  const fromEnd = from2.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from2.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH2) break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH2) break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i7 = 0;
  for (; i7 <= length; ++i7) {
    if (i7 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i7) === CHAR_FORWARD_SLASH2) {
          return to.slice(toStart + i7 + 1);
        } else if (i7 === 0) {
          return to.slice(toStart + i7);
        }
      } else if (fromLen > length) {
        if (from2.charCodeAt(fromStart + i7) === CHAR_FORWARD_SLASH2) {
          lastCommonSep = i7;
        } else if (i7 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from2.charCodeAt(fromStart + i7);
    const toCode = to.charCodeAt(toStart + i7);
    if (fromCode !== toCode) break;
    else if (fromCode === CHAR_FORWARD_SLASH2) lastCommonSep = i7;
  }
  let out = "";
  for (i7 = fromStart + lastCommonSep + 1; i7 <= fromEnd; ++i7) {
    if (i7 === fromEnd || from2.charCodeAt(i7) === CHAR_FORWARD_SLASH2) {
      if (out.length === 0) out += "..";
      else out += "/..";
    }
  }
  if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH2) ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath5(path7) {
  return path7;
}
function dirname5(path7) {
  assertPath2(path7);
  if (path7.length === 0) return ".";
  const hasRoot = path7.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  let end = -1;
  let matchedSlash = true;
  for (let i7 = path7.length - 1; i7 >= 1; --i7) {
    if (path7.charCodeAt(i7) === CHAR_FORWARD_SLASH2) {
      if (!matchedSlash) {
        end = i7;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) return hasRoot ? "/" : ".";
  if (hasRoot && end === 1) return "//";
  return path7.slice(0, end);
}
function basename5(path7, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath2(path7);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i7;
  if (ext !== void 0 && ext.length > 0 && ext.length <= path7.length) {
    if (ext.length === path7.length && ext === path7) return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i7 = path7.length - 1; i7 >= 0; --i7) {
      const code = path7.charCodeAt(i7);
      if (code === CHAR_FORWARD_SLASH2) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i7 + 1;
        }
        if (extIdx >= 0) {
          if (code === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i7;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end) end = firstNonSlashEnd;
    else if (end === -1) end = path7.length;
    return path7.slice(start, end);
  } else {
    for (i7 = path7.length - 1; i7 >= 0; --i7) {
      if (path7.charCodeAt(i7) === CHAR_FORWARD_SLASH2) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i7 + 1;
      }
    }
    if (end === -1) return "";
    return path7.slice(start, end);
  }
}
function extname5(path7) {
  assertPath2(path7);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i7 = path7.length - 1; i7 >= 0; --i7) {
    const code = path7.charCodeAt(i7);
    if (code === CHAR_FORWARD_SLASH2) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT2) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path7.slice(startDot, end);
}
function format5(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format2("/", pathObject);
}
function parse7(path7) {
  assertPath2(path7);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path7.length === 0) return ret;
  const isAbsolute10 = path7.charCodeAt(0) === CHAR_FORWARD_SLASH2;
  let start;
  if (isAbsolute10) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i7 = path7.length - 1;
  let preDotState = 0;
  for (; i7 >= start; --i7) {
    const code = path7.charCodeAt(i7);
    if (code === CHAR_FORWARD_SLASH2) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT2) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute10) {
        ret.base = ret.name = path7.slice(1, end);
      } else {
        ret.base = ret.name = path7.slice(startPart, end);
      }
    }
  } else {
    if (startPart === 0 && isAbsolute10) {
      ret.name = path7.slice(1, startDot);
      ret.base = path7.slice(1, end);
    } else {
      ret.name = path7.slice(startPart, startDot);
      ret.base = path7.slice(startPart, end);
    }
    ret.ext = path7.slice(startDot, end);
  }
  if (startPart > 0) ret.dir = path7.slice(0, startPart - 1);
  else if (isAbsolute10) ret.dir = "/";
  return ret;
}
function fromFileUrl5(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl5(path7) {
  if (!isAbsolute5(path7)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace2(
    path7.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.128.0/path/glob.ts
var path3 = isWindows2 ? win32_exports2 : posix_exports2;
var { join: join8, normalize: normalize7 } = path3;

// https://deno.land/std@0.128.0/path/mod.ts
var path4 = isWindows2 ? win32_exports2 : posix_exports2;
var {
  basename: basename6,
  delimiter: delimiter6,
  dirname: dirname6,
  extname: extname6,
  format: format6,
  fromFileUrl: fromFileUrl6,
  isAbsolute: isAbsolute6,
  join: join9,
  normalize: normalize8,
  parse: parse8,
  relative: relative6,
  resolve: resolve6,
  sep: sep6,
  toFileUrl: toFileUrl6,
  toNamespacedPath: toNamespacedPath6
} = path4;

// https://deno.land/std@0.133.0/_util/os.ts
var osType3 = (() => {
  const { Deno: Deno5 } = globalThis;
  if (typeof Deno5?.build?.os === "string") {
    return Deno5.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win") ?? false) {
    return "windows";
  }
  return "linux";
})();
var isWindows3 = osType3 === "windows";

// https://deno.land/std@0.133.0/path/win32.ts
var win32_exports3 = {};
__export(win32_exports3, {
  basename: () => basename7,
  delimiter: () => delimiter7,
  dirname: () => dirname7,
  extname: () => extname7,
  format: () => format7,
  fromFileUrl: () => fromFileUrl7,
  isAbsolute: () => isAbsolute7,
  join: () => join10,
  normalize: () => normalize9,
  parse: () => parse9,
  relative: () => relative7,
  resolve: () => resolve7,
  sep: () => sep7,
  toFileUrl: () => toFileUrl7,
  toNamespacedPath: () => toNamespacedPath7
});

// https://deno.land/std@0.133.0/path/_constants.ts
var CHAR_UPPERCASE_A3 = 65;
var CHAR_LOWERCASE_A3 = 97;
var CHAR_UPPERCASE_Z3 = 90;
var CHAR_LOWERCASE_Z3 = 122;
var CHAR_DOT3 = 46;
var CHAR_FORWARD_SLASH3 = 47;
var CHAR_BACKWARD_SLASH3 = 92;
var CHAR_COLON3 = 58;
var CHAR_QUESTION_MARK3 = 63;

// https://deno.land/std@0.133.0/path/_util.ts
function assertPath3(path7) {
  if (typeof path7 !== "string") {
    throw new TypeError(
      `Path must be a string. Received ${JSON.stringify(path7)}`
    );
  }
}
function isPosixPathSeparator3(code) {
  return code === CHAR_FORWARD_SLASH3;
}
function isPathSeparator3(code) {
  return isPosixPathSeparator3(code) || code === CHAR_BACKWARD_SLASH3;
}
function isWindowsDeviceRoot3(code) {
  return code >= CHAR_LOWERCASE_A3 && code <= CHAR_LOWERCASE_Z3 || code >= CHAR_UPPERCASE_A3 && code <= CHAR_UPPERCASE_Z3;
}
function normalizeString3(path7, allowAboveRoot, separator, isPathSeparator5) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code;
  for (let i7 = 0, len = path7.length; i7 <= len; ++i7) {
    if (i7 < len) code = path7.charCodeAt(i7);
    else if (isPathSeparator5(code)) break;
    else code = CHAR_FORWARD_SLASH3;
    if (isPathSeparator5(code)) {
      if (lastSlash === i7 - 1 || dots === 1) {
      } else if (lastSlash !== i7 - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT3 || res.charCodeAt(res.length - 2) !== CHAR_DOT3) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i7;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i7;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) res += `${separator}..`;
          else res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0) res += separator + path7.slice(lastSlash + 1, i7);
        else res = path7.slice(lastSlash + 1, i7);
        lastSegmentLength = i7 - lastSlash - 1;
      }
      lastSlash = i7;
      dots = 0;
    } else if (code === CHAR_DOT3 && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format3(sep10, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir) return base;
  if (dir === pathObject.root) return dir + base;
  return dir + sep10 + base;
}
var WHITESPACE_ENCODINGS3 = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace3(string) {
  return string.replaceAll(/[\s]/g, (c12) => {
    return WHITESPACE_ENCODINGS3[c12] ?? c12;
  });
}

// https://deno.land/std@0.133.0/_util/assert.ts
var DenoStdInternalError4 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert4(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError4(msg);
  }
}

// https://deno.land/std@0.133.0/path/win32.ts
var sep7 = "\\";
var delimiter7 = ";";
function resolve7(...pathSegments) {
  let resolvedDevice = "";
  let resolvedTail = "";
  let resolvedAbsolute = false;
  for (let i7 = pathSegments.length - 1; i7 >= -1; i7--) {
    let path7;
    const { Deno: Deno5 } = globalThis;
    if (i7 >= 0) {
      path7 = pathSegments[i7];
    } else if (!resolvedDevice) {
      if (typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a drive-letter-less path without a CWD.");
      }
      path7 = Deno5.cwd();
    } else {
      if (typeof Deno5?.env?.get !== "function" || typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path7 = Deno5.cwd();
      if (path7 === void 0 || path7.slice(0, 3).toLowerCase() !== `${resolvedDevice.toLowerCase()}\\`) {
        path7 = `${resolvedDevice}\\`;
      }
    }
    assertPath3(path7);
    const len = path7.length;
    if (len === 0) continue;
    let rootEnd = 0;
    let device = "";
    let isAbsolute10 = false;
    const code = path7.charCodeAt(0);
    if (len > 1) {
      if (isPathSeparator3(code)) {
        isAbsolute10 = true;
        if (isPathSeparator3(path7.charCodeAt(1))) {
          let j3 = 2;
          let last = j3;
          for (; j3 < len; ++j3) {
            if (isPathSeparator3(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            const firstPart = path7.slice(last, j3);
            last = j3;
            for (; j3 < len; ++j3) {
              if (!isPathSeparator3(path7.charCodeAt(j3))) break;
            }
            if (j3 < len && j3 !== last) {
              last = j3;
              for (; j3 < len; ++j3) {
                if (isPathSeparator3(path7.charCodeAt(j3))) break;
              }
              if (j3 === len) {
                device = `\\\\${firstPart}\\${path7.slice(last)}`;
                rootEnd = j3;
              } else if (j3 !== last) {
                device = `\\\\${firstPart}\\${path7.slice(last, j3)}`;
                rootEnd = j3;
              }
            }
          }
        } else {
          rootEnd = 1;
        }
      } else if (isWindowsDeviceRoot3(code)) {
        if (path7.charCodeAt(1) === CHAR_COLON3) {
          device = path7.slice(0, 2);
          rootEnd = 2;
          if (len > 2) {
            if (isPathSeparator3(path7.charCodeAt(2))) {
              isAbsolute10 = true;
              rootEnd = 3;
            }
          }
        }
      }
    } else if (isPathSeparator3(code)) {
      rootEnd = 1;
      isAbsolute10 = true;
    }
    if (device.length > 0 && resolvedDevice.length > 0 && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
      continue;
    }
    if (resolvedDevice.length === 0 && device.length > 0) {
      resolvedDevice = device;
    }
    if (!resolvedAbsolute) {
      resolvedTail = `${path7.slice(rootEnd)}\\${resolvedTail}`;
      resolvedAbsolute = isAbsolute10;
    }
    if (resolvedAbsolute && resolvedDevice.length > 0) break;
  }
  resolvedTail = normalizeString3(
    resolvedTail,
    !resolvedAbsolute,
    "\\",
    isPathSeparator3
  );
  return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
}
function normalize9(path7) {
  assertPath3(path7);
  const len = path7.length;
  if (len === 0) return ".";
  let rootEnd = 0;
  let device;
  let isAbsolute10 = false;
  const code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator3(code)) {
      isAbsolute10 = true;
      if (isPathSeparator3(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator3(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          const firstPart = path7.slice(last, j3);
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator3(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator3(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              return `\\\\${firstPart}\\${path7.slice(last)}\\`;
            } else if (j3 !== last) {
              device = `\\\\${firstPart}\\${path7.slice(last, j3)}`;
              rootEnd = j3;
            }
          }
        }
      } else {
        rootEnd = 1;
      }
    } else if (isWindowsDeviceRoot3(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON3) {
        device = path7.slice(0, 2);
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator3(path7.charCodeAt(2))) {
            isAbsolute10 = true;
            rootEnd = 3;
          }
        }
      }
    }
  } else if (isPathSeparator3(code)) {
    return "\\";
  }
  let tail;
  if (rootEnd < len) {
    tail = normalizeString3(
      path7.slice(rootEnd),
      !isAbsolute10,
      "\\",
      isPathSeparator3
    );
  } else {
    tail = "";
  }
  if (tail.length === 0 && !isAbsolute10) tail = ".";
  if (tail.length > 0 && isPathSeparator3(path7.charCodeAt(len - 1))) {
    tail += "\\";
  }
  if (device === void 0) {
    if (isAbsolute10) {
      if (tail.length > 0) return `\\${tail}`;
      else return "\\";
    } else if (tail.length > 0) {
      return tail;
    } else {
      return "";
    }
  } else if (isAbsolute10) {
    if (tail.length > 0) return `${device}\\${tail}`;
    else return `${device}\\`;
  } else if (tail.length > 0) {
    return device + tail;
  } else {
    return device;
  }
}
function isAbsolute7(path7) {
  assertPath3(path7);
  const len = path7.length;
  if (len === 0) return false;
  const code = path7.charCodeAt(0);
  if (isPathSeparator3(code)) {
    return true;
  } else if (isWindowsDeviceRoot3(code)) {
    if (len > 2 && path7.charCodeAt(1) === CHAR_COLON3) {
      if (isPathSeparator3(path7.charCodeAt(2))) return true;
    }
  }
  return false;
}
function join10(...paths) {
  const pathsCount = paths.length;
  if (pathsCount === 0) return ".";
  let joined;
  let firstPart = null;
  for (let i7 = 0; i7 < pathsCount; ++i7) {
    const path7 = paths[i7];
    assertPath3(path7);
    if (path7.length > 0) {
      if (joined === void 0) joined = firstPart = path7;
      else joined += `\\${path7}`;
    }
  }
  if (joined === void 0) return ".";
  let needsReplace = true;
  let slashCount = 0;
  assert4(firstPart != null);
  if (isPathSeparator3(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator3(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator3(firstPart.charCodeAt(2))) ++slashCount;
          else {
            needsReplace = false;
          }
        }
      }
    }
  }
  if (needsReplace) {
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator3(joined.charCodeAt(slashCount))) break;
    }
    if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
  }
  return normalize9(joined);
}
function relative7(from2, to) {
  assertPath3(from2);
  assertPath3(to);
  if (from2 === to) return "";
  const fromOrig = resolve7(from2);
  const toOrig = resolve7(to);
  if (fromOrig === toOrig) return "";
  from2 = fromOrig.toLowerCase();
  to = toOrig.toLowerCase();
  if (from2 === to) return "";
  let fromStart = 0;
  let fromEnd = from2.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from2.charCodeAt(fromStart) !== CHAR_BACKWARD_SLASH3) break;
  }
  for (; fromEnd - 1 > fromStart; --fromEnd) {
    if (from2.charCodeAt(fromEnd - 1) !== CHAR_BACKWARD_SLASH3) break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 0;
  let toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_BACKWARD_SLASH3) break;
  }
  for (; toEnd - 1 > toStart; --toEnd) {
    if (to.charCodeAt(toEnd - 1) !== CHAR_BACKWARD_SLASH3) break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i7 = 0;
  for (; i7 <= length; ++i7) {
    if (i7 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i7) === CHAR_BACKWARD_SLASH3) {
          return toOrig.slice(toStart + i7 + 1);
        } else if (i7 === 2) {
          return toOrig.slice(toStart + i7);
        }
      }
      if (fromLen > length) {
        if (from2.charCodeAt(fromStart + i7) === CHAR_BACKWARD_SLASH3) {
          lastCommonSep = i7;
        } else if (i7 === 2) {
          lastCommonSep = 3;
        }
      }
      break;
    }
    const fromCode = from2.charCodeAt(fromStart + i7);
    const toCode = to.charCodeAt(toStart + i7);
    if (fromCode !== toCode) break;
    else if (fromCode === CHAR_BACKWARD_SLASH3) lastCommonSep = i7;
  }
  if (i7 !== length && lastCommonSep === -1) {
    return toOrig;
  }
  let out = "";
  if (lastCommonSep === -1) lastCommonSep = 0;
  for (i7 = fromStart + lastCommonSep + 1; i7 <= fromEnd; ++i7) {
    if (i7 === fromEnd || from2.charCodeAt(i7) === CHAR_BACKWARD_SLASH3) {
      if (out.length === 0) out += "..";
      else out += "\\..";
    }
  }
  if (out.length > 0) {
    return out + toOrig.slice(toStart + lastCommonSep, toEnd);
  } else {
    toStart += lastCommonSep;
    if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH3) ++toStart;
    return toOrig.slice(toStart, toEnd);
  }
}
function toNamespacedPath7(path7) {
  if (typeof path7 !== "string") return path7;
  if (path7.length === 0) return "";
  const resolvedPath = resolve7(path7);
  if (resolvedPath.length >= 3) {
    if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH3) {
      if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH3) {
        const code = resolvedPath.charCodeAt(2);
        if (code !== CHAR_QUESTION_MARK3 && code !== CHAR_DOT3) {
          return `\\\\?\\UNC\\${resolvedPath.slice(2)}`;
        }
      }
    } else if (isWindowsDeviceRoot3(resolvedPath.charCodeAt(0))) {
      if (resolvedPath.charCodeAt(1) === CHAR_COLON3 && resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH3) {
        return `\\\\?\\${resolvedPath}`;
      }
    }
  }
  return path7;
}
function dirname7(path7) {
  assertPath3(path7);
  const len = path7.length;
  if (len === 0) return ".";
  let rootEnd = -1;
  let end = -1;
  let matchedSlash = true;
  let offset = 0;
  const code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator3(code)) {
      rootEnd = offset = 1;
      if (isPathSeparator3(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator3(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator3(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator3(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              return path7;
            }
            if (j3 !== last) {
              rootEnd = offset = j3 + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot3(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON3) {
        rootEnd = offset = 2;
        if (len > 2) {
          if (isPathSeparator3(path7.charCodeAt(2))) rootEnd = offset = 3;
        }
      }
    }
  } else if (isPathSeparator3(code)) {
    return path7;
  }
  for (let i7 = len - 1; i7 >= offset; --i7) {
    if (isPathSeparator3(path7.charCodeAt(i7))) {
      if (!matchedSlash) {
        end = i7;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) {
    if (rootEnd === -1) return ".";
    else end = rootEnd;
  }
  return path7.slice(0, end);
}
function basename7(path7, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath3(path7);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i7;
  if (path7.length >= 2) {
    const drive = path7.charCodeAt(0);
    if (isWindowsDeviceRoot3(drive)) {
      if (path7.charCodeAt(1) === CHAR_COLON3) start = 2;
    }
  }
  if (ext !== void 0 && ext.length > 0 && ext.length <= path7.length) {
    if (ext.length === path7.length && ext === path7) return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i7 = path7.length - 1; i7 >= start; --i7) {
      const code = path7.charCodeAt(i7);
      if (isPathSeparator3(code)) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i7 + 1;
        }
        if (extIdx >= 0) {
          if (code === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i7;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end) end = firstNonSlashEnd;
    else if (end === -1) end = path7.length;
    return path7.slice(start, end);
  } else {
    for (i7 = path7.length - 1; i7 >= start; --i7) {
      if (isPathSeparator3(path7.charCodeAt(i7))) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i7 + 1;
      }
    }
    if (end === -1) return "";
    return path7.slice(start, end);
  }
}
function extname7(path7) {
  assertPath3(path7);
  let start = 0;
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  if (path7.length >= 2 && path7.charCodeAt(1) === CHAR_COLON3 && isWindowsDeviceRoot3(path7.charCodeAt(0))) {
    start = startPart = 2;
  }
  for (let i7 = path7.length - 1; i7 >= start; --i7) {
    const code = path7.charCodeAt(i7);
    if (isPathSeparator3(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT3) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path7.slice(startDot, end);
}
function format7(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format3("\\", pathObject);
}
function parse9(path7) {
  assertPath3(path7);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  const len = path7.length;
  if (len === 0) return ret;
  let rootEnd = 0;
  let code = path7.charCodeAt(0);
  if (len > 1) {
    if (isPathSeparator3(code)) {
      rootEnd = 1;
      if (isPathSeparator3(path7.charCodeAt(1))) {
        let j3 = 2;
        let last = j3;
        for (; j3 < len; ++j3) {
          if (isPathSeparator3(path7.charCodeAt(j3))) break;
        }
        if (j3 < len && j3 !== last) {
          last = j3;
          for (; j3 < len; ++j3) {
            if (!isPathSeparator3(path7.charCodeAt(j3))) break;
          }
          if (j3 < len && j3 !== last) {
            last = j3;
            for (; j3 < len; ++j3) {
              if (isPathSeparator3(path7.charCodeAt(j3))) break;
            }
            if (j3 === len) {
              rootEnd = j3;
            } else if (j3 !== last) {
              rootEnd = j3 + 1;
            }
          }
        }
      }
    } else if (isWindowsDeviceRoot3(code)) {
      if (path7.charCodeAt(1) === CHAR_COLON3) {
        rootEnd = 2;
        if (len > 2) {
          if (isPathSeparator3(path7.charCodeAt(2))) {
            if (len === 3) {
              ret.root = ret.dir = path7;
              return ret;
            }
            rootEnd = 3;
          }
        } else {
          ret.root = ret.dir = path7;
          return ret;
        }
      }
    }
  } else if (isPathSeparator3(code)) {
    ret.root = ret.dir = path7;
    return ret;
  }
  if (rootEnd > 0) ret.root = path7.slice(0, rootEnd);
  let startDot = -1;
  let startPart = rootEnd;
  let end = -1;
  let matchedSlash = true;
  let i7 = path7.length - 1;
  let preDotState = 0;
  for (; i7 >= rootEnd; --i7) {
    code = path7.charCodeAt(i7);
    if (isPathSeparator3(code)) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT3) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      ret.base = ret.name = path7.slice(startPart, end);
    }
  } else {
    ret.name = path7.slice(startPart, startDot);
    ret.base = path7.slice(startPart, end);
    ret.ext = path7.slice(startDot, end);
  }
  if (startPart > 0 && startPart !== rootEnd) {
    ret.dir = path7.slice(0, startPart - 1);
  } else ret.dir = ret.root;
  return ret;
}
function fromFileUrl7(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  let path7 = decodeURIComponent(
    url.pathname.replace(/\//g, "\\").replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  ).replace(/^\\*([A-Za-z]:)(\\|$)/, "$1\\");
  if (url.hostname != "") {
    path7 = `\\\\${url.hostname}${path7}`;
  }
  return path7;
}
function toFileUrl7(path7) {
  if (!isAbsolute7(path7)) {
    throw new TypeError("Must be an absolute path.");
  }
  const [, hostname2, pathname] = path7.match(
    /^(?:[/\\]{2}([^/\\]+)(?=[/\\](?:[^/\\]|$)))?(.*)/
  );
  const url = new URL("file:///");
  url.pathname = encodeWhitespace3(pathname.replace(/%/g, "%25"));
  if (hostname2 != null && hostname2 != "localhost") {
    url.hostname = hostname2;
    if (!url.hostname) {
      throw new TypeError("Invalid hostname.");
    }
  }
  return url;
}

// https://deno.land/std@0.133.0/path/posix.ts
var posix_exports3 = {};
__export(posix_exports3, {
  basename: () => basename8,
  delimiter: () => delimiter8,
  dirname: () => dirname8,
  extname: () => extname8,
  format: () => format8,
  fromFileUrl: () => fromFileUrl8,
  isAbsolute: () => isAbsolute8,
  join: () => join11,
  normalize: () => normalize10,
  parse: () => parse10,
  relative: () => relative8,
  resolve: () => resolve8,
  sep: () => sep8,
  toFileUrl: () => toFileUrl8,
  toNamespacedPath: () => toNamespacedPath8
});
var sep8 = "/";
var delimiter8 = ":";
function resolve8(...pathSegments) {
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i7 = pathSegments.length - 1; i7 >= -1 && !resolvedAbsolute; i7--) {
    let path7;
    if (i7 >= 0) path7 = pathSegments[i7];
    else {
      const { Deno: Deno5 } = globalThis;
      if (typeof Deno5?.cwd !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path7 = Deno5.cwd();
    }
    assertPath3(path7);
    if (path7.length === 0) {
      continue;
    }
    resolvedPath = `${path7}/${resolvedPath}`;
    resolvedAbsolute = path7.charCodeAt(0) === CHAR_FORWARD_SLASH3;
  }
  resolvedPath = normalizeString3(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator3
  );
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0) return `/${resolvedPath}`;
    else return "/";
  } else if (resolvedPath.length > 0) return resolvedPath;
  else return ".";
}
function normalize10(path7) {
  assertPath3(path7);
  if (path7.length === 0) return ".";
  const isAbsolute10 = path7.charCodeAt(0) === CHAR_FORWARD_SLASH3;
  const trailingSeparator = path7.charCodeAt(path7.length - 1) === CHAR_FORWARD_SLASH3;
  path7 = normalizeString3(path7, !isAbsolute10, "/", isPosixPathSeparator3);
  if (path7.length === 0 && !isAbsolute10) path7 = ".";
  if (path7.length > 0 && trailingSeparator) path7 += "/";
  if (isAbsolute10) return `/${path7}`;
  return path7;
}
function isAbsolute8(path7) {
  assertPath3(path7);
  return path7.length > 0 && path7.charCodeAt(0) === CHAR_FORWARD_SLASH3;
}
function join11(...paths) {
  if (paths.length === 0) return ".";
  let joined;
  for (let i7 = 0, len = paths.length; i7 < len; ++i7) {
    const path7 = paths[i7];
    assertPath3(path7);
    if (path7.length > 0) {
      if (!joined) joined = path7;
      else joined += `/${path7}`;
    }
  }
  if (!joined) return ".";
  return normalize10(joined);
}
function relative8(from2, to) {
  assertPath3(from2);
  assertPath3(to);
  if (from2 === to) return "";
  from2 = resolve8(from2);
  to = resolve8(to);
  if (from2 === to) return "";
  let fromStart = 1;
  const fromEnd = from2.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from2.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH3) break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to.length;
  for (; toStart < toEnd; ++toStart) {
    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH3) break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i7 = 0;
  for (; i7 <= length; ++i7) {
    if (i7 === length) {
      if (toLen > length) {
        if (to.charCodeAt(toStart + i7) === CHAR_FORWARD_SLASH3) {
          return to.slice(toStart + i7 + 1);
        } else if (i7 === 0) {
          return to.slice(toStart + i7);
        }
      } else if (fromLen > length) {
        if (from2.charCodeAt(fromStart + i7) === CHAR_FORWARD_SLASH3) {
          lastCommonSep = i7;
        } else if (i7 === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from2.charCodeAt(fromStart + i7);
    const toCode = to.charCodeAt(toStart + i7);
    if (fromCode !== toCode) break;
    else if (fromCode === CHAR_FORWARD_SLASH3) lastCommonSep = i7;
  }
  let out = "";
  for (i7 = fromStart + lastCommonSep + 1; i7 <= fromEnd; ++i7) {
    if (i7 === fromEnd || from2.charCodeAt(i7) === CHAR_FORWARD_SLASH3) {
      if (out.length === 0) out += "..";
      else out += "/..";
    }
  }
  if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH3) ++toStart;
    return to.slice(toStart);
  }
}
function toNamespacedPath8(path7) {
  return path7;
}
function dirname8(path7) {
  assertPath3(path7);
  if (path7.length === 0) return ".";
  const hasRoot = path7.charCodeAt(0) === CHAR_FORWARD_SLASH3;
  let end = -1;
  let matchedSlash = true;
  for (let i7 = path7.length - 1; i7 >= 1; --i7) {
    if (path7.charCodeAt(i7) === CHAR_FORWARD_SLASH3) {
      if (!matchedSlash) {
        end = i7;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1) return hasRoot ? "/" : ".";
  if (hasRoot && end === 1) return "//";
  return path7.slice(0, end);
}
function basename8(path7, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath3(path7);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i7;
  if (ext !== void 0 && ext.length > 0 && ext.length <= path7.length) {
    if (ext.length === path7.length && ext === path7) return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i7 = path7.length - 1; i7 >= 0; --i7) {
      const code = path7.charCodeAt(i7);
      if (code === CHAR_FORWARD_SLASH3) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i7 + 1;
        }
        if (extIdx >= 0) {
          if (code === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i7;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end) end = firstNonSlashEnd;
    else if (end === -1) end = path7.length;
    return path7.slice(start, end);
  } else {
    for (i7 = path7.length - 1; i7 >= 0; --i7) {
      if (path7.charCodeAt(i7) === CHAR_FORWARD_SLASH3) {
        if (!matchedSlash) {
          start = i7 + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i7 + 1;
      }
    }
    if (end === -1) return "";
    return path7.slice(start, end);
  }
}
function extname8(path7) {
  assertPath3(path7);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i7 = path7.length - 1; i7 >= 0; --i7) {
    const code = path7.charCodeAt(i7);
    if (code === CHAR_FORWARD_SLASH3) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT3) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path7.slice(startDot, end);
}
function format8(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(
      `The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`
    );
  }
  return _format3("/", pathObject);
}
function parse10(path7) {
  assertPath3(path7);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path7.length === 0) return ret;
  const isAbsolute10 = path7.charCodeAt(0) === CHAR_FORWARD_SLASH3;
  let start;
  if (isAbsolute10) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i7 = path7.length - 1;
  let preDotState = 0;
  for (; i7 >= start; --i7) {
    const code = path7.charCodeAt(i7);
    if (code === CHAR_FORWARD_SLASH3) {
      if (!matchedSlash) {
        startPart = i7 + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i7 + 1;
    }
    if (code === CHAR_DOT3) {
      if (startDot === -1) startDot = i7;
      else if (preDotState !== 1) preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
  preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
  preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute10) {
        ret.base = ret.name = path7.slice(1, end);
      } else {
        ret.base = ret.name = path7.slice(startPart, end);
      }
    }
  } else {
    if (startPart === 0 && isAbsolute10) {
      ret.name = path7.slice(1, startDot);
      ret.base = path7.slice(1, end);
    } else {
      ret.name = path7.slice(startPart, startDot);
      ret.base = path7.slice(startPart, end);
    }
    ret.ext = path7.slice(startDot, end);
  }
  if (startPart > 0) ret.dir = path7.slice(0, startPart - 1);
  else if (isAbsolute10) ret.dir = "/";
  return ret;
}
function fromFileUrl8(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(
    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25")
  );
}
function toFileUrl8(path7) {
  if (!isAbsolute8(path7)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace3(
    path7.replace(/%/g, "%25").replace(/\\/g, "%5C")
  );
  return url;
}

// https://deno.land/std@0.133.0/path/glob.ts
var path5 = isWindows3 ? win32_exports3 : posix_exports3;
var { join: join12, normalize: normalize11 } = path5;

// https://deno.land/std@0.133.0/path/mod.ts
var path6 = isWindows3 ? win32_exports3 : posix_exports3;
var {
  basename: basename9,
  delimiter: delimiter9,
  dirname: dirname9,
  extname: extname9,
  format: format9,
  fromFileUrl: fromFileUrl9,
  isAbsolute: isAbsolute9,
  join: join13,
  normalize: normalize12,
  parse: parse11,
  relative: relative9,
  resolve: resolve9,
  sep: sep9,
  toFileUrl: toFileUrl9,
  toNamespacedPath: toNamespacedPath9
} = path6;

// https://deno.land/std@0.133.0/fs/_util.ts
function isSubdir(src, dest, sep10 = sep9) {
  if (src === dest) {
    return false;
  }
  const srcArray = src.split(sep10);
  const destArray = dest.split(sep10);
  return srcArray.every((current, i7) => destArray[i7] === current);
}
function getFileInfoType(fileInfo) {
  return fileInfo.isFile ? "file" : fileInfo.isDirectory ? "dir" : fileInfo.isSymlink ? "symlink" : void 0;
}

// https://deno.land/std@0.133.0/fs/ensure_dir.ts
async function ensureDir(dir) {
  try {
    const fileInfo = await Deno.lstat(dir);
    if (!fileInfo.isDirectory) {
      throw new Error(
        `Ensure path exists, expected 'dir', got '${getFileInfoType(fileInfo)}'`
      );
    }
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      await Deno.mkdir(dir, { recursive: true });
      return;
    }
    throw err;
  }
}
function ensureDirSync(dir) {
  try {
    const fileInfo = Deno.lstatSync(dir);
    if (!fileInfo.isDirectory) {
      throw new Error(
        `Ensure path exists, expected 'dir', got '${getFileInfoType(fileInfo)}'`
      );
    }
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      Deno.mkdirSync(dir, { recursive: true });
      return;
    }
    throw err;
  }
}

// https://deno.land/std@0.133.0/fs/exists.ts
async function exists(filePath) {
  try {
    await Deno.lstat(filePath);
    return true;
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      return false;
    }
    throw err;
  }
}
function existsSync(filePath) {
  try {
    Deno.lstatSync(filePath);
    return true;
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      return false;
    }
    throw err;
  }
}

// https://deno.land/std@0.133.0/fs/move.ts
async function move(src, dest, { overwrite = false } = {}) {
  const srcStat = await Deno.stat(src);
  if (srcStat.isDirectory && isSubdir(src, dest)) {
    throw new Error(
      `Cannot move '${src}' to a subdirectory of itself, '${dest}'.`
    );
  }
  if (overwrite) {
    if (await exists(dest)) {
      await Deno.remove(dest, { recursive: true });
    }
  } else {
    if (await exists(dest)) {
      throw new Error("dest already exists.");
    }
  }
  await Deno.rename(src, dest);
  return;
}
function moveSync(src, dest, { overwrite = false } = {}) {
  const srcStat = Deno.statSync(src);
  if (srcStat.isDirectory && isSubdir(src, dest)) {
    throw new Error(
      `Cannot move '${src}' to a subdirectory of itself, '${dest}'.`
    );
  }
  if (overwrite) {
    if (existsSync(dest)) {
      Deno.removeSync(dest, { recursive: true });
    }
  } else {
    if (existsSync(dest)) {
      throw new Error("dest already exists.");
    }
  }
  Deno.renameSync(src, dest);
}

// https://deno.land/std@0.133.0/_deno_unstable.ts
function utime(...args2) {
  if (typeof Deno.utime == "function") {
    return Deno.utime(...args2);
  } else {
    return Promise.reject(new TypeError("Requires --unstable"));
  }
}
function utimeSync(...args2) {
  if (typeof Deno.utimeSync == "function") {
    return Deno.utimeSync(...args2);
  } else {
    throw new TypeError("Requires --unstable");
  }
}

// https://deno.land/std@0.133.0/fs/copy.ts
async function ensureValidCopy(src, dest, options) {
  let destStat;
  try {
    destStat = await Deno.lstat(dest);
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      return;
    }
    throw err;
  }
  if (options.isFolder && !destStat.isDirectory) {
    throw new Error(
      `Cannot overwrite non-directory '${dest}' with directory '${src}'.`
    );
  }
  if (!options.overwrite) {
    throw new Error(`'${dest}' already exists.`);
  }
  return destStat;
}
function ensureValidCopySync(src, dest, options) {
  let destStat;
  try {
    destStat = Deno.lstatSync(dest);
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      return;
    }
    throw err;
  }
  if (options.isFolder && !destStat.isDirectory) {
    throw new Error(
      `Cannot overwrite non-directory '${dest}' with directory '${src}'.`
    );
  }
  if (!options.overwrite) {
    throw new Error(`'${dest}' already exists.`);
  }
  return destStat;
}
async function copyFile(src, dest, options) {
  await ensureValidCopy(src, dest, options);
  await Deno.copyFile(src, dest);
  if (options.preserveTimestamps) {
    const statInfo = await Deno.stat(src);
    assert4(statInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert4(statInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    await utime(dest, statInfo.atime, statInfo.mtime);
  }
}
function copyFileSync(src, dest, options) {
  ensureValidCopySync(src, dest, options);
  Deno.copyFileSync(src, dest);
  if (options.preserveTimestamps) {
    const statInfo = Deno.statSync(src);
    assert4(statInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert4(statInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    utimeSync(dest, statInfo.atime, statInfo.mtime);
  }
}
async function copySymLink(src, dest, options) {
  await ensureValidCopy(src, dest, options);
  const originSrcFilePath = await Deno.readLink(src);
  const type = getFileInfoType(await Deno.lstat(src));
  if (isWindows3) {
    await Deno.symlink(originSrcFilePath, dest, {
      type: type === "dir" ? "dir" : "file"
    });
  } else {
    await Deno.symlink(originSrcFilePath, dest);
  }
  if (options.preserveTimestamps) {
    const statInfo = await Deno.lstat(src);
    assert4(statInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert4(statInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    await utime(dest, statInfo.atime, statInfo.mtime);
  }
}
function copySymlinkSync(src, dest, options) {
  ensureValidCopySync(src, dest, options);
  const originSrcFilePath = Deno.readLinkSync(src);
  const type = getFileInfoType(Deno.lstatSync(src));
  if (isWindows3) {
    Deno.symlinkSync(originSrcFilePath, dest, {
      type: type === "dir" ? "dir" : "file"
    });
  } else {
    Deno.symlinkSync(originSrcFilePath, dest);
  }
  if (options.preserveTimestamps) {
    const statInfo = Deno.lstatSync(src);
    assert4(statInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert4(statInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    utimeSync(dest, statInfo.atime, statInfo.mtime);
  }
}
async function copyDir(src, dest, options) {
  const destStat = await ensureValidCopy(src, dest, {
    ...options,
    isFolder: true
  });
  if (!destStat) {
    await ensureDir(dest);
  }
  if (options.preserveTimestamps) {
    const srcStatInfo = await Deno.stat(src);
    assert4(srcStatInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert4(srcStatInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    await utime(dest, srcStatInfo.atime, srcStatInfo.mtime);
  }
  for await (const entry of Deno.readDir(src)) {
    const srcPath = join13(src, entry.name);
    const destPath = join13(dest, basename9(srcPath));
    if (entry.isSymlink) {
      await copySymLink(srcPath, destPath, options);
    } else if (entry.isDirectory) {
      await copyDir(srcPath, destPath, options);
    } else if (entry.isFile) {
      await copyFile(srcPath, destPath, options);
    }
  }
}
function copyDirSync(src, dest, options) {
  const destStat = ensureValidCopySync(src, dest, {
    ...options,
    isFolder: true
  });
  if (!destStat) {
    ensureDirSync(dest);
  }
  if (options.preserveTimestamps) {
    const srcStatInfo = Deno.statSync(src);
    assert4(srcStatInfo.atime instanceof Date, `statInfo.atime is unavailable`);
    assert4(srcStatInfo.mtime instanceof Date, `statInfo.mtime is unavailable`);
    utimeSync(dest, srcStatInfo.atime, srcStatInfo.mtime);
  }
  for (const entry of Deno.readDirSync(src)) {
    assert4(entry.name != null, "file.name must be set");
    const srcPath = join13(src, entry.name);
    const destPath = join13(dest, basename9(srcPath));
    if (entry.isSymlink) {
      copySymlinkSync(srcPath, destPath, options);
    } else if (entry.isDirectory) {
      copyDirSync(srcPath, destPath, options);
    } else if (entry.isFile) {
      copyFileSync(srcPath, destPath, options);
    }
  }
}
async function copy2(src, dest, options = {}) {
  src = resolve9(src);
  dest = resolve9(dest);
  if (src === dest) {
    throw new Error("Source and destination cannot be the same.");
  }
  const srcStat = await Deno.lstat(src);
  if (srcStat.isDirectory && isSubdir(src, dest)) {
    throw new Error(
      `Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`
    );
  }
  if (srcStat.isSymlink) {
    await copySymLink(src, dest, options);
  } else if (srcStat.isDirectory) {
    await copyDir(src, dest, options);
  } else if (srcStat.isFile) {
    await copyFile(src, dest, options);
  }
}
function copySync(src, dest, options = {}) {
  src = resolve9(src);
  dest = resolve9(dest);
  if (src === dest) {
    throw new Error("Source and destination cannot be the same.");
  }
  const srcStat = Deno.lstatSync(src);
  if (srcStat.isDirectory && isSubdir(src, dest)) {
    throw new Error(
      `Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`
    );
  }
  if (srcStat.isSymlink) {
    copySymlinkSync(src, dest, options);
  } else if (srcStat.isDirectory) {
    copyDirSync(src, dest, options);
  } else if (srcStat.isFile) {
    copyFileSync(src, dest, options);
  }
}

// https://deno.land/x/good@1.6.0.1/value.js
var typedArrayClasses2 = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each2) => each2);
var copyableClasses2 = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses2, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype2 = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator2 = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator2 = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator2 = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction2 = class {
};
var GeneratorFunction2 = class {
};
var AsyncGeneratorFunction2 = class {
};
var SyncGenerator2 = class {
};
var AsyncGenerator2 = class {
};
try {
  AsyncFunction2 = eval("(async function(){}).constructor");
  GeneratorFunction2 = eval("(function*(){}).constructor");
  AsyncGeneratorFunction2 = eval("(async function*(){}).constructor");
  SyncGenerator2 = eval("((function*(){})()).constructor");
  AsyncGenerator2 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive2 = (value) => !(value instanceof Object);
var isPureObject2 = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive2 = (value) => isPrimitive2(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator2 = (value) => IteratorPrototype2.isPrototypeOf(value);
var isGeneratorType2 = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator2(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator2 || constructor == AsyncGenerator2;
  }
  return false;
};
var isAsyncIterable2 = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable2 = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isIterableObjectOrContainer = function(value) {
  return value instanceof Object && (typeof value[Symbol.iterator] == "function" || typeof value[Symbol.asyncIterator] === "function");
};
var isTechnicallyIterable2 = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer2 = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol2 = Symbol.for("deepCopy");
var clonedFromSymbol2 = Symbol();
var getThis2 = Symbol();
Object.getPrototypeOf(function() {
})[getThis2] = function() {
  return this;
};
function deepCopyInner2(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol2] instanceof Function) {
    const clonedValue = value[deepCopySymbol2](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType2(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis2]();
    object = value.bind(theThis);
  } else if (copyableClasses2.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner2(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get: get3, set, ...options } = description;
    const getIsFunc = get3 instanceof Function;
    const setIsFunc = set instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get3 ? function(...args2) {
          return get3.apply(output2, args2);
        } : void 0,
        set: set ? function(...args2) {
          return set.apply(output2, args2);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner2(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy2 = (value) => deepCopyInner2(value);
var shallowSortObject2 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject2 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject2(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject2(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify2 = (value, ...args2) => {
  return JSON.stringify(deepSortObject2(value), ...args2);
};
var allKeys2 = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions2 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions2 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/good@1.6.0.1/async.js
var objectPrototype = Object.getPrototypeOf({});

// https://deno.land/x/good@1.6.0.1/iterable.js
var emptyIterator2 = function* () {
}();
var makeIterable2 = (object) => {
  if (object == null) {
    return emptyIterator2;
  }
  if (object[Symbol.iterator] instanceof Function || object[Symbol.asyncIterator] instanceof Function) {
    return object;
  }
  if (Object.getPrototypeOf(object).constructor == Object) {
    return Object.entries(object);
  }
  return emptyIterator2;
};
var Stop2 = Symbol("iterationStop");
var iter2 = (object) => {
  const iterable = makeIterable2(object);
  if (iterable[Symbol.asyncIterator]) {
    return iterable[Symbol.asyncIterator]();
  } else {
    return iterable[Symbol.iterator]();
  }
};
async function asyncIteratorToList2(asyncIterator) {
  const results = [];
  for await (const each2 of asyncIterator) {
    results.push(each2);
  }
  return results;
}
var zip2 = function* (...iterables) {
  iterables = iterables.map((each2) => iter2(each2));
  while (true) {
    const nexts = iterables.map((each2) => each2.next());
    if (nexts.every((each2) => each2.done)) {
      break;
    }
    yield nexts.map((each2) => each2.value);
  }
};
var ERROR_WHILE_MAPPING_MESSAGE2 = "Threw while mapping.";
function concurrentlyTransform2({ iterator, transformFunction, poolLimit = null, awaitAll = false }) {
  poolLimit = poolLimit || concurrentlyTransform2.defaultPoolLimit;
  const res = new TransformStream({
    async transform(p3, controller) {
      try {
        const s16 = await p3;
        controller.enqueue(s16);
      } catch (e6) {
        if (e6 instanceof AggregateError && e6.message == ERROR_WHILE_MAPPING_MESSAGE2) {
          controller.error(e6);
        }
      }
    }
  });
  const mainPromise = (async () => {
    const writer = res.writable.getWriter();
    const executing = [];
    try {
      let index = 0;
      for await (const item of iterator) {
        const p3 = Promise.resolve().then(() => transformFunction(item, index));
        index++;
        writer.write(p3);
        const e6 = p3.then(() => executing.splice(executing.indexOf(e6), 1));
        executing.push(e6);
        if (executing.length >= poolLimit) {
          await Promise.race(executing);
        }
      }
      await Promise.all(executing);
      writer.close();
    } catch {
      const errors2 = [];
      for (const result of await Promise.allSettled(executing)) {
        if (result.status == "rejected") {
          errors2.push(result.reason);
        }
      }
      writer.write(Promise.reject(
        new AggregateError(errors2, ERROR_WHILE_MAPPING_MESSAGE2)
      )).catch(() => {
      });
    }
  })();
  const asyncIterator = res.readable[Symbol.asyncIterator]();
  if (!awaitAll) {
    return asyncIterator;
  } else {
    return mainPromise.then(() => asyncIteratorToList2(asyncIterator));
  }
}
concurrentlyTransform2.defaultPoolLimit = 40;

// https://deno.land/x/good@1.6.0.1/string.js
var indent2 = ({ string, by = "    ", noLead = false }) => (noLead ? "" : by) + string.replace(/\n/g, "\n" + by);
var toString3 = (value) => {
  if (typeof value == "symbol") {
    return toRepresentation2(value);
  } else if (!(value instanceof Object)) {
    return value != null ? value.toString() : `${value}`;
  } else {
    return toRepresentation2(value);
  }
};
var reprSymbol2 = Symbol.for("representation");
var denoInspectSymbol2 = Symbol.for("Deno.customInspect");
var toRepresentation2 = (item) => {
  const alreadySeen = /* @__PURE__ */ new Set();
  const recursionWrapper = (item2) => {
    if (item2 instanceof Object) {
      if (alreadySeen.has(item2)) {
        return `[Self Reference]`;
      } else {
        alreadySeen.add(item2);
      }
    }
    let output2;
    if (item2 === void 0) {
      output2 = "undefined";
    } else if (item2 === null) {
      output2 = "null";
    } else if (typeof item2 == "string") {
      output2 = JSON.stringify(item2);
    } else if (typeof item2 == "symbol") {
      if (!item2.description) {
        output2 = "Symbol()";
      } else {
        const globalVersion = Symbol.for(item2.description);
        if (globalVersion == item2) {
          output2 = `Symbol.for(${JSON.stringify(item2.description)})`;
        } else {
          output2 = `Symbol(${JSON.stringify(item2.description)})`;
        }
      }
    } else if (item2 instanceof Date) {
      output2 = `new Date(${item2.getTime()})`;
    } else if (item2 instanceof Array) {
      output2 = `[${item2.map((each2) => recursionWrapper(each2)).join(",")}]`;
    } else if (item2 instanceof Set) {
      output2 = `new Set(${[...item2].map((each2) => recursionWrapper(each2)).join(",")})`;
    } else if (item2 instanceof Object && item2.constructor == Object) {
      output2 = pureObjectRepr(item2);
    } else if (item2 instanceof Map) {
      let string = "new Map(";
      for (const [key, value] of item2.entries()) {
        const stringKey = recursionWrapper(key);
        const stringValue = recursionWrapper(value);
        if (!stringKey.match(/\n/g)) {
          string += `
  [${stringKey}, ${indent2({ string: stringValue, by: "  ", noLead: true })}],`;
        } else {
          string += `
  [${indent2({ string: stringKey, by: "  ", noLead: true })},
  ${indent2({ string: stringValue, by: "    ", noLead: true })}],`;
        }
      }
      string += "\n)";
      output2 = string;
    } else {
      if (item2[reprSymbol2] instanceof Function) {
        try {
          output2 = item2[reprSymbol2]();
          return output2;
        } catch (error) {
        }
      }
      if (item2[denoInspectSymbol2] instanceof Function) {
        try {
          output2 = item2[denoInspectSymbol2]();
          return output2;
        } catch (error) {
        }
      }
      try {
        output2 = item2.toString();
        if (output2 !== "[object Object]") {
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && item2.prototype && typeof item2.name == "string") {
          output2 = `class ${item2.name} { /*...*/ }`;
          return output2;
        }
      } catch (error) {
      }
      try {
        if (item2.constructor instanceof Function && typeof item2.constructor.name == "string") {
          output2 = `new ${item2.constructor.name}(${pureObjectRepr(item2)})`;
          return output2;
        }
      } catch (error) {
      }
      return pureObjectRepr(item2);
    }
    return output2;
  };
  const pureObjectRepr = (item2) => {
    let string = "{";
    for (const [key, value] of Object.entries(item2)) {
      const stringKey = recursionWrapper(key);
      const stringValue = recursionWrapper(value);
      string += `
  ${stringKey}: ${indent2({ string: stringValue, by: "  ", noLead: true })},`;
    }
    string += "\n}";
    return string;
  };
  return recursionWrapper(item);
};
var findAll = (regexPattern, sourceString) => {
  var output2 = [];
  var match;
  var regexPatternWithGlobal = regexPattern.global ? regexPattern : RegExp(regexPattern, regexPattern.flags + "g");
  while (match = regexPatternWithGlobal.exec(sourceString)) {
    output2.push(match);
    if (match[0].length == 0) {
      regexPatternWithGlobal.lastIndex += 1;
    }
  }
  return output2;
};
var reservedCharMap = {
  "&": "\\x26",
  "!": "\\x21",
  "#": "\\x23",
  "$": "\\$",
  "%": "\\x25",
  "*": "\\*",
  "+": "\\+",
  ",": "\\x2c",
  ".": "\\.",
  ":": "\\x3a",
  ";": "\\x3b",
  "<": "\\x3c",
  "=": "\\x3d",
  ">": "\\x3e",
  "?": "\\?",
  "@": "\\x40",
  "^": "\\^",
  "`": "\\x60",
  "~": "\\x7e",
  "(": "\\(",
  ")": "\\)",
  "[": "\\[",
  "]": "\\]",
  "{": "\\{",
  "}": "\\}",
  "/": "\\/",
  "-": "\\x2d",
  "\\": "\\\\",
  "|": "\\|"
};
var RX_REGEXP_ESCAPE = new RegExp(
  `[${Object.values(reservedCharMap).join("")}]`,
  "gu"
);
function escapeRegexMatch2(str) {
  return str.replaceAll(
    RX_REGEXP_ESCAPE,
    (m18) => reservedCharMap[m18]
  );
}
var regexpProxy2 = Symbol("regexpProxy");
var realExec2 = RegExp.prototype.exec;
RegExp.prototype.exec = function(...args2) {
  if (this[regexpProxy2]) {
    return realExec2.apply(this[regexpProxy2], args2);
  }
  return realExec2.apply(this, args2);
};
var proxyRegExp2;
var regexProxyOptions2 = Object.freeze({
  get(original, key) {
    if (typeof key == "string" && key.match(/^[igmusyv]+$/)) {
      return proxyRegExp2(original, key);
    }
    if (key == regexpProxy2) {
      return original;
    }
    return original[key];
  },
  set(original, key, value) {
    original[key] = value;
    return true;
  }
});
proxyRegExp2 = (parent, flags2) => {
  const regex3 = new RegExp(parent, flags2);
  const output2 = new Proxy(regex3, regexProxyOptions2);
  Object.setPrototypeOf(output2, Object.getPrototypeOf(regex3));
  return output2;
};
function regexWithStripWarning2(shouldStrip) {
  return (strings, ...values) => {
    let newRegexString = "";
    for (const [string, value] of zip2(strings, values)) {
      newRegexString += string;
      if (value instanceof RegExp) {
        if (!shouldStrip && value.flags.replace(/g/, "").length > 0) {
          console.warn(`Warning: flags inside of regex:
    The RegExp trigging this warning is: ${value}
    When calling the regex interpolater (e.g. regex\`something\${stuff}\`)
    one of the \${} values (the one above) was a RegExp with a flag enabled
    e.g. /stuff/i  <- i = ignoreCase flag enabled
    When the /stuff/i gets interpolated, its going to loose its flags
    (thats what I'm warning you about)
    
    To disable/ignore this warning do:
        regex.stripFlags\`something\${/stuff/i}\`
    If you want to add flags to the output of regex\`something\${stuff}\` do:
        regex\`something\${stuff}\`.i   // ignoreCase
        regex\`something\${stuff}\`.ig  // ignoreCase and global
        regex\`something\${stuff}\`.gi  // functionally equivlent
`);
        }
        newRegexString += `(?:${value.source})`;
      } else if (value != null) {
        newRegexString += escapeRegexMatch2(toString3(value));
      }
    }
    return proxyRegExp2(newRegexString, "");
  };
}
var regex2 = regexWithStripWarning2(false);
regex2.stripFlags = regexWithStripWarning2(true);
var textDecoder2 = new TextDecoder("utf-8");
var textEncoder2 = new TextEncoder("utf-8");
var utf8BytesToString2 = textDecoder2.decode.bind(textDecoder2);
var stringToUtf8Bytes2 = textEncoder2.encode.bind(textEncoder2);

// https://deno.land/std@0.214.0/path/_os.ts
var osType4 = (() => {
  const { Deno: Deno5 } = globalThis;
  if (typeof Deno5?.build?.os === "string") {
    return Deno5.build.os;
  }
  const { navigator } = globalThis;
  if (navigator?.appVersion?.includes?.("Win")) {
    return "windows";
  }
  return "linux";
})();
var isWindows4 = osType4 === "windows";

// https://deno.land/std@0.214.0/path/_common/glob_to_reg_exp.ts
var regExpEscapeChars = [
  "!",
  "$",
  "(",
  ")",
  "*",
  "+",
  ".",
  "=",
  "?",
  "[",
  "\\",
  "^",
  "{",
  "|"
];
var rangeEscapeChars = ["-", "\\", "]"];
function _globToRegExp(c12, glob2, {
  extended = true,
  globstar: globstarOption = true,
  // os = osType,
  caseInsensitive = false
} = {}) {
  if (glob2 === "") {
    return /(?!)/;
  }
  let newLength = glob2.length;
  for (; newLength > 1 && c12.seps.includes(glob2[newLength - 1]); newLength--) ;
  glob2 = glob2.slice(0, newLength);
  let regExpString = "";
  for (let j3 = 0; j3 < glob2.length; ) {
    let segment = "";
    const groupStack = [];
    let inRange = false;
    let inEscape = false;
    let endsWithSep = false;
    let i7 = j3;
    for (; i7 < glob2.length && !c12.seps.includes(glob2[i7]); i7++) {
      if (inEscape) {
        inEscape = false;
        const escapeChars = inRange ? rangeEscapeChars : regExpEscapeChars;
        segment += escapeChars.includes(glob2[i7]) ? `\\${glob2[i7]}` : glob2[i7];
        continue;
      }
      if (glob2[i7] === c12.escapePrefix) {
        inEscape = true;
        continue;
      }
      if (glob2[i7] === "[") {
        if (!inRange) {
          inRange = true;
          segment += "[";
          if (glob2[i7 + 1] === "!") {
            i7++;
            segment += "^";
          } else if (glob2[i7 + 1] === "^") {
            i7++;
            segment += "\\^";
          }
          continue;
        } else if (glob2[i7 + 1] === ":") {
          let k5 = i7 + 1;
          let value = "";
          while (glob2[k5 + 1] !== void 0 && glob2[k5 + 1] !== ":") {
            value += glob2[k5 + 1];
            k5++;
          }
          if (glob2[k5 + 1] === ":" && glob2[k5 + 2] === "]") {
            i7 = k5 + 2;
            if (value === "alnum") segment += "\\dA-Za-z";
            else if (value === "alpha") segment += "A-Za-z";
            else if (value === "ascii") segment += "\0-";
            else if (value === "blank") segment += "	 ";
            else if (value === "cntrl") segment += "\0-";
            else if (value === "digit") segment += "\\d";
            else if (value === "graph") segment += "!-~";
            else if (value === "lower") segment += "a-z";
            else if (value === "print") segment += " -~";
            else if (value === "punct") {
              segment += `!"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_‘{|}~`;
            } else if (value === "space") segment += "\\s\v";
            else if (value === "upper") segment += "A-Z";
            else if (value === "word") segment += "\\w";
            else if (value === "xdigit") segment += "\\dA-Fa-f";
            continue;
          }
        }
      }
      if (glob2[i7] === "]" && inRange) {
        inRange = false;
        segment += "]";
        continue;
      }
      if (inRange) {
        if (glob2[i7] === "\\") {
          segment += `\\\\`;
        } else {
          segment += glob2[i7];
        }
        continue;
      }
      if (glob2[i7] === ")" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
        segment += ")";
        const type = groupStack.pop();
        if (type === "!") {
          segment += c12.wildcard;
        } else if (type !== "@") {
          segment += type;
        }
        continue;
      }
      if (glob2[i7] === "|" && groupStack.length > 0 && groupStack[groupStack.length - 1] !== "BRACE") {
        segment += "|";
        continue;
      }
      if (glob2[i7] === "+" && extended && glob2[i7 + 1] === "(") {
        i7++;
        groupStack.push("+");
        segment += "(?:";
        continue;
      }
      if (glob2[i7] === "@" && extended && glob2[i7 + 1] === "(") {
        i7++;
        groupStack.push("@");
        segment += "(?:";
        continue;
      }
      if (glob2[i7] === "?") {
        if (extended && glob2[i7 + 1] === "(") {
          i7++;
          groupStack.push("?");
          segment += "(?:";
        } else {
          segment += ".";
        }
        continue;
      }
      if (glob2[i7] === "!" && extended && glob2[i7 + 1] === "(") {
        i7++;
        groupStack.push("!");
        segment += "(?!";
        continue;
      }
      if (glob2[i7] === "{") {
        groupStack.push("BRACE");
        segment += "(?:";
        continue;
      }
      if (glob2[i7] === "}" && groupStack[groupStack.length - 1] === "BRACE") {
        groupStack.pop();
        segment += ")";
        continue;
      }
      if (glob2[i7] === "," && groupStack[groupStack.length - 1] === "BRACE") {
        segment += "|";
        continue;
      }
      if (glob2[i7] === "*") {
        if (extended && glob2[i7 + 1] === "(") {
          i7++;
          groupStack.push("*");
          segment += "(?:";
        } else {
          const prevChar = glob2[i7 - 1];
          let numStars = 1;
          while (glob2[i7 + 1] === "*") {
            i7++;
            numStars++;
          }
          const nextChar = glob2[i7 + 1];
          if (globstarOption && numStars === 2 && [...c12.seps, void 0].includes(prevChar) && [...c12.seps, void 0].includes(nextChar)) {
            segment += c12.globstar;
            endsWithSep = true;
          } else {
            segment += c12.wildcard;
          }
        }
        continue;
      }
      segment += regExpEscapeChars.includes(glob2[i7]) ? `\\${glob2[i7]}` : glob2[i7];
    }
    if (groupStack.length > 0 || inRange || inEscape) {
      segment = "";
      for (const c13 of glob2.slice(j3, i7)) {
        segment += regExpEscapeChars.includes(c13) ? `\\${c13}` : c13;
        endsWithSep = false;
      }
    }
    regExpString += segment;
    if (!endsWithSep) {
      regExpString += i7 < glob2.length ? c12.sep : c12.sepMaybe;
      endsWithSep = true;
    }
    while (c12.seps.includes(glob2[i7])) i7++;
    if (!(i7 > j3)) {
      throw new Error("Assertion failure: i > j (potential infinite loop)");
    }
    j3 = i7;
  }
  regExpString = `^${regExpString}$`;
  return new RegExp(regExpString, caseInsensitive ? "i" : "");
}

// https://deno.land/std@0.214.0/path/posix/glob_to_regexp.ts
var constants5 = {
  sep: "/+",
  sepMaybe: "/*",
  seps: ["/"],
  globstar: "(?:[^/]*(?:/|$)+)*",
  wildcard: "[^/]*",
  escapePrefix: "\\"
};
function globToRegExp2(glob2, options = {}) {
  return _globToRegExp(constants5, glob2, options);
}

// https://deno.land/std@0.214.0/path/windows/glob_to_regexp.ts
var constants6 = {
  sep: "(?:\\\\|/)+",
  sepMaybe: "(?:\\\\|/)*",
  seps: ["\\", "/"],
  globstar: "(?:[^\\\\/]*(?:\\\\|/|$)+)*",
  wildcard: "[^\\\\/]*",
  escapePrefix: "`"
};
function globToRegExp3(glob2, options = {}) {
  return _globToRegExp(constants6, glob2, options);
}

// https://deno.land/std@0.214.0/path/glob_to_regexp.ts
function globToRegExp4(glob2, options = {}) {
  return options.os === "windows" || !options.os && isWindows4 ? globToRegExp3(glob2, options) : globToRegExp2(glob2, options);
}

// https://deno.land/std@0.191.0/_util/asserts.ts
var DenoStdInternalError5 = class extends Error {
  constructor(message) {
    super(message);
    this.name = "DenoStdInternalError";
  }
};
function assert6(expr, msg = "") {
  if (!expr) {
    throw new DenoStdInternalError5(msg);
  }
}

// https://deno.land/std@0.191.0/bytes/copy.ts
function copy3(src, dst, off = 0) {
  off = Math.max(0, Math.min(off, dst.byteLength));
  const dstBytesAvailable = dst.byteLength - off;
  if (src.byteLength > dstBytesAvailable) {
    src = src.subarray(0, dstBytesAvailable);
  }
  dst.set(src, off);
  return src.byteLength;
}

// https://deno.land/std@0.191.0/io/buf_reader.ts
var DEFAULT_BUF_SIZE = 4096;
var MIN_BUF_SIZE = 16;
var MAX_CONSECUTIVE_EMPTY_READS = 100;
var CR = "\r".charCodeAt(0);
var LF = "\n".charCodeAt(0);
var BufferFullError = class extends Error {
  constructor(partial) {
    super("Buffer full");
    this.partial = partial;
  }
  name = "BufferFullError";
};
var PartialReadError = class extends Error {
  name = "PartialReadError";
  partial;
  constructor() {
    super("Encountered UnexpectedEof, data only partially read");
  }
};
var BufReader = class _BufReader {
  #buf;
  #rd;
  // Reader provided by caller.
  #r = 0;
  // buf read position.
  #w = 0;
  // buf write position.
  #eof = false;
  // private lastByte: number;
  // private lastCharSize: number;
  /** return new BufReader unless r is BufReader */
  static create(r14, size = DEFAULT_BUF_SIZE) {
    return r14 instanceof _BufReader ? r14 : new _BufReader(r14, size);
  }
  constructor(rd, size = DEFAULT_BUF_SIZE) {
    if (size < MIN_BUF_SIZE) {
      size = MIN_BUF_SIZE;
    }
    this.#reset(new Uint8Array(size), rd);
  }
  /** Returns the size of the underlying buffer in bytes. */
  size() {
    return this.#buf.byteLength;
  }
  buffered() {
    return this.#w - this.#r;
  }
  // Reads a new chunk into the buffer.
  #fill = async () => {
    if (this.#r > 0) {
      this.#buf.copyWithin(0, this.#r, this.#w);
      this.#w -= this.#r;
      this.#r = 0;
    }
    if (this.#w >= this.#buf.byteLength) {
      throw Error("bufio: tried to fill full buffer");
    }
    for (let i7 = MAX_CONSECUTIVE_EMPTY_READS; i7 > 0; i7--) {
      const rr = await this.#rd.read(this.#buf.subarray(this.#w));
      if (rr === null) {
        this.#eof = true;
        return;
      }
      assert6(rr >= 0, "negative read");
      this.#w += rr;
      if (rr > 0) {
        return;
      }
    }
    throw new Error(
      `No progress after ${MAX_CONSECUTIVE_EMPTY_READS} read() calls`
    );
  };
  /** Discards any buffered data, resets all state, and switches
   * the buffered reader to read from r.
   */
  reset(r14) {
    this.#reset(this.#buf, r14);
  }
  #reset = (buf, rd) => {
    this.#buf = buf;
    this.#rd = rd;
    this.#eof = false;
  };
  /** reads data into p.
   * It returns the number of bytes read into p.
   * The bytes are taken from at most one Read on the underlying Reader,
   * hence n may be less than len(p).
   * To read exactly len(p) bytes, use io.ReadFull(b, p).
   */
  async read(p3) {
    let rr = p3.byteLength;
    if (p3.byteLength === 0) return rr;
    if (this.#r === this.#w) {
      if (p3.byteLength >= this.#buf.byteLength) {
        const rr2 = await this.#rd.read(p3);
        const nread = rr2 ?? 0;
        assert6(nread >= 0, "negative read");
        return rr2;
      }
      this.#r = 0;
      this.#w = 0;
      rr = await this.#rd.read(this.#buf);
      if (rr === 0 || rr === null) return rr;
      assert6(rr >= 0, "negative read");
      this.#w += rr;
    }
    const copied = copy3(this.#buf.subarray(this.#r, this.#w), p3, 0);
    this.#r += copied;
    return copied;
  }
  /** reads exactly `p.length` bytes into `p`.
   *
   * If successful, `p` is returned.
   *
   * If the end of the underlying stream has been reached, and there are no more
   * bytes available in the buffer, `readFull()` returns `null` instead.
   *
   * An error is thrown if some bytes could be read, but not enough to fill `p`
   * entirely before the underlying stream reported an error or EOF. Any error
   * thrown will have a `partial` property that indicates the slice of the
   * buffer that has been successfully filled with data.
   *
   * Ported from https://golang.org/pkg/io/#ReadFull
   */
  async readFull(p3) {
    let bytesRead = 0;
    while (bytesRead < p3.length) {
      try {
        const rr = await this.read(p3.subarray(bytesRead));
        if (rr === null) {
          if (bytesRead === 0) {
            return null;
          } else {
            throw new PartialReadError();
          }
        }
        bytesRead += rr;
      } catch (err) {
        if (err instanceof PartialReadError) {
          err.partial = p3.subarray(0, bytesRead);
        }
        throw err;
      }
    }
    return p3;
  }
  /** Returns the next byte [0, 255] or `null`. */
  async readByte() {
    while (this.#r === this.#w) {
      if (this.#eof) return null;
      await this.#fill();
    }
    const c12 = this.#buf[this.#r];
    this.#r++;
    return c12;
  }
  /** readString() reads until the first occurrence of delim in the input,
   * returning a string containing the data up to and including the delimiter.
   * If ReadString encounters an error before finding a delimiter,
   * it returns the data read before the error and the error itself
   * (often `null`).
   * ReadString returns err != nil if and only if the returned data does not end
   * in delim.
   * For simple uses, a Scanner may be more convenient.
   */
  async readString(delim) {
    if (delim.length !== 1) {
      throw new Error("Delimiter should be a single character");
    }
    const buffer = await this.readSlice(delim.charCodeAt(0));
    if (buffer === null) return null;
    return new TextDecoder().decode(buffer);
  }
  /** `readLine()` is a low-level line-reading primitive. Most callers should
   * use `readString('\n')` instead or use a Scanner.
   *
   * `readLine()` tries to return a single line, not including the end-of-line
   * bytes. If the line was too long for the buffer then `more` is set and the
   * beginning of the line is returned. The rest of the line will be returned
   * from future calls. `more` will be false when returning the last fragment
   * of the line. The returned buffer is only valid until the next call to
   * `readLine()`.
   *
   * The text returned from ReadLine does not include the line end ("\r\n" or
   * "\n").
   *
   * When the end of the underlying stream is reached, the final bytes in the
   * stream are returned. No indication or error is given if the input ends
   * without a final line end. When there are no more trailing bytes to read,
   * `readLine()` returns `null`.
   *
   * Calling `unreadByte()` after `readLine()` will always unread the last byte
   * read (possibly a character belonging to the line end) even if that byte is
   * not part of the line returned by `readLine()`.
   */
  async readLine() {
    let line = null;
    try {
      line = await this.readSlice(LF);
    } catch (err) {
      let partial;
      if (err instanceof PartialReadError) {
        partial = err.partial;
        assert6(
          partial instanceof Uint8Array,
          "bufio: caught error from `readSlice()` without `partial` property"
        );
      }
      if (!(err instanceof BufferFullError)) {
        throw err;
      }
      partial = err.partial;
      if (!this.#eof && partial && partial.byteLength > 0 && partial[partial.byteLength - 1] === CR) {
        assert6(this.#r > 0, "bufio: tried to rewind past start of buffer");
        this.#r--;
        partial = partial.subarray(0, partial.byteLength - 1);
      }
      if (partial) {
        return { line: partial, more: !this.#eof };
      }
    }
    if (line === null) {
      return null;
    }
    if (line.byteLength === 0) {
      return { line, more: false };
    }
    if (line[line.byteLength - 1] == LF) {
      let drop = 1;
      if (line.byteLength > 1 && line[line.byteLength - 2] === CR) {
        drop = 2;
      }
      line = line.subarray(0, line.byteLength - drop);
    }
    return { line, more: false };
  }
  /** `readSlice()` reads until the first occurrence of `delim` in the input,
   * returning a slice pointing at the bytes in the buffer. The bytes stop
   * being valid at the next read.
   *
   * If `readSlice()` encounters an error before finding a delimiter, or the
   * buffer fills without finding a delimiter, it throws an error with a
   * `partial` property that contains the entire buffer.
   *
   * If `readSlice()` encounters the end of the underlying stream and there are
   * any bytes left in the buffer, the rest of the buffer is returned. In other
   * words, EOF is always treated as a delimiter. Once the buffer is empty,
   * it returns `null`.
   *
   * Because the data returned from `readSlice()` will be overwritten by the
   * next I/O operation, most clients should use `readString()` instead.
   */
  async readSlice(delim) {
    let s16 = 0;
    let slice2;
    while (true) {
      let i7 = this.#buf.subarray(this.#r + s16, this.#w).indexOf(delim);
      if (i7 >= 0) {
        i7 += s16;
        slice2 = this.#buf.subarray(this.#r, this.#r + i7 + 1);
        this.#r += i7 + 1;
        break;
      }
      if (this.#eof) {
        if (this.#r === this.#w) {
          return null;
        }
        slice2 = this.#buf.subarray(this.#r, this.#w);
        this.#r = this.#w;
        break;
      }
      if (this.buffered() >= this.#buf.byteLength) {
        this.#r = this.#w;
        const oldbuf = this.#buf;
        const newbuf = this.#buf.slice(0);
        this.#buf = newbuf;
        throw new BufferFullError(oldbuf);
      }
      s16 = this.#w - this.#r;
      try {
        await this.#fill();
      } catch (err) {
        if (err instanceof PartialReadError) {
          err.partial = slice2;
        }
        throw err;
      }
    }
    return slice2;
  }
  /** `peek()` returns the next `n` bytes without advancing the reader. The
   * bytes stop being valid at the next read call.
   *
   * When the end of the underlying stream is reached, but there are unread
   * bytes left in the buffer, those bytes are returned. If there are no bytes
   * left in the buffer, it returns `null`.
   *
   * If an error is encountered before `n` bytes are available, `peek()` throws
   * an error with the `partial` property set to a slice of the buffer that
   * contains the bytes that were available before the error occurred.
   */
  async peek(n12) {
    if (n12 < 0) {
      throw Error("negative count");
    }
    let avail = this.#w - this.#r;
    while (avail < n12 && avail < this.#buf.byteLength && !this.#eof) {
      try {
        await this.#fill();
      } catch (err) {
        if (err instanceof PartialReadError) {
          err.partial = this.#buf.subarray(this.#r, this.#w);
        }
        throw err;
      }
      avail = this.#w - this.#r;
    }
    if (avail === 0 && this.#eof) {
      return null;
    } else if (avail < n12 && this.#eof) {
      return this.#buf.subarray(this.#r, this.#r + avail);
    } else if (avail < n12) {
      throw new BufferFullError(this.#buf.subarray(this.#r, this.#w));
    }
    return this.#buf.subarray(this.#r, this.#r + n12);
  }
};

// https://deno.land/std@0.191.0/bytes/concat.ts
function concat2(...buf) {
  let length = 0;
  for (const b2 of buf) {
    length += b2.length;
  }
  const output2 = new Uint8Array(length);
  let index = 0;
  for (const b2 of buf) {
    output2.set(b2, index);
    index += b2.length;
  }
  return output2;
}

// https://deno.land/std@0.191.0/io/read_lines.ts
async function* readLines(reader, decoderOpts) {
  const bufReader = new BufReader(reader);
  let chunks = [];
  const decoder2 = new TextDecoder(decoderOpts?.encoding, decoderOpts);
  while (true) {
    const res = await bufReader.readLine();
    if (!res) {
      if (chunks.length > 0) {
        yield decoder2.decode(concat2(...chunks));
      }
      break;
    }
    chunks.push(res.line);
    if (!res.more) {
      yield decoder2.decode(concat2(...chunks));
      chunks = [];
    }
  }
}

// https://deno.land/x/good@1.5.0.3/value.js
var typedArrayClasses3 = [
  Uint16Array,
  Uint32Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Int32Array,
  Int8Array,
  Float32Array,
  Float64Array,
  globalThis.BigInt64Array,
  globalThis.BigUint64Array
].filter((each2) => each2);
var copyableClasses3 = /* @__PURE__ */ new Set([RegExp, Date, URL, ...typedArrayClasses3, globalThis.ArrayBuffer, globalThis.DataView]);
var IteratorPrototype3 = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
var ArrayIterator3 = Object.getPrototypeOf([][Symbol.iterator]);
var MapIterator3 = Object.getPrototypeOf((/* @__PURE__ */ new Map())[Symbol.iterator]);
var SetIterator3 = Object.getPrototypeOf((/* @__PURE__ */ new Set())[Symbol.iterator]);
var AsyncFunction3 = class {
};
var GeneratorFunction3 = class {
};
var AsyncGeneratorFunction3 = class {
};
var SyncGenerator3 = class {
};
var AsyncGenerator3 = class {
};
try {
  AsyncFunction3 = eval("(async function(){}).constructor");
  GeneratorFunction3 = eval("(function*(){}).constructor");
  AsyncGeneratorFunction3 = eval("(async function*(){}).constructor");
  SyncGenerator3 = eval("((function*(){})()).constructor");
  AsyncGenerator3 = eval("((async function*(){})()).constructor");
} catch (error) {
}
var isPrimitive3 = (value) => !(value instanceof Object);
var isPureObject3 = (value) => value instanceof Object && Object.getPrototypeOf(value).constructor == Object;
var isPracticallyPrimitive3 = (value) => isPrimitive3(value) || value instanceof Date || value instanceof RegExp || value instanceof URL;
var isBuiltInIterator3 = (value) => IteratorPrototype3.isPrototypeOf(value);
var isGeneratorType3 = (value) => {
  if (value instanceof Object) {
    if (isBuiltInIterator3(value)) {
      return true;
    }
    const constructor = value.constructor;
    return constructor == SyncGenerator3 || constructor == AsyncGenerator3;
  }
  return false;
};
var isAsyncIterable3 = function(value) {
  return value && typeof value[Symbol.asyncIterator] === "function";
};
var isSyncIterable3 = function(value) {
  return value && typeof value[Symbol.iterator] === "function";
};
var isIterableObjectOrContainer2 = function(value) {
  return value instanceof Object && (typeof value[Symbol.iterator] == "function" || typeof value[Symbol.asyncIterator] === "function");
};
var isTechnicallyIterable3 = function(value) {
  return value instanceof Object || typeof value == "string";
};
var isSyncIterableObjectOrContainer3 = function(value) {
  return value instanceof Object && typeof value[Symbol.iterator] == "function";
};
var deepCopySymbol3 = Symbol.for("deepCopy");
var clonedFromSymbol3 = Symbol();
var getThis3 = Symbol();
Object.getPrototypeOf(function() {
})[getThis3] = function() {
  return this;
};
function deepCopyInner3(value, valueChain = [], originalToCopyMap = /* @__PURE__ */ new Map()) {
  valueChain.push(value);
  if (value == null) {
    return value;
  }
  if (!(value instanceof Object)) {
    return value;
  }
  if (originalToCopyMap.has(value)) {
    return originalToCopyMap.get(value);
  }
  if (value[deepCopySymbol3] instanceof Function) {
    const clonedValue = value[deepCopySymbol3](originalToCopyMap);
    originalToCopyMap.set(value, clonedValue);
    return clonedValue;
  }
  if (isGeneratorType3(value)) {
    throw Error(`Sadly built-in generators cannot be deep copied.
And I found a generator along this path:
${valueChain.reverse().map((each2) => `${each2},
`)}`);
  }
  let object, theThis, thisCopy;
  if (value instanceof Date) {
    object = new Date(value.getTime());
  } else if (value instanceof RegExp) {
    object = new RegExp(value);
  } else if (value instanceof URL) {
    object = new URL(value);
  } else if (value instanceof Function) {
    theThis = value[getThis3]();
    object = value.bind(theThis);
  } else if (copyableClasses3.has(value.constructor)) {
    object = new value.constructor(value);
  } else if (value instanceof Array) {
    object = [];
  } else if (value instanceof Set) {
    object = /* @__PURE__ */ new Set();
  } else if (value instanceof Map) {
    object = /* @__PURE__ */ new Map();
  }
  originalToCopyMap.set(value, object);
  if (object instanceof Function) {
    thisCopy = deepCopyInner3(theThis, valueChain, originalToCopyMap);
    object = object.bind(thisCopy);
  }
  const output2 = object;
  try {
    output2.constructor = value.constructor;
  } catch (error) {
  }
  Object.setPrototypeOf(output2, Object.getPrototypeOf(value));
  const propertyDefinitions = {};
  for (const [key, description] of Object.entries(Object.getOwnPropertyDescriptors(value))) {
    const { value: value2, get: get3, set, ...options } = description;
    const getIsFunc = get3 instanceof Function;
    const setIsFunc = set instanceof Function;
    if (getIsFunc || setIsFunc) {
      propertyDefinitions[key] = {
        ...options,
        get: get3 ? function(...args2) {
          return get3.apply(output2, args2);
        } : void 0,
        set: set ? function(...args2) {
          return set.apply(output2, args2);
        } : void 0
      };
    } else {
      if (key == "length" && output2 instanceof Array) {
        continue;
      }
      propertyDefinitions[key] = {
        ...options,
        value: deepCopyInner3(value2, valueChain, originalToCopyMap)
      };
    }
  }
  Object.defineProperties(output2, propertyDefinitions);
  return output2;
}
var deepCopy3 = (value) => deepCopyInner3(value);
var shallowSortObject3 = (obj) => {
  return Object.keys(obj).sort().reduce(
    (newObj, key) => {
      newObj[key] = obj[key];
      return newObj;
    },
    {}
  );
};
var deepSortObject3 = (obj, seen = /* @__PURE__ */ new Map()) => {
  if (!(obj instanceof Object)) {
    return obj;
  } else if (seen.has(obj)) {
    return seen.get(obj);
  } else {
    if (obj instanceof Array) {
      const sortedChildren = [];
      seen.set(obj, sortedChildren);
      for (const each2 of obj) {
        sortedChildren.push(deepSortObject3(each2, seen));
      }
      return sortedChildren;
    } else {
      const sorted = {};
      seen.set(obj, sorted);
      for (const eachKey of Object.keys(obj).sort()) {
        sorted[eachKey] = deepSortObject3(obj[eachKey], seen);
      }
      return sorted;
    }
  }
};
var stableStringify3 = (value, ...args2) => {
  return JSON.stringify(deepSortObject3(value), ...args2);
};
var allKeys3 = function(obj) {
  let keys = [];
  if (obj == null) {
    return [];
  }
  if (!(obj instanceof Object)) {
    obj = Object.getPrototypeOf(obj);
  }
  while (obj) {
    keys = keys.concat(Reflect.ownKeys(obj));
    obj = Object.getPrototypeOf(obj);
  }
  return keys;
};
var ownKeyDescriptions3 = Object.getOwnPropertyDescriptors;
var allKeyDescriptions3 = function(value, options = { includingBuiltin: false }) {
  var { includingBuiltin } = { ...options };
  let descriptions = [];
  if (value == null) {
    return {};
  }
  if (!(value instanceof Object)) {
    value = Object.getPrototypeOf(value);
  }
  const rootPrototype = Object.getPrototypeOf({});
  let prevObj;
  while (value && value != prevObj) {
    if (!includingBuiltin && value == rootPrototype) {
      break;
    }
    descriptions = descriptions.concat(Object.entries(Object.getOwnPropertyDescriptors(value)));
    prevObj = value;
    value = Object.getPrototypeOf(value);
  }
  descriptions.reverse();
  return Object.fromEntries(descriptions);
};

// https://deno.land/x/quickr@0.6.72/main/flat/_path_standardize.js
var pathStandardize = (path7) => {
  path7 = path7.path || path7;
  if (typeof path7 == "string" && path7.startsWith("file:///")) {
    path7 = fromFileUrl6(path7);
  }
  return path7;
};

// https://deno.land/x/deno_deno@1.42.1.7/main.js
var fakeEnv = {
  HOME: "/fake/home",
  SHELL: "sh",
  PWD: "./"
};
var NotFound = class extends Error {
};
var PermissionDenied = class extends Error {
};
var ConnectionRefused = class extends Error {
};
var ConnectionReset = class extends Error {
};
var ConnectionAborted = class extends Error {
};
var NotConnected = class extends Error {
};
var AddrInUse = class extends Error {
};
var AddrNotAvailable = class extends Error {
};
var BrokenPipe = class extends Error {
};
var AlreadyExists = class extends Error {
};
var InvalidData = class extends Error {
};
var TimedOut = class extends Error {
};
var Interrupted = class extends Error {
};
var WriteZero = class extends Error {
};
var WouldBlock = class extends Error {
};
var UnexpectedEof = class extends Error {
};
var BadResource = class extends Error {
};
var Http = class extends Error {
};
var Busy = class extends Error {
};
var NotSupported = class extends Error {
};
var FilesystemLoop = class extends Error {
};
var IsADirectory = class extends Error {
};
var NetworkUnreachable = class extends Error {
};
var NotADirectory = class extends Error {
};
var PermissionStatus = class {
  constructor(state) {
  }
};
var Permissions = class {
  async query() {
    return Promise.resolve(new PermissionStatus("granted"));
  }
  async revoke() {
    return Promise.resolve(new PermissionStatus("granted"));
  }
  async request() {
    return Promise.resolve(new PermissionStatus("granted"));
  }
};
var Stdin = class {
  static rid = 0;
  constructor() {
    this._inputs = [];
    this.isClosed = false;
  }
  isTerminal() {
    return false;
  }
  read(v4) {
    return Promise.resolve(new Uint8Array());
  }
  readSync(v4) {
  }
  setRaw(v4) {
    this._inputs.push(v4);
  }
  close() {
    this.isClosed = true;
  }
  readable() {
    if (globalThis.ReadableStream && !this.isClosed) {
      return new ReadableStream();
    }
  }
};
var Stdout = class {
  static rid = 1;
  constructor() {
    this._inputs = [];
  }
  write(v4) {
    this._inputs.push(v4);
    return Promise.resolve(v4.length);
  }
  writeSync(v4) {
    this._inputs.push(v4);
    return v4.length;
  }
  close() {
    this.isClosed = true;
  }
  writable() {
    if (globalThis.WritableStream && !this.isClosed) {
      return new WritableStream();
    }
  }
};
var Stderr = class {
  static rid = 2;
  constructor() {
    this._inputs = [];
  }
  write(v4) {
    this._inputs.push(v4);
    return Promise.resolve(v4.length);
  }
  writeSync(v4) {
    this._inputs.push(v4);
    return v4.length;
  }
  close() {
    this.isClosed = true;
  }
  writable() {
    if (globalThis.WritableStream && !this.isClosed) {
      return new WritableStream();
    }
  }
};
var Deno3 = globalThis.Deno ? globalThis.Deno : {
  mainModule: "file:///fake/$deno$repl.ts",
  internal: Symbol("Deno.internal"),
  version: { deno: "1.42.1", v8: "12.3.219.9", typescript: "5.4.3" },
  noColor: true,
  args: [],
  build: {
    target: "aarch64-apple-darwin",
    arch: "aarch64",
    os: "darwin",
    vendor: "apple",
    env: void 0
    // <- thats actually natively true
  },
  pid: 3,
  ppid: 2,
  env: {
    get(_4) {
      return fakeEnv[_4];
    },
    set(_4, __) {
      fakeEnv[_4] = __;
    }
  },
  errors: {
    NotFound,
    PermissionDenied,
    ConnectionRefused,
    ConnectionReset,
    ConnectionAborted,
    NotConnected,
    AddrInUse,
    AddrNotAvailable,
    BrokenPipe,
    AlreadyExists,
    InvalidData,
    TimedOut,
    Interrupted,
    WriteZero,
    WouldBlock,
    UnexpectedEof,
    BadResource,
    Http,
    Busy,
    NotSupported,
    FilesystemLoop,
    IsADirectory,
    NetworkUnreachable,
    NotADirectory
  },
  SeekMode: {
    0: "Start",
    1: "Current",
    2: "End",
    Start: 0,
    Current: 1,
    End: 2
  },
  stdin: new Stdin(),
  stdout: new Stdout(),
  stderr: new Stderr(),
  permissions: new Permissions(),
  resources() {
  },
  close() {
  },
  metrics() {
  },
  Process() {
  },
  run() {
  },
  isatty() {
  },
  writeFileSync() {
  },
  writeFile() {
  },
  writeTextFileSync() {
  },
  writeTextFile() {
  },
  readTextFile() {
  },
  readTextFileSync() {
  },
  readFile() {
  },
  readFileSync() {
  },
  watchFs() {
  },
  chmodSync() {
  },
  chmod() {
  },
  chown() {
  },
  chownSync() {
  },
  copyFileSync() {
  },
  cwd() {
    return fakeEnv["PWD"];
  },
  makeTempDirSync() {
  },
  makeTempDir() {
  },
  makeTempFileSync() {
  },
  makeTempFile() {
  },
  memoryUsage() {
  },
  mkdirSync() {
  },
  mkdir() {
  },
  chdir() {
  },
  copyFile() {
  },
  readDirSync() {
  },
  readDir() {
  },
  readLinkSync() {
  },
  readLink() {
  },
  realPathSync() {
  },
  realPath() {
  },
  removeSync() {
  },
  remove() {
  },
  renameSync() {
  },
  rename() {
  },
  statSync() {
  },
  lstatSync() {
  },
  stat() {
  },
  lstat() {
  },
  truncateSync() {
  },
  truncate() {
  },
  ftruncateSync() {
  },
  ftruncate() {
  },
  futime() {
  },
  futimeSync() {
  },
  inspect() {
  },
  exit() {
    throw Error(`Deno.exit() is not supported, so I'll just throw an error`);
  },
  execPath() {
  },
  Buffer() {
  },
  readAll() {
  },
  readAllSync() {
  },
  writeAll() {
  },
  writeAllSync() {
  },
  copy() {
  },
  iter() {
  },
  iterSync() {
  },
  read() {
  },
  readSync() {
  },
  write() {
  },
  writeSync() {
  },
  File() {
  },
  FsFile() {
  },
  open() {
  },
  openSync() {
  },
  create() {
  },
  createSync() {
  },
  seek() {
  },
  seekSync() {
  },
  connect() {
  },
  listen() {
  },
  loadavg() {
  },
  connectTls() {
  },
  listenTls() {
  },
  startTls() {
  },
  shutdown() {
  },
  fstatSync() {
  },
  fstat() {
  },
  fsyncSync() {
  },
  fsync() {
  },
  fdatasyncSync() {
  },
  fdatasync() {
  },
  symlink() {
  },
  symlinkSync() {
  },
  link() {
  },
  linkSync() {
  },
  Permissions() {
  },
  PermissionStatus() {
  },
  serveHttp() {
  },
  serve() {
  },
  resolveDns() {
  },
  upgradeWebSocket() {
  },
  utime() {
  },
  utimeSync() {
  },
  kill() {
  },
  addSignalListener() {
  },
  removeSignalListener() {
  },
  refTimer() {
  },
  unrefTimer() {
  },
  osRelease() {
    return "fake";
  },
  osUptime() {
  },
  hostname() {
    return "fake";
  },
  systemMemoryInfo() {
    return {
      total: 17179869184,
      free: 77104,
      available: 3279456,
      buffers: 0,
      cached: 0,
      swapTotal: 18253611008,
      swapFree: 878313472
    };
  },
  networkInterfaces() {
    return [];
  },
  consoleSize() {
    return { columns: 120, rows: 20 };
  },
  gid() {
    return 20;
  },
  uid() {
    return 501;
  },
  Command() {
  },
  ChildProcess() {
  },
  test() {
  },
  bench() {
  }
};
var internal = Deno3.internal;
var resources = Deno3.resources;
var close = Deno3.close;
var metrics = Deno3.metrics;
var Process2 = Deno3.Process;
var run = Deno3.run;
var isatty = Deno3.isatty;
var writeFileSync = Deno3.writeFileSync;
var writeFile = Deno3.writeFile;
var writeTextFileSync = Deno3.writeTextFileSync;
var writeTextFile = Deno3.writeTextFile;
var readTextFile = Deno3.readTextFile;
var readTextFileSync = Deno3.readTextFileSync;
var readFile = Deno3.readFile;
var readFileSync = Deno3.readFileSync;
var watchFs = Deno3.watchFs;
var chmodSync = Deno3.chmodSync;
var chmod = Deno3.chmod;
var chown = Deno3.chown;
var chownSync = Deno3.chownSync;
var copyFileSync2 = Deno3.copyFileSync;
var cwd2 = Deno3.cwd;
var makeTempDirSync = Deno3.makeTempDirSync;
var makeTempDir = Deno3.makeTempDir;
var makeTempFileSync = Deno3.makeTempFileSync;
var makeTempFile = Deno3.makeTempFile;
var memoryUsage2 = Deno3.memoryUsage;
var mkdirSync = Deno3.mkdirSync;
var mkdir = Deno3.mkdir;
var chdir2 = Deno3.chdir;
var copyFile2 = Deno3.copyFile;
var readDirSync = Deno3.readDirSync;
var readDir = Deno3.readDir;
var readLinkSync = Deno3.readLinkSync;
var readLink = Deno3.readLink;
var realPathSync = Deno3.realPathSync;
var realPath = Deno3.realPath;
var removeSync = Deno3.removeSync;
var remove = Deno3.remove;
var renameSync = Deno3.renameSync;
var rename = Deno3.rename;
var version3 = Deno3.version;
var build2 = Deno3.build;
var statSync = Deno3.statSync;
var lstatSync = Deno3.lstatSync;
var stat = Deno3.stat;
var lstat = Deno3.lstat;
var truncateSync = Deno3.truncateSync;
var truncate = Deno3.truncate;
var ftruncateSync = Deno3.ftruncateSync;
var ftruncate = Deno3.ftruncate;
var futime = Deno3.futime;
var futimeSync = Deno3.futimeSync;
var errors = Deno3.errors;
var inspect3 = Deno3.inspect;
var env3 = Deno3.env;
var exit2 = Deno3.exit;
var execPath2 = Deno3.execPath;
var Buffer4 = Deno3.Buffer;
var readAll = Deno3.readAll;
var readAllSync = Deno3.readAllSync;
var writeAll2 = Deno3.writeAll;
var writeAllSync = Deno3.writeAllSync;
var copy4 = Deno3.copy;
var iter3 = Deno3.iter;
var iterSync = Deno3.iterSync;
var SeekMode = Deno3.SeekMode;
var read = Deno3.read;
var readSync = Deno3.readSync;
var write2 = Deno3.write;
var writeSync = Deno3.writeSync;
var File = Deno3.File;
var FsFile = Deno3.FsFile;
var open = Deno3.open;
var openSync = Deno3.openSync;
var create = Deno3.create;
var createSync = Deno3.createSync;
var stdin3 = Deno3.stdin;
var stdout3 = Deno3.stdout;
var stderr3 = Deno3.stderr;
var seek = Deno3.seek;
var seekSync = Deno3.seekSync;
var connect = Deno3.connect;
var listen = Deno3.listen;
var loadavg = Deno3.loadavg;
var connectTls = Deno3.connectTls;
var listenTls = Deno3.listenTls;
var startTls = Deno3.startTls;
var shutdown = Deno3.shutdown;
var fstatSync = Deno3.fstatSync;
var fstat = Deno3.fstat;
var fsyncSync = Deno3.fsyncSync;
var fsync = Deno3.fsync;
var fdatasyncSync = Deno3.fdatasyncSync;
var fdatasync = Deno3.fdatasync;
var symlink = Deno3.symlink;
var symlinkSync = Deno3.symlinkSync;
var link = Deno3.link;
var linkSync = Deno3.linkSync;
var permissions = Deno3.permissions;
var serveHttp = Deno3.serveHttp;
var serve = Deno3.serve;
var resolveDns = Deno3.resolveDns;
var upgradeWebSocket = Deno3.upgradeWebSocket;
var utime2 = Deno3.utime;
var utimeSync2 = Deno3.utimeSync;
var kill2 = Deno3.kill;
var addSignalListener = Deno3.addSignalListener;
var removeSignalListener = Deno3.removeSignalListener;
var refTimer = Deno3.refTimer;
var unrefTimer = Deno3.unrefTimer;
var osRelease = Deno3.osRelease;
var osUptime = Deno3.osUptime;
var hostname = Deno3.hostname;
var systemMemoryInfo = Deno3.systemMemoryInfo;
var networkInterfaces = Deno3.networkInterfaces;
var consoleSize = Deno3.consoleSize;
var gid = Deno3.gid;
var uid = Deno3.uid;
var Command = Deno3.Command;
var ChildProcess = Deno3.ChildProcess;
var test = Deno3.test;
var bench = Deno3.bench;
var pid2 = Deno3.pid;
var ppid = Deno3.ppid;
var noColor = Deno3.noColor;
var args = Deno3.args;
var mainModule = Deno3.mainModule;
try {
  globalThis.Deno = Deno3;
} catch (error) {
}
var DenoPermissions = Deno3.Permissions;
var DenoPermissionStatus = Deno3.PermissionStatus;

// https://deno.land/x/quickr@0.6.72/main/flat/make_absolute_path.js
var makeAbsolutePath = (path7) => {
  if (!isAbsolute6(path7)) {
    return normalize8(join9(cwd2(), path7));
  } else {
    return normalize8(path7);
  }
};

// https://deno.land/x/quickr@0.6.72/main/flat/normalize_path.js
var normalizePath = (path7) => normalize8(pathStandardize(path7)).replace(/\/$/, "");

// https://deno.land/x/quickr@0.6.72/main/flat/path.js
var Deno4 = { lstatSync, statSync, readLinkSync };
var PathTools = { parse: parse8, basename: basename6, dirname: dirname6, relative: relative6, isAbsolute: isAbsolute6 };
var Path = class {
  constructor({ path: path7, _lstatData, _statData }) {
    this.path = path7;
    this._lstat = _lstatData;
    this._data = _statData;
  }
  // 
  // core data sources
  // 
  refresh() {
    this._lstat = null;
    this._data = null;
  }
  get lstat() {
    if (!this._lstat) {
      try {
        this._lstat = Deno4.lstatSync(this.path);
      } catch (error) {
        this._lstat = { doesntExist: true };
      }
    }
    return this._lstat;
  }
  get stat() {
    if (!this._stat) {
      const lstat2 = this.lstat;
      if (!lstat2.isSymlink) {
        this._stat = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          this._stat = Deno4.statSync(this.path);
        } catch (error) {
          this._stat = {};
          if (error.message.match(/^Too many levels of symbolic links/)) {
            this._stat.isBrokenLink = true;
            this._stat.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            this._stat.isBrokenLink = true;
          } else {
            throw error;
          }
        }
      }
    }
    return this._stat;
  }
  // 
  // main attributes
  // 
  get exists() {
    const lstat2 = this.lstat;
    return !lstat2.doesntExist;
  }
  get name() {
    return PathTools.parse(this.path).name;
  }
  get extension() {
    return PathTools.parse(this.path).ext;
  }
  get basename() {
    return this.path && PathTools.basename(this.path);
  }
  get parentPath() {
    return this.path && PathTools.dirname(this.path);
  }
  relativePathFrom(parentPath) {
    return PathTools.relative(parentPath, this.path);
  }
  get link() {
    const lstat2 = this.lstat;
    if (lstat2.isSymlink) {
      return Deno4.readLinkSync(this.path);
    } else {
      return null;
    }
  }
  get isSymlink() {
    const lstat2 = this.lstat;
    return !!lstat2.isSymlink;
  }
  get isRelativeSymlink() {
    const lstat2 = this.lstat;
    const isNotSymlink = !lstat2.isSymlink;
    if (isNotSymlink) {
      return false;
    }
    const relativeOrAbsolutePath = Deno4.readLinkSync(this.path);
    return !PathTools.isAbsolute(relativeOrAbsolutePath);
  }
  get isAbsoluteSymlink() {
    const lstat2 = this.lstat;
    const isNotSymlink = !lstat2.isSymlink;
    if (isNotSymlink) {
      return false;
    }
    const relativeOrAbsolutePath = Deno4.readLinkSync(this.path);
    return PathTools.isAbsolute(relativeOrAbsolutePath);
  }
  get isBrokenLink() {
    const stat2 = this.stat;
    return !!stat2.isBrokenLink;
  }
  get isLoopOfLinks() {
    const stat2 = this.stat;
    return !!stat2.isLoopOfLinks;
  }
  get isFile() {
    const lstat2 = this.lstat;
    if (lstat2.doesntExist) {
      return false;
    }
    if (!lstat2.isSymlink) {
      return lstat2.isFile;
    } else {
      return !!this.stat.isFile;
    }
  }
  get isFolder() {
    const lstat2 = this.lstat;
    if (lstat2.doesntExist) {
      return false;
    }
    if (!lstat2.isSymlink) {
      return lstat2.isDirectory;
    } else {
      return !!this.stat.isDirectory;
    }
  }
  get sizeInBytes() {
    const lstat2 = this.lstat;
    return lstat2.size;
  }
  get permissions() {
    const { mode } = this.lstat;
    return {
      owner: {
        //          rwxrwxrwx
        canRead: !!(256 & mode),
        canWrite: !!(128 & mode),
        canExecute: !!(64 & mode)
      },
      group: {
        canRead: !!(32 & mode),
        canWrite: !!(16 & mode),
        canExecute: !!(8 & mode)
      },
      others: {
        canRead: !!(4 & mode),
        canWrite: !!(2 & mode),
        canExecute: !!(1 & mode)
      }
    };
  }
  // aliases
  get isDirectory() {
    return this.isFolder;
  }
  get dirname() {
    return this.parentPath;
  }
  toJSON() {
    return {
      exists: this.exists,
      name: this.name,
      extension: this.extension,
      basename: this.basename,
      parentPath: this.parentPath,
      isSymlink: this.isSymlink,
      isBrokenLink: this.isBrokenLink,
      isLoopOfLinks: this.isLoopOfLinks,
      isFile: this.isFile,
      isFolder: this.isFolder,
      sizeInBytes: this.sizeInBytes,
      permissions: this.permissions,
      isDirectory: this.isDirectory,
      dirname: this.dirname
    };
  }
};

// https://deno.land/x/quickr@0.6.72/main/flat/escape_glob_for_posix.js
var escapeGlobForPosix = (glob2) => {
  return glob2.replace(/[\[\\\*\{\?@\+\!]/g, `\\$&`);
};

// https://deno.land/x/quickr@0.6.72/main/flat/escape_glob_for_windows.js
var escapeGlobForWindows = (glob2) => {
  return glob2.replace(/[\[`\*\{\?@\+\!]/g, "`$&");
};

// https://deno.land/x/quickr@0.6.72/main/flat/escape_glob.js
var escapeGlob = build2.os == "windows" ? escapeGlobForWindows : escapeGlobForPosix;

// https://deno.land/x/quickr@0.6.72/main/file_system.js
var cache2 = {};
function setTrueBit(n12, bit) {
  return n12 | 1 << bit;
}
function setFalseBit(n12, bit) {
  return ~(~n12 | 1 << bit);
}
var defaultOptionsHelper = (options) => ({
  renameExtension: options.renameExtension || FileSystem.defaultRenameExtension,
  overwrite: options.overwrite
});
var fileLockSymbol = Symbol.for("fileLock");
var locker = globalThis[fileLockSymbol] || {};
var grabPathLock = async (path7) => {
  while (locker[path7]) {
    await new Promise((resolve10) => setTimeout(resolve10, 70));
  }
  locker[path7] = true;
};
var FileSystem = {
  defaultRenameExtension: ".old",
  denoExecutablePath: Deno.execPath(),
  parentPath: dirname6,
  dirname: dirname6,
  basename: basename6,
  extname: extname6,
  join: join9,
  normalize: normalizePath,
  normalizePath,
  isAbsolutePath: isAbsolute6,
  isRelativePath: (...args2) => !isAbsolute6(...args2),
  makeRelativePath: ({ from: from2, to }) => relative6(from2.path || from2, to.path || to),
  makeAbsolutePath,
  pathDepth(path7) {
    path7 = FileSystem.normalizePath(path7);
    let count = 0;
    for (const eachChar of path7.path || path7) {
      if (eachChar == "/") {
        count++;
      }
    }
    if (path7[0] == "/") {
      count--;
    }
    return count + 1;
  },
  pathPieces(path7) {
    path7 = path7.path || path7;
    const result = parse8(path7);
    const folderList = [];
    let dirname10 = result.dir;
    while (true) {
      folderList.push(basename6(dirname10));
      if (dirname10 == dirname6(dirname10)) {
        break;
      }
      dirname10 = dirname6(dirname10);
    }
    folderList.reverse();
    return [folderList, result.name, result.ext];
  },
  /**
   * add to name, preserve file extension
   *
   * @example
   * ```js
   * let newName = FileSystem.extendName({ path: "a/blah.thing.js", string: ".old" })
   * newName == "a/blah.old.thing.js"
   * ```
   *
   * @param arg1.path - item path
   * @param arg1.string - the string to append to the name
   * @return {string} - the new path
   */
  extendName({ path: path7, string }) {
    path7 = pathStandardize(path7);
    const [name, ...extensions] = basename6(path7).split(".");
    return `${dirname6(path7)}/${name}${string}${extensions.length == 0 ? "" : `.${extensions.join(".")}`}`;
  },
  /**
   * All Parent Paths
   *
   * @param {String} path - path doesnt need to exist
   * @return {[String]} longest to shortest parent path
   */
  allParentPaths(path7) {
    const pathStartsWithDotSlash = path7.startsWith("./");
    path7 = FileSystem.normalizePath(path7);
    if (path7 === ".") {
      return [];
    }
    const dotGotRemoved = pathStartsWithDotSlash && !path7.startsWith("./");
    let previousPath = null;
    let allPaths = [];
    while (1) {
      previousPath = path7;
      path7 = FileSystem.parentPath(path7);
      if (previousPath === path7) {
        break;
      }
      allPaths.push(path7);
    }
    allPaths.reverse();
    allPaths = allPaths.filter((each2) => each2 != ".");
    if (dotGotRemoved) {
      allPaths.push(".");
    }
    return allPaths;
  },
  pathOfCaller(callerNumber = void 0) {
    const err = new Error();
    let filePaths = findAll(/^.+file:\/\/(\/[\w\W]*?):/gm, err.stack).map((each2) => each2[1]);
    if (callerNumber) {
      filePaths = filePaths.slice(callerNumber);
    }
    try {
      const secondPath = filePaths[1];
      if (secondPath) {
        try {
          if (Deno.statSync(secondPath).isFile) {
            return secondPath;
          }
        } catch (error) {
        }
      }
    } catch (error) {
    }
    return Deno.cwd();
  },
  get home() {
    if (!cache2.home) {
      if (Deno.build.os != "windows") {
        cache2.home = Deno.env.get("HOME");
      } else {
        cache2.home = Deno.env.get("HOMEPATH");
      }
    }
    return cache2.home;
  },
  get workingDirectory() {
    return Deno.cwd();
  },
  set workingDirectory(value) {
    Deno.chdir(value);
  },
  get cwd() {
    return FileSystem.workingDirectory;
  },
  set cwd(value) {
    return FileSystem.workingDirectory = value;
  },
  get pwd() {
    return FileSystem.cwd;
  },
  set pwd(value) {
    return FileSystem.cwd = value;
  },
  cd(path7) {
    Deno.chdir(path7);
  },
  changeDirectory(path7) {
    Deno.chdir(path7);
  },
  get thisFile() {
    const err = new Error();
    const filePaths = [...err.stack.matchAll(/^.+(file:\/\/\/[\w\W]*?):/gm)].map((each2) => each2[1] && fromFileUrl6(each2[1]));
    const firstPath = filePaths[0];
    if (firstPath) {
      try {
        if (Deno.statSync(firstPath).isFile) {
          return firstPath;
        }
      } catch (error) {
      }
    }
    return ":<interpreter>:";
  },
  get thisFolder() {
    const err = new Error();
    const filePaths = [...err.stack.matchAll(/^.+(file:\/\/\/[\w\W]*?):/gm)].map((each2) => each2[1] && fromFileUrl6(each2[1]));
    const firstPath = filePaths[0];
    if (firstPath) {
      try {
        if (Deno.statSync(firstPath).isFile) {
          return dirname6(firstPath);
        }
      } catch (error) {
      }
    }
    return Deno.cwd();
  },
  async read(path7) {
    path7 = pathStandardize(path7);
    await grabPathLock(path7);
    let output2;
    try {
      output2 = await Deno.readTextFile(path7);
    } catch (error) {
    }
    delete locker[path7];
    return output2;
  },
  async readBytes(path7) {
    path7 = pathStandardize(path7);
    await grabPathLock(path7);
    let output2;
    try {
      output2 = await Deno.readFile(path7);
    } catch (error) {
    }
    delete locker[path7];
    return output2;
  },
  async *readLinesIteratively(path7) {
    path7 = pathStandardize(path7);
    await grabPathLock(path7);
    try {
      const file = await Deno.open(path7);
      try {
        yield* readLines(file);
      } finally {
        Deno.close(file.rid);
      }
    } finally {
      delete locker[path7];
    }
  },
  async info(fileOrFolderPath, _cachedLstat = null) {
    fileOrFolderPath = pathStandardize(fileOrFolderPath);
    await grabPathLock(fileOrFolderPath);
    try {
      const lstat2 = _cachedLstat || await Deno.lstat(fileOrFolderPath).catch(() => ({ doesntExist: true }));
      let stat2 = {};
      if (!lstat2.isSymlink) {
        stat2 = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          stat2 = await Deno.stat(fileOrFolderPath);
        } catch (error) {
          if (error.message.match(/^Too many levels of symbolic links/)) {
            stat2.isBrokenLink = true;
            stat2.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            stat2.isBrokenLink = true;
          } else {
            if (!error.message.match(/^PermissionDenied:/)) {
              return { doesntExist: true, permissionDenied: true };
            }
            throw error;
          }
        }
      }
      return new Path({ path: fileOrFolderPath, _lstatData: lstat2, _statData: stat2 });
    } finally {
      delete locker[fileOrFolderPath];
    }
  },
  async move({ path: path7, item, newParentFolder, newName, force = true, overwrite = false, renameExtension = null }) {
    item = item || path7;
    const oldPath = item.path || item;
    const oldName = FileSystem.basename(oldPath);
    const pathInfo = item instanceof Object || FileSystem.sync.info(oldPath);
    const newPath = `${newParentFolder || FileSystem.parentPath(oldPath)}/${newName || oldName}`;
    if (pathInfo.isSymlink && !item.isBrokenLink) {
      const link2 = Deno.readLinkSync(pathInfo.path);
      if (!isAbsolute6(link2)) {
        const linkTargetBeforeMove = `${FileSystem.parentPath(pathInfo.path)}/${link2}`;
        await FileSystem.relativeLink({
          existingItem: linkTargetBeforeMove,
          newItem: newPath,
          force,
          overwrite,
          renameExtension
        });
        await FileSystem.remove(pathInfo);
      }
    }
    if (force) {
      FileSystem.sync.clearAPathFor(newPath, { overwrite, renameExtension });
    }
    await move(oldPath, newPath);
  },
  async rename({ from: from2, to, force = true, overwrite = false, renameExtension = null }) {
    return FileSystem.move({ path: from2, newParentFolder: FileSystem.parentPath(to), newName: FileSystem.basename(to), force, overwrite, renameExtension });
  },
  async remove(fileOrFolder) {
    fileOrFolder = pathStandardize(fileOrFolder);
    if (fileOrFolder instanceof Array) {
      return Promise.all(fileOrFolder.map(FileSystem.remove));
    }
    fileOrFolder = fileOrFolder.path || fileOrFolder;
    const pathInfo = await FileSystem.info(fileOrFolder);
    if (pathInfo.isFile || pathInfo.isSymlink) {
      return Deno.remove(pathInfo.path.replace(/\/+$/, ""));
    } else if (pathInfo.exists) {
      return Deno.remove(pathInfo.path.replace(/\/+$/, ""), { recursive: true });
    }
  },
  async finalTargetOf(path7, options = {}) {
    const { _parentsHaveBeenChecked, cache: cache3 } = { _parentsHaveBeenChecked: false, cache: {}, ...options };
    const originalWasItem = path7 instanceof Path;
    path7 = path7.path || path7;
    let result = await Deno.lstat(path7).catch(() => ({ doesntExist: true }));
    if (result.doesntExist) {
      return null;
    }
    path7 = await FileSystem.makeHardPathTo(path7, { cache: cache3 });
    const pathChain = [];
    while (result.isSymlink) {
      const relativeOrAbsolutePath = await Deno.readLink(path7);
      if (isAbsolute6(relativeOrAbsolutePath)) {
        path7 = relativeOrAbsolutePath;
      } else {
        path7 = `${FileSystem.parentPath(path7)}/${relativeOrAbsolutePath}`;
      }
      result = await Deno.lstat(path7).catch(() => ({ doesntExist: true }));
      if (result.doesntExist) {
        return null;
      }
      path7 = await FileSystem.makeHardPathTo(path7, { cache: cache3 });
      if (pathChain.includes(path7)) {
        return null;
      }
      pathChain.push(path7);
    }
    path7 = FileSystem.normalizePath(path7);
    if (originalWasItem) {
      return new Path({ path: path7 });
    } else {
      return path7;
    }
  },
  async nextTargetOf(path7, options = {}) {
    const originalWasItem = path7 instanceof Path;
    const item = originalWasItem ? path7 : new Path({ path: path7 });
    const lstat2 = item.lstat;
    if (lstat2.isSymlink) {
      const relativeOrAbsolutePath = Deno.readLinkSync(item.path);
      if (isAbsolute6(relativeOrAbsolutePath)) {
        if (originalWasItem) {
          return new Path({ path: relativeOrAbsolutePath });
        } else {
          return relativeOrAbsolutePath;
        }
      } else {
        const path8 = `${await FileSystem.makeHardPathTo(dirname6(item.path))}/${relativeOrAbsolutePath}`;
        if (originalWasItem) {
          return new Path({ path: path8 });
        } else {
          return path8;
        }
      }
    } else {
      if (originalWasItem) {
        return item;
      } else {
        return item.path;
      }
    }
  },
  async ensureIsFile(path7, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper(options);
    await FileSystem.ensureIsFolder(FileSystem.parentPath(path7), { overwrite, renameExtension });
    path7 = path7.path || path7;
    const pathInfo = await FileSystem.info(path7);
    if (pathInfo.isFile && !pathInfo.isDirectory) {
      return path7;
    } else {
      await FileSystem.write({ path: path7, data: "" });
      return path7;
    }
  },
  async ensureIsFolder(path7, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper(options);
    path7 = path7.path || path7;
    path7 = FileSystem.makeAbsolutePath(path7);
    const parentPath = dirname6(path7);
    if (parentPath == path7) {
      return;
    }
    const parent = await FileSystem.info(parentPath);
    if (!parent.isDirectory) {
      FileSystem.sync.ensureIsFolder(parentPath, { overwrite, renameExtension });
    }
    let pathInfo = FileSystem.sync.info(path7);
    if (pathInfo.exists && !pathInfo.isDirectory) {
      if (overwrite) {
        await FileSystem.remove(path7);
      } else {
        await FileSystem.moveOutOfTheWay(eachPath, { extension: renameExtension });
      }
    }
    await Deno.mkdir(path7, { recursive: true });
    return path7;
  },
  /**
   * Move/Remove everything and Ensure parent folders
   *
   * @param path
   * @param options.overwrite - if false, then things in the way will be moved instead of deleted
   * @param options.renameExtension - the string to append when renaming files to get them out of the way
   * 
   * @note
   *     very agressive: will change whatever is necessary to make sure a parent exists
   * 
   * @example
   * ```js
   * await FileSystem.clearAPathFor("./something")
   * ```
   */
  async clearAPathFor(path7, options = { overwrite: false, renameExtension: null }) {
    const { overwrite, renameExtension } = defaultOptionsHelper(options);
    const originalPath = path7;
    const paths = [];
    while (dirname6(path7) !== path7) {
      paths.push(path7);
      path7 = dirname6(path7);
    }
    for (const eachPath2 of paths.reverse()) {
      const info = await FileSystem.info(eachPath2);
      if (!info.exists) {
        break;
      } else if (info.isFile) {
        if (overwrite) {
          await FileSystem.remove(eachPath2);
        } else {
          await FileSystem.moveOutOfTheWay(eachPath2, { extension: renameExtension });
        }
      }
    }
    await Deno.mkdir(dirname6(originalPath), { recursive: true });
    return originalPath;
  },
  async moveOutOfTheWay(path7, options = { extension: null }) {
    const extension = options?.extension || FileSystem.defaultRenameExtension;
    const info = await FileSystem.info(path7);
    if (info.exists) {
      const newPath = path7 + extension;
      await FileSystem.moveOutOfTheWay(newPath, { extension });
      await move(path7, newPath);
    }
  },
  /**
   * find a root folder based on a child path
   *
   * @example
   * ```js
   *     import { FileSystem } from "https://deno.land/x/quickr/main/file_system.js"
   * 
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git")
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil({
   *         subPath:".git",
   *         startPath: FileSystem.pwd,
   *     })
   *
   *     // below will result in that^ same folder (assuming all your .git folders have config files)
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git/config")
   * 
   *     // below will result in the same folder, but only if theres a local master branch
   *     var gitParentFolderOrNull = await FileSystem.walkUpUntil(".git/refs/heads/master")
   *```
   */
  async walkUpUntil(subPath, startPath = null) {
    subPath = subPath instanceof Path ? subPath.path : subPath;
    if (subPath instanceof Object) {
      var { subPath, startPath } = subPath;
    }
    let here;
    if (!startPath) {
      here = Deno.cwd();
    } else if (isAbsolute6(startPath)) {
      here = startPath;
    } else {
      here = join9(here, startPath);
    }
    while (1) {
      let checkPath = join9(here, subPath);
      const pathInfo = await Deno.lstat(checkPath).catch(() => ({ doesntExist: true }));
      if (!pathInfo.doesntExist) {
        return here;
      }
      if (here == dirname6(here)) {
        return null;
      } else {
        here = dirname6(here);
      }
    }
  },
  async copy({ from: from2, to, preserveTimestamps = true, force = true, overwrite = false, renameExtension = null }) {
    const existingItemDoesntExist = (await Deno.stat(from2).catch(() => ({ doesntExist: true }))).doesntExist;
    if (existingItemDoesntExist) {
      throw Error(`
Tried to copy from:${from2}, to:${to}
but "from" didn't seem to exist

`);
    }
    if (force) {
      FileSystem.sync.clearAPathFor(to, { overwrite, renameExtension });
    }
    return copy2(from2, to, { force, preserveTimestamps: true });
  },
  async relativeLink({ existingItem, newItem, force = true, overwrite = false, allowNonExistingTarget = false, renameExtension = null }) {
    const existingItemPath = (existingItem.path || existingItem).replace(/\/+$/, "");
    const newItemPath = FileSystem.normalizePath((newItem.path || newItem).replace(/\/+$/, ""));
    const existingItemDoesntExist = (await Deno.lstat(existingItemPath).catch(() => ({ doesntExist: true }))).doesntExist;
    if (!allowNonExistingTarget && existingItemDoesntExist) {
      throw Error(`
Tried to create a relativeLink between existingItem:${existingItemPath}, newItem:${newItemPath}
but existingItem didn't actually exist`);
    } else {
      const parentOfNewItem = FileSystem.parentPath(newItemPath);
      await FileSystem.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
      const hardPathToNewItem = `${await FileSystem.makeHardPathTo(parentOfNewItem)}/${FileSystem.basename(newItemPath)}`;
      const hardPathToExistingItem = await FileSystem.makeHardPathTo(existingItemPath);
      const pathFromNewToExisting = relative6(hardPathToNewItem, hardPathToExistingItem).replace(/^\.\.\//, "");
      if (force) {
        FileSystem.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
      }
      return Deno.symlink(
        pathFromNewToExisting,
        hardPathToNewItem
      );
    }
  },
  async absoluteLink({ existingItem, newItem, force = true, allowNonExistingTarget = false, overwrite = false, renameExtension = null }) {
    existingItem = (existingItem.path || existingItem).replace(/\/+$/, "");
    const newItemPath = FileSystem.normalizePath(newItem.path || newItem).replace(/\/+$/, "");
    const existingItemDoesntExist = (await Deno.lstat(existingItem).catch(() => ({ doesntExist: true }))).doesntExist;
    if (!allowNonExistingTarget && existingItemDoesntExist) {
      throw Error(`
Tried to create a relativeLink between existingItem:${existingItem}, newItemPath:${newItemPath}
but existingItem didn't actually exist`);
    } else {
      const parentOfNewItem = FileSystem.parentPath(newItemPath);
      await FileSystem.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
      const hardPathToNewItem = `${await FileSystem.makeHardPathTo(parentOfNewItem)}/${FileSystem.basename(newItemPath)}`;
      if (force) {
        FileSystem.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
      }
      return Deno.symlink(
        FileSystem.makeAbsolutePath(existingItem),
        newItemPath
      );
    }
  },
  async hardLink({ existingItem, newItem, force = true, overwrite = false, renameExtension = null, hardLink = false }) {
    existingItem = (existingItem.path || existingItem).replace(/\/+$/, "");
    const newItemPath = FileSystem.normalizePath(newItem.path || newItem).replace(/\/+$/, "");
    const existingItemDoesntExist = (await Deno.lstat(existingItem).catch(() => ({ doesntExist: true }))).doesntExist;
    if (existingItemDoesntExist) {
      throw Error(`
Tried to create a relativeLink between existingItem:${existingItem}, newItemPath:${newItemPath}
but existingItem didn't actually exist`);
    } else {
      const parentOfNewItem = FileSystem.parentPath(newItemPath);
      await FileSystem.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
      if (force) {
        FileSystem.sync.clearAPathFor(newItem, { overwrite, renameExtension });
      }
      return Deno.link(
        FileSystem.makeAbsolutePath(existingItem),
        newItemPath
      );
    }
  },
  async *iterateBasenamesIn(pathOrFileInfo) {
    const info = pathOrFileInfo instanceof Path ? pathOrFileInfo : await FileSystem.info(pathOrFileInfo);
    if (info.isFolder) {
      for await (const dirEntry of Deno.readDir(info.path)) {
        yield dirEntry.name;
      }
    }
  },
  listBasenamesIn(pathOrFileInfo) {
    return asyncIteratorToList2(FileSystem.iterateBasenamesIn(pathOrFileInfo));
  },
  async *iteratePathsIn(pathOrFileInfo, options = { recursively: false, shouldntInclude: null, shouldntExplore: null, searchOrder: "breadthFirstSearch", maxDepth: Infinity, dontFollowSymlinks: false, dontReturnSymlinks: false, maxDepthFromRoot: null }) {
    let info;
    try {
      info = pathOrFileInfo instanceof Path ? pathOrFileInfo : await FileSystem.info(pathOrFileInfo);
    } catch (error) {
      if (!error.message.match(/^PermissionDenied:/)) {
        throw error;
      }
    }
    const path7 = info.path;
    const startingDepth = FileSystem.makeAbsolutePath(path7).split("/").length - 1;
    options.recursively = options.recursively == false && options.maxDepth == 1 ? false : options.recursively;
    if (options.maxDepthFromRoot == null) {
      options.maxDepthFromRoot = Infinity;
    }
    if (options.maxDepth != Infinity && options.maxDepth != null) {
      options.maxDepthFromRoot = startingDepth + options.maxDepth;
    }
    options.maxDepth = null;
    if (startingDepth < options.maxDepthFromRoot) {
      if (!options.recursively) {
        if (info.isFolder) {
          if (!options.shouldntInclude) {
            for await (const each2 of Deno.readDir(path7)) {
              if (options.dontReturnSymlinks && each2.isSymlink) {
                continue;
              }
              yield join9(path7, each2.name);
            }
          } else {
            const shouldntInclude = options.shouldntInclude;
            for await (const each2 of Deno.readDir(path7)) {
              const eachPath2 = join9(path7, each2.name);
              if (options.dontReturnSymlinks && each2.isSymlink) {
                continue;
              }
              const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachPath2);
              if (!shouldntIncludeThis) {
                yield eachPath2;
              }
            }
          }
        }
      } else {
        options = { exclude: /* @__PURE__ */ new Set(), searchOrder: "breadthFirstSearch", maxDepth: Infinity, ...options };
        options.searchOrder = options.searchOrder || "breadthFirstSearch";
        const { shouldntExplore, shouldntInclude } = options;
        if (!["breadthFirstSearch", "depthFirstSearch"].includes(options.searchOrder)) {
          throw Error(`when calling FileSystem.iterateItemsIn('${path7}', { searchOrder: ${options.searchOrder} })

    The searchOrder currently can only be 'depthFirstSearch' or 'breadthFirstSearch'
    However, it was not either of those: ${options.searchOrder}`);
        }
        const useBreadthFirstSearch = options.searchOrder == "breadthFirstSearch";
        const shouldntExploreThis = shouldntExplore && await shouldntExplore(info.path, info);
        if (!shouldntExploreThis && info.isFolder) {
          options.exclude = options.exclude instanceof Set ? options.exclude : new Set(options.exclude);
          if (!options.exclude.has(path7)) {
            const followSymlinks = !options.dontFollowSymlinks;
            const absolutePathVersion = FileSystem.makeAbsolutePath(path7);
            options.exclude.add(absolutePathVersion);
            const searchAfterwords = [];
            for await (const entry of Deno.readDir(path7)) {
              const eachPath2 = join9(path7, entry.name);
              if (options.dontReturnSymlinks && each.isSymlink) {
                continue;
              }
              const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachPath2);
              if (!shouldntIncludeThis) {
                yield eachPath2;
              }
              if (entry.isFile) {
                continue;
              }
              if (followSymlinks && !entry.isDirectory) {
                let isSymlinkToDirectory = false;
                try {
                  isSymlinkToDirectory = (await Deno.stat(eachPath2)).isDirectory;
                } catch (error) {
                }
                if (!isSymlinkToDirectory) {
                  continue;
                }
              }
              if (useBreadthFirstSearch) {
                searchAfterwords.push(eachPath2);
              } else {
                for await (const eachSubPath of FileSystem.iteratePathsIn(eachPath2, options)) {
                  yield eachSubPath;
                }
              }
            }
            options.recursively = false;
            while (searchAfterwords.length > 0) {
              const next = searchAfterwords.shift();
              for await (const eachSubPath of FileSystem.iteratePathsIn(next, options)) {
                yield eachSubPath;
                searchAfterwords.push(eachSubPath);
              }
            }
          }
        }
      }
    }
  },
  listPathsIn(pathOrFileInfo, options) {
    return asyncIteratorToList2(FileSystem.iteratePathsIn(pathOrFileInfo, options));
  },
  async *iterateItemsIn(pathOrFileInfo, options = { recursively: false, shouldntInclude: null, shouldntExplore: null, searchOrder: "breadthFirstSearch", maxDepth: Infinity }) {
    options = { exclude: /* @__PURE__ */ new Set(), searchOrder: "breadthFirstSearch", maxDepth: Infinity, ...options };
    options.searchOrder = options.searchOrder || "breadthFirstSearch";
    options.recursively = options.recursively == false && options.maxDepth == 1 ? false : options.recursively;
    const { shouldntExplore, shouldntInclude } = options;
    const info = pathOrFileInfo instanceof Path ? pathOrFileInfo : await FileSystem.info(pathOrFileInfo);
    const path7 = info.path;
    if (!["breadthFirstSearch", "depthFirstSearch"].includes(options.searchOrder)) {
      throw Error(`when calling FileSystem.iterateItemsIn('${path7}', { searchOrder: ${options.searchOrder} })

    The searchOrder currently can only be 'depthFirstSearch' or 'breadthFirstSearch'
    However, it was not either of those: ${options.searchOrder}`);
    }
    const useBreadthFirstSearch = options.searchOrder == "breadthFirstSearch";
    const shouldntExploreThis = shouldntExplore && await shouldntExplore(info);
    if (!shouldntExploreThis && options.maxDepth > 0 && info.isFolder) {
      options.exclude = options.exclude instanceof Set ? options.exclude : new Set(options.exclude);
      if (!options.exclude.has(path7)) {
        const absolutePathVersion = FileSystem.makeAbsolutePath(path7);
        options.exclude.add(absolutePathVersion);
        options.maxDepth -= 1;
        const searchAfterwords = [];
        for await (const entry of Deno.readDir(path7)) {
          const eachItem = await FileSystem.info(join9(path7, entry.name));
          const shouldntIncludeThis = shouldntInclude && await shouldntInclude(eachItem);
          if (!shouldntIncludeThis) {
            yield eachItem;
          }
          if (options.recursively) {
            if (eachItem.isFolder) {
              if (useBreadthFirstSearch) {
                searchAfterwords.push(eachItem);
              } else {
                for await (const eachSubPath of FileSystem.iterateItemsIn(eachItem, options)) {
                  yield eachSubPath;
                }
              }
            }
          }
        }
        options.recursively = false;
        while (searchAfterwords.length > 0) {
          const next = searchAfterwords.shift();
          for await (const eachSubItem of FileSystem.iterateItemsIn(next, options)) {
            yield eachSubItem;
            if (eachSubItem.isFolder) {
              searchAfterwords.push(eachSubItem);
            }
          }
        }
      }
    }
  },
  async listItemsIn(pathOrFileInfo, options) {
    const outputPromises = [];
    for await (const eachPath2 of FileSystem.iteratePathsIn(pathOrFileInfo, options)) {
      outputPromises.push(FileSystem.info(eachPath2));
    }
    return Promise.all(outputPromises);
  },
  // includes symlinks if they link to files and pipes
  async listFileItemsIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    const { treatAllSymlinksAsFiles } = { treatAllSymlinksAsFiles: false, ...options };
    const items = await FileSystem.listItemsIn(pathOrFileInfo, options);
    if (treatAllSymlinksAsFiles) {
      return items.filter((eachItem) => eachItem.isFile || treatAllSymlinksAsFiles && eachItem.isSymlink);
    } else {
      return items.filter((eachItem) => eachItem.isFile);
    }
  },
  async listFilePathsIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    return (await FileSystem.listFileItemsIn(pathOrFileInfo, options)).map((each2) => each2.path);
  },
  async listFileBasenamesIn(pathOrFileInfo, options = { treatAllSymlinksAsFiles: false }) {
    return (await FileSystem.listFileItemsIn(pathOrFileInfo, options)).map((each2) => each2.basename);
  },
  async listFolderItemsIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    const { ignoreSymlinks } = { ignoreSymlinks: false, ...options };
    const items = await FileSystem.listItemsIn(pathOrFileInfo, options);
    if (ignoreSymlinks) {
      return items.filter((eachItem) => eachItem.isFolder && !eachItem.isSymlink);
    } else {
      return items.filter((eachItem) => eachItem.isFolder);
    }
  },
  async listFolderPathsIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    return (await FileSystem.listFolderItemsIn(pathOrFileInfo, options)).map((each2) => each2.path);
  },
  async listFolderBasenamesIn(pathOrFileInfo, options = { ignoreSymlinks: false }) {
    return (await FileSystem.listFolderItemsIn(pathOrFileInfo, options)).map((each2) => each2.basename);
  },
  recursivelyIterateItemsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    options.recursively = true;
    if (options.onlyHardlinks) {
      if (options.shouldntInclude) {
        const originalshouldntInclude = options.shouldntInclude;
        options.shouldntInclude = (each2) => each2.isSymlink || originalshouldntInclude(each2);
      } else {
        options.shouldntInclude = (each2) => each2.isSymlink;
      }
    }
    if (options.dontFollowSymlinks) {
      if (options.shouldntExplore) {
        const originalShouldntExplore = options.shouldntInclude;
        options.shouldntExplore = (each2) => each2.isSymlink || originalShouldntExplore(each2);
      } else {
        options.shouldntExplore = (each2) => each2.isSymlink;
      }
    }
    return FileSystem.iterateItemsIn(pathOrFileInfo, options);
  },
  recursivelyIteratePathsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    options.recursively = true;
    if (options.onlyHardlinks) {
      if (options.shouldntInclude) {
        const originalshouldntInclude = options.shouldntInclude;
        options.shouldntInclude = (each2) => each2.isSymlink || originalshouldntInclude(each2);
      } else {
        options.shouldntInclude = (each2) => each2.isSymlink;
      }
    }
    return FileSystem.iteratePathsIn(pathOrFileInfo, options);
  },
  recursivelyListPathsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    return asyncIteratorToList2(FileSystem.recursivelyIteratePathsIn(pathOrFileInfo, options));
  },
  recursivelyListItemsIn(pathOrFileInfo, options = { onlyHardlinks: false, dontFollowSymlinks: false, searchOrder: "breadthFirstSearch", maxDepth: Infinity, shouldntExplore: null, shouldntInclude: null }) {
    return asyncIteratorToList2(FileSystem.recursivelyIterateItemsIn(pathOrFileInfo, options));
  },
  async *globIterator(pattern, options = { startPath: null, returnFullPaths: false }) {
    pattern = FileSystem.normalizePath(pattern);
    var { startPath, ...iteratePathsOptions } = options;
    startPath = startPath || "./";
    const originalStartPath = startPath;
    const firstGlob = pattern.match(/[\[\*\{\?]/);
    let extendedStartPath = startPath;
    if (firstGlob) {
      const startingString = pattern.slice(0, firstGlob.index);
      const furthestConstantSlash = startingString.lastIndexOf("/");
      if (furthestConstantSlash != -1) {
        if (pattern[0] == "/") {
          extendedStartPath = pattern.slice(0, furthestConstantSlash);
        } else {
          extendedStartPath = `${extendedStartPath}/${pattern.slice(0, furthestConstantSlash)}`;
        }
      }
      pattern = pattern.slice(furthestConstantSlash + 1);
    }
    extendedStartPath = FileSystem.makeAbsolutePath(extendedStartPath);
    let maxDepthFromRoot;
    if (pattern.match(/\*\*/)) {
      maxDepthFromRoot = Infinity;
    } else {
      maxDepthFromRoot = `${extendedStartPath}/${pattern}`.split("/").length - 1;
    }
    const fullPattern = `${escapeGlob(extendedStartPath)}/${pattern}`;
    const regex3 = globToRegExp4(fullPattern);
    const partials = fullPattern.split("/");
    let partialPattern = partials.shift();
    let partialRegexString = `^\\.$|${globToRegExp4(partialPattern || "/").source}`;
    for (const each2 of partials) {
      partialPattern += "/" + each2;
      partialRegexString += "|" + globToRegExp4(partialPattern).source;
    }
    const partialRegex = new RegExp(partialRegexString);
    for await (const eachPath2 of FileSystem.iteratePathsIn(extendedStartPath, { recursively: true, maxDepthFromRoot, ...iteratePathsOptions, shouldntExplore: (eachInnerPath) => !eachInnerPath.match(partialRegex) })) {
      if (eachPath2.match(regex3) || FileSystem.makeAbsolutePath(eachPath2).match(regex3)) {
        if (options.returnFullPaths) {
          yield eachPath2;
        } else {
          yield FileSystem.makeRelativePath({
            from: originalStartPath,
            to: eachPath2
          });
        }
      }
    }
  },
  glob(pattern, options = { startPath: null }) {
    return asyncIteratorToList2(FileSystem.globIterator(pattern, options));
  },
  async getPermissions(path7) {
    const { mode } = await Deno.lstat(path7?.path || path7);
    return {
      owner: {
        //          rwxrwxrwx
        canRead: !!(256 & mode),
        canWrite: !!(128 & mode),
        canExecute: !!(64 & mode)
      },
      group: {
        canRead: !!(32 & mode),
        canWrite: !!(16 & mode),
        canExecute: !!(8 & mode)
      },
      others: {
        canRead: !!(4 & mode),
        canWrite: !!(2 & mode),
        canExecute: !!(1 & mode)
      }
    };
  },
  /**
  * Add/set file permissions
  *
  * @param {String} args.path - 
  * @param {Object|Boolean} args.recursively - 
  * @param {Object} args.permissions - 
  * @param {Object} args.permissions.owner - 
  * @param {Boolean} args.permissions.owner.canRead - 
  * @param {Boolean} args.permissions.owner.canWrite - 
  * @param {Boolean} args.permissions.owner.canExecute - 
  * @param {Object} args.permissions.group - 
  * @param {Boolean} args.permissions.group.canRead - 
  * @param {Boolean} args.permissions.group.canWrite - 
  * @param {Boolean} args.permissions.group.canExecute - 
  * @param {Object} args.permissions.others - 
  * @param {Boolean} args.permissions.others.canRead - 
  * @param {Boolean} args.permissions.others.canWrite - 
  * @param {Boolean} args.permissions.others.canExecute - 
  * @return {null} 
  *
  * @example
  * ```js
  *  await FileSystem.addPermissions({
  *      path: fileOrFolderPath,
  *      permissions: {
  *          owner: {
  *              canExecute: true,
  *          },
  *      }
  *  })
  * ```
  */
  async addPermissions({ path: path7, permissions: permissions2 = { owner: {}, group: {}, others: {} }, recursively = false }) {
    permissions2 = { owner: {}, group: {}, others: {}, ...permissions2 };
    let permissionNumber = 0;
    let fileInfo;
    if ([permissions2.owner, permissions2.group, permissions2.others].some((each2) => !each2 || Object.keys(each2).length != 3)) {
      fileInfo = await FileSystem.info(path7);
      permissionNumber = fileInfo.lstat.mode & 511;
    }
    if (permissions2.owner.canRead != null) {
      permissionNumber = permissions2.owner.canRead ? setTrueBit(permissionNumber, 8) : setFalseBit(permissionNumber, 8);
    }
    if (permissions2.owner.canWrite != null) {
      permissionNumber = permissions2.owner.canWrite ? setTrueBit(permissionNumber, 7) : setFalseBit(permissionNumber, 7);
    }
    if (permissions2.owner.canExecute != null) {
      permissionNumber = permissions2.owner.canExecute ? setTrueBit(permissionNumber, 6) : setFalseBit(permissionNumber, 6);
    }
    if (permissions2.group.canRead != null) {
      permissionNumber = permissions2.group.canRead ? setTrueBit(permissionNumber, 5) : setFalseBit(permissionNumber, 5);
    }
    if (permissions2.group.canWrite != null) {
      permissionNumber = permissions2.group.canWrite ? setTrueBit(permissionNumber, 4) : setFalseBit(permissionNumber, 4);
    }
    if (permissions2.group.canExecute != null) {
      permissionNumber = permissions2.group.canExecute ? setTrueBit(permissionNumber, 3) : setFalseBit(permissionNumber, 3);
    }
    if (permissions2.others.canRead != null) {
      permissionNumber = permissions2.others.canRead ? setTrueBit(permissionNumber, 2) : setFalseBit(permissionNumber, 2);
    }
    if (permissions2.others.canWrite != null) {
      permissionNumber = permissions2.others.canWrite ? setTrueBit(permissionNumber, 1) : setFalseBit(permissionNumber, 1);
    }
    if (permissions2.others.canExecute != null) {
      permissionNumber = permissions2.others.canExecute ? setTrueBit(permissionNumber, 0) : setFalseBit(permissionNumber, 0);
    }
    if (recursively == false || fileInfo instanceof Object && fileInfo.isFile || !(fileInfo instanceof Object) && (await FileSystem.info(path7)).isFile) {
      return Deno.chmod(path7?.path || path7, permissionNumber);
    } else {
      const promises = [];
      const paths = await FileSystem.recursivelyListPathsIn(path7, { onlyHardlinks: false, dontFollowSymlinks: false, ...recursively });
      for (const eachPath2 of paths) {
        promises.push(
          Deno.chmod(eachPath2, permissionNumber).catch(console.error)
        );
      }
      return Promise.all(promises);
    }
  },
  // alias
  setPermissions(...args2) {
    return FileSystem.addPermissions(...args2);
  },
  async write({ path: path7, data, force = true, overwrite = false, renameExtension = null }) {
    path7 = pathStandardize(path7);
    await grabPathLock(path7);
    if (force) {
      FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path7), { overwrite, renameExtension });
      const info = FileSystem.sync.info(path7);
      if (info.isDirectory) {
        FileSystem.sync.remove(path7);
      }
    }
    let output2;
    if (typeof data == "string") {
      output2 = await Deno.writeTextFile(path7, data);
    } else if (typedArrayClasses3.some((dataClass) => data instanceof dataClass)) {
      output2 = await Deno.writeFile(path7, data);
    } else if (isGeneratorType2(data) || data[Symbol.iterator] || data[Symbol.asyncIterator]) {
      const file = await Deno.open(path7, { read: true, write: true, create: true, truncate: true });
      const encoder = new TextEncoder();
      const encode3 = encoder.encode.bind(encoder);
      try {
        let index = 0;
        for await (let packet of data) {
          if (typeof packet == "string") {
            packet = encode3(packet);
          }
          await Deno.write(file.rid, packet);
        }
      } finally {
        Deno.close(file.rid);
      }
    }
    delete locker[path7];
    return output2;
  },
  async append({ path: path7, data, force = true, overwrite = false, renameExtension = null }) {
    path7 = pathStandardize(path7);
    await grabPathLock(path7);
    if (force) {
      FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path7), { overwrite, renameExtension });
      const info = FileSystem.sync.info(path7);
      if (info.isDirectory) {
        FileSystem.sync.remove(path7);
      }
    }
    if (typeof data == "string") {
      data = new TextEncoder().encode(data);
    }
    const file = Deno.openSync(path7, { read: true, write: true, create: true });
    file.seekSync(0, Deno.SeekMode.End);
    file.writeSync(data);
    file.close();
    delete locker[path7];
  },
  async makeHardPathTo(path7, options = {}) {
    var { cache: cache3 } = { cache: {}, ...options };
    if (cache3[path7]) {
      return cache3[path7];
    }
    const [folders, name, extension] = FileSystem.pathPieces(FileSystem.makeAbsolutePath(path7));
    let topDownPath = ``;
    for (const eachFolderName of folders) {
      topDownPath += `/${eachFolderName}`;
      if (cache3[topDownPath]) {
        topDownPath = cache3[topDownPath];
        continue;
      }
      const unchangedPath = topDownPath;
      const info = await FileSystem.info(topDownPath);
      if (info.isSymlink) {
        const absolutePathToIntermediate = await FileSystem.finalTargetOf(info.path, { _parentsHaveBeenChecked: true, cache: cache3 });
        if (absolutePathToIntermediate == null) {
          return null;
        }
        topDownPath = topDownPath.slice(0, -(eachFolderName.length + 1));
        const relativePath = FileSystem.makeRelativePath({
          from: topDownPath,
          to: absolutePathToIntermediate
        });
        topDownPath += `/${relativePath}`;
        topDownPath = normalize8(topDownPath);
      }
      cache3[unchangedPath] = topDownPath;
    }
    const hardPath = normalize8(`${topDownPath}/${name}${extension}`);
    cache3[path7] = hardPath;
    return hardPath;
  },
  async walkUpImport(path7, start) {
    const startPath = start || FileSystem.pathOfCaller(1);
    const nearestPath = await FileSystem.walkUpUntil(path7, startPath);
    if (nearestPath) {
      const absolutePath = FileSystem.makeAbsolutePath(`${nearestPath}/${path7}`);
      return import(toFileUrl6(absolutePath).href);
    } else {
      throw Error(`Tried to walkUpImport ${path7}, starting at ${startPath}, but was unable to find any files`);
    }
  },
  async withPwd(tempPwd, func) {
    const originalPwd = FileSystem.pwd;
    const originalPwdEnvVar = Deno.env.get("PWD");
    tempPwd = FileSystem.makeAbsolutePath(tempPwd);
    try {
      FileSystem.pwd = tempPwd;
      Deno.env.set("PWD", tempPwd);
      await func(originalPwd);
    } finally {
      FileSystem.pwd = originalPwd;
      Deno.env.set("PWD", originalPwdEnvVar);
    }
  },
  sync: {
    // things that are already sync
    get parentPath() {
      return FileSystem.parentPath;
    },
    get dirname() {
      return FileSystem.dirname;
    },
    get basename() {
      return FileSystem.basename;
    },
    get extname() {
      return FileSystem.extname;
    },
    get join() {
      return FileSystem.join;
    },
    get thisFile() {
      return FileSystem.thisFile;
    },
    get thisFolder() {
      return FileSystem.thisFolder;
    },
    get normalize() {
      return FileSystem.normalizePath;
    },
    get isAbsolutePath() {
      return FileSystem.isAbsolutePath;
    },
    get isRelativePath() {
      return FileSystem.isRelativePath;
    },
    get makeRelativePath() {
      return FileSystem.makeRelativePath;
    },
    get makeAbsolutePath() {
      return FileSystem.makeAbsolutePath;
    },
    get pathDepth() {
      return FileSystem.pathDepth;
    },
    get pathPieces() {
      return FileSystem.pathPieces;
    },
    get extendName() {
      return FileSystem.extendName;
    },
    get allParentPaths() {
      return FileSystem.allParentPaths;
    },
    get pathOfCaller() {
      return FileSystem.pathOfCaller;
    },
    get home() {
      return FileSystem.home;
    },
    get workingDirectory() {
      return FileSystem.workingDirectory;
    },
    get cwd() {
      return FileSystem.cwd;
    },
    get pwd() {
      return FileSystem.pwd;
    },
    get cd() {
      return FileSystem.cd;
    },
    get changeDirectory() {
      return FileSystem.changeDirectory;
    },
    set workingDirectory(value) {
      return FileSystem.workingDirectory = value;
    },
    set cwd(value) {
      return FileSystem.workingDirectory = value;
    },
    set pwd(value) {
      return FileSystem.workingDirectory = value;
    },
    info(fileOrFolderPath, _cachedLstat = null) {
      let lstat2 = _cachedLstat;
      try {
        lstat2 = Deno.lstatSync(fileOrFolderPath);
      } catch (error) {
        lstat2 = { doesntExist: true };
      }
      let stat2 = {};
      if (!lstat2.isSymlink) {
        stat2 = {
          isBrokenLink: false,
          isLoopOfLinks: false
        };
      } else {
        try {
          stat2 = Deno.statSync(fileOrFolderPath);
        } catch (error) {
          if (error.message.match(/^Too many levels of symbolic links/)) {
            stat2.isBrokenLink = true;
            stat2.isLoopOfLinks = true;
          } else if (error.message.match(/^No such file or directory/)) {
            stat2.isBrokenLink = true;
          } else {
            throw error;
          }
        }
      }
      return new Path({ path: fileOrFolderPath, _lstatData: lstat2, _statData: stat2 });
    },
    read(path7) {
      path7 = pathStandardize(path7);
      let output2;
      try {
        output2 = Deno.readTextFileSync(path7);
      } catch (error) {
      }
      return output2;
    },
    readBytes(path7) {
      path7 = pathStandardize(path7);
      let output2;
      try {
        output2 = Deno.readFileSync(path7);
      } catch (error) {
      }
      return output2;
    },
    *readLinesIteratively(path7) {
      path7 = pathStandardize(path7);
      const file = Deno.openSync(path7);
      try {
        yield* readLines(file);
      } finally {
        Deno.close(file.rid);
      }
    },
    /**
     * find a root folder based on a child path
     *
     * @example
     * ```js
     *     import { FileSystem } from "https://deno.land/x/quickr/main/file_system.js"
     * 
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git")
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil({
     *         subPath:".git",
     *         startPath: FileSystem.pwd,
     *     })
     *
     *     // below will result in that^ same folder (assuming all your .git folders have config files)
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git/config")
     * 
     *     // below will result in the same folder, but only if theres a local master branch
     *     var gitParentFolderOrNull = FileSystem.sync.walkUpUntil(".git/refs/heads/master")
     *```
     */
    walkUpUntil(subPath, startPath = null) {
      subPath = subPath instanceof Path ? subPath.path : subPath;
      if (subPath instanceof Object) {
        var { subPath, startPath } = subPath;
      }
      let here;
      if (!startPath) {
        here = Deno.cwd();
      } else if (isAbsolute6(startPath)) {
        here = startPath;
      } else {
        here = join9(here, startPath);
      }
      while (1) {
        let checkPath = join9(here, subPath);
        const pathInfo = Deno.lstatSync(checkPath).catch(() => ({ doesntExist: true }));
        if (!pathInfo.doesntExist) {
          return here;
        }
        if (here == dirname6(here)) {
          return null;
        } else {
          here = dirname6(here);
        }
      }
    },
    nextTargetOf(path7, options = {}) {
      const originalWasItem = path7 instanceof Path;
      const item = originalWasItem ? path7 : new Path({ path: path7 });
      const lstat2 = item.lstat;
      if (lstat2.isSymlink) {
        const relativeOrAbsolutePath = Deno.readLinkSync(item.path);
        if (isAbsolute6(relativeOrAbsolutePath)) {
          if (originalWasItem) {
            return new Path({ path: relativeOrAbsolutePath });
          } else {
            return relativeOrAbsolutePath;
          }
        } else {
          const path8 = `${FileSystem.sync.makeHardPathTo(dirname6(item.path))}/${relativeOrAbsolutePath}`;
          if (originalWasItem) {
            return new Path({ path: path8 });
          } else {
            return path8;
          }
        }
      } else {
        if (originalWasItem) {
          return item;
        } else {
          return item.path;
        }
      }
    },
    finalTargetOf(path7, options = {}) {
      const { _parentsHaveBeenChecked, cache: cache3 } = { _parentsHaveBeenChecked: false, cache: {}, ...options };
      const originalWasItem = path7 instanceof Path;
      path7 = path7.path || path7;
      let result = Deno.lstatSync(path7).catch(() => ({ doesntExist: true }));
      if (result.doesntExist) {
        return null;
      }
      path7 = FileSystem.sync.makeHardPathTo(path7, { cache: cache3 });
      const pathChain = [];
      while (result.isSymlink) {
        const relativeOrAbsolutePath = Deno.readLinkSync(path7);
        if (isAbsolute6(relativeOrAbsolutePath)) {
          path7 = relativeOrAbsolutePath;
        } else {
          path7 = `${FileSystem.parentPath(path7)}/${relativeOrAbsolutePath}`;
        }
        result = Deno.lstatSync(path7).catch(() => ({ doesntExist: true }));
        if (result.doesntExist) {
          return null;
        }
        path7 = FileSystem.sync.makeHardPathTo(path7, { cache: cache3 });
        if (pathChain.includes(path7)) {
          return null;
        }
        pathChain.push(path7);
      }
      path7 = FileSystem.normalizePath(path7);
      if (originalWasItem) {
        return new Path({ path: path7 });
      } else {
        return path7;
      }
    },
    makeHardPathTo(path7, options = {}) {
      var { cache: cache3 } = { cache: {}, ...options };
      if (cache3[path7]) {
        return cache3[path7];
      }
      const [folders, name, extension] = FileSystem.pathPieces(FileSystem.makeAbsolutePath(path7));
      let topDownPath = ``;
      for (const eachFolderName of folders) {
        topDownPath += `/${eachFolderName}`;
        if (cache3[topDownPath]) {
          topDownPath = cache3[topDownPath];
          continue;
        }
        const unchangedPath = topDownPath;
        const info = FileSystem.sync.info(topDownPath);
        if (info.isSymlink) {
          const absolutePathToIntermediate = FileSystem.sync.finalTargetOf(info.path, { _parentsHaveBeenChecked: true, cache: cache3 });
          if (absolutePathToIntermediate == null) {
            return null;
          }
          topDownPath = topDownPath.slice(0, -(eachFolderName.length + 1));
          const relativePath = FileSystem.makeRelativePath({
            from: topDownPath,
            to: absolutePathToIntermediate
          });
          topDownPath += `/${relativePath}`;
          topDownPath = normalize8(topDownPath);
        }
        cache3[unchangedPath] = topDownPath;
      }
      const hardPath = normalize8(`${topDownPath}/${name}${extension}`);
      cache3[path7] = hardPath;
      return hardPath;
    },
    remove(fileOrFolder) {
      if (fileOrFolder instanceof Array) {
        return fileOrFolder.map(FileSystem.sync.remove);
      }
      fileOrFolder = fileOrFolder.path || fileOrFolder;
      let exists2 = false;
      let item;
      try {
        item = Deno.lstatSync(fileOrFolder);
        exists2 = true;
      } catch (error) {
      }
      if (exists2) {
        if (item.isFile || item.isSymlink) {
          return Deno.removeSync(fileOrFolder.replace(/\/+$/, ""));
        } else {
          return Deno.removeSync(fileOrFolder.replace(/\/+$/, ""), { recursive: true });
        }
      }
    },
    moveOutOfTheWay(path7, options = { extension: null }) {
      path7 = pathStandardize(path7);
      const extension = options?.extension || FileSystem.defaultRenameExtension;
      const info = FileSystem.sync.info(path7);
      if (info.exists) {
        const newPath = path7 + extension;
        FileSystem.sync.moveOutOfTheWay(newPath, { extension });
        moveSync(path7, newPath);
      }
    },
    ensureIsFolder(path7, options = { overwrite: false, renameExtension: null }) {
      path7 = pathStandardize(path7);
      const { overwrite, renameExtension } = defaultOptionsHelper(options);
      path7 = path7.path || path7;
      path7 = FileSystem.makeAbsolutePath(path7);
      const parentPath = dirname6(path7);
      if (parentPath == path7) {
        return;
      }
      const parent = FileSystem.sync.info(parentPath);
      if (!parent.isDirectory) {
        FileSystem.sync.ensureIsFolder(parentPath, { overwrite, renameExtension });
      }
      let pathInfo = FileSystem.sync.info(path7);
      if (pathInfo.exists && !pathInfo.isDirectory) {
        if (overwrite) {
          FileSystem.sync.remove(path7);
        } else {
          FileSystem.sync.moveOutOfTheWay(path7, { extension: renameExtension });
        }
      }
      Deno.mkdirSync(path7, { recursive: true });
      return path7;
    },
    ensureIsFile(path7, options = { overwrite: false, renameExtension: null }) {
      const { overwrite, renameExtension } = defaultOptionsHelper(options);
      FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path7), { overwrite, renameExtension });
      path7 = path7.path || path7;
      const pathInfo = FileSystem.sync.info(path7);
      if (pathInfo.isFile && !pathInfo.isDirectory) {
        return path7;
      } else {
        FileSystem.sync.write({ path: path7, data: "" });
        return path7;
      }
    },
    /**
     * Move/Remove everything and Ensure parent folders
     *
     * @param path
     * @param options.overwrite - if false, then things in the way will be moved instead of deleted
     * @param options.extension - the string to append when renaming files to get them out of the way
     * 
     * @example
     * ```js
     *     FileSystem.sync.clearAPathFor("./something")
     * ```
     */
    clearAPathFor(path7, options = { overwrite: false, renameExtension: null }) {
      const { overwrite, renameExtension } = defaultOptionsHelper(options);
      const originalPath = path7;
      const paths = [];
      while (dirname6(path7) !== path7) {
        paths.push(path7);
        path7 = dirname6(path7);
      }
      for (const eachPath2 of paths.reverse()) {
        const info = FileSystem.sync.info(eachPath2);
        if (!info.exists) {
          break;
        } else if (info.isFile) {
          if (overwrite) {
            FileSystem.sync.remove(eachPath2);
          } else {
            FileSystem.sync.moveOutOfTheWay(eachPath2, { extension: renameExtension });
          }
        }
      }
      Deno.mkdirSync(dirname6(originalPath), { recursive: true });
      return originalPath;
    },
    append({ path: path7, data, force = true, overwrite = false, renameExtension = null }) {
      path7 = pathStandardize(path7);
      if (force) {
        FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path7), { overwrite, renameExtension });
        const info = FileSystem.sync.info(path7);
        if (info.isDirectory) {
          FileSystem.sync.remove(path7);
        }
      }
      const file = Deno.openSync(path7, { read: true, write: true, create: true });
      file.seekSync(0, Deno.SeekMode.End);
      if (typeof data == "string") {
        file.writeSync(new TextEncoder().encode(data));
      } else {
        file.writeSync(data);
      }
      file.close();
    },
    write({ path: path7, data, force = true, overwrite = false, renameExtension = null }) {
      path7 = pathStandardize(path7);
      if (force) {
        FileSystem.sync.ensureIsFolder(FileSystem.parentPath(path7), { overwrite, renameExtension });
        const info = FileSystem.sync.info(path7);
        if (info.isDirectory) {
          FileSystem.sync.remove(path7);
        }
      }
      let output2;
      if (typeof data == "string") {
        output2 = Deno.writeTextFileSync(path7, data);
      } else if (typedArrayClasses3.some((dataClass) => data instanceof dataClass)) {
        output2 = Deno.writeFileSync(path7, data);
      } else if (isGeneratorType2(data) || data[Symbol.iterator] || data[Symbol.asyncIterator]) {
        const file = Deno.openSync(path7, { read: true, write: true, create: true, truncate: true });
        const encoder = new TextEncoder();
        const encode3 = encoder.encode.bind(encoder);
        try {
          let index = 0;
          for (let packet of data) {
            if (typeof packet == "string") {
              packet = encode3(packet);
            }
            Deno.writeSync(file.rid, packet);
          }
        } finally {
          Deno.close(file.rid);
        }
      }
      return output2;
    },
    absoluteLink({ existingItem, newItem, force = true, allowNonExistingTarget = false, overwrite = false, renameExtension = null }) {
      existingItem = (existingItem.path || existingItem).replace(/\/+$/, "");
      const newItemPath = FileSystem.normalizePath(newItem.path || newItem).replace(/\/+$/, "");
      const existingItemDoesntExist = Deno.lstatSync(existingItem).catch(() => ({ doesntExist: true })).doesntExist;
      if (!allowNonExistingTarget && existingItemDoesntExist) {
        throw Error(`
Tried to create a relativeLink between existingItem:${existingItem}, newItemPath:${newItemPath}
but existingItem didn't actually exist`);
      } else {
        const parentOfNewItem = FileSystem.parentPath(newItemPath);
        FileSystem.sync.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
        const hardPathToNewItem = `${FileSystem.syncmakeHardPathTo(parentOfNewItem)}/${FileSystem.basename(newItemPath)}`;
        if (force) {
          FileSystem.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
        }
        return Deno.symlinkSync(
          FileSystem.makeAbsolutePath(existingItem),
          newItemPath
        );
      }
    },
    relativeLink({ existingItem, newItem, force = true, overwrite = false, allowNonExistingTarget = false, renameExtension = null }) {
      const existingItemPath = (existingItem.path || existingItem).replace(/\/+$/, "");
      const newItemPath = FileSystem.normalizePath((newItem.path || newItem).replace(/\/+$/, ""));
      const existingItemDoesntExist = Deno.lstatSync(existingItemPath).catch(() => ({ doesntExist: true })).doesntExist;
      if (!allowNonExistingTarget && existingItemDoesntExist) {
        throw Error(`
Tried to create a relativeLink between existingItem:${existingItemPath}, newItem:${newItemPath}
but existingItem didn't actually exist`);
      } else {
        const parentOfNewItem = FileSystem.parentPath(newItemPath);
        FileSystem.sync.ensureIsFolder(parentOfNewItem, { overwrite, renameExtension });
        const hardPathToNewItem = `${FileSystem.sync.makeHardPathTo(parentOfNewItem)}/${FileSystem.basename(newItemPath)}`;
        const hardPathToExistingItem = FileSystem.sync.makeHardPathTo(existingItemPath);
        const pathFromNewToExisting = relative6(hardPathToNewItem, hardPathToExistingItem).replace(/^\.\.\//, "");
        if (force) {
          FileSystem.sync.clearAPathFor(hardPathToNewItem, { overwrite, renameExtension });
        }
        return Deno.symlinkSync(
          pathFromNewToExisting,
          hardPathToNewItem
        );
      }
    },
    move({ path: path7, item, newParentFolder, newName, force = true, overwrite = false, renameExtension = null }) {
      item = item || path7;
      const oldPath = item.path || item;
      const oldName = FileSystem.basename(oldPath);
      const pathInfo = item instanceof Object || FileSystem.sync.info(oldPath);
      const newPath = `${newParentFolder || FileSystem.parentPath(oldPath)}/${newName || oldName}`;
      if (pathInfo.isSymlink && !item.isBrokenLink) {
        const link2 = Deno.readLinkSync(pathInfo.path);
        if (!isAbsolute6(link2)) {
          const linkTargetBeforeMove = `${FileSystem.parentPath(pathInfo.path)}/${link2}`;
          FileSystem.sync.relativeLink({
            existingItem: linkTargetBeforeMove,
            newItem: newPath,
            force,
            overwrite,
            renameExtension
          });
          FileSystem.sync.remove(pathInfo);
        }
      }
      if (force) {
        FileSystem.sync.clearAPathFor(newPath, { overwrite, renameExtension });
      }
      return moveSync(oldPath, newPath);
    },
    rename({ from: from2, to, force = true, overwrite = false, renameExtension = null }) {
      return FileSystem.sync.move({ path: from2, newParentFolder: FileSystem.parentPath(to), newName: FileSystem.basename(to), force, overwrite, renameExtension });
    },
    copy({ from: from2, to, preserveTimestamps = true, force = true, overwrite = false, renameExtension = null }) {
      const existingItemDoesntExist = Deno.statSync(from2).catch(() => ({ doesntExist: true })).doesntExist;
      if (existingItemDoesntExist) {
        throw Error(`
Tried to copy from:${from2}, to:${to}
but "from" didn't seem to exist

`);
      }
      if (force) {
        FileSystem.sync.clearAPathFor(to, { overwrite, renameExtension });
      }
      return copySync(from2, to, { force, preserveTimestamps: true });
    }
    // sync TODO:
    // iterateBasenamesIn
    // iteratePathsIn
    // iterateItemsIn
    // listItemsIn
    // listFileItemsIn
    // listFilePathsIn
    // listFileBasenamesIn
    // listFolderItemsIn
    // listFolderPathsIn
    // listFolderBasenamesIn
    // globIterator
    // getPermissions
    // addPermissions
    // Note:
    // cannot be sync:
    // walkUpImport 
  }
};
var glob = FileSystem.glob;

// main.js
var flags = parse5(Deno.args, {
  boolean: [
    "help",
    "minify",
    "allowOverwrite",
    "splitting",
    "preserveSymlinks",
    "metafile",
    "write",
    "watch"
  ],
  string: [
    "charset"
  ],
  default: {
    charset: "utf8"
  }
});
var normal = flags._;
delete flags._;
if (flags.help) {
  console.log(`
${green.bold`options`}:
    ${cyan`outfile`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#outfile 
    ${cyan`entryPoints`}: ${yellow`string[] | Record<string, string> | { in: string, out: string }[]`}
        Documentation: https://esbuild.github.io/api/#entry-points 
    ${cyan`entryNames`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#entry-names 
    ${cyan`allowOverwrite`}: ${yellow`boolean`}
        Documentation: https://esbuild.github.io/api/#allow-overwrite 
    ${cyan`splitting`}: ${yellow`boolean`}
        Documentation: https://esbuild.github.io/api/#splitting 
    ${cyan`preserveSymlinks`}: ${yellow`boolean`}
        Documentation: https://esbuild.github.io/api/#preserve-symlinks 
    ${cyan`metafile`}: ${yellow`boolean`}
        Documentation: https://esbuild.github.io/api/#metafile 
    ${cyan`outdir`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#outdir 
    ${cyan`outbase`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#outbase 
    ${cyan`external`}: ${yellow`string[]`}
        Documentation: https://esbuild.github.io/api/#external 
    ${cyan`packages`}: ${yellow`'external'`}
        Documentation: https://esbuild.github.io/api/#packages 
    ${cyan`alias`}: ${yellow`Record<string, string>`}
        Documentation: https://esbuild.github.io/api/#alias 
    ${cyan`loader`}: ${yellow`{ [ext: string]: Loader }`}
        Documentation: https://esbuild.github.io/api/#loader 
    ${cyan`resolveExtensions`}: ${yellow`string[]`}
        Documentation: https://esbuild.github.io/api/#resolve-extensions 
    ${cyan`mainFields`}: ${yellow`string[]`}
        Documentation: https://esbuild.github.io/api/#main-fields 
    ${cyan`conditions`}: ${yellow`string[]`}
        Documentation: https://esbuild.github.io/api/#conditions 
    ${cyan`write`}: ${yellow`boolean`}
        Documentation: https://esbuild.github.io/api/#write 
    ${cyan`tsconfig`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#tsconfig 
    ${cyan`outExtension`}: ${yellow`{ [ext: string]: string }`}
        Documentation: https://esbuild.github.io/api/#out-extension 
    ${cyan`publicPath`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#public-path 
    ${cyan`chunkNames`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#chunk-names 
    ${cyan`assetNames`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#asset-names 
    ${cyan`inject`}: ${yellow`string[]`}
        Documentation: https://esbuild.github.io/api/#inject 
    ${cyan`banner`}: ${yellow`{ [type: string]: string }`}
        Documentation: https://esbuild.github.io/api/#banner 
    ${cyan`footer`}: ${yellow`{ [type: string]: string }`}
        Documentation: https://esbuild.github.io/api/#footer 
    ${""}${cyan`absWorkingDir`}: ${yellow`string`}
        Documentation: https://esbuild.github.io/api/#working-directory 
    ${cyan`nodePaths`}: ${yellow`string[]; // The "NODE_PATH" variable from Node.js`}
        Documentation: https://esbuild.github.io/api/#node-paths

${green.bold`notes`}:
    Some options (ex: aliases) don't really work directly from the CLI
    Feel free to open up a github issue to get your option prioritized:
        https://github.com/jeff-hykin/deno_bundle/issues/new

${green.bold`examples`}:
    ${green`deno_bundle`} my_file.js
    ${green`deno_bundle`} my_file.js --minify
    ${green`deno_bundle`} my_file.js ${cyan`--outfile`} my_file.bundle.js
    ${green`deno_bundle`} my_file.js ${cyan`--mainFields`} '["field1", "field2"]'
    ${green`deno_bundle`} my_file.js ${cyan`--charset`} ascii
`);
} else {
  const stringArrays = [
    "external",
    "resolveExtensions",
    "mainFields",
    "conditions",
    "inject",
    "entryPoints",
    "nodePaths",
    "alias"
  ];
  for (const [key, value] of Object.entries(stringArrays)) {
    if (typeof flags[key] == "string") {
      flags[key] = JSON.parse(value);
    }
  }
  const { watch } = flags;
  delete flags.help;
  delete flags.watch;
  if (!watch) {
    await build({
      bundle: true,
      entryPoints: normal,
      jsxFactory: "h",
      format: "esm",
      plugins: [
        {
          "name": "handle-on-build",
          "setup": (build3) => {
            build3.onEnd((result) => {
              if (result.outputFiles.length == 1) {
                const eachOutput = result.outputFiles[0];
                const sendToStdout = eachOutput.path == "<stdout>" && !(flags.outfile || flags.outdir);
                if (sendToStdout) {
                  Deno.stdout.write(eachOutput.contents);
                } else {
                  FileSystem.ensureIsFolder(FileSystem.dirname(eachOutput.path)).then(
                    () => Deno.writeFile(eachOutput.path, eachOutput.contents).catch(console.error)
                  );
                }
              } else {
                Promise.all([
                  result.outputFiles.map(
                    (eachOutput) => FileSystem.ensureIsFolder(FileSystem.dirname(eachOutput.path)).then(
                      Deno.writeFile(eachOutput.path, eachOutput.contents).catch(console.error)
                    )
                  )
                ]).catch(console.error);
              }
              stop().catch();
              Deno.exit(result.errors.length);
            });
          }
        },
        ...Tt2()
      ],
      ...flags,
      external: [
        // ...nodeBuiltinImports,
        ...flags?.external || []
      ]
    });
  } else {
    if (!(flags.outfile || flags.outdir)) {
      throw Error(`When using the --watch flag, there needs to either be an --outfile or --outdir argument`);
    }
    const ctx = await context({
      bundle: true,
      entryPoints: normal,
      jsxFactory: "h",
      format: "esm",
      plugins: [
        {
          "name": "handle-on-build",
          "setup": (build3) => {
            build3.onEnd((result) => {
              console.log(`(re)building`);
              if (result.outputFiles.length == 1) {
                const eachOutput = result.outputFiles[0];
                const sendToStdout = eachOutput.path == "<stdout>" && !(flags.outfile || flags.outdir);
                if (sendToStdout) {
                  Deno.stdout.write(eachOutput.contents);
                } else {
                  FileSystem.ensureIsFolder(FileSystem.dirname(eachOutput.path)).then(
                    () => Deno.writeFile(eachOutput.path, eachOutput.contents).catch(console.error)
                  );
                }
              } else {
                Promise.all([
                  result.outputFiles.map(
                    (eachOutput) => FileSystem.ensureIsFolder(FileSystem.dirname(eachOutput.path)).then(
                      Deno.writeFile(eachOutput.path, eachOutput.contents).catch(console.error)
                    )
                  )
                ]).catch(console.error);
              }
            });
          }
        },
        ...Tt2()
      ],
      ...flags,
      external: [
        // ...nodeBuiltinImports,
        ...flags?.external || []
      ]
    });
    await ctx.watch();
  }
}
